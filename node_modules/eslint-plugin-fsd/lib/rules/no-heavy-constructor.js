"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _typeguards = require("../utils/typeguards");

/**
 * @fileoverview Higher order functions name prefix
 * @author Leonid Baryshnikov
 */
//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------
const rule = {
  meta: {
    type: 'layout',
    docs: {
      description: 'No heavy constructor',
      category: 'Stylistic Issues',
      recommended: false,
      url: 'https://github.com/timon-and-pumbaa/eslint-plugin-fsd/blob/master/docs/rules/no-heavy-constructor.md'
    },
    fixable: undefined,
    schema: [],
    messages: {
      heavyConstructor: "Constructor shouldn't search the DOM and define handlers"
    }
  },

  create(context) {
    //----------------------------------------------------------------------
    // Helpers
    //----------------------------------------------------------------------
    const reportIdentifier = identifier => {
      context.report({
        node: identifier,
        messageId: 'heavyConstructor'
      });
    };

    const checkForEventAttributes = identifier => {
      if ((0, _typeguards.isHtmlEventIdentifier)(identifier)) {
        reportIdentifier(identifier);
      }
    };

    const checkForListenersMethods = identifier => {
      if ((0, _typeguards.isListenerMethodIdentifier)(identifier)) {
        reportIdentifier(identifier);
      }
    };

    const checkForSearchMethodsAndCollections = identifier => {
      if ((0, _typeguards.isHtmlElementSearchMethodIdentifier)(identifier) || (0, _typeguards.isHtmlElementsObjectCollectionIdentifier)(identifier)) {
        reportIdentifier(identifier);
      }
    }; //----------------------------------------------------------------------
    // Public
    //----------------------------------------------------------------------


    const constructor = 'ClassDeclaration MethodDefinition[key.name="constructor"]';
    const identifier = 'Identifier.property[name]';
    return {
      [`${constructor} MemberExpression.left ${identifier}`]: checkForEventAttributes,
      [`${constructor} MemberExpression.callee ${identifier}`]: checkForListenersMethods,
      [`${constructor} MemberExpression ${identifier}`]: checkForSearchMethodsAndCollections
    };
  }

};
var _default = rule;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcnVsZXMvbm8taGVhdnktY29uc3RydWN0b3IudHMiXSwibmFtZXMiOlsicnVsZSIsIm1ldGEiLCJ0eXBlIiwiZG9jcyIsImRlc2NyaXB0aW9uIiwiY2F0ZWdvcnkiLCJyZWNvbW1lbmRlZCIsInVybCIsImZpeGFibGUiLCJ1bmRlZmluZWQiLCJzY2hlbWEiLCJtZXNzYWdlcyIsImhlYXZ5Q29uc3RydWN0b3IiLCJjcmVhdGUiLCJjb250ZXh0IiwicmVwb3J0SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXBvcnQiLCJub2RlIiwibWVzc2FnZUlkIiwiY2hlY2tGb3JFdmVudEF0dHJpYnV0ZXMiLCJjaGVja0Zvckxpc3RlbmVyc01ldGhvZHMiLCJjaGVja0ZvclNlYXJjaE1ldGhvZHNBbmRDb2xsZWN0aW9ucyIsImNvbnN0cnVjdG9yIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBV0E7O0FBWEE7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFXQSxNQUFNQSxJQUEyQyxHQUFHO0FBQ2xEQyxFQUFBQSxJQUFJLEVBQUU7QUFDSkMsSUFBQUEsSUFBSSxFQUFFLFFBREY7QUFFSkMsSUFBQUEsSUFBSSxFQUFFO0FBQ0pDLE1BQUFBLFdBQVcsRUFBRSxzQkFEVDtBQUVKQyxNQUFBQSxRQUFRLEVBQUUsa0JBRk47QUFHSkMsTUFBQUEsV0FBVyxFQUFFLEtBSFQ7QUFJSkMsTUFBQUEsR0FBRyxFQUNEO0FBTEUsS0FGRjtBQVNKQyxJQUFBQSxPQUFPLEVBQUVDLFNBVEw7QUFVSkMsSUFBQUEsTUFBTSxFQUFFLEVBVko7QUFXSkMsSUFBQUEsUUFBUSxFQUFFO0FBQ1JDLE1BQUFBLGdCQUFnQixFQUNkO0FBRk07QUFYTixHQUQ0Qzs7QUFrQmxEQyxFQUFBQSxNQUFNLENBQ0pDLE9BREksRUFFbUI7QUFDdkI7QUFDQTtBQUNBO0FBRUEsVUFBTUMsZ0JBQWdCLEdBQUlDLFVBQUQsSUFBMkM7QUFDbEVGLE1BQUFBLE9BQU8sQ0FBQ0csTUFBUixDQUFlO0FBQ2JDLFFBQUFBLElBQUksRUFBRUYsVUFETztBQUViRyxRQUFBQSxTQUFTLEVBQUU7QUFGRSxPQUFmO0FBSUQsS0FMRDs7QUFPQSxVQUFNQyx1QkFBdUIsR0FBSUosVUFBRCxJQUEyQztBQUN6RSxVQUFJLHVDQUFzQkEsVUFBdEIsQ0FBSixFQUF1QztBQUNyQ0QsUUFBQUEsZ0JBQWdCLENBQUNDLFVBQUQsQ0FBaEI7QUFDRDtBQUNGLEtBSkQ7O0FBTUEsVUFBTUssd0JBQXdCLEdBQzVCTCxVQUQrQixJQUV0QjtBQUNULFVBQUksNENBQTJCQSxVQUEzQixDQUFKLEVBQTRDO0FBQzFDRCxRQUFBQSxnQkFBZ0IsQ0FBQ0MsVUFBRCxDQUFoQjtBQUNEO0FBQ0YsS0FORDs7QUFRQSxVQUFNTSxtQ0FBbUMsR0FDdkNOLFVBRDBDLElBRWpDO0FBQ1QsVUFDRSxxREFBb0NBLFVBQXBDLEtBQ0EsMERBQXlDQSxVQUF6QyxDQUZGLEVBR0U7QUFDQUQsUUFBQUEsZ0JBQWdCLENBQUNDLFVBQUQsQ0FBaEI7QUFDRDtBQUNGLEtBVEQsQ0ExQnVCLENBcUN2QjtBQUNBO0FBQ0E7OztBQUVBLFVBQU1PLFdBQVcsR0FDZiwyREFERjtBQUVBLFVBQU1QLFVBQVUsR0FBRywyQkFBbkI7QUFFQSxXQUFPO0FBQ0wsT0FBRSxHQUFFTyxXQUFZLDBCQUF5QlAsVUFBVyxFQUFwRCxHQUF3REksdUJBRG5EO0FBRUwsT0FBRSxHQUFFRyxXQUFZLDRCQUEyQlAsVUFBVyxFQUF0RCxHQUEwREssd0JBRnJEO0FBR0wsT0FBRSxHQUFFRSxXQUFZLHFCQUFvQlAsVUFBVyxFQUEvQyxHQUFtRE07QUFIOUMsS0FBUDtBQUtEOztBQXRFaUQsQ0FBcEQ7ZUF5RWV0QixJIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBmaWxlb3ZlcnZpZXcgSGlnaGVyIG9yZGVyIGZ1bmN0aW9ucyBuYW1lIHByZWZpeFxyXG4gKiBAYXV0aG9yIExlb25pZCBCYXJ5c2huaWtvdlxyXG4gKi9cclxuXHJcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vIFJ1bGUgRGVmaW5pdGlvblxyXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuaW1wb3J0IHsgVFNFU1RyZWUsIFRTRVNMaW50IH0gZnJvbSAnQHR5cGVzY3JpcHQtZXNsaW50L2V4cGVyaW1lbnRhbC11dGlscyc7XHJcblxyXG5pbXBvcnQge1xyXG4gIGlzSHRtbEV2ZW50SWRlbnRpZmllcixcclxuICBpc0xpc3RlbmVyTWV0aG9kSWRlbnRpZmllcixcclxuICBpc0h0bWxFbGVtZW50U2VhcmNoTWV0aG9kSWRlbnRpZmllcixcclxuICBpc0h0bWxFbGVtZW50c09iamVjdENvbGxlY3Rpb25JZGVudGlmaWVyLFxyXG59IGZyb20gJy4uL3V0aWxzL3R5cGVndWFyZHMnO1xyXG5cclxuY29uc3QgcnVsZTogVFNFU0xpbnQuUnVsZU1vZHVsZTxzdHJpbmcsIHN0cmluZ1tdPiA9IHtcclxuICBtZXRhOiB7XHJcbiAgICB0eXBlOiAnbGF5b3V0JyxcclxuICAgIGRvY3M6IHtcclxuICAgICAgZGVzY3JpcHRpb246ICdObyBoZWF2eSBjb25zdHJ1Y3RvcicsXHJcbiAgICAgIGNhdGVnb3J5OiAnU3R5bGlzdGljIElzc3VlcycsXHJcbiAgICAgIHJlY29tbWVuZGVkOiBmYWxzZSxcclxuICAgICAgdXJsOlxyXG4gICAgICAgICdodHRwczovL2dpdGh1Yi5jb20vdGltb24tYW5kLXB1bWJhYS9lc2xpbnQtcGx1Z2luLWZzZC9ibG9iL21hc3Rlci9kb2NzL3J1bGVzL25vLWhlYXZ5LWNvbnN0cnVjdG9yLm1kJyxcclxuICAgIH0sXHJcbiAgICBmaXhhYmxlOiB1bmRlZmluZWQsXHJcbiAgICBzY2hlbWE6IFtdLFxyXG4gICAgbWVzc2FnZXM6IHtcclxuICAgICAgaGVhdnlDb25zdHJ1Y3RvcjpcclxuICAgICAgICBcIkNvbnN0cnVjdG9yIHNob3VsZG4ndCBzZWFyY2ggdGhlIERPTSBhbmQgZGVmaW5lIGhhbmRsZXJzXCIsXHJcbiAgICB9LFxyXG4gIH0sXHJcblxyXG4gIGNyZWF0ZShcclxuICAgIGNvbnRleHQ6IFRTRVNMaW50LlJ1bGVDb250ZXh0PHN0cmluZywgc3RyaW5nW10+LFxyXG4gICk6IFRTRVNMaW50LlJ1bGVMaXN0ZW5lciB7XHJcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgIC8vIEhlbHBlcnNcclxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAgIGNvbnN0IHJlcG9ydElkZW50aWZpZXIgPSAoaWRlbnRpZmllcjogVFNFU1RyZWUuSWRlbnRpZmllcik6IHZvaWQgPT4ge1xyXG4gICAgICBjb250ZXh0LnJlcG9ydCh7XHJcbiAgICAgICAgbm9kZTogaWRlbnRpZmllcixcclxuICAgICAgICBtZXNzYWdlSWQ6ICdoZWF2eUNvbnN0cnVjdG9yJyxcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGNoZWNrRm9yRXZlbnRBdHRyaWJ1dGVzID0gKGlkZW50aWZpZXI6IFRTRVNUcmVlLklkZW50aWZpZXIpOiB2b2lkID0+IHtcclxuICAgICAgaWYgKGlzSHRtbEV2ZW50SWRlbnRpZmllcihpZGVudGlmaWVyKSkge1xyXG4gICAgICAgIHJlcG9ydElkZW50aWZpZXIoaWRlbnRpZmllcik7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgY2hlY2tGb3JMaXN0ZW5lcnNNZXRob2RzID0gKFxyXG4gICAgICBpZGVudGlmaWVyOiBUU0VTVHJlZS5JZGVudGlmaWVyLFxyXG4gICAgKTogdm9pZCA9PiB7XHJcbiAgICAgIGlmIChpc0xpc3RlbmVyTWV0aG9kSWRlbnRpZmllcihpZGVudGlmaWVyKSkge1xyXG4gICAgICAgIHJlcG9ydElkZW50aWZpZXIoaWRlbnRpZmllcik7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgY2hlY2tGb3JTZWFyY2hNZXRob2RzQW5kQ29sbGVjdGlvbnMgPSAoXHJcbiAgICAgIGlkZW50aWZpZXI6IFRTRVNUcmVlLklkZW50aWZpZXIsXHJcbiAgICApOiB2b2lkID0+IHtcclxuICAgICAgaWYgKFxyXG4gICAgICAgIGlzSHRtbEVsZW1lbnRTZWFyY2hNZXRob2RJZGVudGlmaWVyKGlkZW50aWZpZXIpIHx8XHJcbiAgICAgICAgaXNIdG1sRWxlbWVudHNPYmplY3RDb2xsZWN0aW9uSWRlbnRpZmllcihpZGVudGlmaWVyKVxyXG4gICAgICApIHtcclxuICAgICAgICByZXBvcnRJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgLy8gUHVibGljXHJcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgICBjb25zdCBjb25zdHJ1Y3RvciA9XHJcbiAgICAgICdDbGFzc0RlY2xhcmF0aW9uIE1ldGhvZERlZmluaXRpb25ba2V5Lm5hbWU9XCJjb25zdHJ1Y3RvclwiXSc7XHJcbiAgICBjb25zdCBpZGVudGlmaWVyID0gJ0lkZW50aWZpZXIucHJvcGVydHlbbmFtZV0nO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIFtgJHtjb25zdHJ1Y3Rvcn0gTWVtYmVyRXhwcmVzc2lvbi5sZWZ0ICR7aWRlbnRpZmllcn1gXTogY2hlY2tGb3JFdmVudEF0dHJpYnV0ZXMsXHJcbiAgICAgIFtgJHtjb25zdHJ1Y3Rvcn0gTWVtYmVyRXhwcmVzc2lvbi5jYWxsZWUgJHtpZGVudGlmaWVyfWBdOiBjaGVja0Zvckxpc3RlbmVyc01ldGhvZHMsXHJcbiAgICAgIFtgJHtjb25zdHJ1Y3Rvcn0gTWVtYmVyRXhwcmVzc2lvbiAke2lkZW50aWZpZXJ9YF06IGNoZWNrRm9yU2VhcmNoTWV0aG9kc0FuZENvbGxlY3Rpb25zLFxyXG4gICAgfTtcclxuICB9LFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgcnVsZTtcclxuIl19