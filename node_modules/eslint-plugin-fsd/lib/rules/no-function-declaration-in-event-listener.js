"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.errorMessages = exports.rule = exports.name = void 0;

var _experimentalUtils = require("@typescript-eslint/experimental-utils");

var _astUtils = require("eslint/lib/rules/utils/ast-utils");

//
// ─── RULE DECLARATIONS ──────────────────────────────────────────────────────────
//
const name = 'no-function-declaration-in-event-listener';
exports.name = name;

const createRule = _experimentalUtils.ESLintUtils.RuleCreator(() => 'https://github.com/fullstack-development/front-end-best-practices/blob/master/JS/goodPractice.md');

const errorMessages = {
  functionForEventListener: 'Move event handlers to separate functions'
};
exports.errorMessages = errorMessages;
const meta = {
  type: 'suggestion',
  docs: {
    category: 'Best Practices',
    description: 'Move event handlers to separate functions',
    recommended: false
  },
  messages: errorMessages,
  schema: []
};
const addEventListenerSelector = 'CallExpression > MemberExpression > Identifier.property[name=/addEventListener|on/]';
const rule = createRule({
  name,
  meta,
  defaultOptions: [],

  create(context) {
    return {
      [addEventListenerSelector]: function checkEventListener(node) {
        const memberExpression = node.parent;
        const callExpression = memberExpression.parent;
        const secondArg = callExpression.arguments[1];

        if ((0, _astUtils.isFunction)(secondArg)) {
          context.report({
            node: secondArg,
            messageId: 'functionForEventListener'
          });
        }
      }
    };
  }

});
exports.rule = rule;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcnVsZXMvbm8tZnVuY3Rpb24tZGVjbGFyYXRpb24taW4tZXZlbnQtbGlzdGVuZXIudHMiXSwibmFtZXMiOlsibmFtZSIsImNyZWF0ZVJ1bGUiLCJFU0xpbnRVdGlscyIsIlJ1bGVDcmVhdG9yIiwiZXJyb3JNZXNzYWdlcyIsImZ1bmN0aW9uRm9yRXZlbnRMaXN0ZW5lciIsIm1ldGEiLCJ0eXBlIiwiZG9jcyIsImNhdGVnb3J5IiwiZGVzY3JpcHRpb24iLCJyZWNvbW1lbmRlZCIsIm1lc3NhZ2VzIiwic2NoZW1hIiwiYWRkRXZlbnRMaXN0ZW5lclNlbGVjdG9yIiwicnVsZSIsImRlZmF1bHRPcHRpb25zIiwiY3JlYXRlIiwiY29udGV4dCIsImNoZWNrRXZlbnRMaXN0ZW5lciIsIm5vZGUiLCJtZW1iZXJFeHByZXNzaW9uIiwicGFyZW50IiwiY2FsbEV4cHJlc3Npb24iLCJzZWNvbmRBcmciLCJhcmd1bWVudHMiLCJyZXBvcnQiLCJtZXNzYWdlSWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFJQTtBQUNBO0FBQ0E7QUFFQSxNQUFNQSxJQUFJLEdBQUcsMkNBQWI7OztBQUVBLE1BQU1DLFVBQVUsR0FBR0MsK0JBQVlDLFdBQVosQ0FDakIsTUFDRSxrR0FGZSxDQUFuQjs7QUFLQSxNQUFNQyxhQUFhLEdBQUc7QUFDcEJDLEVBQUFBLHdCQUF3QixFQUFFO0FBRE4sQ0FBdEI7O0FBSUEsTUFBTUMsSUFBOEMsR0FBRztBQUNyREMsRUFBQUEsSUFBSSxFQUFFLFlBRCtDO0FBRXJEQyxFQUFBQSxJQUFJLEVBQUU7QUFDSkMsSUFBQUEsUUFBUSxFQUFFLGdCQUROO0FBRUpDLElBQUFBLFdBQVcsRUFBRSwyQ0FGVDtBQUdKQyxJQUFBQSxXQUFXLEVBQUU7QUFIVCxHQUYrQztBQU9yREMsRUFBQUEsUUFBUSxFQUFFUixhQVAyQztBQVFyRFMsRUFBQUEsTUFBTSxFQUFFO0FBUjZDLENBQXZEO0FBV0EsTUFBTUMsd0JBQXdCLEdBQzVCLHFGQURGO0FBR0EsTUFBTUMsSUFBSSxHQUFHZCxVQUFVLENBQUM7QUFDdEJELEVBQUFBLElBRHNCO0FBRXRCTSxFQUFBQSxJQUZzQjtBQUd0QlUsRUFBQUEsY0FBYyxFQUFFLEVBSE07O0FBSXRCQyxFQUFBQSxNQUFNLENBQUNDLE9BQUQsRUFBVTtBQUNkLFdBQU87QUFDTCxPQUFDSix3QkFBRCxHQUE0QixTQUFTSyxrQkFBVCxDQUMxQkMsSUFEMEIsRUFFcEI7QUFDTixjQUFNQyxnQkFBZ0IsR0FBR0QsSUFBSSxDQUFDRSxNQUE5QjtBQUNBLGNBQU1DLGNBQWMsR0FBR0YsZ0JBQWdCLENBQUNDLE1BQXhDO0FBQ0EsY0FBTUUsU0FBUyxHQUFHRCxjQUFjLENBQUNFLFNBQWYsQ0FBeUIsQ0FBekIsQ0FBbEI7O0FBRUEsWUFBSSwwQkFBV0QsU0FBWCxDQUFKLEVBQTJCO0FBQ3pCTixVQUFBQSxPQUFPLENBQUNRLE1BQVIsQ0FBZTtBQUNiTixZQUFBQSxJQUFJLEVBQUVJLFNBRE87QUFFYkcsWUFBQUEsU0FBUyxFQUFFO0FBRkUsV0FBZjtBQUlEO0FBQ0Y7QUFkSSxLQUFQO0FBZ0JEOztBQXJCcUIsQ0FBRCxDQUF2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRTRVNUcmVlLCBFU0xpbnRVdGlscyB9IGZyb20gJ0B0eXBlc2NyaXB0LWVzbGludC9leHBlcmltZW50YWwtdXRpbHMnO1xyXG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnZXNsaW50L2xpYi9ydWxlcy91dGlscy9hc3QtdXRpbHMnO1xyXG5cclxuaW1wb3J0IHsgUnVsZU1ldGFEYXRhIH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xyXG5cclxuLy9cclxuLy8g4pSA4pSA4pSAIFJVTEUgREVDTEFSQVRJT05TIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgFxyXG4vL1xyXG5cclxuY29uc3QgbmFtZSA9ICduby1mdW5jdGlvbi1kZWNsYXJhdGlvbi1pbi1ldmVudC1saXN0ZW5lcic7XHJcblxyXG5jb25zdCBjcmVhdGVSdWxlID0gRVNMaW50VXRpbHMuUnVsZUNyZWF0b3IoXHJcbiAgKCkgPT5cclxuICAgICdodHRwczovL2dpdGh1Yi5jb20vZnVsbHN0YWNrLWRldmVsb3BtZW50L2Zyb250LWVuZC1iZXN0LXByYWN0aWNlcy9ibG9iL21hc3Rlci9KUy9nb29kUHJhY3RpY2UubWQnLFxyXG4pO1xyXG5cclxuY29uc3QgZXJyb3JNZXNzYWdlcyA9IHtcclxuICBmdW5jdGlvbkZvckV2ZW50TGlzdGVuZXI6ICdNb3ZlIGV2ZW50IGhhbmRsZXJzIHRvIHNlcGFyYXRlIGZ1bmN0aW9ucycsXHJcbn0gYXMgY29uc3Q7XHJcblxyXG5jb25zdCBtZXRhOiBSdWxlTWV0YURhdGE8a2V5b2YgdHlwZW9mIGVycm9yTWVzc2FnZXM+ID0ge1xyXG4gIHR5cGU6ICdzdWdnZXN0aW9uJyxcclxuICBkb2NzOiB7XHJcbiAgICBjYXRlZ29yeTogJ0Jlc3QgUHJhY3RpY2VzJyxcclxuICAgIGRlc2NyaXB0aW9uOiAnTW92ZSBldmVudCBoYW5kbGVycyB0byBzZXBhcmF0ZSBmdW5jdGlvbnMnLFxyXG4gICAgcmVjb21tZW5kZWQ6IGZhbHNlLFxyXG4gIH0sXHJcbiAgbWVzc2FnZXM6IGVycm9yTWVzc2FnZXMsXHJcbiAgc2NoZW1hOiBbXSxcclxufTtcclxuXHJcbmNvbnN0IGFkZEV2ZW50TGlzdGVuZXJTZWxlY3RvciA9XHJcbiAgJ0NhbGxFeHByZXNzaW9uID4gTWVtYmVyRXhwcmVzc2lvbiA+IElkZW50aWZpZXIucHJvcGVydHlbbmFtZT0vYWRkRXZlbnRMaXN0ZW5lcnxvbi9dJztcclxuXHJcbmNvbnN0IHJ1bGUgPSBjcmVhdGVSdWxlKHtcclxuICBuYW1lLFxyXG4gIG1ldGEsXHJcbiAgZGVmYXVsdE9wdGlvbnM6IFtdLFxyXG4gIGNyZWF0ZShjb250ZXh0KSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBbYWRkRXZlbnRMaXN0ZW5lclNlbGVjdG9yXTogZnVuY3Rpb24gY2hlY2tFdmVudExpc3RlbmVyKFxyXG4gICAgICAgIG5vZGU6IFRTRVNUcmVlLklkZW50aWZpZXIsXHJcbiAgICAgICk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IG1lbWJlckV4cHJlc3Npb24gPSBub2RlLnBhcmVudCBhcyBUU0VTVHJlZS5NZW1iZXJFeHByZXNzaW9uO1xyXG4gICAgICAgIGNvbnN0IGNhbGxFeHByZXNzaW9uID0gbWVtYmVyRXhwcmVzc2lvbi5wYXJlbnQgYXMgVFNFU1RyZWUuQ2FsbEV4cHJlc3Npb247XHJcbiAgICAgICAgY29uc3Qgc2Vjb25kQXJnID0gY2FsbEV4cHJlc3Npb24uYXJndW1lbnRzWzFdO1xyXG5cclxuICAgICAgICBpZiAoaXNGdW5jdGlvbihzZWNvbmRBcmcpKSB7XHJcbiAgICAgICAgICBjb250ZXh0LnJlcG9ydCh7XHJcbiAgICAgICAgICAgIG5vZGU6IHNlY29uZEFyZyxcclxuICAgICAgICAgICAgbWVzc2FnZUlkOiAnZnVuY3Rpb25Gb3JFdmVudExpc3RlbmVyJyxcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgIH07XHJcbiAgfSxcclxufSk7XHJcblxyXG5leHBvcnQgeyBuYW1lLCBydWxlLCBlcnJvck1lc3NhZ2VzIH07XHJcbiJdfQ==