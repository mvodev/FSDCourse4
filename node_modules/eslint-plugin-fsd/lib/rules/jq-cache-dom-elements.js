"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.errorMessages = exports.rule = exports.name = void 0;

var _experimentalUtils = require("@typescript-eslint/experimental-utils");

var _astUtils = require("eslint/lib/rules/utils/ast-utils");

var _astUtils2 = require("../utils/ast-utils");

//
// ─── RULE DECLARATIONS ──────────────────────────────────────────────────────────
//
const name = 'jq-cache-dom-elements';
exports.name = name;

const createRule = _experimentalUtils.ESLintUtils.RuleCreator(() => 'https://github.com/fullstack-development/front-end-best-practices/blob/master/JS/jQuery.md');

const errorMessages = {
  cacheDOMNodes: 'Selector {{ selector }} was used {{ times }} times. Try caching this DOM node instead'
};
exports.errorMessages = errorMessages;
const meta = {
  type: 'suggestion',
  docs: {
    category: 'Best Practices',
    description: 'Cache all selected DOM elements',
    recommended: false
  },
  messages: errorMessages,
  schema: []
};
const jqDOMSelector = 'MemberExpression > CallExpression > Identifier.callee[name=/\\$|(jQuery)/]';
const rule = createRule({
  name,
  meta,
  defaultOptions: [],

  create(context) {
    const scopeToSelectors = {};
    return {
      [jqDOMSelector]: function checkDOMSelector(node) {
        const functionAncestor = (0, _astUtils2.getAncestorOfType)(_astUtils.isFunction, node);
        const scopeId = functionAncestor ? `${functionAncestor.range.join(',')}` // no 2 functions can have same range
        : 'global';
        const callExpression = node.parent;
        const firstArg = callExpression.arguments[0];

        if (firstArg.type === _experimentalUtils.AST_NODE_TYPES.Literal) {
          if (!firstArg.value) return;
          const selector = firstArg.value.toString(); // if selector is html element string

          if (selector.startsWith('<')) return;
          const scope = scopeToSelectors[scopeId];
          const isSelectorInScope = scope && scope[selector];

          if (isSelectorInScope) {
            scopeToSelectors[scopeId][selector].push(callExpression);
          } else if (scope) {
            scope[selector] = [callExpression];
            scopeToSelectors[scopeId] = scope;
          } else {
            scopeToSelectors[scopeId] = {
              [selector]: [callExpression]
            };
          }
        }
      },
      'Program:exit': function reportIfRepeatedSelectionsFound() {
        Object.entries(scopeToSelectors).forEach(([, selectorToNodes]) => {
          Object.entries(selectorToNodes).forEach(([selector, nodes]) => {
            if (nodes.length > 1) {
              context.report({
                messageId: 'cacheDOMNodes',
                node: nodes[0],
                data: {
                  selector,
                  times: nodes.length
                }
              });
            }
          });
        });
      }
    };
  }

});
exports.rule = rule;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,