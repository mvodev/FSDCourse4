"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.errorMessages = exports.rule = exports.name = void 0;

var _experimentalUtils = require("@typescript-eslint/experimental-utils");

require("core-js");

//
// ─── HELPER FUNCTIONS ───────────────────────────────────────────────────────────
//

/**
 * Check if provided selector adheres to rule:
 * All classes that are used to select dom elements - should start with "js-" prefix
 * @param selector jquery selector string
 */
function isCorrectSelector(selector = '') {
  // if selector is an html element string
  if (selector.startsWith('<')) return true;
  const parts = selector.split(',').flatMap(s => s.split(/\s+/));
  const allSelectorsAreCorrect = parts.every(sel => {
    // if selector is a class - it should be prefixed with 'js-'
    if (sel.startsWith('.') && !sel.startsWith('.js-')) return false;
    return true;
  });
  return allSelectorsAreCorrect;
} //
// ─── RULE DECLARATIONS ──────────────────────────────────────────────────────────
//


const name = 'jq-use-js-prefix-in-selector';
exports.name = name;

const createRule = _experimentalUtils.ESLintUtils.RuleCreator(() => `https://github.com/fullstack-development/front-end-best-practices/blob/master/JS/jQuery.md`);

const errorMessages = {
  useJsPrefix: 'All classes that are used to search the DOM must begin with "js-" prefix'
};
exports.errorMessages = errorMessages;
const meta = {
  type: 'suggestion',
  docs: {
    category: 'Best Practices',
    description: 'All classes that are used to search the DOM must begin with "js-" prefix',
    recommended: false
  },
  messages: errorMessages,
  schema: []
};
const jqDOMSelector = 'MemberExpression > CallExpression > Identifier.callee[name=/\\$|(jQuery)/]';
const rule = createRule({
  name,
  meta,
  defaultOptions: [],

  create(context) {
    return {
      [jqDOMSelector]: function checkDOMSelector(node) {
        const callExpression = node.parent;
        const firstArg = callExpression.arguments[0];

        if (firstArg.type === _experimentalUtils.AST_NODE_TYPES.Literal) {
          if (!firstArg.value) return;
          const selector = firstArg.value.toString();

          if (!isCorrectSelector(selector)) {
            context.report({
              node: callExpression,
              messageId: 'useJsPrefix'
            });
          }
        }
      }
    };
  }

});
exports.rule = rule;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcnVsZXMvanEtdXNlLWpzLXByZWZpeC1pbi1zZWxlY3Rvci50cyJdLCJuYW1lcyI6WyJpc0NvcnJlY3RTZWxlY3RvciIsInNlbGVjdG9yIiwic3RhcnRzV2l0aCIsInBhcnRzIiwic3BsaXQiLCJmbGF0TWFwIiwicyIsImFsbFNlbGVjdG9yc0FyZUNvcnJlY3QiLCJldmVyeSIsInNlbCIsIm5hbWUiLCJjcmVhdGVSdWxlIiwiRVNMaW50VXRpbHMiLCJSdWxlQ3JlYXRvciIsImVycm9yTWVzc2FnZXMiLCJ1c2VKc1ByZWZpeCIsIm1ldGEiLCJ0eXBlIiwiZG9jcyIsImNhdGVnb3J5IiwiZGVzY3JpcHRpb24iLCJyZWNvbW1lbmRlZCIsIm1lc3NhZ2VzIiwic2NoZW1hIiwianFET01TZWxlY3RvciIsInJ1bGUiLCJkZWZhdWx0T3B0aW9ucyIsImNyZWF0ZSIsImNvbnRleHQiLCJjaGVja0RPTVNlbGVjdG9yIiwibm9kZSIsImNhbGxFeHByZXNzaW9uIiwicGFyZW50IiwiZmlyc3RBcmciLCJhcmd1bWVudHMiLCJBU1RfTk9ERV9UWVBFUyIsIkxpdGVyYWwiLCJ2YWx1ZSIsInRvU3RyaW5nIiwicmVwb3J0IiwibWVzc2FnZUlkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBTUE7O0FBSUE7QUFDQTtBQUNBOztBQUVBOzs7OztBQUtBLFNBQVNBLGlCQUFULENBQTJCQyxRQUFRLEdBQUcsRUFBdEMsRUFBbUQ7QUFDakQ7QUFDQSxNQUFJQSxRQUFRLENBQUNDLFVBQVQsQ0FBb0IsR0FBcEIsQ0FBSixFQUE4QixPQUFPLElBQVA7QUFFOUIsUUFBTUMsS0FBSyxHQUFHRixRQUFRLENBQUNHLEtBQVQsQ0FBZSxHQUFmLEVBQW9CQyxPQUFwQixDQUE0QkMsQ0FBQyxJQUFJQSxDQUFDLENBQUNGLEtBQUYsQ0FBUSxLQUFSLENBQWpDLENBQWQ7QUFFQSxRQUFNRyxzQkFBc0IsR0FBR0osS0FBSyxDQUFDSyxLQUFOLENBQVlDLEdBQUcsSUFBSTtBQUNoRDtBQUNBLFFBQUlBLEdBQUcsQ0FBQ1AsVUFBSixDQUFlLEdBQWYsS0FBdUIsQ0FBQ08sR0FBRyxDQUFDUCxVQUFKLENBQWUsTUFBZixDQUE1QixFQUFvRCxPQUFPLEtBQVA7QUFFcEQsV0FBTyxJQUFQO0FBQ0QsR0FMOEIsQ0FBL0I7QUFPQSxTQUFPSyxzQkFBUDtBQUNELEMsQ0FFRDtBQUNBO0FBQ0E7OztBQUVBLE1BQU1HLElBQUksR0FBRyw4QkFBYjs7O0FBRUEsTUFBTUMsVUFBVSxHQUFHQywrQkFBWUMsV0FBWixDQUNqQixNQUNHLDRGQUZjLENBQW5COztBQUtBLE1BQU1DLGFBQWEsR0FBRztBQUNwQkMsRUFBQUEsV0FBVyxFQUNUO0FBRmtCLENBQXRCOztBQUtBLE1BQU1DLElBQThDLEdBQUc7QUFDckRDLEVBQUFBLElBQUksRUFBRSxZQUQrQztBQUVyREMsRUFBQUEsSUFBSSxFQUFFO0FBQ0pDLElBQUFBLFFBQVEsRUFBRSxnQkFETjtBQUVKQyxJQUFBQSxXQUFXLEVBQ1QsMEVBSEU7QUFJSkMsSUFBQUEsV0FBVyxFQUFFO0FBSlQsR0FGK0M7QUFRckRDLEVBQUFBLFFBQVEsRUFBRVIsYUFSMkM7QUFTckRTLEVBQUFBLE1BQU0sRUFBRTtBQVQ2QyxDQUF2RDtBQVlBLE1BQU1DLGFBQWEsR0FDakIsNEVBREY7QUFHQSxNQUFNQyxJQUFJLEdBQUdkLFVBQVUsQ0FBQztBQUN0QkQsRUFBQUEsSUFEc0I7QUFFdEJNLEVBQUFBLElBRnNCO0FBR3RCVSxFQUFBQSxjQUFjLEVBQUUsRUFITTs7QUFJdEJDLEVBQUFBLE1BQU0sQ0FBQ0MsT0FBRCxFQUFVO0FBQ2QsV0FBTztBQUNMLE9BQUNKLGFBQUQsR0FBaUIsU0FBU0ssZ0JBQVQsQ0FDZkMsSUFEZSxFQUVUO0FBQ04sY0FBTUMsY0FBYyxHQUFHRCxJQUFJLENBQUNFLE1BQTVCO0FBQ0EsY0FBTUMsUUFBUSxHQUFHRixjQUFjLENBQUNHLFNBQWYsQ0FBeUIsQ0FBekIsQ0FBakI7O0FBRUEsWUFBSUQsUUFBUSxDQUFDaEIsSUFBVCxLQUFrQmtCLGtDQUFlQyxPQUFyQyxFQUE4QztBQUM1QyxjQUFJLENBQUNILFFBQVEsQ0FBQ0ksS0FBZCxFQUFxQjtBQUVyQixnQkFBTXBDLFFBQVEsR0FBR2dDLFFBQVEsQ0FBQ0ksS0FBVCxDQUFlQyxRQUFmLEVBQWpCOztBQUNBLGNBQUksQ0FBQ3RDLGlCQUFpQixDQUFDQyxRQUFELENBQXRCLEVBQWtDO0FBQ2hDMkIsWUFBQUEsT0FBTyxDQUFDVyxNQUFSLENBQWU7QUFDYlQsY0FBQUEsSUFBSSxFQUFFQyxjQURPO0FBRWJTLGNBQUFBLFNBQVMsRUFBRTtBQUZFLGFBQWY7QUFJRDtBQUNGO0FBQ0Y7QUFsQkksS0FBUDtBQW9CRDs7QUF6QnFCLENBQUQsQ0FBdkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIFRTRVNUcmVlLFxyXG4gIEFTVF9OT0RFX1RZUEVTLFxyXG4gIEVTTGludFV0aWxzLFxyXG59IGZyb20gJ0B0eXBlc2NyaXB0LWVzbGludC9leHBlcmltZW50YWwtdXRpbHMnO1xyXG5cclxuaW1wb3J0ICdjb3JlLWpzJztcclxuXHJcbmltcG9ydCB7IFJ1bGVNZXRhRGF0YSB9IGZyb20gJy4uLy4uL3R5cGVzJztcclxuXHJcbi8vXHJcbi8vIOKUgOKUgOKUgCBIRUxQRVIgRlVOQ1RJT05TIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgFxyXG4vL1xyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIHByb3ZpZGVkIHNlbGVjdG9yIGFkaGVyZXMgdG8gcnVsZTpcclxuICogQWxsIGNsYXNzZXMgdGhhdCBhcmUgdXNlZCB0byBzZWxlY3QgZG9tIGVsZW1lbnRzIC0gc2hvdWxkIHN0YXJ0IHdpdGggXCJqcy1cIiBwcmVmaXhcclxuICogQHBhcmFtIHNlbGVjdG9yIGpxdWVyeSBzZWxlY3RvciBzdHJpbmdcclxuICovXHJcbmZ1bmN0aW9uIGlzQ29ycmVjdFNlbGVjdG9yKHNlbGVjdG9yID0gJycpOiBib29sZWFuIHtcclxuICAvLyBpZiBzZWxlY3RvciBpcyBhbiBodG1sIGVsZW1lbnQgc3RyaW5nXHJcbiAgaWYgKHNlbGVjdG9yLnN0YXJ0c1dpdGgoJzwnKSkgcmV0dXJuIHRydWU7XHJcblxyXG4gIGNvbnN0IHBhcnRzID0gc2VsZWN0b3Iuc3BsaXQoJywnKS5mbGF0TWFwKHMgPT4gcy5zcGxpdCgvXFxzKy8pKTtcclxuXHJcbiAgY29uc3QgYWxsU2VsZWN0b3JzQXJlQ29ycmVjdCA9IHBhcnRzLmV2ZXJ5KHNlbCA9PiB7XHJcbiAgICAvLyBpZiBzZWxlY3RvciBpcyBhIGNsYXNzIC0gaXQgc2hvdWxkIGJlIHByZWZpeGVkIHdpdGggJ2pzLSdcclxuICAgIGlmIChzZWwuc3RhcnRzV2l0aCgnLicpICYmICFzZWwuc3RhcnRzV2l0aCgnLmpzLScpKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiBhbGxTZWxlY3RvcnNBcmVDb3JyZWN0O1xyXG59XHJcblxyXG4vL1xyXG4vLyDilIDilIDilIAgUlVMRSBERUNMQVJBVElPTlMg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAXHJcbi8vXHJcblxyXG5jb25zdCBuYW1lID0gJ2pxLXVzZS1qcy1wcmVmaXgtaW4tc2VsZWN0b3InO1xyXG5cclxuY29uc3QgY3JlYXRlUnVsZSA9IEVTTGludFV0aWxzLlJ1bGVDcmVhdG9yKFxyXG4gICgpID0+XHJcbiAgICBgaHR0cHM6Ly9naXRodWIuY29tL2Z1bGxzdGFjay1kZXZlbG9wbWVudC9mcm9udC1lbmQtYmVzdC1wcmFjdGljZXMvYmxvYi9tYXN0ZXIvSlMvalF1ZXJ5Lm1kYCxcclxuKTtcclxuXHJcbmNvbnN0IGVycm9yTWVzc2FnZXMgPSB7XHJcbiAgdXNlSnNQcmVmaXg6XHJcbiAgICAnQWxsIGNsYXNzZXMgdGhhdCBhcmUgdXNlZCB0byBzZWFyY2ggdGhlIERPTSBtdXN0IGJlZ2luIHdpdGggXCJqcy1cIiBwcmVmaXgnLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuY29uc3QgbWV0YTogUnVsZU1ldGFEYXRhPGtleW9mIHR5cGVvZiBlcnJvck1lc3NhZ2VzPiA9IHtcclxuICB0eXBlOiAnc3VnZ2VzdGlvbicsXHJcbiAgZG9jczoge1xyXG4gICAgY2F0ZWdvcnk6ICdCZXN0IFByYWN0aWNlcycsXHJcbiAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgJ0FsbCBjbGFzc2VzIHRoYXQgYXJlIHVzZWQgdG8gc2VhcmNoIHRoZSBET00gbXVzdCBiZWdpbiB3aXRoIFwianMtXCIgcHJlZml4JyxcclxuICAgIHJlY29tbWVuZGVkOiBmYWxzZSxcclxuICB9LFxyXG4gIG1lc3NhZ2VzOiBlcnJvck1lc3NhZ2VzLFxyXG4gIHNjaGVtYTogW10sXHJcbn07XHJcblxyXG5jb25zdCBqcURPTVNlbGVjdG9yID1cclxuICAnTWVtYmVyRXhwcmVzc2lvbiA+IENhbGxFeHByZXNzaW9uID4gSWRlbnRpZmllci5jYWxsZWVbbmFtZT0vXFxcXCR8KGpRdWVyeSkvXSc7XHJcblxyXG5jb25zdCBydWxlID0gY3JlYXRlUnVsZSh7XHJcbiAgbmFtZSxcclxuICBtZXRhLFxyXG4gIGRlZmF1bHRPcHRpb25zOiBbXSxcclxuICBjcmVhdGUoY29udGV4dCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgW2pxRE9NU2VsZWN0b3JdOiBmdW5jdGlvbiBjaGVja0RPTVNlbGVjdG9yKFxyXG4gICAgICAgIG5vZGU6IFRTRVNUcmVlLklkZW50aWZpZXIsXHJcbiAgICAgICk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGNhbGxFeHByZXNzaW9uID0gbm9kZS5wYXJlbnQgYXMgVFNFU1RyZWUuQ2FsbEV4cHJlc3Npb247XHJcbiAgICAgICAgY29uc3QgZmlyc3RBcmcgPSBjYWxsRXhwcmVzc2lvbi5hcmd1bWVudHNbMF07XHJcblxyXG4gICAgICAgIGlmIChmaXJzdEFyZy50eXBlID09PSBBU1RfTk9ERV9UWVBFUy5MaXRlcmFsKSB7XHJcbiAgICAgICAgICBpZiAoIWZpcnN0QXJnLnZhbHVlKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgY29uc3Qgc2VsZWN0b3IgPSBmaXJzdEFyZy52YWx1ZS50b1N0cmluZygpO1xyXG4gICAgICAgICAgaWYgKCFpc0NvcnJlY3RTZWxlY3RvcihzZWxlY3RvcikpIHtcclxuICAgICAgICAgICAgY29udGV4dC5yZXBvcnQoe1xyXG4gICAgICAgICAgICAgIG5vZGU6IGNhbGxFeHByZXNzaW9uLFxyXG4gICAgICAgICAgICAgIG1lc3NhZ2VJZDogJ3VzZUpzUHJlZml4JyxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgfTtcclxuICB9LFxyXG59KTtcclxuXHJcbmV4cG9ydCB7IG5hbWUsIHJ1bGUsIGVycm9yTWVzc2FnZXMgfTtcclxuIl19