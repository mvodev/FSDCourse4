"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _astUtils = require("eslint/lib/rules/utils/ast-utils");

var _astUtils2 = require("../utils/ast-utils");

/**
 * @fileoverview Higher order function name prefix
 * @author Leonid Baryshnikov
 */
//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------
const rule = {
  meta: {
    type: 'layout',
    docs: {
      description: 'Higher order function name prefix',
      category: 'Stylistic Issues',
      recommended: false,
      url: 'https://github.com/timon-and-pumbaa/eslint-plugin-fsd/blob/master/docs/rules/hof-name-prefix.md'
    },
    fixable: undefined,
    schema: [],
    messages: {
      requireMake: 'Higher order function name should be prefixed with "make"'
    }
  },

  create(context) {
    const prefix = 'make'; //----------------------------------------------------------------------
    // Helpers
    //----------------------------------------------------------------------

    const reportIdentifier = identifier => {
      context.report({
        node: identifier,
        messageId: 'requireMake'
      });
    };

    const checkIdentifier = identifier => {
      const isPrefixCorrect = identifier.name.startsWith(prefix) || identifier.name.startsWith(`_${prefix}`);

      if (!isPrefixCorrect) {
        reportIdentifier(identifier);
      }
    };

    const getIdentifier = node => {
      const ancestorIsMethodOrProperty = node.type === 'MethodDefinition' || node.type === 'Property';
      const mayBeLeftProperty = node.type === 'AssignmentExpression' ? node.left.property : null;
      const mayBeKeyOrLeftProperty = ancestorIsMethodOrProperty ? node.key : mayBeLeftProperty;
      const identifier = node.type === 'VariableDeclarator' ? node.id : mayBeKeyOrLeftProperty;
      return identifier;
    };

    const isFunctionHigherOrder = node => {
      if (!node.body) return false;
      const functionBody = node.body; // When function body has no braces

      if ((0, _astUtils.isFunction)(functionBody)) return true;
      if (functionBody.type !== 'BlockStatement') return false;
      const {
        body: functionContent
      } = functionBody;
      const statementThatReturnsFunction = functionContent.find(contentNode => {
        const nodeReturnsFunction = contentNode.type === 'ReturnStatement' && contentNode.argument && (0, _astUtils.isFunction)(contentNode.argument);
        if (nodeReturnsFunction) return true;
        return false;
      });
      return !!statementThatReturnsFunction;
    };

    const checkFunctionDeclaration = node => {
      const functionIsHigherOrder = isFunctionHigherOrder(node);

      if (functionIsHigherOrder) {
        const identifier = node.id;
        checkIdentifier(identifier);
      }
    };

    const checkFunctionExpression = node => {
      const allowedAncestors = ['VariableDeclarator', 'MethodDefinition', 'AssignmentExpression', 'Property'];
      const parent = (0, _astUtils2.getParent)(context);
      if (!parent) return;
      const functionIsHigherOrder = isFunctionHigherOrder(node);

      if (allowedAncestors.includes(parent.type) && functionIsHigherOrder) {
        const identifier = getIdentifier(parent);
        checkIdentifier(identifier);
      }
    }; //----------------------------------------------------------------------
    // Public
    //----------------------------------------------------------------------


    return {
      FunctionDeclaration: checkFunctionDeclaration,
      FunctionExpression: checkFunctionExpression,
      ArrowFunctionExpression: checkFunctionExpression
    };
  }

};
var _default = rule;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,