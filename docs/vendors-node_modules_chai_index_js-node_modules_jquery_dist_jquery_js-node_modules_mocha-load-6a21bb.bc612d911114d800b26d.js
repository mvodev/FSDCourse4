(self["webpackChunk"] = self["webpackChunk"] || []).push([["vendors-node_modules_chai_index_js-node_modules_jquery_dist_jquery_js-node_modules_mocha-load-6a21bb"],{

/***/ "../node_modules/assertion-error/index.js":
/*!************************************************!*\
  !*** ../node_modules/assertion-error/index.js ***!
  \************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module */
/*! CommonJS bailout: module.exports is used directly at 42:0-14 */
/***/ ((module) => {

/*!
 * assertion-error
 * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>
 * MIT Licensed
 */

/*!
 * Return a function that will copy properties from
 * one object to another excluding any originally
 * listed. Returned function will create a new `{}`.
 *
 * @param {String} excluded properties ...
 * @return {Function}
 */

function exclude () {
  var excludes = [].slice.call(arguments);

  function excludeProps (res, obj) {
    Object.keys(obj).forEach(function (key) {
      if (!~excludes.indexOf(key)) res[key] = obj[key];
    });
  }

  return function extendExclude () {
    var args = [].slice.call(arguments)
      , i = 0
      , res = {};

    for (; i < args.length; i++) {
      excludeProps(res, args[i]);
    }

    return res;
  };
};

/*!
 * Primary Exports
 */

module.exports = AssertionError;

/**
 * ### AssertionError
 *
 * An extension of the JavaScript `Error` constructor for
 * assertion and validation scenarios.
 *
 * @param {String} message
 * @param {Object} properties to include (optional)
 * @param {callee} start stack function (optional)
 */

function AssertionError (message, _props, ssf) {
  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')
    , props = extend(_props || {});

  // default values
  this.message = message || 'Unspecified AssertionError';
  this.showDiff = false;

  // copy from properties
  for (var key in props) {
    this[key] = props[key];
  }

  // capture stack trace
  ssf = ssf || AssertionError;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, ssf);
  } else {
    try {
      throw new Error();
    } catch(e) {
      this.stack = e.stack;
    }
  }
}

/*!
 * Inherit from Error.prototype
 */

AssertionError.prototype = Object.create(Error.prototype);

/*!
 * Statically set name
 */

AssertionError.prototype.name = 'AssertionError';

/*!
 * Ensure correct constructor
 */

AssertionError.prototype.constructor = AssertionError;

/**
 * Allow errors to be converted to JSON for static transfer.
 *
 * @param {Boolean} include stack (default: `true`)
 * @return {Object} object that can be `JSON.stringify`
 */

AssertionError.prototype.toJSON = function (stack) {
  var extend = exclude('constructor', 'toJSON', 'stack')
    , props = extend({ name: this.name }, this);

  // include stack if exists and not turned off
  if (false !== stack && this.stack) {
    props.stack = this.stack;
  }

  return props;
};


/***/ }),

/***/ "../node_modules/chai/index.js":
/*!*************************************!*\
  !*** ../node_modules/chai/index.js ***!
  \*************************************/
/*! dynamic exports */
/*! export __esModule [maybe provided (runtime-defined)] [no usage info] [provision prevents renaming (no use info)] -> ../node_modules/chai/lib/chai.js .__esModule */
/*! other exports [maybe provided (runtime-defined)] [no usage info] -> ../node_modules/chai/lib/chai.js */
/*! runtime requirements: module, __webpack_require__ */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! ./lib/chai */ "../node_modules/chai/lib/chai.js");


/***/ }),

/***/ "../node_modules/chai/lib/chai.js":
/*!****************************************!*\
  !*** ../node_modules/chai/lib/chai.js ***!
  \****************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: __webpack_exports__, __webpack_require__ */
/*! CommonJS bailout: exports is used directly at 39:7-14 */
/*! CommonJS bailout: exports is used directly at 43:9-16 */
/*! CommonJS bailout: exports.use(...) prevents optimization as exports is passed as call context at 64:0-11 */
/*! CommonJS bailout: exports.use(...) prevents optimization as exports is passed as call context at 71:0-11 */
/*! CommonJS bailout: exports.use(...) prevents optimization as exports is passed as call context at 78:0-11 */
/*! CommonJS bailout: exports.use(...) prevents optimization as exports is passed as call context at 85:0-11 */
/*! CommonJS bailout: exports.use(...) prevents optimization as exports is passed as call context at 92:0-11 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var used = [];

/*!
 * Chai version
 */

exports.version = '4.2.0';

/*!
 * Assertion Error
 */

exports.AssertionError = __webpack_require__(/*! assertion-error */ "../node_modules/assertion-error/index.js");

/*!
 * Utils for plugins (not exported)
 */

var util = __webpack_require__(/*! ./chai/utils */ "../node_modules/chai/lib/chai/utils/index.js");

/**
 * # .use(function)
 *
 * Provides a way to extend the internals of Chai.
 *
 * @param {Function}
 * @returns {this} for chaining
 * @api public
 */

exports.use = function (fn) {
  if (!~used.indexOf(fn)) {
    fn(exports, util);
    used.push(fn);
  }

  return exports;
};

/*!
 * Utility Functions
 */

exports.util = util;

/*!
 * Configuration
 */

var config = __webpack_require__(/*! ./chai/config */ "../node_modules/chai/lib/chai/config.js");
exports.config = config;

/*!
 * Primary `Assertion` prototype
 */

var assertion = __webpack_require__(/*! ./chai/assertion */ "../node_modules/chai/lib/chai/assertion.js");
exports.use(assertion);

/*!
 * Core Assertions
 */

var core = __webpack_require__(/*! ./chai/core/assertions */ "../node_modules/chai/lib/chai/core/assertions.js");
exports.use(core);

/*!
 * Expect interface
 */

var expect = __webpack_require__(/*! ./chai/interface/expect */ "../node_modules/chai/lib/chai/interface/expect.js");
exports.use(expect);

/*!
 * Should interface
 */

var should = __webpack_require__(/*! ./chai/interface/should */ "../node_modules/chai/lib/chai/interface/should.js");
exports.use(should);

/*!
 * Assert interface
 */

var assert = __webpack_require__(/*! ./chai/interface/assert */ "../node_modules/chai/lib/chai/interface/assert.js");
exports.use(assert);


/***/ }),

/***/ "../node_modules/chai/lib/chai/assertion.js":
/*!**************************************************!*\
  !*** ../node_modules/chai/lib/chai/assertion.js ***!
  \**************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 10:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*!
 * chai
 * http://chaijs.com
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var config = __webpack_require__(/*! ./config */ "../node_modules/chai/lib/chai/config.js");

module.exports = function (_chai, util) {
  /*!
   * Module dependencies.
   */

  var AssertionError = _chai.AssertionError
    , flag = util.flag;

  /*!
   * Module export.
   */

  _chai.Assertion = Assertion;

  /*!
   * Assertion Constructor
   *
   * Creates object for chaining.
   *
   * `Assertion` objects contain metadata in the form of flags. Three flags can
   * be assigned during instantiation by passing arguments to this constructor:
   *
   * - `object`: This flag contains the target of the assertion. For example, in
   *   the assertion `expect(numKittens).to.equal(7);`, the `object` flag will
   *   contain `numKittens` so that the `equal` assertion can reference it when
   *   needed.
   *
   * - `message`: This flag contains an optional custom error message to be
   *   prepended to the error message that's generated by the assertion when it
   *   fails.
   *
   * - `ssfi`: This flag stands for "start stack function indicator". It
   *   contains a function reference that serves as the starting point for
   *   removing frames from the stack trace of the error that's created by the
   *   assertion when it fails. The goal is to provide a cleaner stack trace to
   *   end users by removing Chai's internal functions. Note that it only works
   *   in environments that support `Error.captureStackTrace`, and only when
   *   `Chai.config.includeStack` hasn't been set to `false`.
   *
   * - `lockSsfi`: This flag controls whether or not the given `ssfi` flag
   *   should retain its current value, even as assertions are chained off of
   *   this object. This is usually set to `true` when creating a new assertion
   *   from within another assertion. It's also temporarily set to `true` before
   *   an overwritten assertion gets called by the overwriting assertion.
   *
   * @param {Mixed} obj target of the assertion
   * @param {String} msg (optional) custom error message
   * @param {Function} ssfi (optional) starting point for removing stack frames
   * @param {Boolean} lockSsfi (optional) whether or not the ssfi flag is locked
   * @api private
   */

  function Assertion (obj, msg, ssfi, lockSsfi) {
    flag(this, 'ssfi', ssfi || Assertion);
    flag(this, 'lockSsfi', lockSsfi);
    flag(this, 'object', obj);
    flag(this, 'message', msg);

    return util.proxify(this);
  }

  Object.defineProperty(Assertion, 'includeStack', {
    get: function() {
      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');
      return config.includeStack;
    },
    set: function(value) {
      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');
      config.includeStack = value;
    }
  });

  Object.defineProperty(Assertion, 'showDiff', {
    get: function() {
      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');
      return config.showDiff;
    },
    set: function(value) {
      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');
      config.showDiff = value;
    }
  });

  Assertion.addProperty = function (name, fn) {
    util.addProperty(this.prototype, name, fn);
  };

  Assertion.addMethod = function (name, fn) {
    util.addMethod(this.prototype, name, fn);
  };

  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {
    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);
  };

  Assertion.overwriteProperty = function (name, fn) {
    util.overwriteProperty(this.prototype, name, fn);
  };

  Assertion.overwriteMethod = function (name, fn) {
    util.overwriteMethod(this.prototype, name, fn);
  };

  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {
    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);
  };

  /**
   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)
   *
   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.
   *
   * @name assert
   * @param {Philosophical} expression to be tested
   * @param {String|Function} message or function that returns message to display if expression fails
   * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails
   * @param {Mixed} expected value (remember to check for negation)
   * @param {Mixed} actual (optional) will default to `this.obj`
   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails
   * @api private
   */

  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {
    var ok = util.test(this, arguments);
    if (false !== showDiff) showDiff = true;
    if (undefined === expected && undefined === _actual) showDiff = false;
    if (true !== config.showDiff) showDiff = false;

    if (!ok) {
      msg = util.getMessage(this, arguments);
      var actual = util.getActual(this, arguments);
      throw new AssertionError(msg, {
          actual: actual
        , expected: expected
        , showDiff: showDiff
      }, (config.includeStack) ? this.assert : flag(this, 'ssfi'));
    }
  };

  /*!
   * ### ._obj
   *
   * Quick reference to stored `actual` value for plugin developers.
   *
   * @api private
   */

  Object.defineProperty(Assertion.prototype, '_obj',
    { get: function () {
        return flag(this, 'object');
      }
    , set: function (val) {
        flag(this, 'object', val);
      }
  });
};


/***/ }),

/***/ "../node_modules/chai/lib/chai/config.js":
/*!***********************************************!*\
  !*** ../node_modules/chai/lib/chai/config.js ***!
  \***********************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module */
/*! CommonJS bailout: module.exports is used directly at 1:0-14 */
/***/ ((module) => {

module.exports = {

  /**
   * ### config.includeStack
   *
   * User configurable property, influences whether stack trace
   * is included in Assertion error message. Default of false
   * suppresses stack trace in the error message.
   *
   *     chai.config.includeStack = true;  // enable stack on error
   *
   * @param {Boolean}
   * @api public
   */

  includeStack: false,

  /**
   * ### config.showDiff
   *
   * User configurable property, influences whether or not
   * the `showDiff` flag should be included in the thrown
   * AssertionErrors. `false` will always be `false`; `true`
   * will be true when the assertion has requested a diff
   * be shown.
   *
   * @param {Boolean}
   * @api public
   */

  showDiff: true,

  /**
   * ### config.truncateThreshold
   *
   * User configurable property, sets length threshold for actual and
   * expected values in assertion errors. If this threshold is exceeded, for
   * example for large data structures, the value is replaced with something
   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.
   *
   * Set it to zero if you want to disable truncating altogether.
   *
   * This is especially userful when doing assertions on arrays: having this
   * set to a reasonable large value makes the failure messages readily
   * inspectable.
   *
   *     chai.config.truncateThreshold = 0;  // disable truncating
   *
   * @param {Number}
   * @api public
   */

  truncateThreshold: 40,

  /**
   * ### config.useProxy
   *
   * User configurable property, defines if chai will use a Proxy to throw
   * an error when a non-existent property is read, which protects users
   * from typos when using property-based assertions.
   *
   * Set it to false if you want to disable this feature.
   *
   *     chai.config.useProxy = false;  // disable use of Proxy
   *
   * This feature is automatically disabled regardless of this config value
   * in environments that don't support proxies.
   *
   * @param {Boolean}
   * @api public
   */

  useProxy: true,

  /**
   * ### config.proxyExcludedKeys
   *
   * User configurable property, defines which properties should be ignored
   * instead of throwing an error if they do not exist on the assertion.
   * This is only applied if the environment Chai is running in supports proxies and
   * if the `useProxy` configuration setting is enabled.
   * By default, `then` and `inspect` will not throw an error if they do not exist on the
   * assertion object because the `.inspect` property is read by `util.inspect` (for example, when
   * using `console.log` on the assertion object) and `.then` is necessary for promise type-checking.
   *
   *     // By default these keys will not throw an error if they do not exist on the assertion object
   *     chai.config.proxyExcludedKeys = ['then', 'inspect'];
   *
   * @param {Array}
   * @api public
   */

  proxyExcludedKeys: ['then', 'catch', 'inspect', 'toJSON']
};


/***/ }),

/***/ "../node_modules/chai/lib/chai/core/assertions.js":
/*!********************************************************!*\
  !*** ../node_modules/chai/lib/chai/core/assertions.js ***!
  \********************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module */
/*! CommonJS bailout: module.exports is used directly at 8:0-14 */
/***/ ((module) => {

/*!
 * chai
 * http://chaijs.com
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

module.exports = function (chai, _) {
  var Assertion = chai.Assertion
    , AssertionError = chai.AssertionError
    , flag = _.flag;

  /**
   * ### Language Chains
   *
   * The following are provided as chainable getters to improve the readability
   * of your assertions.
   *
   * **Chains**
   *
   * - to
   * - be
   * - been
   * - is
   * - that
   * - which
   * - and
   * - has
   * - have
   * - with
   * - at
   * - of
   * - same
   * - but
   * - does
   * - still
   *
   * @name language chains
   * @namespace BDD
   * @api public
   */

  [ 'to', 'be', 'been', 'is'
  , 'and', 'has', 'have', 'with'
  , 'that', 'which', 'at', 'of'
  , 'same', 'but', 'does', 'still' ].forEach(function (chain) {
    Assertion.addProperty(chain);
  });

  /**
   * ### .not
   *
   * Negates all assertions that follow in the chain.
   *
   *     expect(function () {}).to.not.throw();
   *     expect({a: 1}).to.not.have.property('b');
   *     expect([1, 2]).to.be.an('array').that.does.not.include(3);
   *
   * Just because you can negate any assertion with `.not` doesn't mean you
   * should. With great power comes great responsibility. It's often best to
   * assert that the one expected output was produced, rather than asserting
   * that one of countless unexpected outputs wasn't produced. See individual
   * assertions for specific guidance.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(2).to.not.equal(1); // Not recommended
   *
   * @name not
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('not', function () {
    flag(this, 'negate', true);
  });

  /**
   * ### .deep
   *
   * Causes all `.equal`, `.include`, `.members`, `.keys`, and `.property`
   * assertions that follow in the chain to use deep equality instead of strict
   * (`===`) equality. See the `deep-eql` project page for info on the deep
   * equality algorithm: https://github.com/chaijs/deep-eql.
   *
   *     // Target object deeply (but not strictly) equals `{a: 1}`
   *     expect({a: 1}).to.deep.equal({a: 1});
   *     expect({a: 1}).to.not.equal({a: 1});
   *
   *     // Target array deeply (but not strictly) includes `{a: 1}`
   *     expect([{a: 1}]).to.deep.include({a: 1});
   *     expect([{a: 1}]).to.not.include({a: 1});
   *
   *     // Target object deeply (but not strictly) includes `x: {a: 1}`
   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});
   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});
   *
   *     // Target array deeply (but not strictly) has member `{a: 1}`
   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);
   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);
   *
   *     // Target set deeply (but not strictly) has key `{a: 1}`
   *     expect(new Set([{a: 1}])).to.have.deep.keys([{a: 1}]);
   *     expect(new Set([{a: 1}])).to.not.have.keys([{a: 1}]);
   *
   *     // Target object deeply (but not strictly) has property `x: {a: 1}`
   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});
   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});
   *
   * @name deep
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('deep', function () {
    flag(this, 'deep', true);
  });

  /**
   * ### .nested
   *
   * Enables dot- and bracket-notation in all `.property` and `.include`
   * assertions that follow in the chain.
   *
   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');
   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});
   *
   * If `.` or `[]` are part of an actual property name, they can be escaped by
   * adding two backslashes before them.
   *
   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\.a.\\[b\\]');
   *     expect({'.a': {'[b]': 'x'}}).to.nested.include({'\\.a.\\[b\\]': 'x'});
   *
   * `.nested` cannot be combined with `.own`.
   *
   * @name nested
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('nested', function () {
    flag(this, 'nested', true);
  });

  /**
   * ### .own
   *
   * Causes all `.property` and `.include` assertions that follow in the chain
   * to ignore inherited properties.
   *
   *     Object.prototype.b = 2;
   *
   *     expect({a: 1}).to.have.own.property('a');
   *     expect({a: 1}).to.have.property('b');
   *     expect({a: 1}).to.not.have.own.property('b');
   *
   *     expect({a: 1}).to.own.include({a: 1});
   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});
   *
   * `.own` cannot be combined with `.nested`.
   *
   * @name own
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('own', function () {
    flag(this, 'own', true);
  });

  /**
   * ### .ordered
   *
   * Causes all `.members` assertions that follow in the chain to require that
   * members be in the same order.
   *
   *     expect([1, 2]).to.have.ordered.members([1, 2])
   *       .but.not.have.ordered.members([2, 1]);
   *
   * When `.include` and `.ordered` are combined, the ordering begins at the
   * start of both arrays.
   *
   *     expect([1, 2, 3]).to.include.ordered.members([1, 2])
   *       .but.not.include.ordered.members([2, 3]);
   *
   * @name ordered
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('ordered', function () {
    flag(this, 'ordered', true);
  });

  /**
   * ### .any
   *
   * Causes all `.keys` assertions that follow in the chain to only require that
   * the target have at least one of the given keys. This is the opposite of
   * `.all`, which requires that the target have all of the given keys.
   *
   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');
   *
   * See the `.keys` doc for guidance on when to use `.any` or `.all`.
   *
   * @name any
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('any', function () {
    flag(this, 'any', true);
    flag(this, 'all', false);
  });

  /**
   * ### .all
   *
   * Causes all `.keys` assertions that follow in the chain to require that the
   * target have all of the given keys. This is the opposite of `.any`, which
   * only requires that the target have at least one of the given keys.
   *
   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');
   *
   * Note that `.all` is used by default when neither `.all` nor `.any` are
   * added earlier in the chain. However, it's often best to add `.all` anyway
   * because it improves readability.
   *
   * See the `.keys` doc for guidance on when to use `.any` or `.all`.
   *
   * @name all
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('all', function () {
    flag(this, 'all', true);
    flag(this, 'any', false);
  });

  /**
   * ### .a(type[, msg])
   *
   * Asserts that the target's type is equal to the given string `type`. Types
   * are case insensitive. See the `type-detect` project page for info on the
   * type detection algorithm: https://github.com/chaijs/type-detect.
   *
   *     expect('foo').to.be.a('string');
   *     expect({a: 1}).to.be.an('object');
   *     expect(null).to.be.a('null');
   *     expect(undefined).to.be.an('undefined');
   *     expect(new Error).to.be.an('error');
   *     expect(Promise.resolve()).to.be.a('promise');
   *     expect(new Float32Array).to.be.a('float32array');
   *     expect(Symbol()).to.be.a('symbol');
   *
   * `.a` supports objects that have a custom type set via `Symbol.toStringTag`.
   *
   *     var myObj = {
   *       [Symbol.toStringTag]: 'myCustomType'
   *     };
   *
   *     expect(myObj).to.be.a('myCustomType').but.not.an('object');
   *
   * It's often best to use `.a` to check a target's type before making more
   * assertions on the same target. That way, you avoid unexpected behavior from
   * any assertion that does different things based on the target's type.
   *
   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);
   *     expect([]).to.be.an('array').that.is.empty;
   *
   * Add `.not` earlier in the chain to negate `.a`. However, it's often best to
   * assert that the target is the expected type, rather than asserting that it
   * isn't one of many unexpected types.
   *
   *     expect('foo').to.be.a('string'); // Recommended
   *     expect('foo').to.not.be.an('array'); // Not recommended
   *
   * `.a` accepts an optional `msg` argument which is a custom error message to
   * show when the assertion fails. The message can also be given as the second
   * argument to `expect`.
   *
   *     expect(1).to.be.a('string', 'nooo why fail??');
   *     expect(1, 'nooo why fail??').to.be.a('string');
   *
   * `.a` can also be used as a language chain to improve the readability of
   * your assertions.
   *
   *     expect({b: 2}).to.have.a.property('b');
   *
   * The alias `.an` can be used interchangeably with `.a`.
   *
   * @name a
   * @alias an
   * @param {String} type
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function an (type, msg) {
    if (msg) flag(this, 'message', msg);
    type = type.toLowerCase();
    var obj = flag(this, 'object')
      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';

    this.assert(
        type === _.type(obj).toLowerCase()
      , 'expected #{this} to be ' + article + type
      , 'expected #{this} not to be ' + article + type
    );
  }

  Assertion.addChainableMethod('an', an);
  Assertion.addChainableMethod('a', an);

  /**
   * ### .include(val[, msg])
   *
   * When the target is a string, `.include` asserts that the given string `val`
   * is a substring of the target.
   *
   *     expect('foobar').to.include('foo');
   *
   * When the target is an array, `.include` asserts that the given `val` is a
   * member of the target.
   *
   *     expect([1, 2, 3]).to.include(2);
   *
   * When the target is an object, `.include` asserts that the given object
   * `val`'s properties are a subset of the target's properties.
   *
   *     expect({a: 1, b: 2, c: 3}).to.include({a: 1, b: 2});
   *
   * When the target is a Set or WeakSet, `.include` asserts that the given `val` is a
   * member of the target. SameValueZero equality algorithm is used.
   *
   *     expect(new Set([1, 2])).to.include(2);
   *
   * When the target is a Map, `.include` asserts that the given `val` is one of
   * the values of the target. SameValueZero equality algorithm is used.
   *
   *     expect(new Map([['a', 1], ['b', 2]])).to.include(2);
   *
   * Because `.include` does different things based on the target's type, it's
   * important to check the target's type before using `.include`. See the `.a`
   * doc for info on testing a target's type.
   *
   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);
   *
   * By default, strict (`===`) equality is used to compare array members and
   * object properties. Add `.deep` earlier in the chain to use deep equality
   * instead (WeakSet targets are not supported). See the `deep-eql` project
   * page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.
   *
   *     // Target array deeply (but not strictly) includes `{a: 1}`
   *     expect([{a: 1}]).to.deep.include({a: 1});
   *     expect([{a: 1}]).to.not.include({a: 1});
   *
   *     // Target object deeply (but not strictly) includes `x: {a: 1}`
   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});
   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});
   *
   * By default, all of the target's properties are searched when working with
   * objects. This includes properties that are inherited and/or non-enumerable.
   * Add `.own` earlier in the chain to exclude the target's inherited
   * properties from the search.
   *
   *     Object.prototype.b = 2;
   *
   *     expect({a: 1}).to.own.include({a: 1});
   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});
   *
   * Note that a target object is always only searched for `val`'s own
   * enumerable properties.
   *
   * `.deep` and `.own` can be combined.
   *
   *     expect({a: {b: 2}}).to.deep.own.include({a: {b: 2}});
   *
   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when
   * referencing nested properties.
   *
   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});
   *
   * If `.` or `[]` are part of an actual property name, they can be escaped by
   * adding two backslashes before them.
   *
   *     expect({'.a': {'[b]': 2}}).to.nested.include({'\\.a.\\[b\\]': 2});
   *
   * `.deep` and `.nested` can be combined.
   *
   *     expect({a: {b: [{c: 3}]}}).to.deep.nested.include({'a.b[0]': {c: 3}});
   *
   * `.own` and `.nested` cannot be combined.
   *
   * Add `.not` earlier in the chain to negate `.include`.
   *
   *     expect('foobar').to.not.include('taco');
   *     expect([1, 2, 3]).to.not.include(4);
   *
   * However, it's dangerous to negate `.include` when the target is an object.
   * The problem is that it creates uncertain expectations by asserting that the
   * target object doesn't have all of `val`'s key/value pairs but may or may
   * not have some of them. It's often best to identify the exact output that's
   * expected, and then write an assertion that only accepts that exact output.
   *
   * When the target object isn't even expected to have `val`'s keys, it's
   * often best to assert exactly that.
   *
   *     expect({c: 3}).to.not.have.any.keys('a', 'b'); // Recommended
   *     expect({c: 3}).to.not.include({a: 1, b: 2}); // Not recommended
   *
   * When the target object is expected to have `val`'s keys, it's often best to
   * assert that each of the properties has its expected value, rather than
   * asserting that each property doesn't have one of many unexpected values.
   *
   *     expect({a: 3, b: 4}).to.include({a: 3, b: 4}); // Recommended
   *     expect({a: 3, b: 4}).to.not.include({a: 1, b: 2}); // Not recommended
   *
   * `.include` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect([1, 2, 3]).to.include(4, 'nooo why fail??');
   *     expect([1, 2, 3], 'nooo why fail??').to.include(4);
   *
   * `.include` can also be used as a language chain, causing all `.members` and
   * `.keys` assertions that follow in the chain to require the target to be a
   * superset of the expected set, rather than an identical set. Note that
   * `.members` ignores duplicates in the subset when `.include` is added.
   *
   *     // Target object's keys are a superset of ['a', 'b'] but not identical
   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');
   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');
   *
   *     // Target array is a superset of [1, 2] but not identical
   *     expect([1, 2, 3]).to.include.members([1, 2]);
   *     expect([1, 2, 3]).to.not.have.members([1, 2]);
   *
   *     // Duplicates in the subset are ignored
   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);
   *
   * Note that adding `.any` earlier in the chain causes the `.keys` assertion
   * to ignore `.include`.
   *
   *     // Both assertions are identical
   *     expect({a: 1}).to.include.any.keys('a', 'b');
   *     expect({a: 1}).to.have.any.keys('a', 'b');
   *
   * The aliases `.includes`, `.contain`, and `.contains` can be used
   * interchangeably with `.include`.
   *
   * @name include
   * @alias contain
   * @alias includes
   * @alias contains
   * @param {Mixed} val
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function SameValueZero(a, b) {
    return (_.isNaN(a) && _.isNaN(b)) || a === b;
  }

  function includeChainingBehavior () {
    flag(this, 'contains', true);
  }

  function include (val, msg) {
    if (msg) flag(this, 'message', msg);

    var obj = flag(this, 'object')
      , objType = _.type(obj).toLowerCase()
      , flagMsg = flag(this, 'message')
      , negate = flag(this, 'negate')
      , ssfi = flag(this, 'ssfi')
      , isDeep = flag(this, 'deep')
      , descriptor = isDeep ? 'deep ' : '';

    flagMsg = flagMsg ? flagMsg + ': ' : '';

    var included = false;

    switch (objType) {
      case 'string':
        included = obj.indexOf(val) !== -1;
        break;

      case 'weakset':
        if (isDeep) {
          throw new AssertionError(
            flagMsg + 'unable to use .deep.include with WeakSet',
            undefined,
            ssfi
          );
        }

        included = obj.has(val);
        break;

      case 'map':
        var isEql = isDeep ? _.eql : SameValueZero;
        obj.forEach(function (item) {
          included = included || isEql(item, val);
        });
        break;

      case 'set':
        if (isDeep) {
          obj.forEach(function (item) {
            included = included || _.eql(item, val);
          });
        } else {
          included = obj.has(val);
        }
        break;

      case 'array':
        if (isDeep) {
          included = obj.some(function (item) {
            return _.eql(item, val);
          })
        } else {
          included = obj.indexOf(val) !== -1;
        }
        break;

      default:
        // This block is for asserting a subset of properties in an object.
        // `_.expectTypes` isn't used here because `.include` should work with
        // objects with a custom `@@toStringTag`.
        if (val !== Object(val)) {
          throw new AssertionError(
            flagMsg + 'object tested must be an array, a map, an object,'
              + ' a set, a string, or a weakset, but ' + objType + ' given',
            undefined,
            ssfi
          );
        }

        var props = Object.keys(val)
          , firstErr = null
          , numErrs = 0;

        props.forEach(function (prop) {
          var propAssertion = new Assertion(obj);
          _.transferFlags(this, propAssertion, true);
          flag(propAssertion, 'lockSsfi', true);

          if (!negate || props.length === 1) {
            propAssertion.property(prop, val[prop]);
            return;
          }

          try {
            propAssertion.property(prop, val[prop]);
          } catch (err) {
            if (!_.checkError.compatibleConstructor(err, AssertionError)) {
              throw err;
            }
            if (firstErr === null) firstErr = err;
            numErrs++;
          }
        }, this);

        // When validating .not.include with multiple properties, we only want
        // to throw an assertion error if all of the properties are included,
        // in which case we throw the first property assertion error that we
        // encountered.
        if (negate && props.length > 1 && numErrs === props.length) {
          throw firstErr;
        }
        return;
    }

    // Assert inclusion in collection or substring in a string.
    this.assert(
      included
      , 'expected #{this} to ' + descriptor + 'include ' + _.inspect(val)
      , 'expected #{this} to not ' + descriptor + 'include ' + _.inspect(val));
  }

  Assertion.addChainableMethod('include', include, includeChainingBehavior);
  Assertion.addChainableMethod('contain', include, includeChainingBehavior);
  Assertion.addChainableMethod('contains', include, includeChainingBehavior);
  Assertion.addChainableMethod('includes', include, includeChainingBehavior);

  /**
   * ### .ok
   *
   * Asserts that the target is a truthy value (considered `true` in boolean context).
   * However, it's often best to assert that the target is strictly (`===`) or
   * deeply equal to its expected value.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.be.ok; // Not recommended
   *
   *     expect(true).to.be.true; // Recommended
   *     expect(true).to.be.ok; // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.ok`.
   *
   *     expect(0).to.equal(0); // Recommended
   *     expect(0).to.not.be.ok; // Not recommended
   *
   *     expect(false).to.be.false; // Recommended
   *     expect(false).to.not.be.ok; // Not recommended
   *
   *     expect(null).to.be.null; // Recommended
   *     expect(null).to.not.be.ok; // Not recommended
   *
   *     expect(undefined).to.be.undefined; // Recommended
   *     expect(undefined).to.not.be.ok; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(false, 'nooo why fail??').to.be.ok;
   *
   * @name ok
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('ok', function () {
    this.assert(
        flag(this, 'object')
      , 'expected #{this} to be truthy'
      , 'expected #{this} to be falsy');
  });

  /**
   * ### .true
   *
   * Asserts that the target is strictly (`===`) equal to `true`.
   *
   *     expect(true).to.be.true;
   *
   * Add `.not` earlier in the chain to negate `.true`. However, it's often best
   * to assert that the target is equal to its expected value, rather than not
   * equal to `true`.
   *
   *     expect(false).to.be.false; // Recommended
   *     expect(false).to.not.be.true; // Not recommended
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.true; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(false, 'nooo why fail??').to.be.true;
   *
   * @name true
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('true', function () {
    this.assert(
        true === flag(this, 'object')
      , 'expected #{this} to be true'
      , 'expected #{this} to be false'
      , flag(this, 'negate') ? false : true
    );
  });

  /**
   * ### .false
   *
   * Asserts that the target is strictly (`===`) equal to `false`.
   *
   *     expect(false).to.be.false;
   *
   * Add `.not` earlier in the chain to negate `.false`. However, it's often
   * best to assert that the target is equal to its expected value, rather than
   * not equal to `false`.
   *
   *     expect(true).to.be.true; // Recommended
   *     expect(true).to.not.be.false; // Not recommended
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.false; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(true, 'nooo why fail??').to.be.false;
   *
   * @name false
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('false', function () {
    this.assert(
        false === flag(this, 'object')
      , 'expected #{this} to be false'
      , 'expected #{this} to be true'
      , flag(this, 'negate') ? true : false
    );
  });

  /**
   * ### .null
   *
   * Asserts that the target is strictly (`===`) equal to `null`.
   *
   *     expect(null).to.be.null;
   *
   * Add `.not` earlier in the chain to negate `.null`. However, it's often best
   * to assert that the target is equal to its expected value, rather than not
   * equal to `null`.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.null; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(42, 'nooo why fail??').to.be.null;
   *
   * @name null
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('null', function () {
    this.assert(
        null === flag(this, 'object')
      , 'expected #{this} to be null'
      , 'expected #{this} not to be null'
    );
  });

  /**
   * ### .undefined
   *
   * Asserts that the target is strictly (`===`) equal to `undefined`.
   *
   *     expect(undefined).to.be.undefined;
   *
   * Add `.not` earlier in the chain to negate `.undefined`. However, it's often
   * best to assert that the target is equal to its expected value, rather than
   * not equal to `undefined`.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.undefined; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(42, 'nooo why fail??').to.be.undefined;
   *
   * @name undefined
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('undefined', function () {
    this.assert(
        undefined === flag(this, 'object')
      , 'expected #{this} to be undefined'
      , 'expected #{this} not to be undefined'
    );
  });

  /**
   * ### .NaN
   *
   * Asserts that the target is exactly `NaN`.
   *
   *     expect(NaN).to.be.NaN;
   *
   * Add `.not` earlier in the chain to negate `.NaN`. However, it's often best
   * to assert that the target is equal to its expected value, rather than not
   * equal to `NaN`.
   *
   *     expect('foo').to.equal('foo'); // Recommended
   *     expect('foo').to.not.be.NaN; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(42, 'nooo why fail??').to.be.NaN;
   *
   * @name NaN
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('NaN', function () {
    this.assert(
        _.isNaN(flag(this, 'object'))
        , 'expected #{this} to be NaN'
        , 'expected #{this} not to be NaN'
    );
  });

  /**
   * ### .exist
   *
   * Asserts that the target is not strictly (`===`) equal to either `null` or
   * `undefined`. However, it's often best to assert that the target is equal to
   * its expected value.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.exist; // Not recommended
   *
   *     expect(0).to.equal(0); // Recommended
   *     expect(0).to.exist; // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.exist`.
   *
   *     expect(null).to.be.null; // Recommended
   *     expect(null).to.not.exist; // Not recommended
   *
   *     expect(undefined).to.be.undefined; // Recommended
   *     expect(undefined).to.not.exist; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(null, 'nooo why fail??').to.exist;
   *
   * @name exist
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('exist', function () {
    var val = flag(this, 'object');
    this.assert(
        val !== null && val !== undefined
      , 'expected #{this} to exist'
      , 'expected #{this} to not exist'
    );
  });

  /**
   * ### .empty
   *
   * When the target is a string or array, `.empty` asserts that the target's
   * `length` property is strictly (`===`) equal to `0`.
   *
   *     expect([]).to.be.empty;
   *     expect('').to.be.empty;
   *
   * When the target is a map or set, `.empty` asserts that the target's `size`
   * property is strictly equal to `0`.
   *
   *     expect(new Set()).to.be.empty;
   *     expect(new Map()).to.be.empty;
   *
   * When the target is a non-function object, `.empty` asserts that the target
   * doesn't have any own enumerable properties. Properties with Symbol-based
   * keys are excluded from the count.
   *
   *     expect({}).to.be.empty;
   *
   * Because `.empty` does different things based on the target's type, it's
   * important to check the target's type before using `.empty`. See the `.a`
   * doc for info on testing a target's type.
   *
   *     expect([]).to.be.an('array').that.is.empty;
   *
   * Add `.not` earlier in the chain to negate `.empty`. However, it's often
   * best to assert that the target contains its expected number of values,
   * rather than asserting that it's not empty.
   *
   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended
   *     expect([1, 2, 3]).to.not.be.empty; // Not recommended
   *
   *     expect(new Set([1, 2, 3])).to.have.property('size', 3); // Recommended
   *     expect(new Set([1, 2, 3])).to.not.be.empty; // Not recommended
   *
   *     expect(Object.keys({a: 1})).to.have.lengthOf(1); // Recommended
   *     expect({a: 1}).to.not.be.empty; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect([1, 2, 3], 'nooo why fail??').to.be.empty;
   *
   * @name empty
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('empty', function () {
    var val = flag(this, 'object')
      , ssfi = flag(this, 'ssfi')
      , flagMsg = flag(this, 'message')
      , itemsCount;

    flagMsg = flagMsg ? flagMsg + ': ' : '';

    switch (_.type(val).toLowerCase()) {
      case 'array':
      case 'string':
        itemsCount = val.length;
        break;
      case 'map':
      case 'set':
        itemsCount = val.size;
        break;
      case 'weakmap':
      case 'weakset':
        throw new AssertionError(
          flagMsg + '.empty was passed a weak collection',
          undefined,
          ssfi
        );
      case 'function':
        var msg = flagMsg + '.empty was passed a function ' + _.getName(val);
        throw new AssertionError(msg.trim(), undefined, ssfi);
      default:
        if (val !== Object(val)) {
          throw new AssertionError(
            flagMsg + '.empty was passed non-string primitive ' + _.inspect(val),
            undefined,
            ssfi
          );
        }
        itemsCount = Object.keys(val).length;
    }

    this.assert(
        0 === itemsCount
      , 'expected #{this} to be empty'
      , 'expected #{this} not to be empty'
    );
  });

  /**
   * ### .arguments
   *
   * Asserts that the target is an `arguments` object.
   *
   *     function test () {
   *       expect(arguments).to.be.arguments;
   *     }
   *
   *     test();
   *
   * Add `.not` earlier in the chain to negate `.arguments`. However, it's often
   * best to assert which type the target is expected to be, rather than
   * asserting that its not an `arguments` object.
   *
   *     expect('foo').to.be.a('string'); // Recommended
   *     expect('foo').to.not.be.arguments; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect({}, 'nooo why fail??').to.be.arguments;
   *
   * The alias `.Arguments` can be used interchangeably with `.arguments`.
   *
   * @name arguments
   * @alias Arguments
   * @namespace BDD
   * @api public
   */

  function checkArguments () {
    var obj = flag(this, 'object')
      , type = _.type(obj);
    this.assert(
        'Arguments' === type
      , 'expected #{this} to be arguments but got ' + type
      , 'expected #{this} to not be arguments'
    );
  }

  Assertion.addProperty('arguments', checkArguments);
  Assertion.addProperty('Arguments', checkArguments);

  /**
   * ### .equal(val[, msg])
   *
   * Asserts that the target is strictly (`===`) equal to the given `val`.
   *
   *     expect(1).to.equal(1);
   *     expect('foo').to.equal('foo');
   *
   * Add `.deep` earlier in the chain to use deep equality instead. See the
   * `deep-eql` project page for info on the deep equality algorithm:
   * https://github.com/chaijs/deep-eql.
   *
   *     // Target object deeply (but not strictly) equals `{a: 1}`
   *     expect({a: 1}).to.deep.equal({a: 1});
   *     expect({a: 1}).to.not.equal({a: 1});
   *
   *     // Target array deeply (but not strictly) equals `[1, 2]`
   *     expect([1, 2]).to.deep.equal([1, 2]);
   *     expect([1, 2]).to.not.equal([1, 2]);
   *
   * Add `.not` earlier in the chain to negate `.equal`. However, it's often
   * best to assert that the target is equal to its expected value, rather than
   * not equal to one of countless unexpected values.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.equal(2); // Not recommended
   *
   * `.equal` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect(1).to.equal(2, 'nooo why fail??');
   *     expect(1, 'nooo why fail??').to.equal(2);
   *
   * The aliases `.equals` and `eq` can be used interchangeably with `.equal`.
   *
   * @name equal
   * @alias equals
   * @alias eq
   * @param {Mixed} val
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertEqual (val, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    if (flag(this, 'deep')) {
      var prevLockSsfi = flag(this, 'lockSsfi');
      flag(this, 'lockSsfi', true);
      this.eql(val);
      flag(this, 'lockSsfi', prevLockSsfi);
    } else {
      this.assert(
          val === obj
        , 'expected #{this} to equal #{exp}'
        , 'expected #{this} to not equal #{exp}'
        , val
        , this._obj
        , true
      );
    }
  }

  Assertion.addMethod('equal', assertEqual);
  Assertion.addMethod('equals', assertEqual);
  Assertion.addMethod('eq', assertEqual);

  /**
   * ### .eql(obj[, msg])
   *
   * Asserts that the target is deeply equal to the given `obj`. See the
   * `deep-eql` project page for info on the deep equality algorithm:
   * https://github.com/chaijs/deep-eql.
   *
   *     // Target object is deeply (but not strictly) equal to {a: 1}
   *     expect({a: 1}).to.eql({a: 1}).but.not.equal({a: 1});
   *
   *     // Target array is deeply (but not strictly) equal to [1, 2]
   *     expect([1, 2]).to.eql([1, 2]).but.not.equal([1, 2]);
   *
   * Add `.not` earlier in the chain to negate `.eql`. However, it's often best
   * to assert that the target is deeply equal to its expected value, rather
   * than not deeply equal to one of countless unexpected values.
   *
   *     expect({a: 1}).to.eql({a: 1}); // Recommended
   *     expect({a: 1}).to.not.eql({b: 2}); // Not recommended
   *
   * `.eql` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect({a: 1}).to.eql({b: 2}, 'nooo why fail??');
   *     expect({a: 1}, 'nooo why fail??').to.eql({b: 2});
   *
   * The alias `.eqls` can be used interchangeably with `.eql`.
   *
   * The `.deep.equal` assertion is almost identical to `.eql` but with one
   * difference: `.deep.equal` causes deep equality comparisons to also be used
   * for any other assertions that follow in the chain.
   *
   * @name eql
   * @alias eqls
   * @param {Mixed} obj
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertEql(obj, msg) {
    if (msg) flag(this, 'message', msg);
    this.assert(
        _.eql(obj, flag(this, 'object'))
      , 'expected #{this} to deeply equal #{exp}'
      , 'expected #{this} to not deeply equal #{exp}'
      , obj
      , this._obj
      , true
    );
  }

  Assertion.addMethod('eql', assertEql);
  Assertion.addMethod('eqls', assertEql);

  /**
   * ### .above(n[, msg])
   *
   * Asserts that the target is a number or a date greater than the given number or date `n` respectively.
   * However, it's often best to assert that the target is equal to its expected
   * value.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(2).to.be.above(1); // Not recommended
   *
   * Add `.lengthOf` earlier in the chain to assert that the target's `length`
   * or `size` is greater than the given number `n`.
   *
   *     expect('foo').to.have.lengthOf(3); // Recommended
   *     expect('foo').to.have.lengthOf.above(2); // Not recommended
   *
   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended
   *     expect([1, 2, 3]).to.have.lengthOf.above(2); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.above`.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(1).to.not.be.above(2); // Not recommended
   *
   * `.above` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect(1).to.be.above(2, 'nooo why fail??');
   *     expect(1, 'nooo why fail??').to.be.above(2);
   *
   * The aliases `.gt` and `.greaterThan` can be used interchangeably with
   * `.above`.
   *
   * @name above
   * @alias gt
   * @alias greaterThan
   * @param {Number} n
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertAbove (n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , doLength = flag(this, 'doLength')
      , flagMsg = flag(this, 'message')
      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')
      , ssfi = flag(this, 'ssfi')
      , objType = _.type(obj).toLowerCase()
      , nType = _.type(n).toLowerCase()
      , errorMessage
      , shouldThrow = true;

    if (doLength && objType !== 'map' && objType !== 'set') {
      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
    }

    if (!doLength && (objType === 'date' && nType !== 'date')) {
      errorMessage = msgPrefix + 'the argument to above must be a date';
    } else if (nType !== 'number' && (doLength || objType === 'number')) {
      errorMessage = msgPrefix + 'the argument to above must be a number';
    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {
      var printObj = (objType === 'string') ? "'" + obj + "'" : obj;
      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
    } else {
      shouldThrow = false;
    }

    if (shouldThrow) {
      throw new AssertionError(errorMessage, undefined, ssfi);
    }

    if (doLength) {
      var descriptor = 'length'
        , itemsCount;
      if (objType === 'map' || objType === 'set') {
        descriptor = 'size';
        itemsCount = obj.size;
      } else {
        itemsCount = obj.length;
      }
      this.assert(
          itemsCount > n
        , 'expected #{this} to have a ' + descriptor + ' above #{exp} but got #{act}'
        , 'expected #{this} to not have a ' + descriptor + ' above #{exp}'
        , n
        , itemsCount
      );
    } else {
      this.assert(
          obj > n
        , 'expected #{this} to be above #{exp}'
        , 'expected #{this} to be at most #{exp}'
        , n
      );
    }
  }

  Assertion.addMethod('above', assertAbove);
  Assertion.addMethod('gt', assertAbove);
  Assertion.addMethod('greaterThan', assertAbove);

  /**
   * ### .least(n[, msg])
   *
   * Asserts that the target is a number or a date greater than or equal to the given
   * number or date `n` respectively. However, it's often best to assert that the target is equal to
   * its expected value.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(2).to.be.at.least(1); // Not recommended
   *     expect(2).to.be.at.least(2); // Not recommended
   *
   * Add `.lengthOf` earlier in the chain to assert that the target's `length`
   * or `size` is greater than or equal to the given number `n`.
   *
   *     expect('foo').to.have.lengthOf(3); // Recommended
   *     expect('foo').to.have.lengthOf.at.least(2); // Not recommended
   *
   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended
   *     expect([1, 2, 3]).to.have.lengthOf.at.least(2); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.least`.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.at.least(2); // Not recommended
   *
   * `.least` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect(1).to.be.at.least(2, 'nooo why fail??');
   *     expect(1, 'nooo why fail??').to.be.at.least(2);
   *
   * The alias `.gte` can be used interchangeably with `.least`.
   *
   * @name least
   * @alias gte
   * @param {Number} n
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertLeast (n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , doLength = flag(this, 'doLength')
      , flagMsg = flag(this, 'message')
      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')
      , ssfi = flag(this, 'ssfi')
      , objType = _.type(obj).toLowerCase()
      , nType = _.type(n).toLowerCase()
      , errorMessage
      , shouldThrow = true;

    if (doLength && objType !== 'map' && objType !== 'set') {
      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
    }

    if (!doLength && (objType === 'date' && nType !== 'date')) {
      errorMessage = msgPrefix + 'the argument to least must be a date';
    } else if (nType !== 'number' && (doLength || objType === 'number')) {
      errorMessage = msgPrefix + 'the argument to least must be a number';
    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {
      var printObj = (objType === 'string') ? "'" + obj + "'" : obj;
      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
    } else {
      shouldThrow = false;
    }

    if (shouldThrow) {
      throw new AssertionError(errorMessage, undefined, ssfi);
    }

    if (doLength) {
      var descriptor = 'length'
        , itemsCount;
      if (objType === 'map' || objType === 'set') {
        descriptor = 'size';
        itemsCount = obj.size;
      } else {
        itemsCount = obj.length;
      }
      this.assert(
          itemsCount >= n
        , 'expected #{this} to have a ' + descriptor + ' at least #{exp} but got #{act}'
        , 'expected #{this} to have a ' + descriptor + ' below #{exp}'
        , n
        , itemsCount
      );
    } else {
      this.assert(
          obj >= n
        , 'expected #{this} to be at least #{exp}'
        , 'expected #{this} to be below #{exp}'
        , n
      );
    }
  }

  Assertion.addMethod('least', assertLeast);
  Assertion.addMethod('gte', assertLeast);

  /**
   * ### .below(n[, msg])
   *
   * Asserts that the target is a number or a date less than the given number or date `n` respectively.
   * However, it's often best to assert that the target is equal to its expected
   * value.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.be.below(2); // Not recommended
   *
   * Add `.lengthOf` earlier in the chain to assert that the target's `length`
   * or `size` is less than the given number `n`.
   *
   *     expect('foo').to.have.lengthOf(3); // Recommended
   *     expect('foo').to.have.lengthOf.below(4); // Not recommended
   *
   *     expect([1, 2, 3]).to.have.length(3); // Recommended
   *     expect([1, 2, 3]).to.have.lengthOf.below(4); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.below`.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(2).to.not.be.below(1); // Not recommended
   *
   * `.below` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect(2).to.be.below(1, 'nooo why fail??');
   *     expect(2, 'nooo why fail??').to.be.below(1);
   *
   * The aliases `.lt` and `.lessThan` can be used interchangeably with
   * `.below`.
   *
   * @name below
   * @alias lt
   * @alias lessThan
   * @param {Number} n
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertBelow (n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , doLength = flag(this, 'doLength')
      , flagMsg = flag(this, 'message')
      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')
      , ssfi = flag(this, 'ssfi')
      , objType = _.type(obj).toLowerCase()
      , nType = _.type(n).toLowerCase()
      , errorMessage
      , shouldThrow = true;

    if (doLength && objType !== 'map' && objType !== 'set') {
      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
    }

    if (!doLength && (objType === 'date' && nType !== 'date')) {
      errorMessage = msgPrefix + 'the argument to below must be a date';
    } else if (nType !== 'number' && (doLength || objType === 'number')) {
      errorMessage = msgPrefix + 'the argument to below must be a number';
    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {
      var printObj = (objType === 'string') ? "'" + obj + "'" : obj;
      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
    } else {
      shouldThrow = false;
    }

    if (shouldThrow) {
      throw new AssertionError(errorMessage, undefined, ssfi);
    }

    if (doLength) {
      var descriptor = 'length'
        , itemsCount;
      if (objType === 'map' || objType === 'set') {
        descriptor = 'size';
        itemsCount = obj.size;
      } else {
        itemsCount = obj.length;
      }
      this.assert(
          itemsCount < n
        , 'expected #{this} to have a ' + descriptor + ' below #{exp} but got #{act}'
        , 'expected #{this} to not have a ' + descriptor + ' below #{exp}'
        , n
        , itemsCount
      );
    } else {
      this.assert(
          obj < n
        , 'expected #{this} to be below #{exp}'
        , 'expected #{this} to be at least #{exp}'
        , n
      );
    }
  }

  Assertion.addMethod('below', assertBelow);
  Assertion.addMethod('lt', assertBelow);
  Assertion.addMethod('lessThan', assertBelow);

  /**
   * ### .most(n[, msg])
   *
   * Asserts that the target is a number or a date less than or equal to the given number
   * or date `n` respectively. However, it's often best to assert that the target is equal to its
   * expected value.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.be.at.most(2); // Not recommended
   *     expect(1).to.be.at.most(1); // Not recommended
   *
   * Add `.lengthOf` earlier in the chain to assert that the target's `length`
   * or `size` is less than or equal to the given number `n`.
   *
   *     expect('foo').to.have.lengthOf(3); // Recommended
   *     expect('foo').to.have.lengthOf.at.most(4); // Not recommended
   *
   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended
   *     expect([1, 2, 3]).to.have.lengthOf.at.most(4); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.most`.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(2).to.not.be.at.most(1); // Not recommended
   *
   * `.most` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect(2).to.be.at.most(1, 'nooo why fail??');
   *     expect(2, 'nooo why fail??').to.be.at.most(1);
   *
   * The alias `.lte` can be used interchangeably with `.most`.
   *
   * @name most
   * @alias lte
   * @param {Number} n
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertMost (n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , doLength = flag(this, 'doLength')
      , flagMsg = flag(this, 'message')
      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')
      , ssfi = flag(this, 'ssfi')
      , objType = _.type(obj).toLowerCase()
      , nType = _.type(n).toLowerCase()
      , errorMessage
      , shouldThrow = true;

    if (doLength && objType !== 'map' && objType !== 'set') {
      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
    }

    if (!doLength && (objType === 'date' && nType !== 'date')) {
      errorMessage = msgPrefix + 'the argument to most must be a date';
    } else if (nType !== 'number' && (doLength || objType === 'number')) {
      errorMessage = msgPrefix + 'the argument to most must be a number';
    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {
      var printObj = (objType === 'string') ? "'" + obj + "'" : obj;
      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
    } else {
      shouldThrow = false;
    }

    if (shouldThrow) {
      throw new AssertionError(errorMessage, undefined, ssfi);
    }

    if (doLength) {
      var descriptor = 'length'
        , itemsCount;
      if (objType === 'map' || objType === 'set') {
        descriptor = 'size';
        itemsCount = obj.size;
      } else {
        itemsCount = obj.length;
      }
      this.assert(
          itemsCount <= n
        , 'expected #{this} to have a ' + descriptor + ' at most #{exp} but got #{act}'
        , 'expected #{this} to have a ' + descriptor + ' above #{exp}'
        , n
        , itemsCount
      );
    } else {
      this.assert(
          obj <= n
        , 'expected #{this} to be at most #{exp}'
        , 'expected #{this} to be above #{exp}'
        , n
      );
    }
  }

  Assertion.addMethod('most', assertMost);
  Assertion.addMethod('lte', assertMost);

  /**
   * ### .within(start, finish[, msg])
   *
   * Asserts that the target is a number or a date greater than or equal to the given
   * number or date `start`, and less than or equal to the given number or date `finish` respectively.
   * However, it's often best to assert that the target is equal to its expected
   * value.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(2).to.be.within(1, 3); // Not recommended
   *     expect(2).to.be.within(2, 3); // Not recommended
   *     expect(2).to.be.within(1, 2); // Not recommended
   *
   * Add `.lengthOf` earlier in the chain to assert that the target's `length`
   * or `size` is greater than or equal to the given number `start`, and less
   * than or equal to the given number `finish`.
   *
   *     expect('foo').to.have.lengthOf(3); // Recommended
   *     expect('foo').to.have.lengthOf.within(2, 4); // Not recommended
   *
   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended
   *     expect([1, 2, 3]).to.have.lengthOf.within(2, 4); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.within`.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.within(2, 4); // Not recommended
   *
   * `.within` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect(4).to.be.within(1, 3, 'nooo why fail??');
   *     expect(4, 'nooo why fail??').to.be.within(1, 3);
   *
   * @name within
   * @param {Number} start lower bound inclusive
   * @param {Number} finish upper bound inclusive
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  Assertion.addMethod('within', function (start, finish, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , doLength = flag(this, 'doLength')
      , flagMsg = flag(this, 'message')
      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')
      , ssfi = flag(this, 'ssfi')
      , objType = _.type(obj).toLowerCase()
      , startType = _.type(start).toLowerCase()
      , finishType = _.type(finish).toLowerCase()
      , errorMessage
      , shouldThrow = true
      , range = (startType === 'date' && finishType === 'date')
          ? start.toUTCString() + '..' + finish.toUTCString()
          : start + '..' + finish;

    if (doLength && objType !== 'map' && objType !== 'set') {
      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
    }

    if (!doLength && (objType === 'date' && (startType !== 'date' || finishType !== 'date'))) {
      errorMessage = msgPrefix + 'the arguments to within must be dates';
    } else if ((startType !== 'number' || finishType !== 'number') && (doLength || objType === 'number')) {
      errorMessage = msgPrefix + 'the arguments to within must be numbers';
    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {
      var printObj = (objType === 'string') ? "'" + obj + "'" : obj;
      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
    } else {
      shouldThrow = false;
    }

    if (shouldThrow) {
      throw new AssertionError(errorMessage, undefined, ssfi);
    }

    if (doLength) {
      var descriptor = 'length'
        , itemsCount;
      if (objType === 'map' || objType === 'set') {
        descriptor = 'size';
        itemsCount = obj.size;
      } else {
        itemsCount = obj.length;
      }
      this.assert(
          itemsCount >= start && itemsCount <= finish
        , 'expected #{this} to have a ' + descriptor + ' within ' + range
        , 'expected #{this} to not have a ' + descriptor + ' within ' + range
      );
    } else {
      this.assert(
          obj >= start && obj <= finish
        , 'expected #{this} to be within ' + range
        , 'expected #{this} to not be within ' + range
      );
    }
  });

  /**
   * ### .instanceof(constructor[, msg])
   *
   * Asserts that the target is an instance of the given `constructor`.
   *
   *     function Cat () { }
   *
   *     expect(new Cat()).to.be.an.instanceof(Cat);
   *     expect([1, 2]).to.be.an.instanceof(Array);
   *
   * Add `.not` earlier in the chain to negate `.instanceof`.
   *
   *     expect({a: 1}).to.not.be.an.instanceof(Array);
   *
   * `.instanceof` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect(1).to.be.an.instanceof(Array, 'nooo why fail??');
   *     expect(1, 'nooo why fail??').to.be.an.instanceof(Array);
   *
   * Due to limitations in ES5, `.instanceof` may not always work as expected
   * when using a transpiler such as Babel or TypeScript. In particular, it may
   * produce unexpected results when subclassing built-in object such as
   * `Array`, `Error`, and `Map`. See your transpiler's docs for details:
   *
   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))
   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))
   *
   * The alias `.instanceOf` can be used interchangeably with `.instanceof`.
   *
   * @name instanceof
   * @param {Constructor} constructor
   * @param {String} msg _optional_
   * @alias instanceOf
   * @namespace BDD
   * @api public
   */

  function assertInstanceOf (constructor, msg) {
    if (msg) flag(this, 'message', msg);

    var target = flag(this, 'object')
    var ssfi = flag(this, 'ssfi');
    var flagMsg = flag(this, 'message');

    try {
      var isInstanceOf = target instanceof constructor;
    } catch (err) {
      if (err instanceof TypeError) {
        flagMsg = flagMsg ? flagMsg + ': ' : '';
        throw new AssertionError(
          flagMsg + 'The instanceof assertion needs a constructor but '
            + _.type(constructor) + ' was given.',
          undefined,
          ssfi
        );
      }
      throw err;
    }

    var name = _.getName(constructor);
    if (name === null) {
      name = 'an unnamed constructor';
    }

    this.assert(
        isInstanceOf
      , 'expected #{this} to be an instance of ' + name
      , 'expected #{this} to not be an instance of ' + name
    );
  };

  Assertion.addMethod('instanceof', assertInstanceOf);
  Assertion.addMethod('instanceOf', assertInstanceOf);

  /**
   * ### .property(name[, val[, msg]])
   *
   * Asserts that the target has a property with the given key `name`.
   *
   *     expect({a: 1}).to.have.property('a');
   *
   * When `val` is provided, `.property` also asserts that the property's value
   * is equal to the given `val`.
   *
   *     expect({a: 1}).to.have.property('a', 1);
   *
   * By default, strict (`===`) equality is used. Add `.deep` earlier in the
   * chain to use deep equality instead. See the `deep-eql` project page for
   * info on the deep equality algorithm: https://github.com/chaijs/deep-eql.
   *
   *     // Target object deeply (but not strictly) has property `x: {a: 1}`
   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});
   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});
   *
   * The target's enumerable and non-enumerable properties are always included
   * in the search. By default, both own and inherited properties are included.
   * Add `.own` earlier in the chain to exclude inherited properties from the
   * search.
   *
   *     Object.prototype.b = 2;
   *
   *     expect({a: 1}).to.have.own.property('a');
   *     expect({a: 1}).to.have.own.property('a', 1);
   *     expect({a: 1}).to.have.property('b');
   *     expect({a: 1}).to.not.have.own.property('b');
   *
   * `.deep` and `.own` can be combined.
   *
   *     expect({x: {a: 1}}).to.have.deep.own.property('x', {a: 1});
   *
   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when
   * referencing nested properties.
   *
   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');
   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]', 'y');
   *
   * If `.` or `[]` are part of an actual property name, they can be escaped by
   * adding two backslashes before them.
   *
   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\.a.\\[b\\]');
   *
   * `.deep` and `.nested` can be combined.
   *
   *     expect({a: {b: [{c: 3}]}})
   *       .to.have.deep.nested.property('a.b[0]', {c: 3});
   *
   * `.own` and `.nested` cannot be combined.
   *
   * Add `.not` earlier in the chain to negate `.property`.
   *
   *     expect({a: 1}).to.not.have.property('b');
   *
   * However, it's dangerous to negate `.property` when providing `val`. The
   * problem is that it creates uncertain expectations by asserting that the
   * target either doesn't have a property with the given key `name`, or that it
   * does have a property with the given key `name` but its value isn't equal to
   * the given `val`. It's often best to identify the exact output that's
   * expected, and then write an assertion that only accepts that exact output.
   *
   * When the target isn't expected to have a property with the given key
   * `name`, it's often best to assert exactly that.
   *
   *     expect({b: 2}).to.not.have.property('a'); // Recommended
   *     expect({b: 2}).to.not.have.property('a', 1); // Not recommended
   *
   * When the target is expected to have a property with the given key `name`,
   * it's often best to assert that the property has its expected value, rather
   * than asserting that it doesn't have one of many unexpected values.
   *
   *     expect({a: 3}).to.have.property('a', 3); // Recommended
   *     expect({a: 3}).to.not.have.property('a', 1); // Not recommended
   *
   * `.property` changes the target of any assertions that follow in the chain
   * to be the value of the property from the original target object.
   *
   *     expect({a: 1}).to.have.property('a').that.is.a('number');
   *
   * `.property` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`. When not providing `val`, only use the
   * second form.
   *
   *     // Recommended
   *     expect({a: 1}).to.have.property('a', 2, 'nooo why fail??');
   *     expect({a: 1}, 'nooo why fail??').to.have.property('a', 2);
   *     expect({a: 1}, 'nooo why fail??').to.have.property('b');
   *
   *     // Not recommended
   *     expect({a: 1}).to.have.property('b', undefined, 'nooo why fail??');
   *
   * The above assertion isn't the same thing as not providing `val`. Instead,
   * it's asserting that the target object has a `b` property that's equal to
   * `undefined`.
   *
   * The assertions `.ownProperty` and `.haveOwnProperty` can be used
   * interchangeably with `.own.property`.
   *
   * @name property
   * @param {String} name
   * @param {Mixed} val (optional)
   * @param {String} msg _optional_
   * @returns value of property for chaining
   * @namespace BDD
   * @api public
   */

  function assertProperty (name, val, msg) {
    if (msg) flag(this, 'message', msg);

    var isNested = flag(this, 'nested')
      , isOwn = flag(this, 'own')
      , flagMsg = flag(this, 'message')
      , obj = flag(this, 'object')
      , ssfi = flag(this, 'ssfi')
      , nameType = typeof name;

    flagMsg = flagMsg ? flagMsg + ': ' : '';

    if (isNested) {
      if (nameType !== 'string') {
        throw new AssertionError(
          flagMsg + 'the argument to property must be a string when using nested syntax',
          undefined,
          ssfi
        );
      }
    } else {
      if (nameType !== 'string' && nameType !== 'number' && nameType !== 'symbol') {
        throw new AssertionError(
          flagMsg + 'the argument to property must be a string, number, or symbol',
          undefined,
          ssfi
        );
      }
    }

    if (isNested && isOwn) {
      throw new AssertionError(
        flagMsg + 'The "nested" and "own" flags cannot be combined.',
        undefined,
        ssfi
      );
    }

    if (obj === null || obj === undefined) {
      throw new AssertionError(
        flagMsg + 'Target cannot be null or undefined.',
        undefined,
        ssfi
      );
    }

    var isDeep = flag(this, 'deep')
      , negate = flag(this, 'negate')
      , pathInfo = isNested ? _.getPathInfo(obj, name) : null
      , value = isNested ? pathInfo.value : obj[name];

    var descriptor = '';
    if (isDeep) descriptor += 'deep ';
    if (isOwn) descriptor += 'own ';
    if (isNested) descriptor += 'nested ';
    descriptor += 'property ';

    var hasProperty;
    if (isOwn) hasProperty = Object.prototype.hasOwnProperty.call(obj, name);
    else if (isNested) hasProperty = pathInfo.exists;
    else hasProperty = _.hasProperty(obj, name);

    // When performing a negated assertion for both name and val, merely having
    // a property with the given name isn't enough to cause the assertion to
    // fail. It must both have a property with the given name, and the value of
    // that property must equal the given val. Therefore, skip this assertion in
    // favor of the next.
    if (!negate || arguments.length === 1) {
      this.assert(
          hasProperty
        , 'expected #{this} to have ' + descriptor + _.inspect(name)
        , 'expected #{this} to not have ' + descriptor + _.inspect(name));
    }

    if (arguments.length > 1) {
      this.assert(
          hasProperty && (isDeep ? _.eql(val, value) : val === value)
        , 'expected #{this} to have ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'
        , 'expected #{this} to not have ' + descriptor + _.inspect(name) + ' of #{act}'
        , val
        , value
      );
    }

    flag(this, 'object', value);
  }

  Assertion.addMethod('property', assertProperty);

  function assertOwnProperty (name, value, msg) {
    flag(this, 'own', true);
    assertProperty.apply(this, arguments);
  }

  Assertion.addMethod('ownProperty', assertOwnProperty);
  Assertion.addMethod('haveOwnProperty', assertOwnProperty);

  /**
   * ### .ownPropertyDescriptor(name[, descriptor[, msg]])
   *
   * Asserts that the target has its own property descriptor with the given key
   * `name`. Enumerable and non-enumerable properties are included in the
   * search.
   *
   *     expect({a: 1}).to.have.ownPropertyDescriptor('a');
   *
   * When `descriptor` is provided, `.ownPropertyDescriptor` also asserts that
   * the property's descriptor is deeply equal to the given `descriptor`. See
   * the `deep-eql` project page for info on the deep equality algorithm:
   * https://github.com/chaijs/deep-eql.
   *
   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {
   *       configurable: true,
   *       enumerable: true,
   *       writable: true,
   *       value: 1,
   *     });
   *
   * Add `.not` earlier in the chain to negate `.ownPropertyDescriptor`.
   *
   *     expect({a: 1}).to.not.have.ownPropertyDescriptor('b');
   *
   * However, it's dangerous to negate `.ownPropertyDescriptor` when providing
   * a `descriptor`. The problem is that it creates uncertain expectations by
   * asserting that the target either doesn't have a property descriptor with
   * the given key `name`, or that it does have a property descriptor with the
   * given key `name` but its not deeply equal to the given `descriptor`. It's
   * often best to identify the exact output that's expected, and then write an
   * assertion that only accepts that exact output.
   *
   * When the target isn't expected to have a property descriptor with the given
   * key `name`, it's often best to assert exactly that.
   *
   *     // Recommended
   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a');
   *
   *     // Not recommended
   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a', {
   *       configurable: true,
   *       enumerable: true,
   *       writable: true,
   *       value: 1,
   *     });
   *
   * When the target is expected to have a property descriptor with the given
   * key `name`, it's often best to assert that the property has its expected
   * descriptor, rather than asserting that it doesn't have one of many
   * unexpected descriptors.
   *
   *     // Recommended
   *     expect({a: 3}).to.have.ownPropertyDescriptor('a', {
   *       configurable: true,
   *       enumerable: true,
   *       writable: true,
   *       value: 3,
   *     });
   *
   *     // Not recommended
   *     expect({a: 3}).to.not.have.ownPropertyDescriptor('a', {
   *       configurable: true,
   *       enumerable: true,
   *       writable: true,
   *       value: 1,
   *     });
   *
   * `.ownPropertyDescriptor` changes the target of any assertions that follow
   * in the chain to be the value of the property descriptor from the original
   * target object.
   *
   *     expect({a: 1}).to.have.ownPropertyDescriptor('a')
   *       .that.has.property('enumerable', true);
   *
   * `.ownPropertyDescriptor` accepts an optional `msg` argument which is a
   * custom error message to show when the assertion fails. The message can also
   * be given as the second argument to `expect`. When not providing
   * `descriptor`, only use the second form.
   *
   *     // Recommended
   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {
   *       configurable: true,
   *       enumerable: true,
   *       writable: true,
   *       value: 2,
   *     }, 'nooo why fail??');
   *
   *     // Recommended
   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('a', {
   *       configurable: true,
   *       enumerable: true,
   *       writable: true,
   *       value: 2,
   *     });
   *
   *     // Recommended
   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('b');
   *
   *     // Not recommended
   *     expect({a: 1})
   *       .to.have.ownPropertyDescriptor('b', undefined, 'nooo why fail??');
   *
   * The above assertion isn't the same thing as not providing `descriptor`.
   * Instead, it's asserting that the target object has a `b` property
   * descriptor that's deeply equal to `undefined`.
   *
   * The alias `.haveOwnPropertyDescriptor` can be used interchangeably with
   * `.ownPropertyDescriptor`.
   *
   * @name ownPropertyDescriptor
   * @alias haveOwnPropertyDescriptor
   * @param {String} name
   * @param {Object} descriptor _optional_
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertOwnPropertyDescriptor (name, descriptor, msg) {
    if (typeof descriptor === 'string') {
      msg = descriptor;
      descriptor = null;
    }
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);
    if (actualDescriptor && descriptor) {
      this.assert(
          _.eql(descriptor, actualDescriptor)
        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor)
        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor)
        , descriptor
        , actualDescriptor
        , true
      );
    } else {
      this.assert(
          actualDescriptor
        , 'expected #{this} to have an own property descriptor for ' + _.inspect(name)
        , 'expected #{this} to not have an own property descriptor for ' + _.inspect(name)
      );
    }
    flag(this, 'object', actualDescriptor);
  }

  Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);
  Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);

  /**
   * ### .lengthOf(n[, msg])
   *
   * Asserts that the target's `length` or `size` is equal to the given number
   * `n`.
   *
   *     expect([1, 2, 3]).to.have.lengthOf(3);
   *     expect('foo').to.have.lengthOf(3);
   *     expect(new Set([1, 2, 3])).to.have.lengthOf(3);
   *     expect(new Map([['a', 1], ['b', 2], ['c', 3]])).to.have.lengthOf(3);
   *
   * Add `.not` earlier in the chain to negate `.lengthOf`. However, it's often
   * best to assert that the target's `length` property is equal to its expected
   * value, rather than not equal to one of many unexpected values.
   *
   *     expect('foo').to.have.lengthOf(3); // Recommended
   *     expect('foo').to.not.have.lengthOf(4); // Not recommended
   *
   * `.lengthOf` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect([1, 2, 3]).to.have.lengthOf(2, 'nooo why fail??');
   *     expect([1, 2, 3], 'nooo why fail??').to.have.lengthOf(2);
   *
   * `.lengthOf` can also be used as a language chain, causing all `.above`,
   * `.below`, `.least`, `.most`, and `.within` assertions that follow in the
   * chain to use the target's `length` property as the target. However, it's
   * often best to assert that the target's `length` property is equal to its
   * expected length, rather than asserting that its `length` property falls
   * within some range of values.
   *
   *     // Recommended
   *     expect([1, 2, 3]).to.have.lengthOf(3);
   *
   *     // Not recommended
   *     expect([1, 2, 3]).to.have.lengthOf.above(2);
   *     expect([1, 2, 3]).to.have.lengthOf.below(4);
   *     expect([1, 2, 3]).to.have.lengthOf.at.least(3);
   *     expect([1, 2, 3]).to.have.lengthOf.at.most(3);
   *     expect([1, 2, 3]).to.have.lengthOf.within(2,4);
   *
   * Due to a compatibility issue, the alias `.length` can't be chained directly
   * off of an uninvoked method such as `.a`. Therefore, `.length` can't be used
   * interchangeably with `.lengthOf` in every situation. It's recommended to
   * always use `.lengthOf` instead of `.length`.
   *
   *     expect([1, 2, 3]).to.have.a.length(3); // incompatible; throws error
   *     expect([1, 2, 3]).to.have.a.lengthOf(3);  // passes as expected
   *
   * @name lengthOf
   * @alias length
   * @param {Number} n
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertLengthChain () {
    flag(this, 'doLength', true);
  }

  function assertLength (n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , objType = _.type(obj).toLowerCase()
      , flagMsg = flag(this, 'message')
      , ssfi = flag(this, 'ssfi')
      , descriptor = 'length'
      , itemsCount;

    switch (objType) {
      case 'map':
      case 'set':
        descriptor = 'size';
        itemsCount = obj.size;
        break;
      default:
        new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
        itemsCount = obj.length;
    }

    this.assert(
        itemsCount == n
      , 'expected #{this} to have a ' + descriptor + ' of #{exp} but got #{act}'
      , 'expected #{this} to not have a ' + descriptor + ' of #{act}'
      , n
      , itemsCount
    );
  }

  Assertion.addChainableMethod('length', assertLength, assertLengthChain);
  Assertion.addChainableMethod('lengthOf', assertLength, assertLengthChain);

  /**
   * ### .match(re[, msg])
   *
   * Asserts that the target matches the given regular expression `re`.
   *
   *     expect('foobar').to.match(/^foo/);
   *
   * Add `.not` earlier in the chain to negate `.match`.
   *
   *     expect('foobar').to.not.match(/taco/);
   *
   * `.match` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect('foobar').to.match(/taco/, 'nooo why fail??');
   *     expect('foobar', 'nooo why fail??').to.match(/taco/);
   *
   * The alias `.matches` can be used interchangeably with `.match`.
   *
   * @name match
   * @alias matches
   * @param {RegExp} re
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */
  function assertMatch(re, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    this.assert(
        re.exec(obj)
      , 'expected #{this} to match ' + re
      , 'expected #{this} not to match ' + re
    );
  }

  Assertion.addMethod('match', assertMatch);
  Assertion.addMethod('matches', assertMatch);

  /**
   * ### .string(str[, msg])
   *
   * Asserts that the target string contains the given substring `str`.
   *
   *     expect('foobar').to.have.string('bar');
   *
   * Add `.not` earlier in the chain to negate `.string`.
   *
   *     expect('foobar').to.not.have.string('taco');
   *
   * `.string` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect('foobar').to.have.string('taco', 'nooo why fail??');
   *     expect('foobar', 'nooo why fail??').to.have.string('taco');
   *
   * @name string
   * @param {String} str
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  Assertion.addMethod('string', function (str, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , flagMsg = flag(this, 'message')
      , ssfi = flag(this, 'ssfi');
    new Assertion(obj, flagMsg, ssfi, true).is.a('string');

    this.assert(
        ~obj.indexOf(str)
      , 'expected #{this} to contain ' + _.inspect(str)
      , 'expected #{this} to not contain ' + _.inspect(str)
    );
  });

  /**
   * ### .keys(key1[, key2[, ...]])
   *
   * Asserts that the target object, array, map, or set has the given keys. Only
   * the target's own inherited properties are included in the search.
   *
   * When the target is an object or array, keys can be provided as one or more
   * string arguments, a single array argument, or a single object argument. In
   * the latter case, only the keys in the given object matter; the values are
   * ignored.
   *
   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');
   *     expect(['x', 'y']).to.have.all.keys(0, 1);
   *
   *     expect({a: 1, b: 2}).to.have.all.keys(['a', 'b']);
   *     expect(['x', 'y']).to.have.all.keys([0, 1]);
   *
   *     expect({a: 1, b: 2}).to.have.all.keys({a: 4, b: 5}); // ignore 4 and 5
   *     expect(['x', 'y']).to.have.all.keys({0: 4, 1: 5}); // ignore 4 and 5
   *
   * When the target is a map or set, each key must be provided as a separate
   * argument.
   *
   *     expect(new Map([['a', 1], ['b', 2]])).to.have.all.keys('a', 'b');
   *     expect(new Set(['a', 'b'])).to.have.all.keys('a', 'b');
   *
   * Because `.keys` does different things based on the target's type, it's
   * important to check the target's type before using `.keys`. See the `.a` doc
   * for info on testing a target's type.
   *
   *     expect({a: 1, b: 2}).to.be.an('object').that.has.all.keys('a', 'b');
   *
   * By default, strict (`===`) equality is used to compare keys of maps and
   * sets. Add `.deep` earlier in the chain to use deep equality instead. See
   * the `deep-eql` project page for info on the deep equality algorithm:
   * https://github.com/chaijs/deep-eql.
   *
   *     // Target set deeply (but not strictly) has key `{a: 1}`
   *     expect(new Set([{a: 1}])).to.have.all.deep.keys([{a: 1}]);
   *     expect(new Set([{a: 1}])).to.not.have.all.keys([{a: 1}]);
   *
   * By default, the target must have all of the given keys and no more. Add
   * `.any` earlier in the chain to only require that the target have at least
   * one of the given keys. Also, add `.not` earlier in the chain to negate
   * `.keys`. It's often best to add `.any` when negating `.keys`, and to use
   * `.all` when asserting `.keys` without negation.
   *
   * When negating `.keys`, `.any` is preferred because `.not.any.keys` asserts
   * exactly what's expected of the output, whereas `.not.all.keys` creates
   * uncertain expectations.
   *
   *     // Recommended; asserts that target doesn't have any of the given keys
   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');
   *
   *     // Not recommended; asserts that target doesn't have all of the given
   *     // keys but may or may not have some of them
   *     expect({a: 1, b: 2}).to.not.have.all.keys('c', 'd');
   *
   * When asserting `.keys` without negation, `.all` is preferred because
   * `.all.keys` asserts exactly what's expected of the output, whereas
   * `.any.keys` creates uncertain expectations.
   *
   *     // Recommended; asserts that target has all the given keys
   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');
   *
   *     // Not recommended; asserts that target has at least one of the given
   *     // keys but may or may not have more of them
   *     expect({a: 1, b: 2}).to.have.any.keys('a', 'b');
   *
   * Note that `.all` is used by default when neither `.all` nor `.any` appear
   * earlier in the chain. However, it's often best to add `.all` anyway because
   * it improves readability.
   *
   *     // Both assertions are identical
   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b'); // Recommended
   *     expect({a: 1, b: 2}).to.have.keys('a', 'b'); // Not recommended
   *
   * Add `.include` earlier in the chain to require that the target's keys be a
   * superset of the expected keys, rather than identical sets.
   *
   *     // Target object's keys are a superset of ['a', 'b'] but not identical
   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');
   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');
   *
   * However, if `.any` and `.include` are combined, only the `.any` takes
   * effect. The `.include` is ignored in this case.
   *
   *     // Both assertions are identical
   *     expect({a: 1}).to.have.any.keys('a', 'b');
   *     expect({a: 1}).to.include.any.keys('a', 'b');
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect({a: 1}, 'nooo why fail??').to.have.key('b');
   *
   * The alias `.key` can be used interchangeably with `.keys`.
   *
   * @name keys
   * @alias key
   * @param {...String|Array|Object} keys
   * @namespace BDD
   * @api public
   */

  function assertKeys (keys) {
    var obj = flag(this, 'object')
      , objType = _.type(obj)
      , keysType = _.type(keys)
      , ssfi = flag(this, 'ssfi')
      , isDeep = flag(this, 'deep')
      , str
      , deepStr = ''
      , actual
      , ok = true
      , flagMsg = flag(this, 'message');

    flagMsg = flagMsg ? flagMsg + ': ' : '';
    var mixedArgsMsg = flagMsg + 'when testing keys against an object or an array you must give a single Array|Object|String argument or multiple String arguments';

    if (objType === 'Map' || objType === 'Set') {
      deepStr = isDeep ? 'deeply ' : '';
      actual = [];

      // Map and Set '.keys' aren't supported in IE 11. Therefore, use .forEach.
      obj.forEach(function (val, key) { actual.push(key) });

      if (keysType !== 'Array') {
        keys = Array.prototype.slice.call(arguments);
      }
    } else {
      actual = _.getOwnEnumerableProperties(obj);

      switch (keysType) {
        case 'Array':
          if (arguments.length > 1) {
            throw new AssertionError(mixedArgsMsg, undefined, ssfi);
          }
          break;
        case 'Object':
          if (arguments.length > 1) {
            throw new AssertionError(mixedArgsMsg, undefined, ssfi);
          }
          keys = Object.keys(keys);
          break;
        default:
          keys = Array.prototype.slice.call(arguments);
      }

      // Only stringify non-Symbols because Symbols would become "Symbol()"
      keys = keys.map(function (val) {
        return typeof val === 'symbol' ? val : String(val);
      });
    }

    if (!keys.length) {
      throw new AssertionError(flagMsg + 'keys required', undefined, ssfi);
    }

    var len = keys.length
      , any = flag(this, 'any')
      , all = flag(this, 'all')
      , expected = keys;

    if (!any && !all) {
      all = true;
    }

    // Has any
    if (any) {
      ok = expected.some(function(expectedKey) {
        return actual.some(function(actualKey) {
          if (isDeep) {
            return _.eql(expectedKey, actualKey);
          } else {
            return expectedKey === actualKey;
          }
        });
      });
    }

    // Has all
    if (all) {
      ok = expected.every(function(expectedKey) {
        return actual.some(function(actualKey) {
          if (isDeep) {
            return _.eql(expectedKey, actualKey);
          } else {
            return expectedKey === actualKey;
          }
        });
      });

      if (!flag(this, 'contains')) {
        ok = ok && keys.length == actual.length;
      }
    }

    // Key string
    if (len > 1) {
      keys = keys.map(function(key) {
        return _.inspect(key);
      });
      var last = keys.pop();
      if (all) {
        str = keys.join(', ') + ', and ' + last;
      }
      if (any) {
        str = keys.join(', ') + ', or ' + last;
      }
    } else {
      str = _.inspect(keys[0]);
    }

    // Form
    str = (len > 1 ? 'keys ' : 'key ') + str;

    // Have / include
    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;

    // Assertion
    this.assert(
        ok
      , 'expected #{this} to ' + deepStr + str
      , 'expected #{this} to not ' + deepStr + str
      , expected.slice(0).sort(_.compareByInspect)
      , actual.sort(_.compareByInspect)
      , true
    );
  }

  Assertion.addMethod('keys', assertKeys);
  Assertion.addMethod('key', assertKeys);

  /**
   * ### .throw([errorLike], [errMsgMatcher], [msg])
   *
   * When no arguments are provided, `.throw` invokes the target function and
   * asserts that an error is thrown.
   *
   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };
   *
   *     expect(badFn).to.throw();
   *
   * When one argument is provided, and it's an error constructor, `.throw`
   * invokes the target function and asserts that an error is thrown that's an
   * instance of that error constructor.
   *
   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };
   *
   *     expect(badFn).to.throw(TypeError);
   *
   * When one argument is provided, and it's an error instance, `.throw` invokes
   * the target function and asserts that an error is thrown that's strictly
   * (`===`) equal to that error instance.
   *
   *     var err = new TypeError('Illegal salmon!');
   *     var badFn = function () { throw err; };
   *
   *     expect(badFn).to.throw(err);
   *
   * When one argument is provided, and it's a string, `.throw` invokes the
   * target function and asserts that an error is thrown with a message that
   * contains that string.
   *
   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };
   *
   *     expect(badFn).to.throw('salmon');
   *
   * When one argument is provided, and it's a regular expression, `.throw`
   * invokes the target function and asserts that an error is thrown with a
   * message that matches that regular expression.
   *
   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };
   *
   *     expect(badFn).to.throw(/salmon/);
   *
   * When two arguments are provided, and the first is an error instance or
   * constructor, and the second is a string or regular expression, `.throw`
   * invokes the function and asserts that an error is thrown that fulfills both
   * conditions as described above.
   *
   *     var err = new TypeError('Illegal salmon!');
   *     var badFn = function () { throw err; };
   *
   *     expect(badFn).to.throw(TypeError, 'salmon');
   *     expect(badFn).to.throw(TypeError, /salmon/);
   *     expect(badFn).to.throw(err, 'salmon');
   *     expect(badFn).to.throw(err, /salmon/);
   *
   * Add `.not` earlier in the chain to negate `.throw`.
   *
   *     var goodFn = function () {};
   *
   *     expect(goodFn).to.not.throw();
   *
   * However, it's dangerous to negate `.throw` when providing any arguments.
   * The problem is that it creates uncertain expectations by asserting that the
   * target either doesn't throw an error, or that it throws an error but of a
   * different type than the given type, or that it throws an error of the given
   * type but with a message that doesn't include the given string. It's often
   * best to identify the exact output that's expected, and then write an
   * assertion that only accepts that exact output.
   *
   * When the target isn't expected to throw an error, it's often best to assert
   * exactly that.
   *
   *     var goodFn = function () {};
   *
   *     expect(goodFn).to.not.throw(); // Recommended
   *     expect(goodFn).to.not.throw(ReferenceError, 'x'); // Not recommended
   *
   * When the target is expected to throw an error, it's often best to assert
   * that the error is of its expected type, and has a message that includes an
   * expected string, rather than asserting that it doesn't have one of many
   * unexpected types, and doesn't have a message that includes some string.
   *
   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };
   *
   *     expect(badFn).to.throw(TypeError, 'salmon'); // Recommended
   *     expect(badFn).to.not.throw(ReferenceError, 'x'); // Not recommended
   *
   * `.throw` changes the target of any assertions that follow in the chain to
   * be the error object that's thrown.
   *
   *     var err = new TypeError('Illegal salmon!');
   *     err.code = 42;
   *     var badFn = function () { throw err; };
   *
   *     expect(badFn).to.throw(TypeError).with.property('code', 42);
   *
   * `.throw` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`. When not providing two arguments, always use
   * the second form.
   *
   *     var goodFn = function () {};
   *
   *     expect(goodFn).to.throw(TypeError, 'x', 'nooo why fail??');
   *     expect(goodFn, 'nooo why fail??').to.throw();
   *
   * Due to limitations in ES5, `.throw` may not always work as expected when
   * using a transpiler such as Babel or TypeScript. In particular, it may
   * produce unexpected results when subclassing the built-in `Error` object and
   * then passing the subclassed constructor to `.throw`. See your transpiler's
   * docs for details:
   *
   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))
   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))
   *
   * Beware of some common mistakes when using the `throw` assertion. One common
   * mistake is to accidentally invoke the function yourself instead of letting
   * the `throw` assertion invoke the function for you. For example, when
   * testing if a function named `fn` throws, provide `fn` instead of `fn()` as
   * the target for the assertion.
   *
   *     expect(fn).to.throw();     // Good! Tests `fn` as desired
   *     expect(fn()).to.throw();   // Bad! Tests result of `fn()`, not `fn`
   *
   * If you need to assert that your function `fn` throws when passed certain
   * arguments, then wrap a call to `fn` inside of another function.
   *
   *     expect(function () { fn(42); }).to.throw();  // Function expression
   *     expect(() => fn(42)).to.throw();             // ES6 arrow function
   *
   * Another common mistake is to provide an object method (or any stand-alone
   * function that relies on `this`) as the target of the assertion. Doing so is
   * problematic because the `this` context will be lost when the function is
   * invoked by `.throw`; there's no way for it to know what `this` is supposed
   * to be. There are two ways around this problem. One solution is to wrap the
   * method or function call inside of another function. Another solution is to
   * use `bind`.
   *
   *     expect(function () { cat.meow(); }).to.throw();  // Function expression
   *     expect(() => cat.meow()).to.throw();             // ES6 arrow function
   *     expect(cat.meow.bind(cat)).to.throw();           // Bind
   *
   * Finally, it's worth mentioning that it's a best practice in JavaScript to
   * only throw `Error` and derivatives of `Error` such as `ReferenceError`,
   * `TypeError`, and user-defined objects that extend `Error`. No other type of
   * value will generate a stack trace when initialized. With that said, the
   * `throw` assertion does technically support any type of value being thrown,
   * not just `Error` and its derivatives.
   *
   * The aliases `.throws` and `.Throw` can be used interchangeably with
   * `.throw`.
   *
   * @name throw
   * @alias throws
   * @alias Throw
   * @param {Error|ErrorConstructor} errorLike
   * @param {String|RegExp} errMsgMatcher error message
   * @param {String} msg _optional_
   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
   * @returns error for chaining (null if no error)
   * @namespace BDD
   * @api public
   */

  function assertThrows (errorLike, errMsgMatcher, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , ssfi = flag(this, 'ssfi')
      , flagMsg = flag(this, 'message')
      , negate = flag(this, 'negate') || false;
    new Assertion(obj, flagMsg, ssfi, true).is.a('function');

    if (errorLike instanceof RegExp || typeof errorLike === 'string') {
      errMsgMatcher = errorLike;
      errorLike = null;
    }

    var caughtErr;
    try {
      obj();
    } catch (err) {
      caughtErr = err;
    }

    // If we have the negate flag enabled and at least one valid argument it means we do expect an error
    // but we want it to match a given set of criteria
    var everyArgIsUndefined = errorLike === undefined && errMsgMatcher === undefined;

    // If we've got the negate flag enabled and both args, we should only fail if both aren't compatible
    // See Issue #551 and PR #683@GitHub
    var everyArgIsDefined = Boolean(errorLike && errMsgMatcher);
    var errorLikeFail = false;
    var errMsgMatcherFail = false;

    // Checking if error was thrown
    if (everyArgIsUndefined || !everyArgIsUndefined && !negate) {
      // We need this to display results correctly according to their types
      var errorLikeString = 'an error';
      if (errorLike instanceof Error) {
        errorLikeString = '#{exp}';
      } else if (errorLike) {
        errorLikeString = _.checkError.getConstructorName(errorLike);
      }

      this.assert(
          caughtErr
        , 'expected #{this} to throw ' + errorLikeString
        , 'expected #{this} to not throw an error but #{act} was thrown'
        , errorLike && errorLike.toString()
        , (caughtErr instanceof Error ?
            caughtErr.toString() : (typeof caughtErr === 'string' ? caughtErr : caughtErr &&
                                    _.checkError.getConstructorName(caughtErr)))
      );
    }

    if (errorLike && caughtErr) {
      // We should compare instances only if `errorLike` is an instance of `Error`
      if (errorLike instanceof Error) {
        var isCompatibleInstance = _.checkError.compatibleInstance(caughtErr, errorLike);

        if (isCompatibleInstance === negate) {
          // These checks were created to ensure we won't fail too soon when we've got both args and a negate
          // See Issue #551 and PR #683@GitHub
          if (everyArgIsDefined && negate) {
            errorLikeFail = true;
          } else {
            this.assert(
                negate
              , 'expected #{this} to throw #{exp} but #{act} was thrown'
              , 'expected #{this} to not throw #{exp}' + (caughtErr && !negate ? ' but #{act} was thrown' : '')
              , errorLike.toString()
              , caughtErr.toString()
            );
          }
        }
      }

      var isCompatibleConstructor = _.checkError.compatibleConstructor(caughtErr, errorLike);
      if (isCompatibleConstructor === negate) {
        if (everyArgIsDefined && negate) {
            errorLikeFail = true;
        } else {
          this.assert(
              negate
            , 'expected #{this} to throw #{exp} but #{act} was thrown'
            , 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : '')
            , (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike))
            , (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr))
          );
        }
      }
    }

    if (caughtErr && errMsgMatcher !== undefined && errMsgMatcher !== null) {
      // Here we check compatible messages
      var placeholder = 'including';
      if (errMsgMatcher instanceof RegExp) {
        placeholder = 'matching'
      }

      var isCompatibleMessage = _.checkError.compatibleMessage(caughtErr, errMsgMatcher);
      if (isCompatibleMessage === negate) {
        if (everyArgIsDefined && negate) {
            errMsgMatcherFail = true;
        } else {
          this.assert(
            negate
            , 'expected #{this} to throw error ' + placeholder + ' #{exp} but got #{act}'
            , 'expected #{this} to throw error not ' + placeholder + ' #{exp}'
            ,  errMsgMatcher
            ,  _.checkError.getMessage(caughtErr)
          );
        }
      }
    }

    // If both assertions failed and both should've matched we throw an error
    if (errorLikeFail && errMsgMatcherFail) {
      this.assert(
        negate
        , 'expected #{this} to throw #{exp} but #{act} was thrown'
        , 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : '')
        , (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike))
        , (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr))
      );
    }

    flag(this, 'object', caughtErr);
  };

  Assertion.addMethod('throw', assertThrows);
  Assertion.addMethod('throws', assertThrows);
  Assertion.addMethod('Throw', assertThrows);

  /**
   * ### .respondTo(method[, msg])
   *
   * When the target is a non-function object, `.respondTo` asserts that the
   * target has a method with the given name `method`. The method can be own or
   * inherited, and it can be enumerable or non-enumerable.
   *
   *     function Cat () {}
   *     Cat.prototype.meow = function () {};
   *
   *     expect(new Cat()).to.respondTo('meow');
   *
   * When the target is a function, `.respondTo` asserts that the target's
   * `prototype` property has a method with the given name `method`. Again, the
   * method can be own or inherited, and it can be enumerable or non-enumerable.
   *
   *     function Cat () {}
   *     Cat.prototype.meow = function () {};
   *
   *     expect(Cat).to.respondTo('meow');
   *
   * Add `.itself` earlier in the chain to force `.respondTo` to treat the
   * target as a non-function object, even if it's a function. Thus, it asserts
   * that the target has a method with the given name `method`, rather than
   * asserting that the target's `prototype` property has a method with the
   * given name `method`.
   *
   *     function Cat () {}
   *     Cat.prototype.meow = function () {};
   *     Cat.hiss = function () {};
   *
   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');
   *
   * When not adding `.itself`, it's important to check the target's type before
   * using `.respondTo`. See the `.a` doc for info on checking a target's type.
   *
   *     function Cat () {}
   *     Cat.prototype.meow = function () {};
   *
   *     expect(new Cat()).to.be.an('object').that.respondsTo('meow');
   *
   * Add `.not` earlier in the chain to negate `.respondTo`.
   *
   *     function Dog () {}
   *     Dog.prototype.bark = function () {};
   *
   *     expect(new Dog()).to.not.respondTo('meow');
   *
   * `.respondTo` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect({}).to.respondTo('meow', 'nooo why fail??');
   *     expect({}, 'nooo why fail??').to.respondTo('meow');
   *
   * The alias `.respondsTo` can be used interchangeably with `.respondTo`.
   *
   * @name respondTo
   * @alias respondsTo
   * @param {String} method
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function respondTo (method, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , itself = flag(this, 'itself')
      , context = ('function' === typeof obj && !itself)
        ? obj.prototype[method]
        : obj[method];

    this.assert(
        'function' === typeof context
      , 'expected #{this} to respond to ' + _.inspect(method)
      , 'expected #{this} to not respond to ' + _.inspect(method)
    );
  }

  Assertion.addMethod('respondTo', respondTo);
  Assertion.addMethod('respondsTo', respondTo);

  /**
   * ### .itself
   *
   * Forces all `.respondTo` assertions that follow in the chain to behave as if
   * the target is a non-function object, even if it's a function. Thus, it
   * causes `.respondTo` to assert that the target has a method with the given
   * name, rather than asserting that the target's `prototype` property has a
   * method with the given name.
   *
   *     function Cat () {}
   *     Cat.prototype.meow = function () {};
   *     Cat.hiss = function () {};
   *
   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');
   *
   * @name itself
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('itself', function () {
    flag(this, 'itself', true);
  });

  /**
   * ### .satisfy(matcher[, msg])
   *
   * Invokes the given `matcher` function with the target being passed as the
   * first argument, and asserts that the value returned is truthy.
   *
   *     expect(1).to.satisfy(function(num) {
   *       return num > 0;
   *     });
   *
   * Add `.not` earlier in the chain to negate `.satisfy`.
   *
   *     expect(1).to.not.satisfy(function(num) {
   *       return num > 2;
   *     });
   *
   * `.satisfy` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect(1).to.satisfy(function(num) {
   *       return num > 2;
   *     }, 'nooo why fail??');
   *
   *     expect(1, 'nooo why fail??').to.satisfy(function(num) {
   *       return num > 2;
   *     });
   *
   * The alias `.satisfies` can be used interchangeably with `.satisfy`.
   *
   * @name satisfy
   * @alias satisfies
   * @param {Function} matcher
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function satisfy (matcher, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    var result = matcher(obj);
    this.assert(
        result
      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)
      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)
      , flag(this, 'negate') ? false : true
      , result
    );
  }

  Assertion.addMethod('satisfy', satisfy);
  Assertion.addMethod('satisfies', satisfy);

  /**
   * ### .closeTo(expected, delta[, msg])
   *
   * Asserts that the target is a number that's within a given +/- `delta` range
   * of the given number `expected`. However, it's often best to assert that the
   * target is equal to its expected value.
   *
   *     // Recommended
   *     expect(1.5).to.equal(1.5);
   *
   *     // Not recommended
   *     expect(1.5).to.be.closeTo(1, 0.5);
   *     expect(1.5).to.be.closeTo(2, 0.5);
   *     expect(1.5).to.be.closeTo(1, 1);
   *
   * Add `.not` earlier in the chain to negate `.closeTo`.
   *
   *     expect(1.5).to.equal(1.5); // Recommended
   *     expect(1.5).to.not.be.closeTo(3, 1); // Not recommended
   *
   * `.closeTo` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect(1.5).to.be.closeTo(3, 1, 'nooo why fail??');
   *     expect(1.5, 'nooo why fail??').to.be.closeTo(3, 1);
   *
   * The alias `.approximately` can be used interchangeably with `.closeTo`.
   *
   * @name closeTo
   * @alias approximately
   * @param {Number} expected
   * @param {Number} delta
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function closeTo(expected, delta, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , flagMsg = flag(this, 'message')
      , ssfi = flag(this, 'ssfi');

    new Assertion(obj, flagMsg, ssfi, true).is.a('number');
    if (typeof expected !== 'number' || typeof delta !== 'number') {
      flagMsg = flagMsg ? flagMsg + ': ' : '';
      throw new AssertionError(
          flagMsg + 'the arguments to closeTo or approximately must be numbers',
          undefined,
          ssfi
      );
    }

    this.assert(
        Math.abs(obj - expected) <= delta
      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta
      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta
    );
  }

  Assertion.addMethod('closeTo', closeTo);
  Assertion.addMethod('approximately', closeTo);

  // Note: Duplicates are ignored if testing for inclusion instead of sameness.
  function isSubsetOf(subset, superset, cmp, contains, ordered) {
    if (!contains) {
      if (subset.length !== superset.length) return false;
      superset = superset.slice();
    }

    return subset.every(function(elem, idx) {
      if (ordered) return cmp ? cmp(elem, superset[idx]) : elem === superset[idx];

      if (!cmp) {
        var matchIdx = superset.indexOf(elem);
        if (matchIdx === -1) return false;

        // Remove match from superset so not counted twice if duplicate in subset.
        if (!contains) superset.splice(matchIdx, 1);
        return true;
      }

      return superset.some(function(elem2, matchIdx) {
        if (!cmp(elem, elem2)) return false;

        // Remove match from superset so not counted twice if duplicate in subset.
        if (!contains) superset.splice(matchIdx, 1);
        return true;
      });
    });
  }

  /**
   * ### .members(set[, msg])
   *
   * Asserts that the target array has the same members as the given array
   * `set`.
   *
   *     expect([1, 2, 3]).to.have.members([2, 1, 3]);
   *     expect([1, 2, 2]).to.have.members([2, 1, 2]);
   *
   * By default, members are compared using strict (`===`) equality. Add `.deep`
   * earlier in the chain to use deep equality instead. See the `deep-eql`
   * project page for info on the deep equality algorithm:
   * https://github.com/chaijs/deep-eql.
   *
   *     // Target array deeply (but not strictly) has member `{a: 1}`
   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);
   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);
   *
   * By default, order doesn't matter. Add `.ordered` earlier in the chain to
   * require that members appear in the same order.
   *
   *     expect([1, 2, 3]).to.have.ordered.members([1, 2, 3]);
   *     expect([1, 2, 3]).to.have.members([2, 1, 3])
   *       .but.not.ordered.members([2, 1, 3]);
   *
   * By default, both arrays must be the same size. Add `.include` earlier in
   * the chain to require that the target's members be a superset of the
   * expected members. Note that duplicates are ignored in the subset when
   * `.include` is added.
   *
   *     // Target array is a superset of [1, 2] but not identical
   *     expect([1, 2, 3]).to.include.members([1, 2]);
   *     expect([1, 2, 3]).to.not.have.members([1, 2]);
   *
   *     // Duplicates in the subset are ignored
   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);
   *
   * `.deep`, `.ordered`, and `.include` can all be combined. However, if
   * `.include` and `.ordered` are combined, the ordering begins at the start of
   * both arrays.
   *
   *     expect([{a: 1}, {b: 2}, {c: 3}])
   *       .to.include.deep.ordered.members([{a: 1}, {b: 2}])
   *       .but.not.include.deep.ordered.members([{b: 2}, {c: 3}]);
   *
   * Add `.not` earlier in the chain to negate `.members`. However, it's
   * dangerous to do so. The problem is that it creates uncertain expectations
   * by asserting that the target array doesn't have all of the same members as
   * the given array `set` but may or may not have some of them. It's often best
   * to identify the exact output that's expected, and then write an assertion
   * that only accepts that exact output.
   *
   *     expect([1, 2]).to.not.include(3).and.not.include(4); // Recommended
   *     expect([1, 2]).to.not.have.members([3, 4]); // Not recommended
   *
   * `.members` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect([1, 2]).to.have.members([1, 2, 3], 'nooo why fail??');
   *     expect([1, 2], 'nooo why fail??').to.have.members([1, 2, 3]);
   *
   * @name members
   * @param {Array} set
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  Assertion.addMethod('members', function (subset, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , flagMsg = flag(this, 'message')
      , ssfi = flag(this, 'ssfi');

    new Assertion(obj, flagMsg, ssfi, true).to.be.an('array');
    new Assertion(subset, flagMsg, ssfi, true).to.be.an('array');

    var contains = flag(this, 'contains');
    var ordered = flag(this, 'ordered');

    var subject, failMsg, failNegateMsg;

    if (contains) {
      subject = ordered ? 'an ordered superset' : 'a superset';
      failMsg = 'expected #{this} to be ' + subject + ' of #{exp}';
      failNegateMsg = 'expected #{this} to not be ' + subject + ' of #{exp}';
    } else {
      subject = ordered ? 'ordered members' : 'members';
      failMsg = 'expected #{this} to have the same ' + subject + ' as #{exp}';
      failNegateMsg = 'expected #{this} to not have the same ' + subject + ' as #{exp}';
    }

    var cmp = flag(this, 'deep') ? _.eql : undefined;

    this.assert(
        isSubsetOf(subset, obj, cmp, contains, ordered)
      , failMsg
      , failNegateMsg
      , subset
      , obj
      , true
    );
  });

  /**
   * ### .oneOf(list[, msg])
   *
   * Asserts that the target is a member of the given array `list`. However,
   * it's often best to assert that the target is equal to its expected value.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.be.oneOf([1, 2, 3]); // Not recommended
   *
   * Comparisons are performed using strict (`===`) equality.
   *
   * Add `.not` earlier in the chain to negate `.oneOf`.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.oneOf([2, 3, 4]); // Not recommended
   *
   * `.oneOf` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect(1).to.be.oneOf([2, 3, 4], 'nooo why fail??');
   *     expect(1, 'nooo why fail??').to.be.oneOf([2, 3, 4]);
   *
   * @name oneOf
   * @param {Array<*>} list
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function oneOf (list, msg) {
    if (msg) flag(this, 'message', msg);
    var expected = flag(this, 'object')
      , flagMsg = flag(this, 'message')
      , ssfi = flag(this, 'ssfi');
    new Assertion(list, flagMsg, ssfi, true).to.be.an('array');

    this.assert(
        list.indexOf(expected) > -1
      , 'expected #{this} to be one of #{exp}'
      , 'expected #{this} to not be one of #{exp}'
      , list
      , expected
    );
  }

  Assertion.addMethod('oneOf', oneOf);

  /**
   * ### .change(subject[, prop[, msg]])
   *
   * When one argument is provided, `.change` asserts that the given function
   * `subject` returns a different value when it's invoked before the target
   * function compared to when it's invoked afterward. However, it's often best
   * to assert that `subject` is equal to its expected value.
   *
   *     var dots = ''
   *       , addDot = function () { dots += '.'; }
   *       , getDots = function () { return dots; };
   *
   *     // Recommended
   *     expect(getDots()).to.equal('');
   *     addDot();
   *     expect(getDots()).to.equal('.');
   *
   *     // Not recommended
   *     expect(addDot).to.change(getDots);
   *
   * When two arguments are provided, `.change` asserts that the value of the
   * given object `subject`'s `prop` property is different before invoking the
   * target function compared to afterward.
   *
   *     var myObj = {dots: ''}
   *       , addDot = function () { myObj.dots += '.'; };
   *
   *     // Recommended
   *     expect(myObj).to.have.property('dots', '');
   *     addDot();
   *     expect(myObj).to.have.property('dots', '.');
   *
   *     // Not recommended
   *     expect(addDot).to.change(myObj, 'dots');
   *
   * Strict (`===`) equality is used to compare before and after values.
   *
   * Add `.not` earlier in the chain to negate `.change`.
   *
   *     var dots = ''
   *       , noop = function () {}
   *       , getDots = function () { return dots; };
   *
   *     expect(noop).to.not.change(getDots);
   *
   *     var myObj = {dots: ''}
   *       , noop = function () {};
   *
   *     expect(noop).to.not.change(myObj, 'dots');
   *
   * `.change` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`. When not providing two arguments, always
   * use the second form.
   *
   *     var myObj = {dots: ''}
   *       , addDot = function () { myObj.dots += '.'; };
   *
   *     expect(addDot).to.not.change(myObj, 'dots', 'nooo why fail??');
   *
   *     var dots = ''
   *       , addDot = function () { dots += '.'; }
   *       , getDots = function () { return dots; };
   *
   *     expect(addDot, 'nooo why fail??').to.not.change(getDots);
   *
   * `.change` also causes all `.by` assertions that follow in the chain to
   * assert how much a numeric subject was increased or decreased by. However,
   * it's dangerous to use `.change.by`. The problem is that it creates
   * uncertain expectations by asserting that the subject either increases by
   * the given delta, or that it decreases by the given delta. It's often best
   * to identify the exact output that's expected, and then write an assertion
   * that only accepts that exact output.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; }
   *       , subtractTwo = function () { myObj.val -= 2; };
   *
   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended
   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended
   *
   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended
   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended
   *
   * The alias `.changes` can be used interchangeably with `.change`.
   *
   * @name change
   * @alias changes
   * @param {String} subject
   * @param {String} prop name _optional_
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertChanges (subject, prop, msg) {
    if (msg) flag(this, 'message', msg);
    var fn = flag(this, 'object')
      , flagMsg = flag(this, 'message')
      , ssfi = flag(this, 'ssfi');
    new Assertion(fn, flagMsg, ssfi, true).is.a('function');

    var initial;
    if (!prop) {
      new Assertion(subject, flagMsg, ssfi, true).is.a('function');
      initial = subject();
    } else {
      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);
      initial = subject[prop];
    }

    fn();

    var final = prop === undefined || prop === null ? subject() : subject[prop];
    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;

    // This gets flagged because of the .by(delta) assertion
    flag(this, 'deltaMsgObj', msgObj);
    flag(this, 'initialDeltaValue', initial);
    flag(this, 'finalDeltaValue', final);
    flag(this, 'deltaBehavior', 'change');
    flag(this, 'realDelta', final !== initial);

    this.assert(
      initial !== final
      , 'expected ' + msgObj + ' to change'
      , 'expected ' + msgObj + ' to not change'
    );
  }

  Assertion.addMethod('change', assertChanges);
  Assertion.addMethod('changes', assertChanges);

  /**
   * ### .increase(subject[, prop[, msg]])
   *
   * When one argument is provided, `.increase` asserts that the given function
   * `subject` returns a greater number when it's invoked after invoking the
   * target function compared to when it's invoked beforehand. `.increase` also
   * causes all `.by` assertions that follow in the chain to assert how much
   * greater of a number is returned. It's often best to assert that the return
   * value increased by the expected amount, rather than asserting it increased
   * by any amount.
   *
   *     var val = 1
   *       , addTwo = function () { val += 2; }
   *       , getVal = function () { return val; };
   *
   *     expect(addTwo).to.increase(getVal).by(2); // Recommended
   *     expect(addTwo).to.increase(getVal); // Not recommended
   *
   * When two arguments are provided, `.increase` asserts that the value of the
   * given object `subject`'s `prop` property is greater after invoking the
   * target function compared to beforehand.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; };
   *
   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended
   *     expect(addTwo).to.increase(myObj, 'val'); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.increase`. However, it's
   * dangerous to do so. The problem is that it creates uncertain expectations
   * by asserting that the subject either decreases, or that it stays the same.
   * It's often best to identify the exact output that's expected, and then
   * write an assertion that only accepts that exact output.
   *
   * When the subject is expected to decrease, it's often best to assert that it
   * decreased by the expected amount.
   *
   *     var myObj = {val: 1}
   *       , subtractTwo = function () { myObj.val -= 2; };
   *
   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended
   *     expect(subtractTwo).to.not.increase(myObj, 'val'); // Not recommended
   *
   * When the subject is expected to stay the same, it's often best to assert
   * exactly that.
   *
   *     var myObj = {val: 1}
   *       , noop = function () {};
   *
   *     expect(noop).to.not.change(myObj, 'val'); // Recommended
   *     expect(noop).to.not.increase(myObj, 'val'); // Not recommended
   *
   * `.increase` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`. When not providing two arguments, always
   * use the second form.
   *
   *     var myObj = {val: 1}
   *       , noop = function () {};
   *
   *     expect(noop).to.increase(myObj, 'val', 'nooo why fail??');
   *
   *     var val = 1
   *       , noop = function () {}
   *       , getVal = function () { return val; };
   *
   *     expect(noop, 'nooo why fail??').to.increase(getVal);
   *
   * The alias `.increases` can be used interchangeably with `.increase`.
   *
   * @name increase
   * @alias increases
   * @param {String|Function} subject
   * @param {String} prop name _optional_
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertIncreases (subject, prop, msg) {
    if (msg) flag(this, 'message', msg);
    var fn = flag(this, 'object')
      , flagMsg = flag(this, 'message')
      , ssfi = flag(this, 'ssfi');
    new Assertion(fn, flagMsg, ssfi, true).is.a('function');

    var initial;
    if (!prop) {
      new Assertion(subject, flagMsg, ssfi, true).is.a('function');
      initial = subject();
    } else {
      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);
      initial = subject[prop];
    }

    // Make sure that the target is a number
    new Assertion(initial, flagMsg, ssfi, true).is.a('number');

    fn();

    var final = prop === undefined || prop === null ? subject() : subject[prop];
    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;

    flag(this, 'deltaMsgObj', msgObj);
    flag(this, 'initialDeltaValue', initial);
    flag(this, 'finalDeltaValue', final);
    flag(this, 'deltaBehavior', 'increase');
    flag(this, 'realDelta', final - initial);

    this.assert(
      final - initial > 0
      , 'expected ' + msgObj + ' to increase'
      , 'expected ' + msgObj + ' to not increase'
    );
  }

  Assertion.addMethod('increase', assertIncreases);
  Assertion.addMethod('increases', assertIncreases);

  /**
   * ### .decrease(subject[, prop[, msg]])
   *
   * When one argument is provided, `.decrease` asserts that the given function
   * `subject` returns a lesser number when it's invoked after invoking the
   * target function compared to when it's invoked beforehand. `.decrease` also
   * causes all `.by` assertions that follow in the chain to assert how much
   * lesser of a number is returned. It's often best to assert that the return
   * value decreased by the expected amount, rather than asserting it decreased
   * by any amount.
   *
   *     var val = 1
   *       , subtractTwo = function () { val -= 2; }
   *       , getVal = function () { return val; };
   *
   *     expect(subtractTwo).to.decrease(getVal).by(2); // Recommended
   *     expect(subtractTwo).to.decrease(getVal); // Not recommended
   *
   * When two arguments are provided, `.decrease` asserts that the value of the
   * given object `subject`'s `prop` property is lesser after invoking the
   * target function compared to beforehand.
   *
   *     var myObj = {val: 1}
   *       , subtractTwo = function () { myObj.val -= 2; };
   *
   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended
   *     expect(subtractTwo).to.decrease(myObj, 'val'); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.decrease`. However, it's
   * dangerous to do so. The problem is that it creates uncertain expectations
   * by asserting that the subject either increases, or that it stays the same.
   * It's often best to identify the exact output that's expected, and then
   * write an assertion that only accepts that exact output.
   *
   * When the subject is expected to increase, it's often best to assert that it
   * increased by the expected amount.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; };
   *
   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended
   *     expect(addTwo).to.not.decrease(myObj, 'val'); // Not recommended
   *
   * When the subject is expected to stay the same, it's often best to assert
   * exactly that.
   *
   *     var myObj = {val: 1}
   *       , noop = function () {};
   *
   *     expect(noop).to.not.change(myObj, 'val'); // Recommended
   *     expect(noop).to.not.decrease(myObj, 'val'); // Not recommended
   *
   * `.decrease` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`. When not providing two arguments, always
   * use the second form.
   *
   *     var myObj = {val: 1}
   *       , noop = function () {};
   *
   *     expect(noop).to.decrease(myObj, 'val', 'nooo why fail??');
   *
   *     var val = 1
   *       , noop = function () {}
   *       , getVal = function () { return val; };
   *
   *     expect(noop, 'nooo why fail??').to.decrease(getVal);
   *
   * The alias `.decreases` can be used interchangeably with `.decrease`.
   *
   * @name decrease
   * @alias decreases
   * @param {String|Function} subject
   * @param {String} prop name _optional_
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertDecreases (subject, prop, msg) {
    if (msg) flag(this, 'message', msg);
    var fn = flag(this, 'object')
      , flagMsg = flag(this, 'message')
      , ssfi = flag(this, 'ssfi');
    new Assertion(fn, flagMsg, ssfi, true).is.a('function');

    var initial;
    if (!prop) {
      new Assertion(subject, flagMsg, ssfi, true).is.a('function');
      initial = subject();
    } else {
      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);
      initial = subject[prop];
    }

    // Make sure that the target is a number
    new Assertion(initial, flagMsg, ssfi, true).is.a('number');

    fn();

    var final = prop === undefined || prop === null ? subject() : subject[prop];
    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;

    flag(this, 'deltaMsgObj', msgObj);
    flag(this, 'initialDeltaValue', initial);
    flag(this, 'finalDeltaValue', final);
    flag(this, 'deltaBehavior', 'decrease');
    flag(this, 'realDelta', initial - final);

    this.assert(
      final - initial < 0
      , 'expected ' + msgObj + ' to decrease'
      , 'expected ' + msgObj + ' to not decrease'
    );
  }

  Assertion.addMethod('decrease', assertDecreases);
  Assertion.addMethod('decreases', assertDecreases);

  /**
   * ### .by(delta[, msg])
   *
   * When following an `.increase` assertion in the chain, `.by` asserts that
   * the subject of the `.increase` assertion increased by the given `delta`.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; };
   *
   *     expect(addTwo).to.increase(myObj, 'val').by(2);
   *
   * When following a `.decrease` assertion in the chain, `.by` asserts that the
   * subject of the `.decrease` assertion decreased by the given `delta`.
   *
   *     var myObj = {val: 1}
   *       , subtractTwo = function () { myObj.val -= 2; };
   *
   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2);
   *
   * When following a `.change` assertion in the chain, `.by` asserts that the
   * subject of the `.change` assertion either increased or decreased by the
   * given `delta`. However, it's dangerous to use `.change.by`. The problem is
   * that it creates uncertain expectations. It's often best to identify the
   * exact output that's expected, and then write an assertion that only accepts
   * that exact output.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; }
   *       , subtractTwo = function () { myObj.val -= 2; };
   *
   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended
   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended
   *
   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended
   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.by`. However, it's often best
   * to assert that the subject changed by its expected delta, rather than
   * asserting that it didn't change by one of countless unexpected deltas.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; };
   *
   *     // Recommended
   *     expect(addTwo).to.increase(myObj, 'val').by(2);
   *
   *     // Not recommended
   *     expect(addTwo).to.increase(myObj, 'val').but.not.by(3);
   *
   * `.by` accepts an optional `msg` argument which is a custom error message to
   * show when the assertion fails. The message can also be given as the second
   * argument to `expect`.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; };
   *
   *     expect(addTwo).to.increase(myObj, 'val').by(3, 'nooo why fail??');
   *     expect(addTwo, 'nooo why fail??').to.increase(myObj, 'val').by(3);
   *
   * @name by
   * @param {Number} delta
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertDelta(delta, msg) {
    if (msg) flag(this, 'message', msg);

    var msgObj = flag(this, 'deltaMsgObj');
    var initial = flag(this, 'initialDeltaValue');
    var final = flag(this, 'finalDeltaValue');
    var behavior = flag(this, 'deltaBehavior');
    var realDelta = flag(this, 'realDelta');

    var expression;
    if (behavior === 'change') {
      expression = Math.abs(final - initial) === Math.abs(delta);
    } else {
      expression = realDelta === Math.abs(delta);
    }

    this.assert(
      expression
      , 'expected ' + msgObj + ' to ' + behavior + ' by ' + delta
      , 'expected ' + msgObj + ' to not ' + behavior + ' by ' + delta
    );
  }

  Assertion.addMethod('by', assertDelta);

  /**
   * ### .extensible
   *
   * Asserts that the target is extensible, which means that new properties can
   * be added to it. Primitives are never extensible.
   *
   *     expect({a: 1}).to.be.extensible;
   *
   * Add `.not` earlier in the chain to negate `.extensible`.
   *
   *     var nonExtensibleObject = Object.preventExtensions({})
   *       , sealedObject = Object.seal({})
   *       , frozenObject = Object.freeze({});
   *
   *     expect(nonExtensibleObject).to.not.be.extensible;
   *     expect(sealedObject).to.not.be.extensible;
   *     expect(frozenObject).to.not.be.extensible;
   *     expect(1).to.not.be.extensible;
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(1, 'nooo why fail??').to.be.extensible;
   *
   * @name extensible
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('extensible', function() {
    var obj = flag(this, 'object');

    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.
    // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible
    // The following provides ES6 behavior for ES5 environments.

    var isExtensible = obj === Object(obj) && Object.isExtensible(obj);

    this.assert(
      isExtensible
      , 'expected #{this} to be extensible'
      , 'expected #{this} to not be extensible'
    );
  });

  /**
   * ### .sealed
   *
   * Asserts that the target is sealed, which means that new properties can't be
   * added to it, and its existing properties can't be reconfigured or deleted.
   * However, it's possible that its existing properties can still be reassigned
   * to different values. Primitives are always sealed.
   *
   *     var sealedObject = Object.seal({});
   *     var frozenObject = Object.freeze({});
   *
   *     expect(sealedObject).to.be.sealed;
   *     expect(frozenObject).to.be.sealed;
   *     expect(1).to.be.sealed;
   *
   * Add `.not` earlier in the chain to negate `.sealed`.
   *
   *     expect({a: 1}).to.not.be.sealed;
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect({a: 1}, 'nooo why fail??').to.be.sealed;
   *
   * @name sealed
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('sealed', function() {
    var obj = flag(this, 'object');

    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.
    // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.
    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed
    // The following provides ES6 behavior for ES5 environments.

    var isSealed = obj === Object(obj) ? Object.isSealed(obj) : true;

    this.assert(
      isSealed
      , 'expected #{this} to be sealed'
      , 'expected #{this} to not be sealed'
    );
  });

  /**
   * ### .frozen
   *
   * Asserts that the target is frozen, which means that new properties can't be
   * added to it, and its existing properties can't be reassigned to different
   * values, reconfigured, or deleted. Primitives are always frozen.
   *
   *     var frozenObject = Object.freeze({});
   *
   *     expect(frozenObject).to.be.frozen;
   *     expect(1).to.be.frozen;
   *
   * Add `.not` earlier in the chain to negate `.frozen`.
   *
   *     expect({a: 1}).to.not.be.frozen;
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect({a: 1}, 'nooo why fail??').to.be.frozen;
   *
   * @name frozen
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('frozen', function() {
    var obj = flag(this, 'object');

    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.
    // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.
    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen
    // The following provides ES6 behavior for ES5 environments.

    var isFrozen = obj === Object(obj) ? Object.isFrozen(obj) : true;

    this.assert(
      isFrozen
      , 'expected #{this} to be frozen'
      , 'expected #{this} to not be frozen'
    );
  });

  /**
   * ### .finite
   *
   * Asserts that the target is a number, and isn't `NaN` or positive/negative
   * `Infinity`.
   *
   *     expect(1).to.be.finite;
   *
   * Add `.not` earlier in the chain to negate `.finite`. However, it's
   * dangerous to do so. The problem is that it creates uncertain expectations
   * by asserting that the subject either isn't a number, or that it's `NaN`, or
   * that it's positive `Infinity`, or that it's negative `Infinity`. It's often
   * best to identify the exact output that's expected, and then write an
   * assertion that only accepts that exact output.
   *
   * When the target isn't expected to be a number, it's often best to assert
   * that it's the expected type, rather than asserting that it isn't one of
   * many unexpected types.
   *
   *     expect('foo').to.be.a('string'); // Recommended
   *     expect('foo').to.not.be.finite; // Not recommended
   *
   * When the target is expected to be `NaN`, it's often best to assert exactly
   * that.
   *
   *     expect(NaN).to.be.NaN; // Recommended
   *     expect(NaN).to.not.be.finite; // Not recommended
   *
   * When the target is expected to be positive infinity, it's often best to
   * assert exactly that.
   *
   *     expect(Infinity).to.equal(Infinity); // Recommended
   *     expect(Infinity).to.not.be.finite; // Not recommended
   *
   * When the target is expected to be negative infinity, it's often best to
   * assert exactly that.
   *
   *     expect(-Infinity).to.equal(-Infinity); // Recommended
   *     expect(-Infinity).to.not.be.finite; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect('foo', 'nooo why fail??').to.be.finite;
   *
   * @name finite
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('finite', function(msg) {
    var obj = flag(this, 'object');

    this.assert(
        typeof obj === 'number' && isFinite(obj)
      , 'expected #{this} to be a finite number'
      , 'expected #{this} to not be a finite number'
    );
  });
};


/***/ }),

/***/ "../node_modules/chai/lib/chai/interface/assert.js":
/*!*********************************************************!*\
  !*** ../node_modules/chai/lib/chai/interface/assert.js ***!
  \*********************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module */
/*! CommonJS bailout: module.exports is used directly at 7:0-14 */
/***/ ((module) => {

/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

module.exports = function (chai, util) {
  /*!
   * Chai dependencies.
   */

  var Assertion = chai.Assertion
    , flag = util.flag;

  /*!
   * Module export.
   */

  /**
   * ### assert(expression, message)
   *
   * Write your own test expressions.
   *
   *     assert('foo' !== 'bar', 'foo is not bar');
   *     assert(Array.isArray([]), 'empty arrays are arrays');
   *
   * @param {Mixed} expression to test for truthiness
   * @param {String} message to display on error
   * @name assert
   * @namespace Assert
   * @api public
   */

  var assert = chai.assert = function (express, errmsg) {
    var test = new Assertion(null, null, chai.assert, true);
    test.assert(
        express
      , errmsg
      , '[ negation message unavailable ]'
    );
  };

  /**
   * ### .fail([message])
   * ### .fail(actual, expected, [message], [operator])
   *
   * Throw a failure. Node.js `assert` module-compatible.
   *
   *     assert.fail();
   *     assert.fail("custom error message");
   *     assert.fail(1, 2);
   *     assert.fail(1, 2, "custom error message");
   *     assert.fail(1, 2, "custom error message", ">");
   *     assert.fail(1, 2, undefined, ">");
   *
   * @name fail
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @param {String} operator
   * @namespace Assert
   * @api public
   */

  assert.fail = function (actual, expected, message, operator) {
    if (arguments.length < 2) {
        // Comply with Node's fail([message]) interface

        message = actual;
        actual = undefined;
    }

    message = message || 'assert.fail()';
    throw new chai.AssertionError(message, {
        actual: actual
      , expected: expected
      , operator: operator
    }, assert.fail);
  };

  /**
   * ### .isOk(object, [message])
   *
   * Asserts that `object` is truthy.
   *
   *     assert.isOk('everything', 'everything is ok');
   *     assert.isOk(false, 'this will fail');
   *
   * @name isOk
   * @alias ok
   * @param {Mixed} object to test
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isOk = function (val, msg) {
    new Assertion(val, msg, assert.isOk, true).is.ok;
  };

  /**
   * ### .isNotOk(object, [message])
   *
   * Asserts that `object` is falsy.
   *
   *     assert.isNotOk('everything', 'this will fail');
   *     assert.isNotOk(false, 'this will pass');
   *
   * @name isNotOk
   * @alias notOk
   * @param {Mixed} object to test
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNotOk = function (val, msg) {
    new Assertion(val, msg, assert.isNotOk, true).is.not.ok;
  };

  /**
   * ### .equal(actual, expected, [message])
   *
   * Asserts non-strict equality (`==`) of `actual` and `expected`.
   *
   *     assert.equal(3, '3', '== coerces values to strings');
   *
   * @name equal
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.equal = function (act, exp, msg) {
    var test = new Assertion(act, msg, assert.equal, true);

    test.assert(
        exp == flag(test, 'object')
      , 'expected #{this} to equal #{exp}'
      , 'expected #{this} to not equal #{act}'
      , exp
      , act
      , true
    );
  };

  /**
   * ### .notEqual(actual, expected, [message])
   *
   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.
   *
   *     assert.notEqual(3, 4, 'these numbers are not equal');
   *
   * @name notEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notEqual = function (act, exp, msg) {
    var test = new Assertion(act, msg, assert.notEqual, true);

    test.assert(
        exp != flag(test, 'object')
      , 'expected #{this} to not equal #{exp}'
      , 'expected #{this} to equal #{act}'
      , exp
      , act
      , true
    );
  };

  /**
   * ### .strictEqual(actual, expected, [message])
   *
   * Asserts strict equality (`===`) of `actual` and `expected`.
   *
   *     assert.strictEqual(true, true, 'these booleans are strictly equal');
   *
   * @name strictEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.strictEqual = function (act, exp, msg) {
    new Assertion(act, msg, assert.strictEqual, true).to.equal(exp);
  };

  /**
   * ### .notStrictEqual(actual, expected, [message])
   *
   * Asserts strict inequality (`!==`) of `actual` and `expected`.
   *
   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');
   *
   * @name notStrictEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notStrictEqual = function (act, exp, msg) {
    new Assertion(act, msg, assert.notStrictEqual, true).to.not.equal(exp);
  };

  /**
   * ### .deepEqual(actual, expected, [message])
   *
   * Asserts that `actual` is deeply equal to `expected`.
   *
   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });
   *
   * @name deepEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @alias deepStrictEqual
   * @namespace Assert
   * @api public
   */

  assert.deepEqual = assert.deepStrictEqual = function (act, exp, msg) {
    new Assertion(act, msg, assert.deepEqual, true).to.eql(exp);
  };

  /**
   * ### .notDeepEqual(actual, expected, [message])
   *
   * Assert that `actual` is not deeply equal to `expected`.
   *
   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });
   *
   * @name notDeepEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notDeepEqual = function (act, exp, msg) {
    new Assertion(act, msg, assert.notDeepEqual, true).to.not.eql(exp);
  };

   /**
   * ### .isAbove(valueToCheck, valueToBeAbove, [message])
   *
   * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`.
   *
   *     assert.isAbove(5, 2, '5 is strictly greater than 2');
   *
   * @name isAbove
   * @param {Mixed} valueToCheck
   * @param {Mixed} valueToBeAbove
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isAbove = function (val, abv, msg) {
    new Assertion(val, msg, assert.isAbove, true).to.be.above(abv);
  };

   /**
   * ### .isAtLeast(valueToCheck, valueToBeAtLeast, [message])
   *
   * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`.
   *
   *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');
   *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');
   *
   * @name isAtLeast
   * @param {Mixed} valueToCheck
   * @param {Mixed} valueToBeAtLeast
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isAtLeast = function (val, atlst, msg) {
    new Assertion(val, msg, assert.isAtLeast, true).to.be.least(atlst);
  };

   /**
   * ### .isBelow(valueToCheck, valueToBeBelow, [message])
   *
   * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`.
   *
   *     assert.isBelow(3, 6, '3 is strictly less than 6');
   *
   * @name isBelow
   * @param {Mixed} valueToCheck
   * @param {Mixed} valueToBeBelow
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isBelow = function (val, blw, msg) {
    new Assertion(val, msg, assert.isBelow, true).to.be.below(blw);
  };

   /**
   * ### .isAtMost(valueToCheck, valueToBeAtMost, [message])
   *
   * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`.
   *
   *     assert.isAtMost(3, 6, '3 is less than or equal to 6');
   *     assert.isAtMost(4, 4, '4 is less than or equal to 4');
   *
   * @name isAtMost
   * @param {Mixed} valueToCheck
   * @param {Mixed} valueToBeAtMost
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isAtMost = function (val, atmst, msg) {
    new Assertion(val, msg, assert.isAtMost, true).to.be.most(atmst);
  };

  /**
   * ### .isTrue(value, [message])
   *
   * Asserts that `value` is true.
   *
   *     var teaServed = true;
   *     assert.isTrue(teaServed, 'the tea has been served');
   *
   * @name isTrue
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isTrue = function (val, msg) {
    new Assertion(val, msg, assert.isTrue, true).is['true'];
  };

  /**
   * ### .isNotTrue(value, [message])
   *
   * Asserts that `value` is not true.
   *
   *     var tea = 'tasty chai';
   *     assert.isNotTrue(tea, 'great, time for tea!');
   *
   * @name isNotTrue
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNotTrue = function (val, msg) {
    new Assertion(val, msg, assert.isNotTrue, true).to.not.equal(true);
  };

  /**
   * ### .isFalse(value, [message])
   *
   * Asserts that `value` is false.
   *
   *     var teaServed = false;
   *     assert.isFalse(teaServed, 'no tea yet? hmm...');
   *
   * @name isFalse
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isFalse = function (val, msg) {
    new Assertion(val, msg, assert.isFalse, true).is['false'];
  };

  /**
   * ### .isNotFalse(value, [message])
   *
   * Asserts that `value` is not false.
   *
   *     var tea = 'tasty chai';
   *     assert.isNotFalse(tea, 'great, time for tea!');
   *
   * @name isNotFalse
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNotFalse = function (val, msg) {
    new Assertion(val, msg, assert.isNotFalse, true).to.not.equal(false);
  };

  /**
   * ### .isNull(value, [message])
   *
   * Asserts that `value` is null.
   *
   *     assert.isNull(err, 'there was no error');
   *
   * @name isNull
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNull = function (val, msg) {
    new Assertion(val, msg, assert.isNull, true).to.equal(null);
  };

  /**
   * ### .isNotNull(value, [message])
   *
   * Asserts that `value` is not null.
   *
   *     var tea = 'tasty chai';
   *     assert.isNotNull(tea, 'great, time for tea!');
   *
   * @name isNotNull
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNotNull = function (val, msg) {
    new Assertion(val, msg, assert.isNotNull, true).to.not.equal(null);
  };

  /**
   * ### .isNaN
   *
   * Asserts that value is NaN.
   *
   *     assert.isNaN(NaN, 'NaN is NaN');
   *
   * @name isNaN
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNaN = function (val, msg) {
    new Assertion(val, msg, assert.isNaN, true).to.be.NaN;
  };

  /**
   * ### .isNotNaN
   *
   * Asserts that value is not NaN.
   *
   *     assert.isNotNaN(4, '4 is not NaN');
   *
   * @name isNotNaN
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */
  assert.isNotNaN = function (val, msg) {
    new Assertion(val, msg, assert.isNotNaN, true).not.to.be.NaN;
  };

  /**
   * ### .exists
   *
   * Asserts that the target is neither `null` nor `undefined`.
   *
   *     var foo = 'hi';
   *
   *     assert.exists(foo, 'foo is neither `null` nor `undefined`');
   *
   * @name exists
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.exists = function (val, msg) {
    new Assertion(val, msg, assert.exists, true).to.exist;
  };

  /**
   * ### .notExists
   *
   * Asserts that the target is either `null` or `undefined`.
   *
   *     var bar = null
   *       , baz;
   *
   *     assert.notExists(bar);
   *     assert.notExists(baz, 'baz is either null or undefined');
   *
   * @name notExists
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notExists = function (val, msg) {
    new Assertion(val, msg, assert.notExists, true).to.not.exist;
  };

  /**
   * ### .isUndefined(value, [message])
   *
   * Asserts that `value` is `undefined`.
   *
   *     var tea;
   *     assert.isUndefined(tea, 'no tea defined');
   *
   * @name isUndefined
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isUndefined = function (val, msg) {
    new Assertion(val, msg, assert.isUndefined, true).to.equal(undefined);
  };

  /**
   * ### .isDefined(value, [message])
   *
   * Asserts that `value` is not `undefined`.
   *
   *     var tea = 'cup of chai';
   *     assert.isDefined(tea, 'tea has been defined');
   *
   * @name isDefined
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isDefined = function (val, msg) {
    new Assertion(val, msg, assert.isDefined, true).to.not.equal(undefined);
  };

  /**
   * ### .isFunction(value, [message])
   *
   * Asserts that `value` is a function.
   *
   *     function serveTea() { return 'cup of tea'; };
   *     assert.isFunction(serveTea, 'great, we can have tea now');
   *
   * @name isFunction
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isFunction = function (val, msg) {
    new Assertion(val, msg, assert.isFunction, true).to.be.a('function');
  };

  /**
   * ### .isNotFunction(value, [message])
   *
   * Asserts that `value` is _not_ a function.
   *
   *     var serveTea = [ 'heat', 'pour', 'sip' ];
   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');
   *
   * @name isNotFunction
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNotFunction = function (val, msg) {
    new Assertion(val, msg, assert.isNotFunction, true).to.not.be.a('function');
  };

  /**
   * ### .isObject(value, [message])
   *
   * Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).
   * _The assertion does not match subclassed objects._
   *
   *     var selection = { name: 'Chai', serve: 'with spices' };
   *     assert.isObject(selection, 'tea selection is an object');
   *
   * @name isObject
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isObject = function (val, msg) {
    new Assertion(val, msg, assert.isObject, true).to.be.a('object');
  };

  /**
   * ### .isNotObject(value, [message])
   *
   * Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).
   *
   *     var selection = 'chai'
   *     assert.isNotObject(selection, 'tea selection is not an object');
   *     assert.isNotObject(null, 'null is not an object');
   *
   * @name isNotObject
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNotObject = function (val, msg) {
    new Assertion(val, msg, assert.isNotObject, true).to.not.be.a('object');
  };

  /**
   * ### .isArray(value, [message])
   *
   * Asserts that `value` is an array.
   *
   *     var menu = [ 'green', 'chai', 'oolong' ];
   *     assert.isArray(menu, 'what kind of tea do we want?');
   *
   * @name isArray
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isArray = function (val, msg) {
    new Assertion(val, msg, assert.isArray, true).to.be.an('array');
  };

  /**
   * ### .isNotArray(value, [message])
   *
   * Asserts that `value` is _not_ an array.
   *
   *     var menu = 'green|chai|oolong';
   *     assert.isNotArray(menu, 'what kind of tea do we want?');
   *
   * @name isNotArray
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNotArray = function (val, msg) {
    new Assertion(val, msg, assert.isNotArray, true).to.not.be.an('array');
  };

  /**
   * ### .isString(value, [message])
   *
   * Asserts that `value` is a string.
   *
   *     var teaOrder = 'chai';
   *     assert.isString(teaOrder, 'order placed');
   *
   * @name isString
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isString = function (val, msg) {
    new Assertion(val, msg, assert.isString, true).to.be.a('string');
  };

  /**
   * ### .isNotString(value, [message])
   *
   * Asserts that `value` is _not_ a string.
   *
   *     var teaOrder = 4;
   *     assert.isNotString(teaOrder, 'order placed');
   *
   * @name isNotString
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNotString = function (val, msg) {
    new Assertion(val, msg, assert.isNotString, true).to.not.be.a('string');
  };

  /**
   * ### .isNumber(value, [message])
   *
   * Asserts that `value` is a number.
   *
   *     var cups = 2;
   *     assert.isNumber(cups, 'how many cups');
   *
   * @name isNumber
   * @param {Number} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNumber = function (val, msg) {
    new Assertion(val, msg, assert.isNumber, true).to.be.a('number');
  };

  /**
   * ### .isNotNumber(value, [message])
   *
   * Asserts that `value` is _not_ a number.
   *
   *     var cups = '2 cups please';
   *     assert.isNotNumber(cups, 'how many cups');
   *
   * @name isNotNumber
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNotNumber = function (val, msg) {
    new Assertion(val, msg, assert.isNotNumber, true).to.not.be.a('number');
  };

   /**
   * ### .isFinite(value, [message])
   *
   * Asserts that `value` is a finite number. Unlike `.isNumber`, this will fail for `NaN` and `Infinity`.
   *
   *     var cups = 2;
   *     assert.isFinite(cups, 'how many cups');
   *
   *     assert.isFinite(NaN); // throws
   *
   * @name isFinite
   * @param {Number} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isFinite = function (val, msg) {
    new Assertion(val, msg, assert.isFinite, true).to.be.finite;
  };

  /**
   * ### .isBoolean(value, [message])
   *
   * Asserts that `value` is a boolean.
   *
   *     var teaReady = true
   *       , teaServed = false;
   *
   *     assert.isBoolean(teaReady, 'is the tea ready');
   *     assert.isBoolean(teaServed, 'has tea been served');
   *
   * @name isBoolean
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isBoolean = function (val, msg) {
    new Assertion(val, msg, assert.isBoolean, true).to.be.a('boolean');
  };

  /**
   * ### .isNotBoolean(value, [message])
   *
   * Asserts that `value` is _not_ a boolean.
   *
   *     var teaReady = 'yep'
   *       , teaServed = 'nope';
   *
   *     assert.isNotBoolean(teaReady, 'is the tea ready');
   *     assert.isNotBoolean(teaServed, 'has tea been served');
   *
   * @name isNotBoolean
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.isNotBoolean = function (val, msg) {
    new Assertion(val, msg, assert.isNotBoolean, true).to.not.be.a('boolean');
  };

  /**
   * ### .typeOf(value, name, [message])
   *
   * Asserts that `value`'s type is `name`, as determined by
   * `Object.prototype.toString`.
   *
   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');
   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');
   *     assert.typeOf('tea', 'string', 'we have a string');
   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');
   *     assert.typeOf(null, 'null', 'we have a null');
   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');
   *
   * @name typeOf
   * @param {Mixed} value
   * @param {String} name
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.typeOf = function (val, type, msg) {
    new Assertion(val, msg, assert.typeOf, true).to.be.a(type);
  };

  /**
   * ### .notTypeOf(value, name, [message])
   *
   * Asserts that `value`'s type is _not_ `name`, as determined by
   * `Object.prototype.toString`.
   *
   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');
   *
   * @name notTypeOf
   * @param {Mixed} value
   * @param {String} typeof name
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notTypeOf = function (val, type, msg) {
    new Assertion(val, msg, assert.notTypeOf, true).to.not.be.a(type);
  };

  /**
   * ### .instanceOf(object, constructor, [message])
   *
   * Asserts that `value` is an instance of `constructor`.
   *
   *     var Tea = function (name) { this.name = name; }
   *       , chai = new Tea('chai');
   *
   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');
   *
   * @name instanceOf
   * @param {Object} object
   * @param {Constructor} constructor
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.instanceOf = function (val, type, msg) {
    new Assertion(val, msg, assert.instanceOf, true).to.be.instanceOf(type);
  };

  /**
   * ### .notInstanceOf(object, constructor, [message])
   *
   * Asserts `value` is not an instance of `constructor`.
   *
   *     var Tea = function (name) { this.name = name; }
   *       , chai = new String('chai');
   *
   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');
   *
   * @name notInstanceOf
   * @param {Object} object
   * @param {Constructor} constructor
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notInstanceOf = function (val, type, msg) {
    new Assertion(val, msg, assert.notInstanceOf, true)
      .to.not.be.instanceOf(type);
  };

  /**
   * ### .include(haystack, needle, [message])
   *
   * Asserts that `haystack` includes `needle`. Can be used to assert the
   * inclusion of a value in an array, a substring in a string, or a subset of
   * properties in an object.
   *
   *     assert.include([1,2,3], 2, 'array contains value');
   *     assert.include('foobar', 'foo', 'string contains substring');
   *     assert.include({ foo: 'bar', hello: 'universe' }, { foo: 'bar' }, 'object contains property');
   *
   * Strict equality (===) is used. When asserting the inclusion of a value in
   * an array, the array is searched for an element that's strictly equal to the
   * given value. When asserting a subset of properties in an object, the object
   * is searched for the given property keys, checking that each one is present
   * and strictly equal to the given property value. For instance:
   *
   *     var obj1 = {a: 1}
   *       , obj2 = {b: 2};
   *     assert.include([obj1, obj2], obj1);
   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1});
   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1, bar: obj2});
   *
   * @name include
   * @param {Array|String} haystack
   * @param {Mixed} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.include = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.include, true).include(inc);
  };

  /**
   * ### .notInclude(haystack, needle, [message])
   *
   * Asserts that `haystack` does not include `needle`. Can be used to assert
   * the absence of a value in an array, a substring in a string, or a subset of
   * properties in an object.
   *
   *     assert.notInclude([1,2,3], 4, "array doesn't contain value");
   *     assert.notInclude('foobar', 'baz', "string doesn't contain substring");
   *     assert.notInclude({ foo: 'bar', hello: 'universe' }, { foo: 'baz' }, 'object doesn't contain property');
   *
   * Strict equality (===) is used. When asserting the absence of a value in an
   * array, the array is searched to confirm the absence of an element that's
   * strictly equal to the given value. When asserting a subset of properties in
   * an object, the object is searched to confirm that at least one of the given
   * property keys is either not present or not strictly equal to the given
   * property value. For instance:
   *
   *     var obj1 = {a: 1}
   *       , obj2 = {b: 2};
   *     assert.notInclude([obj1, obj2], {a: 1});
   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});
   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: obj1, bar: {b: 2}});
   *
   * @name notInclude
   * @param {Array|String} haystack
   * @param {Mixed} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.notInclude, true).not.include(inc);
  };

  /**
   * ### .deepInclude(haystack, needle, [message])
   *
   * Asserts that `haystack` includes `needle`. Can be used to assert the
   * inclusion of a value in an array or a subset of properties in an object.
   * Deep equality is used.
   *
   *     var obj1 = {a: 1}
   *       , obj2 = {b: 2};
   *     assert.deepInclude([obj1, obj2], {a: 1});
   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});
   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 2}});
   *
   * @name deepInclude
   * @param {Array|String} haystack
   * @param {Mixed} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.deepInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.deepInclude, true).deep.include(inc);
  };

  /**
   * ### .notDeepInclude(haystack, needle, [message])
   *
   * Asserts that `haystack` does not include `needle`. Can be used to assert
   * the absence of a value in an array or a subset of properties in an object.
   * Deep equality is used.
   *
   *     var obj1 = {a: 1}
   *       , obj2 = {b: 2};
   *     assert.notDeepInclude([obj1, obj2], {a: 9});
   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 9}});
   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 9}});
   *
   * @name notDeepInclude
   * @param {Array|String} haystack
   * @param {Mixed} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notDeepInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.notDeepInclude, true).not.deep.include(inc);
  };

  /**
   * ### .nestedInclude(haystack, needle, [message])
   *
   * Asserts that 'haystack' includes 'needle'.
   * Can be used to assert the inclusion of a subset of properties in an
   * object.
   * Enables the use of dot- and bracket-notation for referencing nested
   * properties.
   * '[]' and '.' in property names can be escaped using double backslashes.
   *
   *     assert.nestedInclude({'.a': {'b': 'x'}}, {'\\.a.[b]': 'x'});
   *     assert.nestedInclude({'a': {'[b]': 'x'}}, {'a.\\[b\\]': 'x'});
   *
   * @name nestedInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.nestedInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.nestedInclude, true).nested.include(inc);
  };

  /**
   * ### .notNestedInclude(haystack, needle, [message])
   *
   * Asserts that 'haystack' does not include 'needle'.
   * Can be used to assert the absence of a subset of properties in an
   * object.
   * Enables the use of dot- and bracket-notation for referencing nested
   * properties.
   * '[]' and '.' in property names can be escaped using double backslashes.
   *
   *     assert.notNestedInclude({'.a': {'b': 'x'}}, {'\\.a.b': 'y'});
   *     assert.notNestedInclude({'a': {'[b]': 'x'}}, {'a.\\[b\\]': 'y'});
   *
   * @name notNestedInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notNestedInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.notNestedInclude, true)
      .not.nested.include(inc);
  };

  /**
   * ### .deepNestedInclude(haystack, needle, [message])
   *
   * Asserts that 'haystack' includes 'needle'.
   * Can be used to assert the inclusion of a subset of properties in an
   * object while checking for deep equality.
   * Enables the use of dot- and bracket-notation for referencing nested
   * properties.
   * '[]' and '.' in property names can be escaped using double backslashes.
   *
   *     assert.deepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {x: 1}});
   *     assert.deepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\.a.\\[b\\]': {x: 1}});
   *
   * @name deepNestedInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.deepNestedInclude = function(exp, inc, msg) {
    new Assertion(exp, msg, assert.deepNestedInclude, true)
      .deep.nested.include(inc);
  };

  /**
   * ### .notDeepNestedInclude(haystack, needle, [message])
   *
   * Asserts that 'haystack' does not include 'needle'.
   * Can be used to assert the absence of a subset of properties in an
   * object while checking for deep equality.
   * Enables the use of dot- and bracket-notation for referencing nested
   * properties.
   * '[]' and '.' in property names can be escaped using double backslashes.
   *
   *     assert.notDeepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {y: 1}})
   *     assert.notDeepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\.a.\\[b\\]': {y: 2}});
   *
   * @name notDeepNestedInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notDeepNestedInclude = function(exp, inc, msg) {
    new Assertion(exp, msg, assert.notDeepNestedInclude, true)
      .not.deep.nested.include(inc);
  };

  /**
   * ### .ownInclude(haystack, needle, [message])
   *
   * Asserts that 'haystack' includes 'needle'.
   * Can be used to assert the inclusion of a subset of properties in an
   * object while ignoring inherited properties.
   *
   *     assert.ownInclude({ a: 1 }, { a: 1 });
   *
   * @name ownInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.ownInclude = function(exp, inc, msg) {
    new Assertion(exp, msg, assert.ownInclude, true).own.include(inc);
  };

  /**
   * ### .notOwnInclude(haystack, needle, [message])
   *
   * Asserts that 'haystack' includes 'needle'.
   * Can be used to assert the absence of a subset of properties in an
   * object while ignoring inherited properties.
   *
   *     Object.prototype.b = 2;
   *
   *     assert.notOwnInclude({ a: 1 }, { b: 2 });
   *
   * @name notOwnInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notOwnInclude = function(exp, inc, msg) {
    new Assertion(exp, msg, assert.notOwnInclude, true).not.own.include(inc);
  };

  /**
   * ### .deepOwnInclude(haystack, needle, [message])
   *
   * Asserts that 'haystack' includes 'needle'.
   * Can be used to assert the inclusion of a subset of properties in an
   * object while ignoring inherited properties and checking for deep equality.
   *
   *      assert.deepOwnInclude({a: {b: 2}}, {a: {b: 2}});
   *
   * @name deepOwnInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.deepOwnInclude = function(exp, inc, msg) {
    new Assertion(exp, msg, assert.deepOwnInclude, true)
      .deep.own.include(inc);
  };

   /**
   * ### .notDeepOwnInclude(haystack, needle, [message])
   *
   * Asserts that 'haystack' includes 'needle'.
   * Can be used to assert the absence of a subset of properties in an
   * object while ignoring inherited properties and checking for deep equality.
   *
   *      assert.notDeepOwnInclude({a: {b: 2}}, {a: {c: 3}});
   *
   * @name notDeepOwnInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notDeepOwnInclude = function(exp, inc, msg) {
    new Assertion(exp, msg, assert.notDeepOwnInclude, true)
      .not.deep.own.include(inc);
  };

  /**
   * ### .match(value, regexp, [message])
   *
   * Asserts that `value` matches the regular expression `regexp`.
   *
   *     assert.match('foobar', /^foo/, 'regexp matches');
   *
   * @name match
   * @param {Mixed} value
   * @param {RegExp} regexp
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.match = function (exp, re, msg) {
    new Assertion(exp, msg, assert.match, true).to.match(re);
  };

  /**
   * ### .notMatch(value, regexp, [message])
   *
   * Asserts that `value` does not match the regular expression `regexp`.
   *
   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');
   *
   * @name notMatch
   * @param {Mixed} value
   * @param {RegExp} regexp
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notMatch = function (exp, re, msg) {
    new Assertion(exp, msg, assert.notMatch, true).to.not.match(re);
  };

  /**
   * ### .property(object, property, [message])
   *
   * Asserts that `object` has a direct or inherited property named by
   * `property`.
   *
   *     assert.property({ tea: { green: 'matcha' }}, 'tea');
   *     assert.property({ tea: { green: 'matcha' }}, 'toString');
   *
   * @name property
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.property = function (obj, prop, msg) {
    new Assertion(obj, msg, assert.property, true).to.have.property(prop);
  };

  /**
   * ### .notProperty(object, property, [message])
   *
   * Asserts that `object` does _not_ have a direct or inherited property named
   * by `property`.
   *
   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');
   *
   * @name notProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notProperty = function (obj, prop, msg) {
    new Assertion(obj, msg, assert.notProperty, true)
      .to.not.have.property(prop);
  };

  /**
   * ### .propertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a direct or inherited property named by
   * `property` with a value given by `value`. Uses a strict equality check
   * (===).
   *
   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');
   *
   * @name propertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.propertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg, assert.propertyVal, true)
      .to.have.property(prop, val);
  };

  /**
   * ### .notPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` does _not_ have a direct or inherited property named
   * by `property` with value given by `value`. Uses a strict equality check
   * (===).
   *
   *     assert.notPropertyVal({ tea: 'is good' }, 'tea', 'is bad');
   *     assert.notPropertyVal({ tea: 'is good' }, 'coffee', 'is good');
   *
   * @name notPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notPropertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg, assert.notPropertyVal, true)
      .to.not.have.property(prop, val);
  };

  /**
   * ### .deepPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a direct or inherited property named by
   * `property` with a value given by `value`. Uses a deep equality check.
   *
   *     assert.deepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });
   *
   * @name deepPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.deepPropertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg, assert.deepPropertyVal, true)
      .to.have.deep.property(prop, val);
  };

  /**
   * ### .notDeepPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` does _not_ have a direct or inherited property named
   * by `property` with value given by `value`. Uses a deep equality check.
   *
   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });
   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });
   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });
   *
   * @name notDeepPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notDeepPropertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg, assert.notDeepPropertyVal, true)
      .to.not.have.deep.property(prop, val);
  };

  /**
   * ### .ownProperty(object, property, [message])
   *
   * Asserts that `object` has a direct property named by `property`. Inherited
   * properties aren't checked.
   *
   *     assert.ownProperty({ tea: { green: 'matcha' }}, 'tea');
   *
   * @name ownProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @api public
   */

  assert.ownProperty = function (obj, prop, msg) {
    new Assertion(obj, msg, assert.ownProperty, true)
      .to.have.own.property(prop);
  };

  /**
   * ### .notOwnProperty(object, property, [message])
   *
   * Asserts that `object` does _not_ have a direct property named by
   * `property`. Inherited properties aren't checked.
   *
   *     assert.notOwnProperty({ tea: { green: 'matcha' }}, 'coffee');
   *     assert.notOwnProperty({}, 'toString');
   *
   * @name notOwnProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @api public
   */

  assert.notOwnProperty = function (obj, prop, msg) {
    new Assertion(obj, msg, assert.notOwnProperty, true)
      .to.not.have.own.property(prop);
  };

  /**
   * ### .ownPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a direct property named by `property` and a value
   * equal to the provided `value`. Uses a strict equality check (===).
   * Inherited properties aren't checked.
   *
   *     assert.ownPropertyVal({ coffee: 'is good'}, 'coffee', 'is good');
   *
   * @name ownPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.ownPropertyVal = function (obj, prop, value, msg) {
    new Assertion(obj, msg, assert.ownPropertyVal, true)
      .to.have.own.property(prop, value);
  };

  /**
   * ### .notOwnPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` does _not_ have a direct property named by `property`
   * with a value equal to the provided `value`. Uses a strict equality check
   * (===). Inherited properties aren't checked.
   *
   *     assert.notOwnPropertyVal({ tea: 'is better'}, 'tea', 'is worse');
   *     assert.notOwnPropertyVal({}, 'toString', Object.prototype.toString);
   *
   * @name notOwnPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.notOwnPropertyVal = function (obj, prop, value, msg) {
    new Assertion(obj, msg, assert.notOwnPropertyVal, true)
      .to.not.have.own.property(prop, value);
  };

  /**
   * ### .deepOwnPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a direct property named by `property` and a value
   * equal to the provided `value`. Uses a deep equality check. Inherited
   * properties aren't checked.
   *
   *     assert.deepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });
   *
   * @name deepOwnPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.deepOwnPropertyVal = function (obj, prop, value, msg) {
    new Assertion(obj, msg, assert.deepOwnPropertyVal, true)
      .to.have.deep.own.property(prop, value);
  };

  /**
   * ### .notDeepOwnPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` does _not_ have a direct property named by `property`
   * with a value equal to the provided `value`. Uses a deep equality check.
   * Inherited properties aren't checked.
   *
   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });
   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });
   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });
   *     assert.notDeepOwnPropertyVal({}, 'toString', Object.prototype.toString);
   *
   * @name notDeepOwnPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.notDeepOwnPropertyVal = function (obj, prop, value, msg) {
    new Assertion(obj, msg, assert.notDeepOwnPropertyVal, true)
      .to.not.have.deep.own.property(prop, value);
  };

  /**
   * ### .nestedProperty(object, property, [message])
   *
   * Asserts that `object` has a direct or inherited property named by
   * `property`, which can be a string using dot- and bracket-notation for
   * nested reference.
   *
   *     assert.nestedProperty({ tea: { green: 'matcha' }}, 'tea.green');
   *
   * @name nestedProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.nestedProperty = function (obj, prop, msg) {
    new Assertion(obj, msg, assert.nestedProperty, true)
      .to.have.nested.property(prop);
  };

  /**
   * ### .notNestedProperty(object, property, [message])
   *
   * Asserts that `object` does _not_ have a property named by `property`, which
   * can be a string using dot- and bracket-notation for nested reference. The
   * property cannot exist on the object nor anywhere in its prototype chain.
   *
   *     assert.notNestedProperty({ tea: { green: 'matcha' }}, 'tea.oolong');
   *
   * @name notNestedProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notNestedProperty = function (obj, prop, msg) {
    new Assertion(obj, msg, assert.notNestedProperty, true)
      .to.not.have.nested.property(prop);
  };

  /**
   * ### .nestedPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a property named by `property` with value given
   * by `value`. `property` can use dot- and bracket-notation for nested
   * reference. Uses a strict equality check (===).
   *
   *     assert.nestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');
   *
   * @name nestedPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.nestedPropertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg, assert.nestedPropertyVal, true)
      .to.have.nested.property(prop, val);
  };

  /**
   * ### .notNestedPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` does _not_ have a property named by `property` with
   * value given by `value`. `property` can use dot- and bracket-notation for
   * nested reference. Uses a strict equality check (===).
   *
   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');
   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'coffee.green', 'matcha');
   *
   * @name notNestedPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notNestedPropertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg, assert.notNestedPropertyVal, true)
      .to.not.have.nested.property(prop, val);
  };

  /**
   * ### .deepNestedPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a property named by `property` with a value given
   * by `value`. `property` can use dot- and bracket-notation for nested
   * reference. Uses a deep equality check.
   *
   *     assert.deepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yum' });
   *
   * @name deepNestedPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.deepNestedPropertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg, assert.deepNestedPropertyVal, true)
      .to.have.deep.nested.property(prop, val);
  };

  /**
   * ### .notDeepNestedPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` does _not_ have a property named by `property` with
   * value given by `value`. `property` can use dot- and bracket-notation for
   * nested reference. Uses a deep equality check.
   *
   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { oolong: 'yum' });
   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yuck' });
   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.black', { matcha: 'yum' });
   *
   * @name notDeepNestedPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notDeepNestedPropertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg, assert.notDeepNestedPropertyVal, true)
      .to.not.have.deep.nested.property(prop, val);
  }

  /**
   * ### .lengthOf(object, length, [message])
   *
   * Asserts that `object` has a `length` or `size` with the expected value.
   *
   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');
   *     assert.lengthOf('foobar', 6, 'string has length of 6');
   *     assert.lengthOf(new Set([1,2,3]), 3, 'set has size of 3');
   *     assert.lengthOf(new Map([['a',1],['b',2],['c',3]]), 3, 'map has size of 3');
   *
   * @name lengthOf
   * @param {Mixed} object
   * @param {Number} length
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.lengthOf = function (exp, len, msg) {
    new Assertion(exp, msg, assert.lengthOf, true).to.have.lengthOf(len);
  };

  /**
   * ### .hasAnyKeys(object, [keys], [message])
   *
   * Asserts that `object` has at least one of the `keys` provided.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'iDontExist', 'baz']);
   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, iDontExist: 99, baz: 1337});
   *     assert.hasAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);
   *     assert.hasAnyKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{foo: 'bar'}, 'anotherKey']);
   *
   * @name hasAnyKeys
   * @param {Mixed} object
   * @param {Array|Object} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.hasAnyKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.hasAnyKeys, true).to.have.any.keys(keys);
  }

  /**
   * ### .hasAllKeys(object, [keys], [message])
   *
   * Asserts that `object` has all and only all of the `keys` provided.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);
   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337]);
   *     assert.hasAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);
   *     assert.hasAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);
   *
   * @name hasAllKeys
   * @param {Mixed} object
   * @param {String[]} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.hasAllKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.hasAllKeys, true).to.have.all.keys(keys);
  }

  /**
   * ### .containsAllKeys(object, [keys], [message])
   *
   * Asserts that `object` has all of the `keys` provided but may have more keys not listed.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'baz']);
   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);
   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, baz: 1337});
   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337});
   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}]);
   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);
   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}]);
   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);
   *
   * @name containsAllKeys
   * @param {Mixed} object
   * @param {String[]} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.containsAllKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.containsAllKeys, true)
      .to.contain.all.keys(keys);
  }

  /**
   * ### .doesNotHaveAnyKeys(object, [keys], [message])
   *
   * Asserts that `object` has none of the `keys` provided.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);
   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});
   *     assert.doesNotHaveAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);
   *     assert.doesNotHaveAnyKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);
   *
   * @name doesNotHaveAnyKeys
   * @param {Mixed} object
   * @param {String[]} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.doesNotHaveAnyKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.doesNotHaveAnyKeys, true)
      .to.not.have.any.keys(keys);
  }

  /**
   * ### .doesNotHaveAllKeys(object, [keys], [message])
   *
   * Asserts that `object` does not have at least one of the `keys` provided.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);
   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});
   *     assert.doesNotHaveAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);
   *     assert.doesNotHaveAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);
   *
   * @name doesNotHaveAllKeys
   * @param {Mixed} object
   * @param {String[]} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.doesNotHaveAllKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.doesNotHaveAllKeys, true)
      .to.not.have.all.keys(keys);
  }

  /**
   * ### .hasAnyDeepKeys(object, [keys], [message])
   *
   * Asserts that `object` has at least one of the `keys` provided.
   * Since Sets and Maps can have objects as keys you can use this assertion to perform
   * a deep comparison.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});
   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), [{one: 'one'}, {two: 'two'}]);
   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);
   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});
   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {three: 'three'}]);
   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);
   *
   * @name doesNotHaveAllKeys
   * @param {Mixed} object
   * @param {Array|Object} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.hasAnyDeepKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.hasAnyDeepKeys, true)
      .to.have.any.deep.keys(keys);
  }

 /**
   * ### .hasAllDeepKeys(object, [keys], [message])
   *
   * Asserts that `object` has all and only all of the `keys` provided.
   * Since Sets and Maps can have objects as keys you can use this assertion to perform
   * a deep comparison.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne']]), {one: 'one'});
   *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);
   *     assert.hasAllDeepKeys(new Set([{one: 'one'}]), {one: 'one'});
   *     assert.hasAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);
   *
   * @name hasAllDeepKeys
   * @param {Mixed} object
   * @param {Array|Object} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.hasAllDeepKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.hasAllDeepKeys, true)
      .to.have.all.deep.keys(keys);
  }

 /**
   * ### .containsAllDeepKeys(object, [keys], [message])
   *
   * Asserts that `object` contains all of the `keys` provided.
   * Since Sets and Maps can have objects as keys you can use this assertion to perform
   * a deep comparison.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});
   *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);
   *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});
   *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);
   *
   * @name containsAllDeepKeys
   * @param {Mixed} object
   * @param {Array|Object} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.containsAllDeepKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.containsAllDeepKeys, true)
      .to.contain.all.deep.keys(keys);
  }

 /**
   * ### .doesNotHaveAnyDeepKeys(object, [keys], [message])
   *
   * Asserts that `object` has none of the `keys` provided.
   * Since Sets and Maps can have objects as keys you can use this assertion to perform
   * a deep comparison.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});
   *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);
   *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});
   *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);
   *
   * @name doesNotHaveAnyDeepKeys
   * @param {Mixed} object
   * @param {Array|Object} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.doesNotHaveAnyDeepKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.doesNotHaveAnyDeepKeys, true)
      .to.not.have.any.deep.keys(keys);
  }

 /**
   * ### .doesNotHaveAllDeepKeys(object, [keys], [message])
   *
   * Asserts that `object` does not have at least one of the `keys` provided.
   * Since Sets and Maps can have objects as keys you can use this assertion to perform
   * a deep comparison.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});
   *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {one: 'one'}]);
   *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});
   *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {fifty: 'fifty'}]);
   *
   * @name doesNotHaveAllDeepKeys
   * @param {Mixed} object
   * @param {Array|Object} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.doesNotHaveAllDeepKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.doesNotHaveAllDeepKeys, true)
      .to.not.have.all.deep.keys(keys);
  }

 /**
   * ### .throws(fn, [errorLike/string/regexp], [string/regexp], [message])
   *
   * If `errorLike` is an `Error` constructor, asserts that `fn` will throw an error that is an
   * instance of `errorLike`.
   * If `errorLike` is an `Error` instance, asserts that the error thrown is the same
   * instance as `errorLike`.
   * If `errMsgMatcher` is provided, it also asserts that the error thrown will have a
   * message matching `errMsgMatcher`.
   *
   *     assert.throws(fn, 'Error thrown must have this msg');
   *     assert.throws(fn, /Error thrown must have a msg that matches this/);
   *     assert.throws(fn, ReferenceError);
   *     assert.throws(fn, errorInstance);
   *     assert.throws(fn, ReferenceError, 'Error thrown must be a ReferenceError and have this msg');
   *     assert.throws(fn, errorInstance, 'Error thrown must be the same errorInstance and have this msg');
   *     assert.throws(fn, ReferenceError, /Error thrown must be a ReferenceError and match this/);
   *     assert.throws(fn, errorInstance, /Error thrown must be the same errorInstance and match this/);
   *
   * @name throws
   * @alias throw
   * @alias Throw
   * @param {Function} fn
   * @param {ErrorConstructor|Error} errorLike
   * @param {RegExp|String} errMsgMatcher
   * @param {String} message
   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
   * @namespace Assert
   * @api public
   */

  assert.throws = function (fn, errorLike, errMsgMatcher, msg) {
    if ('string' === typeof errorLike || errorLike instanceof RegExp) {
      errMsgMatcher = errorLike;
      errorLike = null;
    }

    var assertErr = new Assertion(fn, msg, assert.throws, true)
      .to.throw(errorLike, errMsgMatcher);
    return flag(assertErr, 'object');
  };

  /**
   * ### .doesNotThrow(fn, [errorLike/string/regexp], [string/regexp], [message])
   *
   * If `errorLike` is an `Error` constructor, asserts that `fn` will _not_ throw an error that is an
   * instance of `errorLike`.
   * If `errorLike` is an `Error` instance, asserts that the error thrown is _not_ the same
   * instance as `errorLike`.
   * If `errMsgMatcher` is provided, it also asserts that the error thrown will _not_ have a
   * message matching `errMsgMatcher`.
   *
   *     assert.doesNotThrow(fn, 'Any Error thrown must not have this message');
   *     assert.doesNotThrow(fn, /Any Error thrown must not match this/);
   *     assert.doesNotThrow(fn, Error);
   *     assert.doesNotThrow(fn, errorInstance);
   *     assert.doesNotThrow(fn, Error, 'Error must not have this message');
   *     assert.doesNotThrow(fn, errorInstance, 'Error must not have this message');
   *     assert.doesNotThrow(fn, Error, /Error must not match this/);
   *     assert.doesNotThrow(fn, errorInstance, /Error must not match this/);
   *
   * @name doesNotThrow
   * @param {Function} fn
   * @param {ErrorConstructor} errorLike
   * @param {RegExp|String} errMsgMatcher
   * @param {String} message
   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
   * @namespace Assert
   * @api public
   */

  assert.doesNotThrow = function (fn, errorLike, errMsgMatcher, msg) {
    if ('string' === typeof errorLike || errorLike instanceof RegExp) {
      errMsgMatcher = errorLike;
      errorLike = null;
    }

    new Assertion(fn, msg, assert.doesNotThrow, true)
      .to.not.throw(errorLike, errMsgMatcher);
  };

  /**
   * ### .operator(val1, operator, val2, [message])
   *
   * Compares two values using `operator`.
   *
   *     assert.operator(1, '<', 2, 'everything is ok');
   *     assert.operator(1, '>', 2, 'this will fail');
   *
   * @name operator
   * @param {Mixed} val1
   * @param {String} operator
   * @param {Mixed} val2
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.operator = function (val, operator, val2, msg) {
    var ok;
    switch(operator) {
      case '==':
        ok = val == val2;
        break;
      case '===':
        ok = val === val2;
        break;
      case '>':
        ok = val > val2;
        break;
      case '>=':
        ok = val >= val2;
        break;
      case '<':
        ok = val < val2;
        break;
      case '<=':
        ok = val <= val2;
        break;
      case '!=':
        ok = val != val2;
        break;
      case '!==':
        ok = val !== val2;
        break;
      default:
        msg = msg ? msg + ': ' : msg;
        throw new chai.AssertionError(
          msg + 'Invalid operator "' + operator + '"',
          undefined,
          assert.operator
        );
    }
    var test = new Assertion(ok, msg, assert.operator, true);
    test.assert(
        true === flag(test, 'object')
      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)
      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );
  };

  /**
   * ### .closeTo(actual, expected, delta, [message])
   *
   * Asserts that the target is equal `expected`, to within a +/- `delta` range.
   *
   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');
   *
   * @name closeTo
   * @param {Number} actual
   * @param {Number} expected
   * @param {Number} delta
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.closeTo = function (act, exp, delta, msg) {
    new Assertion(act, msg, assert.closeTo, true).to.be.closeTo(exp, delta);
  };

  /**
   * ### .approximately(actual, expected, delta, [message])
   *
   * Asserts that the target is equal `expected`, to within a +/- `delta` range.
   *
   *     assert.approximately(1.5, 1, 0.5, 'numbers are close');
   *
   * @name approximately
   * @param {Number} actual
   * @param {Number} expected
   * @param {Number} delta
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.approximately = function (act, exp, delta, msg) {
    new Assertion(act, msg, assert.approximately, true)
      .to.be.approximately(exp, delta);
  };

  /**
   * ### .sameMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` have the same members in any order. Uses a
   * strict equality check (===).
   *
   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');
   *
   * @name sameMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.sameMembers = function (set1, set2, msg) {
    new Assertion(set1, msg, assert.sameMembers, true)
      .to.have.same.members(set2);
  }

  /**
   * ### .notSameMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` don't have the same members in any order.
   * Uses a strict equality check (===).
   *
   *     assert.notSameMembers([ 1, 2, 3 ], [ 5, 1, 3 ], 'not same members');
   *
   * @name notSameMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notSameMembers = function (set1, set2, msg) {
    new Assertion(set1, msg, assert.notSameMembers, true)
      .to.not.have.same.members(set2);
  }

  /**
   * ### .sameDeepMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` have the same members in any order. Uses a
   * deep equality check.
   *
   *     assert.sameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { c: 3 }], 'same deep members');
   *
   * @name sameDeepMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.sameDeepMembers = function (set1, set2, msg) {
    new Assertion(set1, msg, assert.sameDeepMembers, true)
      .to.have.same.deep.members(set2);
  }

  /**
   * ### .notSameDeepMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` don't have the same members in any order.
   * Uses a deep equality check.
   *
   *     assert.notSameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { f: 5 }], 'not same deep members');
   *
   * @name notSameDeepMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notSameDeepMembers = function (set1, set2, msg) {
    new Assertion(set1, msg, assert.notSameDeepMembers, true)
      .to.not.have.same.deep.members(set2);
  }

  /**
   * ### .sameOrderedMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` have the same members in the same order.
   * Uses a strict equality check (===).
   *
   *     assert.sameOrderedMembers([ 1, 2, 3 ], [ 1, 2, 3 ], 'same ordered members');
   *
   * @name sameOrderedMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.sameOrderedMembers = function (set1, set2, msg) {
    new Assertion(set1, msg, assert.sameOrderedMembers, true)
      .to.have.same.ordered.members(set2);
  }

  /**
   * ### .notSameOrderedMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` don't have the same members in the same
   * order. Uses a strict equality check (===).
   *
   *     assert.notSameOrderedMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'not same ordered members');
   *
   * @name notSameOrderedMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notSameOrderedMembers = function (set1, set2, msg) {
    new Assertion(set1, msg, assert.notSameOrderedMembers, true)
      .to.not.have.same.ordered.members(set2);
  }

  /**
   * ### .sameDeepOrderedMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` have the same members in the same order.
   * Uses a deep equality check.
   *
   * assert.sameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { c: 3 } ], 'same deep ordered members');
   *
   * @name sameDeepOrderedMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.sameDeepOrderedMembers = function (set1, set2, msg) {
    new Assertion(set1, msg, assert.sameDeepOrderedMembers, true)
      .to.have.same.deep.ordered.members(set2);
  }

  /**
   * ### .notSameDeepOrderedMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` don't have the same members in the same
   * order. Uses a deep equality check.
   *
   * assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { z: 5 } ], 'not same deep ordered members');
   * assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { c: 3 } ], 'not same deep ordered members');
   *
   * @name notSameDeepOrderedMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notSameDeepOrderedMembers = function (set1, set2, msg) {
    new Assertion(set1, msg, assert.notSameDeepOrderedMembers, true)
      .to.not.have.same.deep.ordered.members(set2);
  }

  /**
   * ### .includeMembers(superset, subset, [message])
   *
   * Asserts that `subset` is included in `superset` in any order. Uses a
   * strict equality check (===). Duplicates are ignored.
   *
   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1, 2 ], 'include members');
   *
   * @name includeMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.includeMembers = function (superset, subset, msg) {
    new Assertion(superset, msg, assert.includeMembers, true)
      .to.include.members(subset);
  }

  /**
   * ### .notIncludeMembers(superset, subset, [message])
   *
   * Asserts that `subset` isn't included in `superset` in any order. Uses a
   * strict equality check (===). Duplicates are ignored.
   *
   *     assert.notIncludeMembers([ 1, 2, 3 ], [ 5, 1 ], 'not include members');
   *
   * @name notIncludeMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notIncludeMembers = function (superset, subset, msg) {
    new Assertion(superset, msg, assert.notIncludeMembers, true)
      .to.not.include.members(subset);
  }

  /**
   * ### .includeDeepMembers(superset, subset, [message])
   *
   * Asserts that `subset` is included in `superset` in any order. Uses a deep
   * equality check. Duplicates are ignored.
   *
   *     assert.includeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { b: 2 } ], 'include deep members');
   *
   * @name includeDeepMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.includeDeepMembers = function (superset, subset, msg) {
    new Assertion(superset, msg, assert.includeDeepMembers, true)
      .to.include.deep.members(subset);
  }

  /**
   * ### .notIncludeDeepMembers(superset, subset, [message])
   *
   * Asserts that `subset` isn't included in `superset` in any order. Uses a
   * deep equality check. Duplicates are ignored.
   *
   *     assert.notIncludeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { f: 5 } ], 'not include deep members');
   *
   * @name notIncludeDeepMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notIncludeDeepMembers = function (superset, subset, msg) {
    new Assertion(superset, msg, assert.notIncludeDeepMembers, true)
      .to.not.include.deep.members(subset);
  }

  /**
   * ### .includeOrderedMembers(superset, subset, [message])
   *
   * Asserts that `subset` is included in `superset` in the same order
   * beginning with the first element in `superset`. Uses a strict equality
   * check (===).
   *
   *     assert.includeOrderedMembers([ 1, 2, 3 ], [ 1, 2 ], 'include ordered members');
   *
   * @name includeOrderedMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.includeOrderedMembers = function (superset, subset, msg) {
    new Assertion(superset, msg, assert.includeOrderedMembers, true)
      .to.include.ordered.members(subset);
  }

  /**
   * ### .notIncludeOrderedMembers(superset, subset, [message])
   *
   * Asserts that `subset` isn't included in `superset` in the same order
   * beginning with the first element in `superset`. Uses a strict equality
   * check (===).
   *
   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 1 ], 'not include ordered members');
   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 3 ], 'not include ordered members');
   *
   * @name notIncludeOrderedMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notIncludeOrderedMembers = function (superset, subset, msg) {
    new Assertion(superset, msg, assert.notIncludeOrderedMembers, true)
      .to.not.include.ordered.members(subset);
  }

  /**
   * ### .includeDeepOrderedMembers(superset, subset, [message])
   *
   * Asserts that `subset` is included in `superset` in the same order
   * beginning with the first element in `superset`. Uses a deep equality
   * check.
   *
   *     assert.includeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 } ], 'include deep ordered members');
   *
   * @name includeDeepOrderedMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.includeDeepOrderedMembers = function (superset, subset, msg) {
    new Assertion(superset, msg, assert.includeDeepOrderedMembers, true)
      .to.include.deep.ordered.members(subset);
  }

  /**
   * ### .notIncludeDeepOrderedMembers(superset, subset, [message])
   *
   * Asserts that `subset` isn't included in `superset` in the same order
   * beginning with the first element in `superset`. Uses a deep equality
   * check.
   *
   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { f: 5 } ], 'not include deep ordered members');
   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 } ], 'not include deep ordered members');
   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { c: 3 } ], 'not include deep ordered members');
   *
   * @name notIncludeDeepOrderedMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.notIncludeDeepOrderedMembers = function (superset, subset, msg) {
    new Assertion(superset, msg, assert.notIncludeDeepOrderedMembers, true)
      .to.not.include.deep.ordered.members(subset);
  }

  /**
   * ### .oneOf(inList, list, [message])
   *
   * Asserts that non-object, non-array value `inList` appears in the flat array `list`.
   *
   *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');
   *
   * @name oneOf
   * @param {*} inList
   * @param {Array<*>} list
   * @param {String} message
   * @namespace Assert
   * @api public
   */

  assert.oneOf = function (inList, list, msg) {
    new Assertion(inList, msg, assert.oneOf, true).to.be.oneOf(list);
  }

  /**
   * ### .changes(function, object, property, [message])
   *
   * Asserts that a function changes the value of a property.
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 22 };
   *     assert.changes(fn, obj, 'val');
   *
   * @name changes
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.changes = function (fn, obj, prop, msg) {
    if (arguments.length === 3 && typeof obj === 'function') {
      msg = prop;
      prop = null;
    }

    new Assertion(fn, msg, assert.changes, true).to.change(obj, prop);
  }

   /**
   * ### .changesBy(function, object, property, delta, [message])
   *
   * Asserts that a function changes the value of a property by an amount (delta).
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val += 2 };
   *     assert.changesBy(fn, obj, 'val', 2);
   *
   * @name changesBy
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {Number} change amount (delta)
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.changesBy = function (fn, obj, prop, delta, msg) {
    if (arguments.length === 4 && typeof obj === 'function') {
      var tmpMsg = delta;
      delta = prop;
      msg = tmpMsg;
    } else if (arguments.length === 3) {
      delta = prop;
      prop = null;
    }

    new Assertion(fn, msg, assert.changesBy, true)
      .to.change(obj, prop).by(delta);
  }

   /**
   * ### .doesNotChange(function, object, property, [message])
   *
   * Asserts that a function does not change the value of a property.
   *
   *     var obj = { val: 10 };
   *     var fn = function() { console.log('foo'); };
   *     assert.doesNotChange(fn, obj, 'val');
   *
   * @name doesNotChange
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.doesNotChange = function (fn, obj, prop, msg) {
    if (arguments.length === 3 && typeof obj === 'function') {
      msg = prop;
      prop = null;
    }

    return new Assertion(fn, msg, assert.doesNotChange, true)
      .to.not.change(obj, prop);
  }

  /**
   * ### .changesButNotBy(function, object, property, delta, [message])
   *
   * Asserts that a function does not change the value of a property or of a function's return value by an amount (delta)
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val += 10 };
   *     assert.changesButNotBy(fn, obj, 'val', 5);
   *
   * @name changesButNotBy
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {Number} change amount (delta)
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.changesButNotBy = function (fn, obj, prop, delta, msg) {
    if (arguments.length === 4 && typeof obj === 'function') {
      var tmpMsg = delta;
      delta = prop;
      msg = tmpMsg;
    } else if (arguments.length === 3) {
      delta = prop;
      prop = null;
    }

    new Assertion(fn, msg, assert.changesButNotBy, true)
      .to.change(obj, prop).but.not.by(delta);
  }

  /**
   * ### .increases(function, object, property, [message])
   *
   * Asserts that a function increases a numeric object property.
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 13 };
   *     assert.increases(fn, obj, 'val');
   *
   * @name increases
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.increases = function (fn, obj, prop, msg) {
    if (arguments.length === 3 && typeof obj === 'function') {
      msg = prop;
      prop = null;
    }

    return new Assertion(fn, msg, assert.increases, true)
      .to.increase(obj, prop);
  }

  /**
   * ### .increasesBy(function, object, property, delta, [message])
   *
   * Asserts that a function increases a numeric object property or a function's return value by an amount (delta).
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val += 10 };
   *     assert.increasesBy(fn, obj, 'val', 10);
   *
   * @name increasesBy
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {Number} change amount (delta)
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.increasesBy = function (fn, obj, prop, delta, msg) {
    if (arguments.length === 4 && typeof obj === 'function') {
      var tmpMsg = delta;
      delta = prop;
      msg = tmpMsg;
    } else if (arguments.length === 3) {
      delta = prop;
      prop = null;
    }

    new Assertion(fn, msg, assert.increasesBy, true)
      .to.increase(obj, prop).by(delta);
  }

  /**
   * ### .doesNotIncrease(function, object, property, [message])
   *
   * Asserts that a function does not increase a numeric object property.
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 8 };
   *     assert.doesNotIncrease(fn, obj, 'val');
   *
   * @name doesNotIncrease
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.doesNotIncrease = function (fn, obj, prop, msg) {
    if (arguments.length === 3 && typeof obj === 'function') {
      msg = prop;
      prop = null;
    }

    return new Assertion(fn, msg, assert.doesNotIncrease, true)
      .to.not.increase(obj, prop);
  }

  /**
   * ### .increasesButNotBy(function, object, property, [message])
   *
   * Asserts that a function does not increase a numeric object property or function's return value by an amount (delta).
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 15 };
   *     assert.increasesButNotBy(fn, obj, 'val', 10);
   *
   * @name increasesButNotBy
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {Number} change amount (delta)
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.increasesButNotBy = function (fn, obj, prop, delta, msg) {
    if (arguments.length === 4 && typeof obj === 'function') {
      var tmpMsg = delta;
      delta = prop;
      msg = tmpMsg;
    } else if (arguments.length === 3) {
      delta = prop;
      prop = null;
    }

    new Assertion(fn, msg, assert.increasesButNotBy, true)
      .to.increase(obj, prop).but.not.by(delta);
  }

  /**
   * ### .decreases(function, object, property, [message])
   *
   * Asserts that a function decreases a numeric object property.
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 5 };
   *     assert.decreases(fn, obj, 'val');
   *
   * @name decreases
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.decreases = function (fn, obj, prop, msg) {
    if (arguments.length === 3 && typeof obj === 'function') {
      msg = prop;
      prop = null;
    }

    return new Assertion(fn, msg, assert.decreases, true)
      .to.decrease(obj, prop);
  }

  /**
   * ### .decreasesBy(function, object, property, delta, [message])
   *
   * Asserts that a function decreases a numeric object property or a function's return value by an amount (delta)
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val -= 5 };
   *     assert.decreasesBy(fn, obj, 'val', 5);
   *
   * @name decreasesBy
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {Number} change amount (delta)
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.decreasesBy = function (fn, obj, prop, delta, msg) {
    if (arguments.length === 4 && typeof obj === 'function') {
      var tmpMsg = delta;
      delta = prop;
      msg = tmpMsg;
    } else if (arguments.length === 3) {
      delta = prop;
      prop = null;
    }

    new Assertion(fn, msg, assert.decreasesBy, true)
      .to.decrease(obj, prop).by(delta);
  }

  /**
   * ### .doesNotDecrease(function, object, property, [message])
   *
   * Asserts that a function does not decreases a numeric object property.
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 15 };
   *     assert.doesNotDecrease(fn, obj, 'val');
   *
   * @name doesNotDecrease
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.doesNotDecrease = function (fn, obj, prop, msg) {
    if (arguments.length === 3 && typeof obj === 'function') {
      msg = prop;
      prop = null;
    }

    return new Assertion(fn, msg, assert.doesNotDecrease, true)
      .to.not.decrease(obj, prop);
  }

  /**
   * ### .doesNotDecreaseBy(function, object, property, delta, [message])
   *
   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 5 };
   *     assert.doesNotDecreaseBy(fn, obj, 'val', 1);
   *
   * @name doesNotDecrease
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {Number} change amount (delta)
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.doesNotDecreaseBy = function (fn, obj, prop, delta, msg) {
    if (arguments.length === 4 && typeof obj === 'function') {
      var tmpMsg = delta;
      delta = prop;
      msg = tmpMsg;
    } else if (arguments.length === 3) {
      delta = prop;
      prop = null;
    }

    return new Assertion(fn, msg, assert.doesNotDecreaseBy, true)
      .to.not.decrease(obj, prop).by(delta);
  }

  /**
   * ### .decreasesButNotBy(function, object, property, delta, [message])
   *
   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 5 };
   *     assert.decreasesButNotBy(fn, obj, 'val', 1);
   *
   * @name decreasesButNotBy
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {Number} change amount (delta)
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.decreasesButNotBy = function (fn, obj, prop, delta, msg) {
    if (arguments.length === 4 && typeof obj === 'function') {
      var tmpMsg = delta;
      delta = prop;
      msg = tmpMsg;
    } else if (arguments.length === 3) {
      delta = prop;
      prop = null;
    }

    new Assertion(fn, msg, assert.decreasesButNotBy, true)
      .to.decrease(obj, prop).but.not.by(delta);
  }

  /*!
   * ### .ifError(object)
   *
   * Asserts if value is not a false value, and throws if it is a true value.
   * This is added to allow for chai to be a drop-in replacement for Node's
   * assert class.
   *
   *     var err = new Error('I am a custom error');
   *     assert.ifError(err); // Rethrows err!
   *
   * @name ifError
   * @param {Object} object
   * @namespace Assert
   * @api public
   */

  assert.ifError = function (val) {
    if (val) {
      throw(val);
    }
  };

  /**
   * ### .isExtensible(object)
   *
   * Asserts that `object` is extensible (can have new properties added to it).
   *
   *     assert.isExtensible({});
   *
   * @name isExtensible
   * @alias extensible
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.isExtensible = function (obj, msg) {
    new Assertion(obj, msg, assert.isExtensible, true).to.be.extensible;
  };

  /**
   * ### .isNotExtensible(object)
   *
   * Asserts that `object` is _not_ extensible.
   *
   *     var nonExtensibleObject = Object.preventExtensions({});
   *     var sealedObject = Object.seal({});
   *     var frozenObject = Object.freeze({});
   *
   *     assert.isNotExtensible(nonExtensibleObject);
   *     assert.isNotExtensible(sealedObject);
   *     assert.isNotExtensible(frozenObject);
   *
   * @name isNotExtensible
   * @alias notExtensible
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.isNotExtensible = function (obj, msg) {
    new Assertion(obj, msg, assert.isNotExtensible, true).to.not.be.extensible;
  };

  /**
   * ### .isSealed(object)
   *
   * Asserts that `object` is sealed (cannot have new properties added to it
   * and its existing properties cannot be removed).
   *
   *     var sealedObject = Object.seal({});
   *     var frozenObject = Object.seal({});
   *
   *     assert.isSealed(sealedObject);
   *     assert.isSealed(frozenObject);
   *
   * @name isSealed
   * @alias sealed
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.isSealed = function (obj, msg) {
    new Assertion(obj, msg, assert.isSealed, true).to.be.sealed;
  };

  /**
   * ### .isNotSealed(object)
   *
   * Asserts that `object` is _not_ sealed.
   *
   *     assert.isNotSealed({});
   *
   * @name isNotSealed
   * @alias notSealed
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.isNotSealed = function (obj, msg) {
    new Assertion(obj, msg, assert.isNotSealed, true).to.not.be.sealed;
  };

  /**
   * ### .isFrozen(object)
   *
   * Asserts that `object` is frozen (cannot have new properties added to it
   * and its existing properties cannot be modified).
   *
   *     var frozenObject = Object.freeze({});
   *     assert.frozen(frozenObject);
   *
   * @name isFrozen
   * @alias frozen
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.isFrozen = function (obj, msg) {
    new Assertion(obj, msg, assert.isFrozen, true).to.be.frozen;
  };

  /**
   * ### .isNotFrozen(object)
   *
   * Asserts that `object` is _not_ frozen.
   *
   *     assert.isNotFrozen({});
   *
   * @name isNotFrozen
   * @alias notFrozen
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.isNotFrozen = function (obj, msg) {
    new Assertion(obj, msg, assert.isNotFrozen, true).to.not.be.frozen;
  };

  /**
   * ### .isEmpty(target)
   *
   * Asserts that the target does not contain any values.
   * For arrays and strings, it checks the `length` property.
   * For `Map` and `Set` instances, it checks the `size` property.
   * For non-function objects, it gets the count of own
   * enumerable string keys.
   *
   *     assert.isEmpty([]);
   *     assert.isEmpty('');
   *     assert.isEmpty(new Map);
   *     assert.isEmpty({});
   *
   * @name isEmpty
   * @alias empty
   * @param {Object|Array|String|Map|Set} target
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.isEmpty = function(val, msg) {
    new Assertion(val, msg, assert.isEmpty, true).to.be.empty;
  };

  /**
   * ### .isNotEmpty(target)
   *
   * Asserts that the target contains values.
   * For arrays and strings, it checks the `length` property.
   * For `Map` and `Set` instances, it checks the `size` property.
   * For non-function objects, it gets the count of own
   * enumerable string keys.
   *
   *     assert.isNotEmpty([1, 2]);
   *     assert.isNotEmpty('34');
   *     assert.isNotEmpty(new Set([5, 6]));
   *     assert.isNotEmpty({ key: 7 });
   *
   * @name isNotEmpty
   * @alias notEmpty
   * @param {Object|Array|String|Map|Set} target
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */

  assert.isNotEmpty = function(val, msg) {
    new Assertion(val, msg, assert.isNotEmpty, true).to.not.be.empty;
  };

  /*!
   * Aliases.
   */

  (function alias(name, as){
    assert[as] = assert[name];
    return alias;
  })
  ('isOk', 'ok')
  ('isNotOk', 'notOk')
  ('throws', 'throw')
  ('throws', 'Throw')
  ('isExtensible', 'extensible')
  ('isNotExtensible', 'notExtensible')
  ('isSealed', 'sealed')
  ('isNotSealed', 'notSealed')
  ('isFrozen', 'frozen')
  ('isNotFrozen', 'notFrozen')
  ('isEmpty', 'empty')
  ('isNotEmpty', 'notEmpty');
};


/***/ }),

/***/ "../node_modules/chai/lib/chai/interface/expect.js":
/*!*********************************************************!*\
  !*** ../node_modules/chai/lib/chai/interface/expect.js ***!
  \*********************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module */
/*! CommonJS bailout: module.exports is used directly at 7:0-14 */
/***/ ((module) => {

/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

module.exports = function (chai, util) {
  chai.expect = function (val, message) {
    return new chai.Assertion(val, message);
  };

  /**
   * ### .fail([message])
   * ### .fail(actual, expected, [message], [operator])
   *
   * Throw a failure.
   *
   *     expect.fail();
   *     expect.fail("custom error message");
   *     expect.fail(1, 2);
   *     expect.fail(1, 2, "custom error message");
   *     expect.fail(1, 2, "custom error message", ">");
   *     expect.fail(1, 2, undefined, ">");
   *
   * @name fail
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @param {String} operator
   * @namespace BDD
   * @api public
   */

  chai.expect.fail = function (actual, expected, message, operator) {
    if (arguments.length < 2) {
        message = actual;
        actual = undefined;
    }

    message = message || 'expect.fail()';
    throw new chai.AssertionError(message, {
        actual: actual
      , expected: expected
      , operator: operator
    }, chai.expect.fail);
  };
};


/***/ }),

/***/ "../node_modules/chai/lib/chai/interface/should.js":
/*!*********************************************************!*\
  !*** ../node_modules/chai/lib/chai/interface/should.js ***!
  \*********************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module */
/*! CommonJS bailout: module.exports is used directly at 7:0-14 */
/***/ ((module) => {

/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

module.exports = function (chai, util) {
  var Assertion = chai.Assertion;

  function loadShould () {
    // explicitly define this method as function as to have it's name to include as `ssfi`
    function shouldGetter() {
      if (this instanceof String
          || this instanceof Number
          || this instanceof Boolean
          || typeof Symbol === 'function' && this instanceof Symbol) {
        return new Assertion(this.valueOf(), null, shouldGetter);
      }
      return new Assertion(this, null, shouldGetter);
    }
    function shouldSetter(value) {
      // See https://github.com/chaijs/chai/issues/86: this makes
      // `whatever.should = someValue` actually set `someValue`, which is
      // especially useful for `global.should = require('chai').should()`.
      //
      // Note that we have to use [[DefineProperty]] instead of [[Put]]
      // since otherwise we would trigger this very setter!
      Object.defineProperty(this, 'should', {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    }
    // modify Object.prototype to have `should`
    Object.defineProperty(Object.prototype, 'should', {
      set: shouldSetter
      , get: shouldGetter
      , configurable: true
    });

    var should = {};

    /**
     * ### .fail([message])
     * ### .fail(actual, expected, [message], [operator])
     *
     * Throw a failure.
     *
     *     should.fail();
     *     should.fail("custom error message");
     *     should.fail(1, 2);
     *     should.fail(1, 2, "custom error message");
     *     should.fail(1, 2, "custom error message", ">");
     *     should.fail(1, 2, undefined, ">");
     *
     *
     * @name fail
     * @param {Mixed} actual
     * @param {Mixed} expected
     * @param {String} message
     * @param {String} operator
     * @namespace BDD
     * @api public
     */

    should.fail = function (actual, expected, message, operator) {
      if (arguments.length < 2) {
          message = actual;
          actual = undefined;
      }

      message = message || 'should.fail()';
      throw new chai.AssertionError(message, {
          actual: actual
        , expected: expected
        , operator: operator
      }, should.fail);
    };

    /**
     * ### .equal(actual, expected, [message])
     *
     * Asserts non-strict equality (`==`) of `actual` and `expected`.
     *
     *     should.equal(3, '3', '== coerces values to strings');
     *
     * @name equal
     * @param {Mixed} actual
     * @param {Mixed} expected
     * @param {String} message
     * @namespace Should
     * @api public
     */

    should.equal = function (val1, val2, msg) {
      new Assertion(val1, msg).to.equal(val2);
    };

    /**
     * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])
     *
     * Asserts that `function` will throw an error that is an instance of
     * `constructor`, or alternately that it will throw an error with message
     * matching `regexp`.
     *
     *     should.throw(fn, 'function throws a reference error');
     *     should.throw(fn, /function throws a reference error/);
     *     should.throw(fn, ReferenceError);
     *     should.throw(fn, ReferenceError, 'function throws a reference error');
     *     should.throw(fn, ReferenceError, /function throws a reference error/);
     *
     * @name throw
     * @alias Throw
     * @param {Function} function
     * @param {ErrorConstructor} constructor
     * @param {RegExp} regexp
     * @param {String} message
     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
     * @namespace Should
     * @api public
     */

    should.Throw = function (fn, errt, errs, msg) {
      new Assertion(fn, msg).to.Throw(errt, errs);
    };

    /**
     * ### .exist
     *
     * Asserts that the target is neither `null` nor `undefined`.
     *
     *     var foo = 'hi';
     *
     *     should.exist(foo, 'foo exists');
     *
     * @name exist
     * @namespace Should
     * @api public
     */

    should.exist = function (val, msg) {
      new Assertion(val, msg).to.exist;
    }

    // negation
    should.not = {}

    /**
     * ### .not.equal(actual, expected, [message])
     *
     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.
     *
     *     should.not.equal(3, 4, 'these numbers are not equal');
     *
     * @name not.equal
     * @param {Mixed} actual
     * @param {Mixed} expected
     * @param {String} message
     * @namespace Should
     * @api public
     */

    should.not.equal = function (val1, val2, msg) {
      new Assertion(val1, msg).to.not.equal(val2);
    };

    /**
     * ### .throw(function, [constructor/regexp], [message])
     *
     * Asserts that `function` will _not_ throw an error that is an instance of
     * `constructor`, or alternately that it will not throw an error with message
     * matching `regexp`.
     *
     *     should.not.throw(fn, Error, 'function does not throw');
     *
     * @name not.throw
     * @alias not.Throw
     * @param {Function} function
     * @param {ErrorConstructor} constructor
     * @param {RegExp} regexp
     * @param {String} message
     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
     * @namespace Should
     * @api public
     */

    should.not.Throw = function (fn, errt, errs, msg) {
      new Assertion(fn, msg).to.not.Throw(errt, errs);
    };

    /**
     * ### .not.exist
     *
     * Asserts that the target is neither `null` nor `undefined`.
     *
     *     var bar = null;
     *
     *     should.not.exist(bar, 'bar does not exist');
     *
     * @name not.exist
     * @namespace Should
     * @api public
     */

    should.not.exist = function (val, msg) {
      new Assertion(val, msg).to.not.exist;
    }

    should['throw'] = should['Throw'];
    should.not['throw'] = should.not['Throw'];

    return should;
  };

  chai.should = loadShould;
  chai.Should = loadShould;
};


/***/ }),

/***/ "../node_modules/chai/lib/chai/utils/addChainableMethod.js":
/*!*****************************************************************!*\
  !*** ../node_modules/chai/lib/chai/utils/addChainableMethod.js ***!
  \*****************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 73:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*!
 * Chai - addChainingMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependencies
 */

var addLengthGuard = __webpack_require__(/*! ./addLengthGuard */ "../node_modules/chai/lib/chai/utils/addLengthGuard.js");
var chai = __webpack_require__(/*! ../../chai */ "../node_modules/chai/lib/chai.js");
var flag = __webpack_require__(/*! ./flag */ "../node_modules/chai/lib/chai/utils/flag.js");
var proxify = __webpack_require__(/*! ./proxify */ "../node_modules/chai/lib/chai/utils/proxify.js");
var transferFlags = __webpack_require__(/*! ./transferFlags */ "../node_modules/chai/lib/chai/utils/transferFlags.js");

/*!
 * Module variables
 */

// Check whether `Object.setPrototypeOf` is supported
var canSetPrototype = typeof Object.setPrototypeOf === 'function';

// Without `Object.setPrototypeOf` support, this module will need to add properties to a function.
// However, some of functions' own props are not configurable and should be skipped.
var testFn = function() {};
var excludeNames = Object.getOwnPropertyNames(testFn).filter(function(name) {
  var propDesc = Object.getOwnPropertyDescriptor(testFn, name);

  // Note: PhantomJS 1.x includes `callee` as one of `testFn`'s own properties,
  // but then returns `undefined` as the property descriptor for `callee`. As a
  // workaround, we perform an otherwise unnecessary type-check for `propDesc`,
  // and then filter it out if it's not an object as it should be.
  if (typeof propDesc !== 'object')
    return true;

  return !propDesc.configurable;
});

// Cache `Function` properties
var call  = Function.prototype.call,
    apply = Function.prototype.apply;

/**
 * ### .addChainableMethod(ctx, name, method, chainingBehavior)
 *
 * Adds a method to an object, such that the method can also be chained.
 *
 *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {
 *       var obj = utils.flag(this, 'object');
 *       new chai.Assertion(obj).to.be.equal(str);
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);
 *
 * The result can then be used as both a method assertion, executing both `method` and
 * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.
 *
 *     expect(fooStr).to.be.foo('bar');
 *     expect(fooStr).to.be.foo.equal('foo');
 *
 * @param {Object} ctx object to which the method is added
 * @param {String} name of method to add
 * @param {Function} method function to be used for `name`, when called
 * @param {Function} chainingBehavior function to be called every time the property is accessed
 * @namespace Utils
 * @name addChainableMethod
 * @api public
 */

module.exports = function addChainableMethod(ctx, name, method, chainingBehavior) {
  if (typeof chainingBehavior !== 'function') {
    chainingBehavior = function () { };
  }

  var chainableBehavior = {
      method: method
    , chainingBehavior: chainingBehavior
  };

  // save the methods so we can overwrite them later, if we need to.
  if (!ctx.__methods) {
    ctx.__methods = {};
  }
  ctx.__methods[name] = chainableBehavior;

  Object.defineProperty(ctx, name,
    { get: function chainableMethodGetter() {
        chainableBehavior.chainingBehavior.call(this);

        var chainableMethodWrapper = function () {
          // Setting the `ssfi` flag to `chainableMethodWrapper` causes this
          // function to be the starting point for removing implementation
          // frames from the stack trace of a failed assertion.
          //
          // However, we only want to use this function as the starting point if
          // the `lockSsfi` flag isn't set.
          //
          // If the `lockSsfi` flag is set, then this assertion is being
          // invoked from inside of another assertion. In this case, the `ssfi`
          // flag has already been set by the outer assertion.
          //
          // Note that overwriting a chainable method merely replaces the saved
          // methods in `ctx.__methods` instead of completely replacing the
          // overwritten assertion. Therefore, an overwriting assertion won't
          // set the `ssfi` or `lockSsfi` flags.
          if (!flag(this, 'lockSsfi')) {
            flag(this, 'ssfi', chainableMethodWrapper);
          }

          var result = chainableBehavior.method.apply(this, arguments);
          if (result !== undefined) {
            return result;
          }

          var newAssertion = new chai.Assertion();
          transferFlags(this, newAssertion);
          return newAssertion;
        };

        addLengthGuard(chainableMethodWrapper, name, true);

        // Use `Object.setPrototypeOf` if available
        if (canSetPrototype) {
          // Inherit all properties from the object by replacing the `Function` prototype
          var prototype = Object.create(this);
          // Restore the `call` and `apply` methods from `Function`
          prototype.call = call;
          prototype.apply = apply;
          Object.setPrototypeOf(chainableMethodWrapper, prototype);
        }
        // Otherwise, redefine all properties (slow!)
        else {
          var asserterNames = Object.getOwnPropertyNames(ctx);
          asserterNames.forEach(function (asserterName) {
            if (excludeNames.indexOf(asserterName) !== -1) {
              return;
            }

            var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);
            Object.defineProperty(chainableMethodWrapper, asserterName, pd);
          });
        }

        transferFlags(this, chainableMethodWrapper);
        return proxify(chainableMethodWrapper);
      }
    , configurable: true
  });
};


/***/ }),

/***/ "../node_modules/chai/lib/chai/utils/addLengthGuard.js":
/*!*************************************************************!*\
  !*** ../node_modules/chai/lib/chai/utils/addLengthGuard.js ***!
  \*************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module */
/*! CommonJS bailout: module.exports is used directly at 43:0-14 */
/***/ ((module) => {

var fnLengthDesc = Object.getOwnPropertyDescriptor(function () {}, 'length');

/*!
 * Chai - addLengthGuard utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .addLengthGuard(fn, assertionName, isChainable)
 *
 * Define `length` as a getter on the given uninvoked method assertion. The
 * getter acts as a guard against chaining `length` directly off of an uninvoked
 * method assertion, which is a problem because it references `function`'s
 * built-in `length` property instead of Chai's `length` assertion. When the
 * getter catches the user making this mistake, it throws an error with a
 * helpful message.
 *
 * There are two ways in which this mistake can be made. The first way is by
 * chaining the `length` assertion directly off of an uninvoked chainable
 * method. In this case, Chai suggests that the user use `lengthOf` instead. The
 * second way is by chaining the `length` assertion directly off of an uninvoked
 * non-chainable method. Non-chainable methods must be invoked prior to
 * chaining. In this case, Chai suggests that the user consult the docs for the
 * given assertion.
 *
 * If the `length` property of functions is unconfigurable, then return `fn`
 * without modification.
 *
 * Note that in ES6, the function's `length` property is configurable, so once
 * support for legacy environments is dropped, Chai's `length` property can
 * replace the built-in function's `length` property, and this length guard will
 * no longer be necessary. In the mean time, maintaining consistency across all
 * environments is the priority.
 *
 * @param {Function} fn
 * @param {String} assertionName
 * @param {Boolean} isChainable
 * @namespace Utils
 * @name addLengthGuard
 */

module.exports = function addLengthGuard (fn, assertionName, isChainable) {
  if (!fnLengthDesc.configurable) return fn;

  Object.defineProperty(fn, 'length', {
    get: function () {
      if (isChainable) {
        throw Error('Invalid Chai property: ' + assertionName + '.length. Due' +
          ' to a compatibility issue, "length" cannot directly follow "' +
          assertionName + '". Use "' + assertionName + '.lengthOf" instead.');
      }

      throw Error('Invalid Chai property: ' + assertionName + '.length. See' +
        ' docs for proper usage of "' + assertionName + '".');
    }
  });

  return fn;
};


/***/ }),

/***/ "../node_modules/chai/lib/chai/utils/addMethod.js":
/*!********************************************************!*\
  !*** ../node_modules/chai/lib/chai/utils/addMethod.js ***!
  \********************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 39:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*!
 * Chai - addMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var addLengthGuard = __webpack_require__(/*! ./addLengthGuard */ "../node_modules/chai/lib/chai/utils/addLengthGuard.js");
var chai = __webpack_require__(/*! ../../chai */ "../node_modules/chai/lib/chai.js");
var flag = __webpack_require__(/*! ./flag */ "../node_modules/chai/lib/chai/utils/flag.js");
var proxify = __webpack_require__(/*! ./proxify */ "../node_modules/chai/lib/chai/utils/proxify.js");
var transferFlags = __webpack_require__(/*! ./transferFlags */ "../node_modules/chai/lib/chai/utils/transferFlags.js");

/**
 * ### .addMethod(ctx, name, method)
 *
 * Adds a method to the prototype of an object.
 *
 *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {
 *       var obj = utils.flag(this, 'object');
 *       new chai.Assertion(obj).to.be.equal(str);
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.addMethod('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(fooStr).to.be.foo('bar');
 *
 * @param {Object} ctx object to which the method is added
 * @param {String} name of method to add
 * @param {Function} method function to be used for name
 * @namespace Utils
 * @name addMethod
 * @api public
 */

module.exports = function addMethod(ctx, name, method) {
  var methodWrapper = function () {
    // Setting the `ssfi` flag to `methodWrapper` causes this function to be the
    // starting point for removing implementation frames from the stack trace of
    // a failed assertion.
    //
    // However, we only want to use this function as the starting point if the
    // `lockSsfi` flag isn't set.
    //
    // If the `lockSsfi` flag is set, then either this assertion has been
    // overwritten by another assertion, or this assertion is being invoked from
    // inside of another assertion. In the first case, the `ssfi` flag has
    // already been set by the overwriting assertion. In the second case, the
    // `ssfi` flag has already been set by the outer assertion.
    if (!flag(this, 'lockSsfi')) {
      flag(this, 'ssfi', methodWrapper);
    }

    var result = method.apply(this, arguments);
    if (result !== undefined)
      return result;

    var newAssertion = new chai.Assertion();
    transferFlags(this, newAssertion);
    return newAssertion;
  };

  addLengthGuard(methodWrapper, name, false);
  ctx[name] = proxify(methodWrapper, name);
};


/***/ }),

/***/ "../node_modules/chai/lib/chai/utils/addProperty.js":
/*!**********************************************************!*\
  !*** ../node_modules/chai/lib/chai/utils/addProperty.js ***!
  \**********************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 38:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*!
 * Chai - addProperty utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var chai = __webpack_require__(/*! ../../chai */ "../node_modules/chai/lib/chai.js");
var flag = __webpack_require__(/*! ./flag */ "../node_modules/chai/lib/chai/utils/flag.js");
var isProxyEnabled = __webpack_require__(/*! ./isProxyEnabled */ "../node_modules/chai/lib/chai/utils/isProxyEnabled.js");
var transferFlags = __webpack_require__(/*! ./transferFlags */ "../node_modules/chai/lib/chai/utils/transferFlags.js");

/**
 * ### .addProperty(ctx, name, getter)
 *
 * Adds a property to the prototype of an object.
 *
 *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {
 *       var obj = utils.flag(this, 'object');
 *       new chai.Assertion(obj).to.be.instanceof(Foo);
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.addProperty('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.be.foo;
 *
 * @param {Object} ctx object to which the property is added
 * @param {String} name of property to add
 * @param {Function} getter function to be used for name
 * @namespace Utils
 * @name addProperty
 * @api public
 */

module.exports = function addProperty(ctx, name, getter) {
  getter = getter === undefined ? function () {} : getter;

  Object.defineProperty(ctx, name,
    { get: function propertyGetter() {
        // Setting the `ssfi` flag to `propertyGetter` causes this function to
        // be the starting point for removing implementation frames from the
        // stack trace of a failed assertion.
        //
        // However, we only want to use this function as the starting point if
        // the `lockSsfi` flag isn't set and proxy protection is disabled.
        //
        // If the `lockSsfi` flag is set, then either this assertion has been
        // overwritten by another assertion, or this assertion is being invoked
        // from inside of another assertion. In the first case, the `ssfi` flag
        // has already been set by the overwriting assertion. In the second
        // case, the `ssfi` flag has already been set by the outer assertion.
        //
        // If proxy protection is enabled, then the `ssfi` flag has already been
        // set by the proxy getter.
        if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {
          flag(this, 'ssfi', propertyGetter);
        }

        var result = getter.call(this);
        if (result !== undefined)
          return result;

        var newAssertion = new chai.Assertion();
        transferFlags(this, newAssertion);
        return newAssertion;
      }
    , configurable: true
  });
};


/***/ }),

/***/ "../node_modules/chai/lib/chai/utils/compareByInspect.js":
/*!***************************************************************!*\
  !*** ../node_modules/chai/lib/chai/utils/compareByInspect.js ***!
  \***************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 29:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*!
 * Chai - compareByInspect utility
 * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependencies
 */

var inspect = __webpack_require__(/*! ./inspect */ "../node_modules/chai/lib/chai/utils/inspect.js");

/**
 * ### .compareByInspect(mixed, mixed)
 *
 * To be used as a compareFunction with Array.prototype.sort. Compares elements
 * using inspect instead of default behavior of using toString so that Symbols
 * and objects with irregular/missing toString can still be sorted without a
 * TypeError.
 *
 * @param {Mixed} first element to compare
 * @param {Mixed} second element to compare
 * @returns {Number} -1 if 'a' should come before 'b'; otherwise 1
 * @name compareByInspect
 * @namespace Utils
 * @api public
 */

module.exports = function compareByInspect(a, b) {
  return inspect(a) < inspect(b) ? -1 : 1;
};


/***/ }),

/***/ "../node_modules/chai/lib/chai/utils/expectTypes.js":
/*!**********************************************************!*\
  !*** ../node_modules/chai/lib/chai/utils/expectTypes.js ***!
  \**********************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 25:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*!
 * Chai - expectTypes utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .expectTypes(obj, types)
 *
 * Ensures that the object being tested against is of a valid type.
 *
 *     utils.expectTypes(this, ['array', 'object', 'string']);
 *
 * @param {Mixed} obj constructed Assertion
 * @param {Array} type A list of allowed types for this assertion
 * @namespace Utils
 * @name expectTypes
 * @api public
 */

var AssertionError = __webpack_require__(/*! assertion-error */ "../node_modules/assertion-error/index.js");
var flag = __webpack_require__(/*! ./flag */ "../node_modules/chai/lib/chai/utils/flag.js");
var type = __webpack_require__(/*! type-detect */ "../node_modules/type-detect/type-detect.js");

module.exports = function expectTypes(obj, types) {
  var flagMsg = flag(obj, 'message');
  var ssfi = flag(obj, 'ssfi');

  flagMsg = flagMsg ? flagMsg + ': ' : '';

  obj = flag(obj, 'object');
  types = types.map(function (t) { return t.toLowerCase(); });
  types.sort();

  // Transforms ['lorem', 'ipsum'] into 'a lorem, or an ipsum'
  var str = types.map(function (t, index) {
    var art = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(t.charAt(0)) ? 'an' : 'a';
    var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';
    return or + art + ' ' + t;
  }).join(', ');

  var objType = type(obj).toLowerCase();

  if (!types.some(function (expected) { return objType === expected; })) {
    throw new AssertionError(
      flagMsg + 'object tested must be ' + str + ', but ' + objType + ' given',
      undefined,
      ssfi
    );
  }
};


/***/ }),

/***/ "../node_modules/chai/lib/chai/utils/flag.js":
/*!***************************************************!*\
  !*** ../node_modules/chai/lib/chai/utils/flag.js ***!
  \***************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module */
/*! CommonJS bailout: module.exports is used directly at 26:0-14 */
/***/ ((module) => {

/*!
 * Chai - flag utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .flag(object, key, [value])
 *
 * Get or set a flag value on an object. If a
 * value is provided it will be set, else it will
 * return the currently set value or `undefined` if
 * the value is not set.
 *
 *     utils.flag(this, 'foo', 'bar'); // setter
 *     utils.flag(this, 'foo'); // getter, returns `bar`
 *
 * @param {Object} object constructed Assertion
 * @param {String} key
 * @param {Mixed} value (optional)
 * @namespace Utils
 * @name flag
 * @api private
 */

module.exports = function flag(obj, key, value) {
  var flags = obj.__flags || (obj.__flags = Object.create(null));
  if (arguments.length === 3) {
    flags[key] = value;
  } else {
    return flags[key];
  }
};


/***/ }),

/***/ "../node_modules/chai/lib/chai/utils/getActual.js":
/*!********************************************************!*\
  !*** ../node_modules/chai/lib/chai/utils/getActual.js ***!
  \********************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module */
/*! CommonJS bailout: module.exports is used directly at 18:0-14 */
/***/ ((module) => {

/*!
 * Chai - getActual utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .getActual(object, [actual])
 *
 * Returns the `actual` value for an Assertion.
 *
 * @param {Object} object (constructed Assertion)
 * @param {Arguments} chai.Assertion.prototype.assert arguments
 * @namespace Utils
 * @name getActual
 */

module.exports = function getActual(obj, args) {
  return args.length > 4 ? args[4] : obj._obj;
};


/***/ }),

/***/ "../node_modules/chai/lib/chai/utils/getEnumerableProperties.js":
/*!**********************************************************************!*\
  !*** ../node_modules/chai/lib/chai/utils/getEnumerableProperties.js ***!
  \**********************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module */
/*! CommonJS bailout: module.exports is used directly at 20:0-14 */
/***/ ((module) => {

/*!
 * Chai - getEnumerableProperties utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .getEnumerableProperties(object)
 *
 * This allows the retrieval of enumerable property names of an object,
 * inherited or not.
 *
 * @param {Object} object
 * @returns {Array}
 * @namespace Utils
 * @name getEnumerableProperties
 * @api public
 */

module.exports = function getEnumerableProperties(object) {
  var result = [];
  for (var name in object) {
    result.push(name);
  }
  return result;
};


/***/ }),

/***/ "../node_modules/chai/lib/chai/utils/getMessage.js":
/*!*********************************************************!*\
  !*** ../node_modules/chai/lib/chai/utils/getMessage.js ***!
  \*********************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 34:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*!
 * Chai - message composition utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependencies
 */

var flag = __webpack_require__(/*! ./flag */ "../node_modules/chai/lib/chai/utils/flag.js")
  , getActual = __webpack_require__(/*! ./getActual */ "../node_modules/chai/lib/chai/utils/getActual.js")
  , objDisplay = __webpack_require__(/*! ./objDisplay */ "../node_modules/chai/lib/chai/utils/objDisplay.js");

/**
 * ### .getMessage(object, message, negateMessage)
 *
 * Construct the error message based on flags
 * and template tags. Template tags will return
 * a stringified inspection of the object referenced.
 *
 * Message template tags:
 * - `#{this}` current asserted object
 * - `#{act}` actual value
 * - `#{exp}` expected value
 *
 * @param {Object} object (constructed Assertion)
 * @param {Arguments} chai.Assertion.prototype.assert arguments
 * @namespace Utils
 * @name getMessage
 * @api public
 */

module.exports = function getMessage(obj, args) {
  var negate = flag(obj, 'negate')
    , val = flag(obj, 'object')
    , expected = args[3]
    , actual = getActual(obj, args)
    , msg = negate ? args[2] : args[1]
    , flagMsg = flag(obj, 'message');

  if(typeof msg === "function") msg = msg();
  msg = msg || '';
  msg = msg
    .replace(/#\{this\}/g, function () { return objDisplay(val); })
    .replace(/#\{act\}/g, function () { return objDisplay(actual); })
    .replace(/#\{exp\}/g, function () { return objDisplay(expected); });

  return flagMsg ? flagMsg + ': ' + msg : msg;
};


/***/ }),

/***/ "../node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js":
/*!*************************************************************************!*\
  !*** ../node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js ***!
  \*************************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 27:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*!
 * Chai - getOwnEnumerableProperties utility
 * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependencies
 */

var getOwnEnumerablePropertySymbols = __webpack_require__(/*! ./getOwnEnumerablePropertySymbols */ "../node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js");

/**
 * ### .getOwnEnumerableProperties(object)
 *
 * This allows the retrieval of directly-owned enumerable property names and
 * symbols of an object. This function is necessary because Object.keys only
 * returns enumerable property names, not enumerable property symbols.
 *
 * @param {Object} object
 * @returns {Array}
 * @namespace Utils
 * @name getOwnEnumerableProperties
 * @api public
 */

module.exports = function getOwnEnumerableProperties(obj) {
  return Object.keys(obj).concat(getOwnEnumerablePropertySymbols(obj));
};


/***/ }),

/***/ "../node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js":
/*!******************************************************************************!*\
  !*** ../node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js ***!
  \******************************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module */
/*! CommonJS bailout: module.exports is used directly at 21:0-14 */
/***/ ((module) => {

/*!
 * Chai - getOwnEnumerablePropertySymbols utility
 * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .getOwnEnumerablePropertySymbols(object)
 *
 * This allows the retrieval of directly-owned enumerable property symbols of an
 * object. This function is necessary because Object.getOwnPropertySymbols
 * returns both enumerable and non-enumerable property symbols.
 *
 * @param {Object} object
 * @returns {Array}
 * @namespace Utils
 * @name getOwnEnumerablePropertySymbols
 * @api public
 */

module.exports = function getOwnEnumerablePropertySymbols(obj) {
  if (typeof Object.getOwnPropertySymbols !== 'function') return [];

  return Object.getOwnPropertySymbols(obj).filter(function (sym) {
    return Object.getOwnPropertyDescriptor(obj, sym).enumerable;
  });
};


/***/ }),

/***/ "../node_modules/chai/lib/chai/utils/getProperties.js":
/*!************************************************************!*\
  !*** ../node_modules/chai/lib/chai/utils/getProperties.js ***!
  \************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module */
/*! CommonJS bailout: module.exports is used directly at 20:0-14 */
/***/ ((module) => {

/*!
 * Chai - getProperties utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .getProperties(object)
 *
 * This allows the retrieval of property names of an object, enumerable or not,
 * inherited or not.
 *
 * @param {Object} object
 * @returns {Array}
 * @namespace Utils
 * @name getProperties
 * @api public
 */

module.exports = function getProperties(object) {
  var result = Object.getOwnPropertyNames(object);

  function addProperty(property) {
    if (result.indexOf(property) === -1) {
      result.push(property);
    }
  }

  var proto = Object.getPrototypeOf(object);
  while (proto !== null) {
    Object.getOwnPropertyNames(proto).forEach(addProperty);
    proto = Object.getPrototypeOf(proto);
  }

  return result;
};


/***/ }),

/***/ "../node_modules/chai/lib/chai/utils/index.js":
/*!****************************************************!*\
  !*** ../node_modules/chai/lib/chai/utils/index.js ***!
  \****************************************************/
/*! default exports */
/*! export addChainableMethod [provided] [no usage info] [provision prevents renaming (no use info)] -> ../node_modules/chai/lib/chai/utils/addChainableMethod.js */
/*!   exports [maybe provided (runtime-defined)] [no usage info] */
/*! export addLengthGuard [provided] [no usage info] [provision prevents renaming (no use info)] -> ../node_modules/chai/lib/chai/utils/addLengthGuard.js */
/*!   exports [maybe provided (runtime-defined)] [no usage info] */
/*! export addMethod [provided] [no usage info] [provision prevents renaming (no use info)] -> ../node_modules/chai/lib/chai/utils/addMethod.js */
/*!   exports [maybe provided (runtime-defined)] [no usage info] */
/*! export addProperty [provided] [no usage info] [provision prevents renaming (no use info)] -> ../node_modules/chai/lib/chai/utils/addProperty.js */
/*!   exports [maybe provided (runtime-defined)] [no usage info] */
/*! export checkError [provided] [no usage info] [provision prevents renaming (no use info)] -> ../node_modules/check-error/index.js */
/*!   exports [maybe provided (runtime-defined)] [no usage info] */
/*! export compareByInspect [provided] [no usage info] [provision prevents renaming (no use info)] -> ../node_modules/chai/lib/chai/utils/compareByInspect.js */
/*!   exports [maybe provided (runtime-defined)] [no usage info] */
/*! export eql [provided] [no usage info] [provision prevents renaming (no use info)] -> ../node_modules/deep-eql/index.js */
/*!   exports [maybe provided (runtime-defined)] [no usage info] */
/*! export expectTypes [provided] [no usage info] [provision prevents renaming (no use info)] -> ../node_modules/chai/lib/chai/utils/expectTypes.js */
/*!   exports [maybe provided (runtime-defined)] [no usage info] */
/*! export flag [provided] [no usage info] [provision prevents renaming (no use info)] -> ../node_modules/chai/lib/chai/utils/flag.js */
/*!   exports [maybe provided (runtime-defined)] [no usage info] */
/*! export getActual [provided] [no usage info] [provision prevents renaming (no use info)] -> ../node_modules/chai/lib/chai/utils/getActual.js */
/*!   exports [maybe provided (runtime-defined)] [no usage info] */
/*! export getMessage [provided] [no usage info] [provision prevents renaming (no use info)] -> ../node_modules/chai/lib/chai/utils/getMessage.js */
/*!   exports [maybe provided (runtime-defined)] [no usage info] */
/*! export getName [provided] [no usage info] [provision prevents renaming (no use info)] -> ../node_modules/get-func-name/index.js */
/*!   exports [maybe provided (runtime-defined)] [no usage info] */
/*! export getOwnEnumerableProperties [provided] [no usage info] [provision prevents renaming (no use info)] -> ../node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js */
/*!   exports [maybe provided (runtime-defined)] [no usage info] */
/*! export getOwnEnumerablePropertySymbols [provided] [no usage info] [provision prevents renaming (no use info)] -> ../node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js */
/*!   exports [maybe provided (runtime-defined)] [no usage info] */
/*! export getPathInfo [provided] [no usage info] [missing usage info prevents renaming] */
/*! export hasProperty [provided] [no usage info] [missing usage info prevents renaming] */
/*! export inspect [provided] [no usage info] [provision prevents renaming (no use info)] -> ../node_modules/chai/lib/chai/utils/inspect.js */
/*!   exports [maybe provided (runtime-defined)] [no usage info] */
/*! export isNaN [provided] [no usage info] [provision prevents renaming (no use info)] -> ../node_modules/chai/lib/chai/utils/isNaN.js */
/*!   exports [maybe provided (runtime-defined)] [no usage info] */
/*! export isProxyEnabled [provided] [no usage info] [provision prevents renaming (no use info)] -> ../node_modules/chai/lib/chai/utils/isProxyEnabled.js */
/*!   exports [maybe provided (runtime-defined)] [no usage info] */
/*! export objDisplay [provided] [no usage info] [provision prevents renaming (no use info)] -> ../node_modules/chai/lib/chai/utils/objDisplay.js */
/*!   exports [maybe provided (runtime-defined)] [no usage info] */
/*! export overwriteChainableMethod [provided] [no usage info] [provision prevents renaming (no use info)] -> ../node_modules/chai/lib/chai/utils/overwriteChainableMethod.js */
/*!   exports [maybe provided (runtime-defined)] [no usage info] */
/*! export overwriteMethod [provided] [no usage info] [provision prevents renaming (no use info)] -> ../node_modules/chai/lib/chai/utils/overwriteMethod.js */
/*!   exports [maybe provided (runtime-defined)] [no usage info] */
/*! export overwriteProperty [provided] [no usage info] [provision prevents renaming (no use info)] -> ../node_modules/chai/lib/chai/utils/overwriteProperty.js */
/*!   exports [maybe provided (runtime-defined)] [no usage info] */
/*! export proxify [provided] [no usage info] [provision prevents renaming (no use info)] -> ../node_modules/chai/lib/chai/utils/proxify.js */
/*!   exports [maybe provided (runtime-defined)] [no usage info] */
/*! export test [provided] [no usage info] [provision prevents renaming (no use info)] -> ../node_modules/chai/lib/chai/utils/test.js */
/*!   exports [maybe provided (runtime-defined)] [no usage info] */
/*! export transferFlags [provided] [no usage info] [provision prevents renaming (no use info)] -> ../node_modules/chai/lib/chai/utils/transferFlags.js */
/*!   exports [maybe provided (runtime-defined)] [no usage info] */
/*! export type [provided] [no usage info] [provision prevents renaming (no use info)] -> ../node_modules/type-detect/type-detect.js */
/*!   exports [maybe provided (runtime-defined)] [no usage info] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_exports__, __webpack_require__ */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/*!
 * chai
 * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Dependencies that are used for multiple exports are required here only once
 */

var pathval = __webpack_require__(/*! pathval */ "../node_modules/pathval/index.js");

/*!
 * test utility
 */

exports.test = __webpack_require__(/*! ./test */ "../node_modules/chai/lib/chai/utils/test.js");

/*!
 * type utility
 */

exports.type = __webpack_require__(/*! type-detect */ "../node_modules/type-detect/type-detect.js");

/*!
 * expectTypes utility
 */
exports.expectTypes = __webpack_require__(/*! ./expectTypes */ "../node_modules/chai/lib/chai/utils/expectTypes.js");

/*!
 * message utility
 */

exports.getMessage = __webpack_require__(/*! ./getMessage */ "../node_modules/chai/lib/chai/utils/getMessage.js");

/*!
 * actual utility
 */

exports.getActual = __webpack_require__(/*! ./getActual */ "../node_modules/chai/lib/chai/utils/getActual.js");

/*!
 * Inspect util
 */

exports.inspect = __webpack_require__(/*! ./inspect */ "../node_modules/chai/lib/chai/utils/inspect.js");

/*!
 * Object Display util
 */

exports.objDisplay = __webpack_require__(/*! ./objDisplay */ "../node_modules/chai/lib/chai/utils/objDisplay.js");

/*!
 * Flag utility
 */

exports.flag = __webpack_require__(/*! ./flag */ "../node_modules/chai/lib/chai/utils/flag.js");

/*!
 * Flag transferring utility
 */

exports.transferFlags = __webpack_require__(/*! ./transferFlags */ "../node_modules/chai/lib/chai/utils/transferFlags.js");

/*!
 * Deep equal utility
 */

exports.eql = __webpack_require__(/*! deep-eql */ "../node_modules/deep-eql/index.js");

/*!
 * Deep path info
 */

exports.getPathInfo = pathval.getPathInfo;

/*!
 * Check if a property exists
 */

exports.hasProperty = pathval.hasProperty;

/*!
 * Function name
 */

exports.getName = __webpack_require__(/*! get-func-name */ "../node_modules/get-func-name/index.js");

/*!
 * add Property
 */

exports.addProperty = __webpack_require__(/*! ./addProperty */ "../node_modules/chai/lib/chai/utils/addProperty.js");

/*!
 * add Method
 */

exports.addMethod = __webpack_require__(/*! ./addMethod */ "../node_modules/chai/lib/chai/utils/addMethod.js");

/*!
 * overwrite Property
 */

exports.overwriteProperty = __webpack_require__(/*! ./overwriteProperty */ "../node_modules/chai/lib/chai/utils/overwriteProperty.js");

/*!
 * overwrite Method
 */

exports.overwriteMethod = __webpack_require__(/*! ./overwriteMethod */ "../node_modules/chai/lib/chai/utils/overwriteMethod.js");

/*!
 * Add a chainable method
 */

exports.addChainableMethod = __webpack_require__(/*! ./addChainableMethod */ "../node_modules/chai/lib/chai/utils/addChainableMethod.js");

/*!
 * Overwrite chainable method
 */

exports.overwriteChainableMethod = __webpack_require__(/*! ./overwriteChainableMethod */ "../node_modules/chai/lib/chai/utils/overwriteChainableMethod.js");

/*!
 * Compare by inspect method
 */

exports.compareByInspect = __webpack_require__(/*! ./compareByInspect */ "../node_modules/chai/lib/chai/utils/compareByInspect.js");

/*!
 * Get own enumerable property symbols method
 */

exports.getOwnEnumerablePropertySymbols = __webpack_require__(/*! ./getOwnEnumerablePropertySymbols */ "../node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js");

/*!
 * Get own enumerable properties method
 */

exports.getOwnEnumerableProperties = __webpack_require__(/*! ./getOwnEnumerableProperties */ "../node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js");

/*!
 * Checks error against a given set of criteria
 */

exports.checkError = __webpack_require__(/*! check-error */ "../node_modules/check-error/index.js");

/*!
 * Proxify util
 */

exports.proxify = __webpack_require__(/*! ./proxify */ "../node_modules/chai/lib/chai/utils/proxify.js");

/*!
 * addLengthGuard util
 */

exports.addLengthGuard = __webpack_require__(/*! ./addLengthGuard */ "../node_modules/chai/lib/chai/utils/addLengthGuard.js");

/*!
 * isProxyEnabled helper
 */

exports.isProxyEnabled = __webpack_require__(/*! ./isProxyEnabled */ "../node_modules/chai/lib/chai/utils/isProxyEnabled.js");

/*!
 * isNaN method
 */

exports.isNaN = __webpack_require__(/*! ./isNaN */ "../node_modules/chai/lib/chai/utils/isNaN.js");


/***/ }),

/***/ "../node_modules/chai/lib/chai/utils/inspect.js":
/*!******************************************************!*\
  !*** ../node_modules/chai/lib/chai/utils/inspect.js ***!
  \******************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_exports__, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 9:0-14 */
/***/ ((module, exports, __webpack_require__) => {

// This is (almost) directly from Node.js utils
// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js

var getName = __webpack_require__(/*! get-func-name */ "../node_modules/get-func-name/index.js");
var getProperties = __webpack_require__(/*! ./getProperties */ "../node_modules/chai/lib/chai/utils/getProperties.js");
var getEnumerableProperties = __webpack_require__(/*! ./getEnumerableProperties */ "../node_modules/chai/lib/chai/utils/getEnumerableProperties.js");
var config = __webpack_require__(/*! ../config */ "../node_modules/chai/lib/chai/config.js");

module.exports = inspect;

/**
 * ### .inspect(obj, [showHidden], [depth], [colors])
 *
 * Echoes the value of a value. Tries to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Boolean} showHidden Flag that shows hidden (not enumerable)
 *    properties of objects. Default is false.
 * @param {Number} depth Depth in which to descend in object. Default is 2.
 * @param {Boolean} colors Flag to turn on ANSI escape codes to color the
 *    output. Default is false (no coloring).
 * @namespace Utils
 * @name inspect
 */
function inspect(obj, showHidden, depth, colors) {
  var ctx = {
    showHidden: showHidden,
    seen: [],
    stylize: function (str) { return str; }
  };
  return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));
}

// Returns true if object is a DOM element.
var isDOMElement = function (object) {
  if (typeof HTMLElement === 'object') {
    return object instanceof HTMLElement;
  } else {
    return object &&
      typeof object === 'object' &&
      'nodeType' in object &&
      object.nodeType === 1 &&
      typeof object.nodeName === 'string';
  }
};

function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (value && typeof value.inspect === 'function' &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (typeof ret !== 'string') {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // If this is a DOM element, try to get the outer HTML.
  if (isDOMElement(value)) {
    if ('outerHTML' in value) {
      return value.outerHTML;
      // This value does not have an outerHTML attribute,
      //   it could still be an XML element
    } else {
      // Attempt to serialize it
      try {
        if (document.xmlVersion) {
          var xmlSerializer = new XMLSerializer();
          return xmlSerializer.serializeToString(value);
        } else {
          // Firefox 11- do not support outerHTML
          //   It does, however, support innerHTML
          //   Use the following to render the element
          var ns = "http://www.w3.org/1999/xhtml";
          var container = document.createElementNS(ns, '_');

          container.appendChild(value.cloneNode(false));
          var html = container.innerHTML
            .replace('><', '>' + value.innerHTML + '<');
          container.innerHTML = '';
          return html;
        }
      } catch (err) {
        // This could be a non-native DOM implementation,
        //   continue with the normal flow:
        //   printing the element as if it is an object.
      }
    }
  }

  // Look up the keys of the object.
  var visibleKeys = getEnumerableProperties(value);
  var keys = ctx.showHidden ? getProperties(value) : visibleKeys;

  var name, nameSuffix;

  // Some type of object without properties can be shortcut.
  // In IE, errors have a single `stack` property, or if they are vanilla `Error`,
  // a `stack` plus `description` property; ignore those for consistency.
  if (keys.length === 0 || (isError(value) && (
      (keys.length === 1 && keys[0] === 'stack') ||
      (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')
     ))) {
    if (typeof value === 'function') {
      name = getName(value);
      nameSuffix = name ? ': ' + name : '';
      return ctx.stylize('[Function' + nameSuffix + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = ''
    , array = false
    , typedArray = false
    , braces = ['{', '}'];

  if (isTypedArray(value)) {
    typedArray = true;
    braces = ['[', ']'];
  }

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (typeof value === 'function') {
    name = getName(value);
    nameSuffix = name ? ': ' + name : '';
    base = ' [Function' + nameSuffix + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    return formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else if (typedArray) {
    return formatTypedArray(value);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}

function formatPrimitive(ctx, value) {
  switch (typeof value) {
    case 'undefined':
      return ctx.stylize('undefined', 'undefined');

    case 'string':
      var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                               .replace(/'/g, "\\'")
                                               .replace(/\\"/g, '"') + '\'';
      return ctx.stylize(simple, 'string');

    case 'number':
      if (value === 0 && (1/value) === -Infinity) {
        return ctx.stylize('-0', 'number');
      }
      return ctx.stylize('' + value, 'number');

    case 'boolean':
      return ctx.stylize('' + value, 'boolean');

    case 'symbol':
      return ctx.stylize(value.toString(), 'symbol');
  }
  // For some reason typeof null is "object", so special case here.
  if (value === null) {
    return ctx.stylize('null', 'null');
  }
}

function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}

function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (Object.prototype.hasOwnProperty.call(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }

  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}

function formatTypedArray(value) {
  var str = '[ ';

  for (var i = 0; i < value.length; ++i) {
    if (str.length >= config.truncateThreshold - 7) {
      str += '...';
      break;
    }
    str += value[i] + ', ';
  }
  str += ' ]';

  // Removing trailing `, ` if the array was not truncated
  if (str.indexOf(',  ]') !== -1) {
    str = str.replace(',  ]', ' ]');
  }

  return str;
}

function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name;
  var propDescriptor = Object.getOwnPropertyDescriptor(value, key);
  var str;

  if (propDescriptor) {
    if (propDescriptor.get) {
      if (propDescriptor.set) {
        str = ctx.stylize('[Getter/Setter]', 'special');
      } else {
        str = ctx.stylize('[Getter]', 'special');
      }
    } else {
      if (propDescriptor.set) {
        str = ctx.stylize('[Setter]', 'special');
      }
    }
  }
  if (visibleKeys.indexOf(key) < 0) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(value[key]) < 0) {
      if (recurseTimes === null) {
        str = formatValue(ctx, value[key], null);
      } else {
        str = formatValue(ctx, value[key], recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (typeof name === 'undefined') {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}

function reduceToSingleString(output, base, braces) {
  var length = output.reduce(function(prev, cur) {
    return prev + cur.length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}

function isTypedArray(ar) {
  // Unfortunately there's no way to check if an object is a TypedArray
  // We have to check if it's one of these types
  return (typeof ar === 'object' && /\w+Array]$/.test(objectToString(ar)));
}

function isArray(ar) {
  return Array.isArray(ar) ||
         (typeof ar === 'object' && objectToString(ar) === '[object Array]');
}

function isRegExp(re) {
  return typeof re === 'object' && objectToString(re) === '[object RegExp]';
}

function isDate(d) {
  return typeof d === 'object' && objectToString(d) === '[object Date]';
}

function isError(e) {
  return typeof e === 'object' && objectToString(e) === '[object Error]';
}

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


/***/ }),

/***/ "../node_modules/chai/lib/chai/utils/isNaN.js":
/*!****************************************************!*\
  !*** ../node_modules/chai/lib/chai/utils/isNaN.js ***!
  \****************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module */
/*! CommonJS bailout: module.exports is used directly at 26:0-14 */
/***/ ((module) => {

/*!
 * Chai - isNaN utility
 * Copyright(c) 2012-2015 Sakthipriyan Vairamani <thechargingvolcano@gmail.com>
 * MIT Licensed
 */

/**
 * ### .isNaN(value)
 *
 * Checks if the given value is NaN or not.
 *
 *     utils.isNaN(NaN); // true
 *
 * @param {Value} The value which has to be checked if it is NaN
 * @name isNaN
 * @api private
 */

function isNaN(value) {
  // Refer http://www.ecma-international.org/ecma-262/6.0/#sec-isnan-number
  // section's NOTE.
  return value !== value;
}

// If ECMAScript 6's Number.isNaN is present, prefer that.
module.exports = Number.isNaN || isNaN;


/***/ }),

/***/ "../node_modules/chai/lib/chai/utils/isProxyEnabled.js":
/*!*************************************************************!*\
  !*** ../node_modules/chai/lib/chai/utils/isProxyEnabled.js ***!
  \*************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 20:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var config = __webpack_require__(/*! ../config */ "../node_modules/chai/lib/chai/config.js");

/*!
 * Chai - isProxyEnabled helper
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .isProxyEnabled()
 *
 * Helper function to check if Chai's proxy protection feature is enabled. If
 * proxies are unsupported or disabled via the user's Chai config, then return
 * false. Otherwise, return true.
 *
 * @namespace Utils
 * @name isProxyEnabled
 */

module.exports = function isProxyEnabled() {
  return config.useProxy &&
    typeof Proxy !== 'undefined' &&
    typeof Reflect !== 'undefined';
};


/***/ }),

/***/ "../node_modules/chai/lib/chai/utils/objDisplay.js":
/*!*********************************************************!*\
  !*** ../node_modules/chai/lib/chai/utils/objDisplay.js ***!
  \*********************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 27:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*!
 * Chai - flag utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependencies
 */

var inspect = __webpack_require__(/*! ./inspect */ "../node_modules/chai/lib/chai/utils/inspect.js");
var config = __webpack_require__(/*! ../config */ "../node_modules/chai/lib/chai/config.js");

/**
 * ### .objDisplay(object)
 *
 * Determines if an object or an array matches
 * criteria to be inspected in-line for error
 * messages or should be truncated.
 *
 * @param {Mixed} javascript object to inspect
 * @name objDisplay
 * @namespace Utils
 * @api public
 */

module.exports = function objDisplay(obj) {
  var str = inspect(obj)
    , type = Object.prototype.toString.call(obj);

  if (config.truncateThreshold && str.length >= config.truncateThreshold) {
    if (type === '[object Function]') {
      return !obj.name || obj.name === ''
        ? '[Function]'
        : '[Function: ' + obj.name + ']';
    } else if (type === '[object Array]') {
      return '[ Array(' + obj.length + ') ]';
    } else if (type === '[object Object]') {
      var keys = Object.keys(obj)
        , kstr = keys.length > 2
          ? keys.splice(0, 2).join(', ') + ', ...'
          : keys.join(', ');
      return '{ Object (' + kstr + ') }';
    } else {
      return str;
    }
  } else {
    return str;
  }
};


/***/ }),

/***/ "../node_modules/chai/lib/chai/utils/overwriteChainableMethod.js":
/*!***********************************************************************!*\
  !*** ../node_modules/chai/lib/chai/utils/overwriteChainableMethod.js ***!
  \***********************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 43:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*!
 * Chai - overwriteChainableMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var chai = __webpack_require__(/*! ../../chai */ "../node_modules/chai/lib/chai.js");
var transferFlags = __webpack_require__(/*! ./transferFlags */ "../node_modules/chai/lib/chai/utils/transferFlags.js");

/**
 * ### .overwriteChainableMethod(ctx, name, method, chainingBehavior)
 *
 * Overwrites an already existing chainable method
 * and provides access to the previous function or
 * property.  Must return functions to be used for
 * name.
 *
 *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'lengthOf',
 *       function (_super) {
 *       }
 *     , function (_super) {
 *       }
 *     );
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.have.lengthOf(3);
 *     expect(myFoo).to.have.lengthOf.above(3);
 *
 * @param {Object} ctx object whose method / property is to be overwritten
 * @param {String} name of method / property to overwrite
 * @param {Function} method function that returns a function to be used for name
 * @param {Function} chainingBehavior function that returns a function to be used for property
 * @namespace Utils
 * @name overwriteChainableMethod
 * @api public
 */

module.exports = function overwriteChainableMethod(ctx, name, method, chainingBehavior) {
  var chainableBehavior = ctx.__methods[name];

  var _chainingBehavior = chainableBehavior.chainingBehavior;
  chainableBehavior.chainingBehavior = function overwritingChainableMethodGetter() {
    var result = chainingBehavior(_chainingBehavior).call(this);
    if (result !== undefined) {
      return result;
    }

    var newAssertion = new chai.Assertion();
    transferFlags(this, newAssertion);
    return newAssertion;
  };

  var _method = chainableBehavior.method;
  chainableBehavior.method = function overwritingChainableMethodWrapper() {
    var result = method(_method).apply(this, arguments);
    if (result !== undefined) {
      return result;
    }

    var newAssertion = new chai.Assertion();
    transferFlags(this, newAssertion);
    return newAssertion;
  };
};


/***/ }),

/***/ "../node_modules/chai/lib/chai/utils/overwriteMethod.js":
/*!**************************************************************!*\
  !*** ../node_modules/chai/lib/chai/utils/overwriteMethod.js ***!
  \**************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 47:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*!
 * Chai - overwriteMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var addLengthGuard = __webpack_require__(/*! ./addLengthGuard */ "../node_modules/chai/lib/chai/utils/addLengthGuard.js");
var chai = __webpack_require__(/*! ../../chai */ "../node_modules/chai/lib/chai.js");
var flag = __webpack_require__(/*! ./flag */ "../node_modules/chai/lib/chai/utils/flag.js");
var proxify = __webpack_require__(/*! ./proxify */ "../node_modules/chai/lib/chai/utils/proxify.js");
var transferFlags = __webpack_require__(/*! ./transferFlags */ "../node_modules/chai/lib/chai/utils/transferFlags.js");

/**
 * ### .overwriteMethod(ctx, name, fn)
 *
 * Overwrites an already existing method and provides
 * access to previous function. Must return function
 * to be used for name.
 *
 *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {
 *       return function (str) {
 *         var obj = utils.flag(this, 'object');
 *         if (obj instanceof Foo) {
 *           new chai.Assertion(obj.value).to.equal(str);
 *         } else {
 *           _super.apply(this, arguments);
 *         }
 *       }
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.overwriteMethod('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.equal('bar');
 *
 * @param {Object} ctx object whose method is to be overwritten
 * @param {String} name of method to overwrite
 * @param {Function} method function that returns a function to be used for name
 * @namespace Utils
 * @name overwriteMethod
 * @api public
 */

module.exports = function overwriteMethod(ctx, name, method) {
  var _method = ctx[name]
    , _super = function () {
      throw new Error(name + ' is not a function');
    };

  if (_method && 'function' === typeof _method)
    _super = _method;

  var overwritingMethodWrapper = function () {
    // Setting the `ssfi` flag to `overwritingMethodWrapper` causes this
    // function to be the starting point for removing implementation frames from
    // the stack trace of a failed assertion.
    //
    // However, we only want to use this function as the starting point if the
    // `lockSsfi` flag isn't set.
    //
    // If the `lockSsfi` flag is set, then either this assertion has been
    // overwritten by another assertion, or this assertion is being invoked from
    // inside of another assertion. In the first case, the `ssfi` flag has
    // already been set by the overwriting assertion. In the second case, the
    // `ssfi` flag has already been set by the outer assertion.
    if (!flag(this, 'lockSsfi')) {
      flag(this, 'ssfi', overwritingMethodWrapper);
    }

    // Setting the `lockSsfi` flag to `true` prevents the overwritten assertion
    // from changing the `ssfi` flag. By this point, the `ssfi` flag is already
    // set to the correct starting point for this assertion.
    var origLockSsfi = flag(this, 'lockSsfi');
    flag(this, 'lockSsfi', true);
    var result = method(_super).apply(this, arguments);
    flag(this, 'lockSsfi', origLockSsfi);

    if (result !== undefined) {
      return result;
    }

    var newAssertion = new chai.Assertion();
    transferFlags(this, newAssertion);
    return newAssertion;
  }

  addLengthGuard(overwritingMethodWrapper, name, false);
  ctx[name] = proxify(overwritingMethodWrapper, name);
};


/***/ }),

/***/ "../node_modules/chai/lib/chai/utils/overwriteProperty.js":
/*!****************************************************************!*\
  !*** ../node_modules/chai/lib/chai/utils/overwriteProperty.js ***!
  \****************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 46:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*!
 * Chai - overwriteProperty utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var chai = __webpack_require__(/*! ../../chai */ "../node_modules/chai/lib/chai.js");
var flag = __webpack_require__(/*! ./flag */ "../node_modules/chai/lib/chai/utils/flag.js");
var isProxyEnabled = __webpack_require__(/*! ./isProxyEnabled */ "../node_modules/chai/lib/chai/utils/isProxyEnabled.js");
var transferFlags = __webpack_require__(/*! ./transferFlags */ "../node_modules/chai/lib/chai/utils/transferFlags.js");

/**
 * ### .overwriteProperty(ctx, name, fn)
 *
 * Overwrites an already existing property getter and provides
 * access to previous value. Must return function to use as getter.
 *
 *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {
 *       return function () {
 *         var obj = utils.flag(this, 'object');
 *         if (obj instanceof Foo) {
 *           new chai.Assertion(obj.name).to.equal('bar');
 *         } else {
 *           _super.call(this);
 *         }
 *       }
 *     });
 *
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.overwriteProperty('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.be.ok;
 *
 * @param {Object} ctx object whose property is to be overwritten
 * @param {String} name of property to overwrite
 * @param {Function} getter function that returns a getter function to be used for name
 * @namespace Utils
 * @name overwriteProperty
 * @api public
 */

module.exports = function overwriteProperty(ctx, name, getter) {
  var _get = Object.getOwnPropertyDescriptor(ctx, name)
    , _super = function () {};

  if (_get && 'function' === typeof _get.get)
    _super = _get.get

  Object.defineProperty(ctx, name,
    { get: function overwritingPropertyGetter() {
        // Setting the `ssfi` flag to `overwritingPropertyGetter` causes this
        // function to be the starting point for removing implementation frames
        // from the stack trace of a failed assertion.
        //
        // However, we only want to use this function as the starting point if
        // the `lockSsfi` flag isn't set and proxy protection is disabled.
        //
        // If the `lockSsfi` flag is set, then either this assertion has been
        // overwritten by another assertion, or this assertion is being invoked
        // from inside of another assertion. In the first case, the `ssfi` flag
        // has already been set by the overwriting assertion. In the second
        // case, the `ssfi` flag has already been set by the outer assertion.
        //
        // If proxy protection is enabled, then the `ssfi` flag has already been
        // set by the proxy getter.
        if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {
          flag(this, 'ssfi', overwritingPropertyGetter);
        }

        // Setting the `lockSsfi` flag to `true` prevents the overwritten
        // assertion from changing the `ssfi` flag. By this point, the `ssfi`
        // flag is already set to the correct starting point for this assertion.
        var origLockSsfi = flag(this, 'lockSsfi');
        flag(this, 'lockSsfi', true);
        var result = getter(_super).call(this);
        flag(this, 'lockSsfi', origLockSsfi);

        if (result !== undefined) {
          return result;
        }

        var newAssertion = new chai.Assertion();
        transferFlags(this, newAssertion);
        return newAssertion;
      }
    , configurable: true
  });
};


/***/ }),

/***/ "../node_modules/chai/lib/chai/utils/proxify.js":
/*!******************************************************!*\
  !*** ../node_modules/chai/lib/chai/utils/proxify.js ***!
  \******************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 33:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var config = __webpack_require__(/*! ../config */ "../node_modules/chai/lib/chai/config.js");
var flag = __webpack_require__(/*! ./flag */ "../node_modules/chai/lib/chai/utils/flag.js");
var getProperties = __webpack_require__(/*! ./getProperties */ "../node_modules/chai/lib/chai/utils/getProperties.js");
var isProxyEnabled = __webpack_require__(/*! ./isProxyEnabled */ "../node_modules/chai/lib/chai/utils/isProxyEnabled.js");

/*!
 * Chai - proxify utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .proxify(object)
 *
 * Return a proxy of given object that throws an error when a non-existent
 * property is read. By default, the root cause is assumed to be a misspelled
 * property, and thus an attempt is made to offer a reasonable suggestion from
 * the list of existing properties. However, if a nonChainableMethodName is
 * provided, then the root cause is instead a failure to invoke a non-chainable
 * method prior to reading the non-existent property.
 *
 * If proxies are unsupported or disabled via the user's Chai config, then
 * return object without modification.
 *
 * @param {Object} obj
 * @param {String} nonChainableMethodName
 * @namespace Utils
 * @name proxify
 */

var builtins = ['__flags', '__methods', '_obj', 'assert'];

module.exports = function proxify(obj, nonChainableMethodName) {
  if (!isProxyEnabled()) return obj;

  return new Proxy(obj, {
    get: function proxyGetter(target, property) {
      // This check is here because we should not throw errors on Symbol properties
      // such as `Symbol.toStringTag`.
      // The values for which an error should be thrown can be configured using
      // the `config.proxyExcludedKeys` setting.
      if (typeof property === 'string' &&
          config.proxyExcludedKeys.indexOf(property) === -1 &&
          !Reflect.has(target, property)) {
        // Special message for invalid property access of non-chainable methods.
        if (nonChainableMethodName) {
          throw Error('Invalid Chai property: ' + nonChainableMethodName + '.' +
            property + '. See docs for proper usage of "' +
            nonChainableMethodName + '".');
        }

        // If the property is reasonably close to an existing Chai property,
        // suggest that property to the user. Only suggest properties with a
        // distance less than 4.
        var suggestion = null;
        var suggestionDistance = 4;
        getProperties(target).forEach(function(prop) {
          if (
            !Object.prototype.hasOwnProperty(prop) &&
            builtins.indexOf(prop) === -1
          ) {
            var dist = stringDistanceCapped(
              property,
              prop,
              suggestionDistance
            );
            if (dist < suggestionDistance) {
              suggestion = prop;
              suggestionDistance = dist;
            }
          }
        });

        if (suggestion !== null) {
          throw Error('Invalid Chai property: ' + property +
            '. Did you mean "' + suggestion + '"?');
        } else {
          throw Error('Invalid Chai property: ' + property);
        }
      }

      // Use this proxy getter as the starting point for removing implementation
      // frames from the stack trace of a failed assertion. For property
      // assertions, this prevents the proxy getter from showing up in the stack
      // trace since it's invoked before the property getter. For method and
      // chainable method assertions, this flag will end up getting changed to
      // the method wrapper, which is good since this frame will no longer be in
      // the stack once the method is invoked. Note that Chai builtin assertion
      // properties such as `__flags` are skipped since this is only meant to
      // capture the starting point of an assertion. This step is also skipped
      // if the `lockSsfi` flag is set, thus indicating that this assertion is
      // being called from within another assertion. In that case, the `ssfi`
      // flag is already set to the outer assertion's starting point.
      if (builtins.indexOf(property) === -1 && !flag(target, 'lockSsfi')) {
        flag(target, 'ssfi', proxyGetter);
      }

      return Reflect.get(target, property);
    }
  });
};

/**
 * # stringDistanceCapped(strA, strB, cap)
 * Return the Levenshtein distance between two strings, but no more than cap.
 * @param {string} strA
 * @param {string} strB
 * @param {number} number
 * @return {number} min(string distance between strA and strB, cap)
 * @api private
 */

function stringDistanceCapped(strA, strB, cap) {
  if (Math.abs(strA.length - strB.length) >= cap) {
    return cap;
  }

  var memo = [];
  // `memo` is a two-dimensional array containing distances.
  // memo[i][j] is the distance between strA.slice(0, i) and
  // strB.slice(0, j).
  for (var i = 0; i <= strA.length; i++) {
    memo[i] = Array(strB.length + 1).fill(0);
    memo[i][0] = i;
  }
  for (var j = 0; j < strB.length; j++) {
    memo[0][j] = j;
  }

  for (var i = 1; i <= strA.length; i++) {
    var ch = strA.charCodeAt(i - 1);
    for (var j = 1; j <= strB.length; j++) {
      if (Math.abs(i - j) >= cap) {
        memo[i][j] = cap;
        continue;
      }
      memo[i][j] = Math.min(
        memo[i - 1][j] + 1,
        memo[i][j - 1] + 1,
        memo[i - 1][j - 1] +
          (ch === strB.charCodeAt(j - 1) ? 0 : 1)
      );
    }
  }

  return memo[strA.length][strB.length];
}


/***/ }),

/***/ "../node_modules/chai/lib/chai/utils/test.js":
/*!***************************************************!*\
  !*** ../node_modules/chai/lib/chai/utils/test.js ***!
  \***************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 24:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*!
 * Chai - test utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependencies
 */

var flag = __webpack_require__(/*! ./flag */ "../node_modules/chai/lib/chai/utils/flag.js");

/**
 * ### .test(object, expression)
 *
 * Test and object for expression.
 *
 * @param {Object} object (constructed Assertion)
 * @param {Arguments} chai.Assertion.prototype.assert arguments
 * @namespace Utils
 * @name test
 */

module.exports = function test(obj, args) {
  var negate = flag(obj, 'negate')
    , expr = args[0];
  return negate ? !expr : expr;
};


/***/ }),

/***/ "../node_modules/chai/lib/chai/utils/transferFlags.js":
/*!************************************************************!*\
  !*** ../node_modules/chai/lib/chai/utils/transferFlags.js ***!
  \************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module */
/*! CommonJS bailout: module.exports is used directly at 30:0-14 */
/***/ ((module) => {

/*!
 * Chai - transferFlags utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .transferFlags(assertion, object, includeAll = true)
 *
 * Transfer all the flags for `assertion` to `object`. If
 * `includeAll` is set to `false`, then the base Chai
 * assertion flags (namely `object`, `ssfi`, `lockSsfi`,
 * and `message`) will not be transferred.
 *
 *
 *     var newAssertion = new Assertion();
 *     utils.transferFlags(assertion, newAssertion);
 *
 *     var anotherAssertion = new Assertion(myObj);
 *     utils.transferFlags(assertion, anotherAssertion, false);
 *
 * @param {Assertion} assertion the assertion to transfer the flags from
 * @param {Object} object the object to transfer the flags to; usually a new assertion
 * @param {Boolean} includeAll
 * @namespace Utils
 * @name transferFlags
 * @api private
 */

module.exports = function transferFlags(assertion, object, includeAll) {
  var flags = assertion.__flags || (assertion.__flags = Object.create(null));

  if (!object.__flags) {
    object.__flags = Object.create(null);
  }

  includeAll = arguments.length === 3 ? includeAll : true;

  for (var flag in flags) {
    if (includeAll ||
        (flag !== 'object' && flag !== 'ssfi' && flag !== 'lockSsfi' && flag != 'message')) {
      object.__flags[flag] = flags[flag];
    }
  }
};


/***/ }),

/***/ "../node_modules/check-error/index.js":
/*!********************************************!*\
  !*** ../node_modules/check-error/index.js ***!
  \********************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module */
/*! CommonJS bailout: module.exports is used directly at 166:0-14 */
/***/ ((module) => {

"use strict";


/* !
 * Chai - checkError utility
 * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .checkError
 *
 * Checks that an error conforms to a given set of criteria and/or retrieves information about it.
 *
 * @api public
 */

/**
 * ### .compatibleInstance(thrown, errorLike)
 *
 * Checks if two instances are compatible (strict equal).
 * Returns false if errorLike is not an instance of Error, because instances
 * can only be compatible if they're both error instances.
 *
 * @name compatibleInstance
 * @param {Error} thrown error
 * @param {Error|ErrorConstructor} errorLike object to compare against
 * @namespace Utils
 * @api public
 */

function compatibleInstance(thrown, errorLike) {
  return errorLike instanceof Error && thrown === errorLike;
}

/**
 * ### .compatibleConstructor(thrown, errorLike)
 *
 * Checks if two constructors are compatible.
 * This function can receive either an error constructor or
 * an error instance as the `errorLike` argument.
 * Constructors are compatible if they're the same or if one is
 * an instance of another.
 *
 * @name compatibleConstructor
 * @param {Error} thrown error
 * @param {Error|ErrorConstructor} errorLike object to compare against
 * @namespace Utils
 * @api public
 */

function compatibleConstructor(thrown, errorLike) {
  if (errorLike instanceof Error) {
    // If `errorLike` is an instance of any error we compare their constructors
    return thrown.constructor === errorLike.constructor || thrown instanceof errorLike.constructor;
  } else if (errorLike.prototype instanceof Error || errorLike === Error) {
    // If `errorLike` is a constructor that inherits from Error, we compare `thrown` to `errorLike` directly
    return thrown.constructor === errorLike || thrown instanceof errorLike;
  }

  return false;
}

/**
 * ### .compatibleMessage(thrown, errMatcher)
 *
 * Checks if an error's message is compatible with a matcher (String or RegExp).
 * If the message contains the String or passes the RegExp test,
 * it is considered compatible.
 *
 * @name compatibleMessage
 * @param {Error} thrown error
 * @param {String|RegExp} errMatcher to look for into the message
 * @namespace Utils
 * @api public
 */

function compatibleMessage(thrown, errMatcher) {
  var comparisonString = typeof thrown === 'string' ? thrown : thrown.message;
  if (errMatcher instanceof RegExp) {
    return errMatcher.test(comparisonString);
  } else if (typeof errMatcher === 'string') {
    return comparisonString.indexOf(errMatcher) !== -1; // eslint-disable-line no-magic-numbers
  }

  return false;
}

/**
 * ### .getFunctionName(constructorFn)
 *
 * Returns the name of a function.
 * This also includes a polyfill function if `constructorFn.name` is not defined.
 *
 * @name getFunctionName
 * @param {Function} constructorFn
 * @namespace Utils
 * @api private
 */

var functionNameMatch = /\s*function(?:\s|\s*\/\*[^(?:*\/)]+\*\/\s*)*([^\(\/]+)/;
function getFunctionName(constructorFn) {
  var name = '';
  if (typeof constructorFn.name === 'undefined') {
    // Here we run a polyfill if constructorFn.name is not defined
    var match = String(constructorFn).match(functionNameMatch);
    if (match) {
      name = match[1];
    }
  } else {
    name = constructorFn.name;
  }

  return name;
}

/**
 * ### .getConstructorName(errorLike)
 *
 * Gets the constructor name for an Error instance or constructor itself.
 *
 * @name getConstructorName
 * @param {Error|ErrorConstructor} errorLike
 * @namespace Utils
 * @api public
 */

function getConstructorName(errorLike) {
  var constructorName = errorLike;
  if (errorLike instanceof Error) {
    constructorName = getFunctionName(errorLike.constructor);
  } else if (typeof errorLike === 'function') {
    // If `err` is not an instance of Error it is an error constructor itself or another function.
    // If we've got a common function we get its name, otherwise we may need to create a new instance
    // of the error just in case it's a poorly-constructed error. Please see chaijs/chai/issues/45 to know more.
    constructorName = getFunctionName(errorLike).trim() ||
        getFunctionName(new errorLike()); // eslint-disable-line new-cap
  }

  return constructorName;
}

/**
 * ### .getMessage(errorLike)
 *
 * Gets the error message from an error.
 * If `err` is a String itself, we return it.
 * If the error has no message, we return an empty string.
 *
 * @name getMessage
 * @param {Error|String} errorLike
 * @namespace Utils
 * @api public
 */

function getMessage(errorLike) {
  var msg = '';
  if (errorLike && errorLike.message) {
    msg = errorLike.message;
  } else if (typeof errorLike === 'string') {
    msg = errorLike;
  }

  return msg;
}

module.exports = {
  compatibleInstance: compatibleInstance,
  compatibleConstructor: compatibleConstructor,
  compatibleMessage: compatibleMessage,
  getMessage: getMessage,
  getConstructorName: getConstructorName,
};


/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js!../node_modules/mocha/mocha.css":
/*!******************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!../node_modules/mocha/mocha.css ***!
  \******************************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.n, __webpack_exports__, __webpack_require__.r, module.id, __webpack_require__.d, __webpack_require__.*, module */
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../css-loader/dist/runtime/cssWithMappingToString.js */ "../node_modules/css-loader/dist/runtime/cssWithMappingToString.js");
/* harmony import */ var _css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports
;

var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "@charset \"utf-8\";\n\nbody {\n  margin:0;\n}\n\n#mocha {\n  font: 20px/1.5 \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  margin: 60px 50px;\n}\n\n#mocha ul,\n#mocha li {\n  margin: 0;\n  padding: 0;\n}\n\n#mocha ul {\n  list-style: none;\n}\n\n#mocha h1,\n#mocha h2 {\n  margin: 0;\n}\n\n#mocha h1 {\n  margin-top: 15px;\n  font-size: 1em;\n  font-weight: 200;\n}\n\n#mocha h1 a {\n  text-decoration: none;\n  color: inherit;\n}\n\n#mocha h1 a:hover {\n  text-decoration: underline;\n}\n\n#mocha .suite .suite h1 {\n  margin-top: 0;\n  font-size: .8em;\n}\n\n#mocha .hidden {\n  display: none;\n}\n\n#mocha h2 {\n  font-size: 12px;\n  font-weight: normal;\n  cursor: pointer;\n}\n\n#mocha .suite {\n  margin-left: 15px;\n}\n\n#mocha .test {\n  margin-left: 15px;\n  overflow: hidden;\n}\n\n#mocha .test.pending:hover h2::after {\n  content: '(pending)';\n  font-family: arial, sans-serif;\n}\n\n#mocha .test.pass.medium .duration {\n  background: #c09853;\n}\n\n#mocha .test.pass.slow .duration {\n  background: #b94a48;\n}\n\n#mocha .test.pass::before {\n  content: '✓';\n  font-size: 12px;\n  display: block;\n  float: left;\n  margin-right: 5px;\n  color: #00d6b2;\n}\n\n#mocha .test.pass .duration {\n  font-size: 9px;\n  margin-left: 5px;\n  padding: 2px 5px;\n  color: #fff;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.2);\n  -moz-box-shadow: inset 0 1px 1px rgba(0,0,0,.2);\n  box-shadow: inset 0 1px 1px rgba(0,0,0,.2);\n  -webkit-border-radius: 5px;\n  -moz-border-radius: 5px;\n  -ms-border-radius: 5px;\n  -o-border-radius: 5px;\n  border-radius: 5px;\n}\n\n#mocha .test.pass.fast .duration {\n  display: none;\n}\n\n#mocha .test.pending {\n  color: #0b97c4;\n}\n\n#mocha .test.pending::before {\n  content: '◦';\n  color: #0b97c4;\n}\n\n#mocha .test.fail {\n  color: #c00;\n}\n\n#mocha .test.fail pre {\n  color: black;\n}\n\n#mocha .test.fail::before {\n  content: '✖';\n  font-size: 12px;\n  display: block;\n  float: left;\n  margin-right: 5px;\n  color: #c00;\n}\n\n#mocha .test pre.error {\n  color: #c00;\n  max-height: 300px;\n  overflow: auto;\n}\n\n#mocha .test .html-error {\n  overflow: auto;\n  color: black;\n  display: block;\n  float: left;\n  clear: left;\n  font: 12px/1.5 monaco, monospace;\n  margin: 5px;\n  padding: 15px;\n  border: 1px solid #eee;\n  max-width: 85%; /*(1)*/\n  max-width: -webkit-calc(100% - 42px);\n  max-width: -moz-calc(100% - 42px);\n  max-width: calc(100% - 42px); /*(2)*/\n  max-height: 300px;\n  word-wrap: break-word;\n  border-bottom-color: #ddd;\n  -webkit-box-shadow: 0 1px 3px #eee;\n  -moz-box-shadow: 0 1px 3px #eee;\n  box-shadow: 0 1px 3px #eee;\n  -webkit-border-radius: 3px;\n  -moz-border-radius: 3px;\n  border-radius: 3px;\n}\n\n#mocha .test .html-error pre.error {\n  border: none;\n  -webkit-border-radius: 0;\n  -moz-border-radius: 0;\n  border-radius: 0;\n  -webkit-box-shadow: 0;\n  -moz-box-shadow: 0;\n  box-shadow: 0;\n  padding: 0;\n  margin: 0;\n  margin-top: 18px;\n  max-height: none;\n}\n\n/**\n * (1): approximate for browsers not supporting calc\n * (2): 42 = 2*15 + 2*10 + 2*1 (padding + margin + border)\n *      ^^ seriously\n */\n#mocha .test pre {\n  display: block;\n  float: left;\n  clear: left;\n  font: 12px/1.5 monaco, monospace;\n  margin: 5px;\n  padding: 15px;\n  border: 1px solid #eee;\n  max-width: 85%; /*(1)*/\n  max-width: -webkit-calc(100% - 42px);\n  max-width: -moz-calc(100% - 42px);\n  max-width: calc(100% - 42px); /*(2)*/\n  word-wrap: break-word;\n  border-bottom-color: #ddd;\n  -webkit-box-shadow: 0 1px 3px #eee;\n  -moz-box-shadow: 0 1px 3px #eee;\n  box-shadow: 0 1px 3px #eee;\n  -webkit-border-radius: 3px;\n  -moz-border-radius: 3px;\n  border-radius: 3px;\n}\n\n#mocha .test h2 {\n  position: relative;\n}\n\n#mocha .test a.replay {\n  position: absolute;\n  top: 3px;\n  right: 0;\n  text-decoration: none;\n  vertical-align: middle;\n  display: block;\n  width: 15px;\n  height: 15px;\n  line-height: 15px;\n  text-align: center;\n  background: #eee;\n  font-size: 15px;\n  -webkit-border-radius: 15px;\n  -moz-border-radius: 15px;\n  border-radius: 15px;\n  -webkit-transition:opacity 200ms;\n  -moz-transition:opacity 200ms;\n  -o-transition:opacity 200ms;\n  transition: opacity 200ms;\n  opacity: 0.3;\n  color: #888;\n}\n\n#mocha .test:hover a.replay {\n  opacity: 1;\n}\n\n#mocha-report.pass .test.fail {\n  display: none;\n}\n\n#mocha-report.fail .test.pass {\n  display: none;\n}\n\n#mocha-report.pending .test.pass,\n#mocha-report.pending .test.fail {\n  display: none;\n}\n#mocha-report.pending .test.pass.pending {\n  display: block;\n}\n\n#mocha-error {\n  color: #c00;\n  font-size: 1.5em;\n  font-weight: 100;\n  letter-spacing: 1px;\n}\n\n#mocha-stats {\n  position: fixed;\n  top: 15px;\n  right: 10px;\n  font-size: 12px;\n  margin: 0;\n  color: #888;\n  z-index: 1;\n}\n\n#mocha-stats .progress {\n  float: right;\n  padding-top: 0;\n\n  /**\n   * Set safe initial values, so mochas .progress does not inherit these\n   * properties from Bootstrap .progress (which causes .progress height to\n   * equal line height set in Bootstrap).\n   */\n  height: auto;\n  -webkit-box-shadow: none;\n  -moz-box-shadow: none;\n  box-shadow: none;\n  background-color: initial;\n}\n\n#mocha-stats em {\n  color: black;\n}\n\n#mocha-stats a {\n  text-decoration: none;\n  color: inherit;\n}\n\n#mocha-stats a:hover {\n  border-bottom: 1px solid #eee;\n}\n\n#mocha-stats li {\n  display: inline-block;\n  margin: 0 5px;\n  list-style: none;\n  padding-top: 11px;\n}\n\n#mocha-stats canvas {\n  width: 40px;\n  height: 40px;\n}\n\n#mocha code .comment { color: #ddd; }\n#mocha code .init { color: #2f6fad; }\n#mocha code .string { color: #5890ad; }\n#mocha code .keyword { color: #8a6343; }\n#mocha code .number { color: #2f6fad; }\n\n@media screen and (max-device-width: 480px) {\n  #mocha {\n    margin: 60px 0px;\n  }\n\n  #mocha #stats {\n    position: absolute;\n  }\n}\n", "",{"version":3,"sources":["webpack://../node_modules/mocha/mocha.css"],"names":[],"mappings":"AAAA,gBAAgB;;AAEhB;EACE,QAAQ;AACV;;AAEA;EACE,6DAA6D;EAC7D,iBAAiB;AACnB;;AAEA;;EAEE,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,gBAAgB;AAClB;;AAEA;;EAEE,SAAS;AACX;;AAEA;EACE,gBAAgB;EAChB,cAAc;EACd,gBAAgB;AAClB;;AAEA;EACE,qBAAqB;EACrB,cAAc;AAChB;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,aAAa;EACb,eAAe;AACjB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,eAAe;EACf,mBAAmB;EACnB,eAAe;AACjB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,oBAAoB;EACpB,8BAA8B;AAChC;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,YAAY;EACZ,eAAe;EACf,cAAc;EACd,WAAW;EACX,iBAAiB;EACjB,cAAc;AAChB;;AAEA;EACE,cAAc;EACd,gBAAgB;EAChB,gBAAgB;EAChB,WAAW;EACX,kDAAkD;EAClD,+CAA+C;EAC/C,0CAA0C;EAC1C,0BAA0B;EAC1B,uBAAuB;EACvB,sBAAsB;EACtB,qBAAqB;EACrB,kBAAkB;AACpB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,YAAY;EACZ,cAAc;AAChB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,YAAY;EACZ,eAAe;EACf,cAAc;EACd,WAAW;EACX,iBAAiB;EACjB,WAAW;AACb;;AAEA;EACE,WAAW;EACX,iBAAiB;EACjB,cAAc;AAChB;;AAEA;EACE,cAAc;EACd,YAAY;EACZ,cAAc;EACd,WAAW;EACX,WAAW;EACX,gCAAgC;EAChC,WAAW;EACX,aAAa;EACb,sBAAsB;EACtB,cAAc,EAAE,MAAM;EACtB,oCAAoC;EACpC,iCAAiC;EACjC,4BAA4B,EAAE,MAAM;EACpC,iBAAiB;EACjB,qBAAqB;EACrB,yBAAyB;EACzB,kCAAkC;EAClC,+BAA+B;EAC/B,0BAA0B;EAC1B,0BAA0B;EAC1B,uBAAuB;EACvB,kBAAkB;AACpB;;AAEA;EACE,YAAY;EACZ,wBAAwB;EACxB,qBAAqB;EACrB,gBAAgB;EAChB,qBAAqB;EACrB,kBAAkB;EAClB,aAAa;EACb,UAAU;EACV,SAAS;EACT,gBAAgB;EAChB,gBAAgB;AAClB;;AAEA;;;;EAIE;AACF;EACE,cAAc;EACd,WAAW;EACX,WAAW;EACX,gCAAgC;EAChC,WAAW;EACX,aAAa;EACb,sBAAsB;EACtB,cAAc,EAAE,MAAM;EACtB,oCAAoC;EACpC,iCAAiC;EACjC,4BAA4B,EAAE,MAAM;EACpC,qBAAqB;EACrB,yBAAyB;EACzB,kCAAkC;EAClC,+BAA+B;EAC/B,0BAA0B;EAC1B,0BAA0B;EAC1B,uBAAuB;EACvB,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,QAAQ;EACR,QAAQ;EACR,qBAAqB;EACrB,sBAAsB;EACtB,cAAc;EACd,WAAW;EACX,YAAY;EACZ,iBAAiB;EACjB,kBAAkB;EAClB,gBAAgB;EAChB,eAAe;EACf,2BAA2B;EAC3B,wBAAwB;EACxB,mBAAmB;EACnB,gCAAgC;EAChC,6BAA6B;EAC7B,2BAA2B;EAC3B,yBAAyB;EACzB,YAAY;EACZ,WAAW;AACb;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,aAAa;AACf;;AAEA;;EAEE,aAAa;AACf;AACA;EACE,cAAc;AAChB;;AAEA;EACE,WAAW;EACX,gBAAgB;EAChB,gBAAgB;EAChB,mBAAmB;AACrB;;AAEA;EACE,eAAe;EACf,SAAS;EACT,WAAW;EACX,eAAe;EACf,SAAS;EACT,WAAW;EACX,UAAU;AACZ;;AAEA;EACE,YAAY;EACZ,cAAc;;EAEd;;;;IAIE;EACF,YAAY;EACZ,wBAAwB;EACxB,qBAAqB;EACrB,gBAAgB;EAChB,yBAAyB;AAC3B;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,qBAAqB;EACrB,cAAc;AAChB;;AAEA;EACE,6BAA6B;AAC/B;;AAEA;EACE,qBAAqB;EACrB,aAAa;EACb,gBAAgB;EAChB,iBAAiB;AACnB;;AAEA;EACE,WAAW;EACX,YAAY;AACd;;AAEA,uBAAuB,WAAW,EAAE;AACpC,oBAAoB,cAAc,EAAE;AACpC,sBAAsB,cAAc,EAAE;AACtC,uBAAuB,cAAc,EAAE;AACvC,sBAAsB,cAAc,EAAE;;AAEtC;EACE;IACE,gBAAgB;EAClB;;EAEA;IACE,kBAAkB;EACpB;AACF","sourcesContent":["@charset \"utf-8\";\n\nbody {\n  margin:0;\n}\n\n#mocha {\n  font: 20px/1.5 \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  margin: 60px 50px;\n}\n\n#mocha ul,\n#mocha li {\n  margin: 0;\n  padding: 0;\n}\n\n#mocha ul {\n  list-style: none;\n}\n\n#mocha h1,\n#mocha h2 {\n  margin: 0;\n}\n\n#mocha h1 {\n  margin-top: 15px;\n  font-size: 1em;\n  font-weight: 200;\n}\n\n#mocha h1 a {\n  text-decoration: none;\n  color: inherit;\n}\n\n#mocha h1 a:hover {\n  text-decoration: underline;\n}\n\n#mocha .suite .suite h1 {\n  margin-top: 0;\n  font-size: .8em;\n}\n\n#mocha .hidden {\n  display: none;\n}\n\n#mocha h2 {\n  font-size: 12px;\n  font-weight: normal;\n  cursor: pointer;\n}\n\n#mocha .suite {\n  margin-left: 15px;\n}\n\n#mocha .test {\n  margin-left: 15px;\n  overflow: hidden;\n}\n\n#mocha .test.pending:hover h2::after {\n  content: '(pending)';\n  font-family: arial, sans-serif;\n}\n\n#mocha .test.pass.medium .duration {\n  background: #c09853;\n}\n\n#mocha .test.pass.slow .duration {\n  background: #b94a48;\n}\n\n#mocha .test.pass::before {\n  content: '✓';\n  font-size: 12px;\n  display: block;\n  float: left;\n  margin-right: 5px;\n  color: #00d6b2;\n}\n\n#mocha .test.pass .duration {\n  font-size: 9px;\n  margin-left: 5px;\n  padding: 2px 5px;\n  color: #fff;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.2);\n  -moz-box-shadow: inset 0 1px 1px rgba(0,0,0,.2);\n  box-shadow: inset 0 1px 1px rgba(0,0,0,.2);\n  -webkit-border-radius: 5px;\n  -moz-border-radius: 5px;\n  -ms-border-radius: 5px;\n  -o-border-radius: 5px;\n  border-radius: 5px;\n}\n\n#mocha .test.pass.fast .duration {\n  display: none;\n}\n\n#mocha .test.pending {\n  color: #0b97c4;\n}\n\n#mocha .test.pending::before {\n  content: '◦';\n  color: #0b97c4;\n}\n\n#mocha .test.fail {\n  color: #c00;\n}\n\n#mocha .test.fail pre {\n  color: black;\n}\n\n#mocha .test.fail::before {\n  content: '✖';\n  font-size: 12px;\n  display: block;\n  float: left;\n  margin-right: 5px;\n  color: #c00;\n}\n\n#mocha .test pre.error {\n  color: #c00;\n  max-height: 300px;\n  overflow: auto;\n}\n\n#mocha .test .html-error {\n  overflow: auto;\n  color: black;\n  display: block;\n  float: left;\n  clear: left;\n  font: 12px/1.5 monaco, monospace;\n  margin: 5px;\n  padding: 15px;\n  border: 1px solid #eee;\n  max-width: 85%; /*(1)*/\n  max-width: -webkit-calc(100% - 42px);\n  max-width: -moz-calc(100% - 42px);\n  max-width: calc(100% - 42px); /*(2)*/\n  max-height: 300px;\n  word-wrap: break-word;\n  border-bottom-color: #ddd;\n  -webkit-box-shadow: 0 1px 3px #eee;\n  -moz-box-shadow: 0 1px 3px #eee;\n  box-shadow: 0 1px 3px #eee;\n  -webkit-border-radius: 3px;\n  -moz-border-radius: 3px;\n  border-radius: 3px;\n}\n\n#mocha .test .html-error pre.error {\n  border: none;\n  -webkit-border-radius: 0;\n  -moz-border-radius: 0;\n  border-radius: 0;\n  -webkit-box-shadow: 0;\n  -moz-box-shadow: 0;\n  box-shadow: 0;\n  padding: 0;\n  margin: 0;\n  margin-top: 18px;\n  max-height: none;\n}\n\n/**\n * (1): approximate for browsers not supporting calc\n * (2): 42 = 2*15 + 2*10 + 2*1 (padding + margin + border)\n *      ^^ seriously\n */\n#mocha .test pre {\n  display: block;\n  float: left;\n  clear: left;\n  font: 12px/1.5 monaco, monospace;\n  margin: 5px;\n  padding: 15px;\n  border: 1px solid #eee;\n  max-width: 85%; /*(1)*/\n  max-width: -webkit-calc(100% - 42px);\n  max-width: -moz-calc(100% - 42px);\n  max-width: calc(100% - 42px); /*(2)*/\n  word-wrap: break-word;\n  border-bottom-color: #ddd;\n  -webkit-box-shadow: 0 1px 3px #eee;\n  -moz-box-shadow: 0 1px 3px #eee;\n  box-shadow: 0 1px 3px #eee;\n  -webkit-border-radius: 3px;\n  -moz-border-radius: 3px;\n  border-radius: 3px;\n}\n\n#mocha .test h2 {\n  position: relative;\n}\n\n#mocha .test a.replay {\n  position: absolute;\n  top: 3px;\n  right: 0;\n  text-decoration: none;\n  vertical-align: middle;\n  display: block;\n  width: 15px;\n  height: 15px;\n  line-height: 15px;\n  text-align: center;\n  background: #eee;\n  font-size: 15px;\n  -webkit-border-radius: 15px;\n  -moz-border-radius: 15px;\n  border-radius: 15px;\n  -webkit-transition:opacity 200ms;\n  -moz-transition:opacity 200ms;\n  -o-transition:opacity 200ms;\n  transition: opacity 200ms;\n  opacity: 0.3;\n  color: #888;\n}\n\n#mocha .test:hover a.replay {\n  opacity: 1;\n}\n\n#mocha-report.pass .test.fail {\n  display: none;\n}\n\n#mocha-report.fail .test.pass {\n  display: none;\n}\n\n#mocha-report.pending .test.pass,\n#mocha-report.pending .test.fail {\n  display: none;\n}\n#mocha-report.pending .test.pass.pending {\n  display: block;\n}\n\n#mocha-error {\n  color: #c00;\n  font-size: 1.5em;\n  font-weight: 100;\n  letter-spacing: 1px;\n}\n\n#mocha-stats {\n  position: fixed;\n  top: 15px;\n  right: 10px;\n  font-size: 12px;\n  margin: 0;\n  color: #888;\n  z-index: 1;\n}\n\n#mocha-stats .progress {\n  float: right;\n  padding-top: 0;\n\n  /**\n   * Set safe initial values, so mochas .progress does not inherit these\n   * properties from Bootstrap .progress (which causes .progress height to\n   * equal line height set in Bootstrap).\n   */\n  height: auto;\n  -webkit-box-shadow: none;\n  -moz-box-shadow: none;\n  box-shadow: none;\n  background-color: initial;\n}\n\n#mocha-stats em {\n  color: black;\n}\n\n#mocha-stats a {\n  text-decoration: none;\n  color: inherit;\n}\n\n#mocha-stats a:hover {\n  border-bottom: 1px solid #eee;\n}\n\n#mocha-stats li {\n  display: inline-block;\n  margin: 0 5px;\n  list-style: none;\n  padding-top: 11px;\n}\n\n#mocha-stats canvas {\n  width: 40px;\n  height: 40px;\n}\n\n#mocha code .comment { color: #ddd; }\n#mocha code .init { color: #2f6fad; }\n#mocha code .string { color: #5890ad; }\n#mocha code .keyword { color: #8a6343; }\n#mocha code .number { color: #2f6fad; }\n\n@media screen and (max-device-width: 480px) {\n  #mocha {\n    margin: 60px 0px;\n  }\n\n  #mocha #stats {\n    position: absolute;\n  }\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "../node_modules/css-loader/dist/runtime/api.js":
/*!******************************************************!*\
  !*** ../node_modules/css-loader/dist/runtime/api.js ***!
  \******************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module */
/*! CommonJS bailout: module.exports is used directly at 9:0-14 */
/***/ ((module) => {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
// eslint-disable-next-line func-names
module.exports = function (cssWithMappingToString) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item);

      if (item[2]) {
        return "@media ".concat(item[2], " {").concat(content, "}");
      }

      return content;
    }).join('');
  }; // import a list of modules into the list
  // eslint-disable-next-line func-names


  list.i = function (modules, mediaQuery, dedupe) {
    if (typeof modules === 'string') {
      // eslint-disable-next-line no-param-reassign
      modules = [[null, modules, '']];
    }

    var alreadyImportedModules = {};

    if (dedupe) {
      for (var i = 0; i < this.length; i++) {
        // eslint-disable-next-line prefer-destructuring
        var id = this[i][0];

        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }

    for (var _i = 0; _i < modules.length; _i++) {
      var item = [].concat(modules[_i]);

      if (dedupe && alreadyImportedModules[item[0]]) {
        // eslint-disable-next-line no-continue
        continue;
      }

      if (mediaQuery) {
        if (!item[2]) {
          item[2] = mediaQuery;
        } else {
          item[2] = "".concat(mediaQuery, " and ").concat(item[2]);
        }
      }

      list.push(item);
    }
  };

  return list;
};

/***/ }),

/***/ "../node_modules/css-loader/dist/runtime/cssWithMappingToString.js":
/*!*************************************************************************!*\
  !*** ../node_modules/css-loader/dist/runtime/cssWithMappingToString.js ***!
  \*************************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module */
/*! CommonJS bailout: module.exports is used directly at 15:0-14 */
/***/ ((module) => {

"use strict";


function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

module.exports = function cssWithMappingToString(item) {
  var _item = _slicedToArray(item, 4),
      content = _item[1],
      cssMapping = _item[3];

  if (typeof btoa === 'function') {
    // eslint-disable-next-line no-undef
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
    var sourceMapping = "/*# ".concat(data, " */");
    var sourceURLs = cssMapping.sources.map(function (source) {
      return "/*# sourceURL=".concat(cssMapping.sourceRoot || '').concat(source, " */");
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
  }

  return [content].join('\n');
};

/***/ }),

/***/ "../node_modules/deep-eql/index.js":
/*!*****************************************!*\
  !*** ../node_modules/deep-eql/index.js ***!
  \*****************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 79:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

/* globals Symbol: false, Uint8Array: false, WeakMap: false */
/*!
 * deep-eql
 * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var type = __webpack_require__(/*! type-detect */ "../node_modules/type-detect/type-detect.js");
function FakeMap() {
  this._key = 'chai/deep-eql__' + Math.random() + Date.now();
}

FakeMap.prototype = {
  get: function getMap(key) {
    return key[this._key];
  },
  set: function setMap(key, value) {
    if (Object.isExtensible(key)) {
      Object.defineProperty(key, this._key, {
        value: value,
        configurable: true,
      });
    }
  },
};

var MemoizeMap = typeof WeakMap === 'function' ? WeakMap : FakeMap;
/*!
 * Check to see if the MemoizeMap has recorded a result of the two operands
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {MemoizeMap} memoizeMap
 * @returns {Boolean|null} result
*/
function memoizeCompare(leftHandOperand, rightHandOperand, memoizeMap) {
  // Technically, WeakMap keys can *only* be objects, not primitives.
  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {
    return null;
  }
  var leftHandMap = memoizeMap.get(leftHandOperand);
  if (leftHandMap) {
    var result = leftHandMap.get(rightHandOperand);
    if (typeof result === 'boolean') {
      return result;
    }
  }
  return null;
}

/*!
 * Set the result of the equality into the MemoizeMap
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {MemoizeMap} memoizeMap
 * @param {Boolean} result
*/
function memoizeSet(leftHandOperand, rightHandOperand, memoizeMap, result) {
  // Technically, WeakMap keys can *only* be objects, not primitives.
  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {
    return;
  }
  var leftHandMap = memoizeMap.get(leftHandOperand);
  if (leftHandMap) {
    leftHandMap.set(rightHandOperand, result);
  } else {
    leftHandMap = new MemoizeMap();
    leftHandMap.set(rightHandOperand, result);
    memoizeMap.set(leftHandOperand, leftHandMap);
  }
}

/*!
 * Primary Export
 */

module.exports = deepEqual;
module.exports.MemoizeMap = MemoizeMap;

/**
 * Assert deeply nested sameValue equality between two objects of any type.
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {Object} [options] (optional) Additional options
 * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.
 * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of
    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular
    references to blow the stack.
 * @return {Boolean} equal match
 */
function deepEqual(leftHandOperand, rightHandOperand, options) {
  // If we have a comparator, we can't assume anything; so bail to its check first.
  if (options && options.comparator) {
    return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);
  }

  var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);
  if (simpleResult !== null) {
    return simpleResult;
  }

  // Deeper comparisons are pushed through to a larger function
  return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);
}

/**
 * Many comparisons can be canceled out early via simple equality or primitive checks.
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @return {Boolean|null} equal match
 */
function simpleEqual(leftHandOperand, rightHandOperand) {
  // Equal references (except for Numbers) can be returned early
  if (leftHandOperand === rightHandOperand) {
    // Handle +-0 cases
    return leftHandOperand !== 0 || 1 / leftHandOperand === 1 / rightHandOperand;
  }

  // handle NaN cases
  if (
    leftHandOperand !== leftHandOperand && // eslint-disable-line no-self-compare
    rightHandOperand !== rightHandOperand // eslint-disable-line no-self-compare
  ) {
    return true;
  }

  // Anything that is not an 'object', i.e. symbols, functions, booleans, numbers,
  // strings, and undefined, can be compared by reference.
  if (isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {
    // Easy out b/c it would have passed the first equality check
    return false;
  }
  return null;
}

/*!
 * The main logic of the `deepEqual` function.
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {Object} [options] (optional) Additional options
 * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.
 * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of
    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular
    references to blow the stack.
 * @return {Boolean} equal match
*/
function extensiveDeepEqual(leftHandOperand, rightHandOperand, options) {
  options = options || {};
  options.memoize = options.memoize === false ? false : options.memoize || new MemoizeMap();
  var comparator = options && options.comparator;

  // Check if a memoized result exists.
  var memoizeResultLeft = memoizeCompare(leftHandOperand, rightHandOperand, options.memoize);
  if (memoizeResultLeft !== null) {
    return memoizeResultLeft;
  }
  var memoizeResultRight = memoizeCompare(rightHandOperand, leftHandOperand, options.memoize);
  if (memoizeResultRight !== null) {
    return memoizeResultRight;
  }

  // If a comparator is present, use it.
  if (comparator) {
    var comparatorResult = comparator(leftHandOperand, rightHandOperand);
    // Comparators may return null, in which case we want to go back to default behavior.
    if (comparatorResult === false || comparatorResult === true) {
      memoizeSet(leftHandOperand, rightHandOperand, options.memoize, comparatorResult);
      return comparatorResult;
    }
    // To allow comparators to override *any* behavior, we ran them first. Since it didn't decide
    // what to do, we need to make sure to return the basic tests first before we move on.
    var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);
    if (simpleResult !== null) {
      // Don't memoize this, it takes longer to set/retrieve than to just compare.
      return simpleResult;
    }
  }

  var leftHandType = type(leftHandOperand);
  if (leftHandType !== type(rightHandOperand)) {
    memoizeSet(leftHandOperand, rightHandOperand, options.memoize, false);
    return false;
  }

  // Temporarily set the operands in the memoize object to prevent blowing the stack
  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, true);

  var result = extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options);
  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, result);
  return result;
}

function extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options) {
  switch (leftHandType) {
    case 'String':
    case 'Number':
    case 'Boolean':
    case 'Date':
      // If these types are their instance types (e.g. `new Number`) then re-deepEqual against their values
      return deepEqual(leftHandOperand.valueOf(), rightHandOperand.valueOf());
    case 'Promise':
    case 'Symbol':
    case 'function':
    case 'WeakMap':
    case 'WeakSet':
    case 'Error':
      return leftHandOperand === rightHandOperand;
    case 'Arguments':
    case 'Int8Array':
    case 'Uint8Array':
    case 'Uint8ClampedArray':
    case 'Int16Array':
    case 'Uint16Array':
    case 'Int32Array':
    case 'Uint32Array':
    case 'Float32Array':
    case 'Float64Array':
    case 'Array':
      return iterableEqual(leftHandOperand, rightHandOperand, options);
    case 'RegExp':
      return regexpEqual(leftHandOperand, rightHandOperand);
    case 'Generator':
      return generatorEqual(leftHandOperand, rightHandOperand, options);
    case 'DataView':
      return iterableEqual(new Uint8Array(leftHandOperand.buffer), new Uint8Array(rightHandOperand.buffer), options);
    case 'ArrayBuffer':
      return iterableEqual(new Uint8Array(leftHandOperand), new Uint8Array(rightHandOperand), options);
    case 'Set':
      return entriesEqual(leftHandOperand, rightHandOperand, options);
    case 'Map':
      return entriesEqual(leftHandOperand, rightHandOperand, options);
    default:
      return objectEqual(leftHandOperand, rightHandOperand, options);
  }
}

/*!
 * Compare two Regular Expressions for equality.
 *
 * @param {RegExp} leftHandOperand
 * @param {RegExp} rightHandOperand
 * @return {Boolean} result
 */

function regexpEqual(leftHandOperand, rightHandOperand) {
  return leftHandOperand.toString() === rightHandOperand.toString();
}

/*!
 * Compare two Sets/Maps for equality. Faster than other equality functions.
 *
 * @param {Set} leftHandOperand
 * @param {Set} rightHandOperand
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */

function entriesEqual(leftHandOperand, rightHandOperand, options) {
  // IE11 doesn't support Set#entries or Set#@@iterator, so we need manually populate using Set#forEach
  if (leftHandOperand.size !== rightHandOperand.size) {
    return false;
  }
  if (leftHandOperand.size === 0) {
    return true;
  }
  var leftHandItems = [];
  var rightHandItems = [];
  leftHandOperand.forEach(function gatherEntries(key, value) {
    leftHandItems.push([ key, value ]);
  });
  rightHandOperand.forEach(function gatherEntries(key, value) {
    rightHandItems.push([ key, value ]);
  });
  return iterableEqual(leftHandItems.sort(), rightHandItems.sort(), options);
}

/*!
 * Simple equality for flat iterable objects such as Arrays, TypedArrays or Node.js buffers.
 *
 * @param {Iterable} leftHandOperand
 * @param {Iterable} rightHandOperand
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */

function iterableEqual(leftHandOperand, rightHandOperand, options) {
  var length = leftHandOperand.length;
  if (length !== rightHandOperand.length) {
    return false;
  }
  if (length === 0) {
    return true;
  }
  var index = -1;
  while (++index < length) {
    if (deepEqual(leftHandOperand[index], rightHandOperand[index], options) === false) {
      return false;
    }
  }
  return true;
}

/*!
 * Simple equality for generator objects such as those returned by generator functions.
 *
 * @param {Iterable} leftHandOperand
 * @param {Iterable} rightHandOperand
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */

function generatorEqual(leftHandOperand, rightHandOperand, options) {
  return iterableEqual(getGeneratorEntries(leftHandOperand), getGeneratorEntries(rightHandOperand), options);
}

/*!
 * Determine if the given object has an @@iterator function.
 *
 * @param {Object} target
 * @return {Boolean} `true` if the object has an @@iterator function.
 */
function hasIteratorFunction(target) {
  return typeof Symbol !== 'undefined' &&
    typeof target === 'object' &&
    typeof Symbol.iterator !== 'undefined' &&
    typeof target[Symbol.iterator] === 'function';
}

/*!
 * Gets all iterator entries from the given Object. If the Object has no @@iterator function, returns an empty array.
 * This will consume the iterator - which could have side effects depending on the @@iterator implementation.
 *
 * @param {Object} target
 * @returns {Array} an array of entries from the @@iterator function
 */
function getIteratorEntries(target) {
  if (hasIteratorFunction(target)) {
    try {
      return getGeneratorEntries(target[Symbol.iterator]());
    } catch (iteratorError) {
      return [];
    }
  }
  return [];
}

/*!
 * Gets all entries from a Generator. This will consume the generator - which could have side effects.
 *
 * @param {Generator} target
 * @returns {Array} an array of entries from the Generator.
 */
function getGeneratorEntries(generator) {
  var generatorResult = generator.next();
  var accumulator = [ generatorResult.value ];
  while (generatorResult.done === false) {
    generatorResult = generator.next();
    accumulator.push(generatorResult.value);
  }
  return accumulator;
}

/*!
 * Gets all own and inherited enumerable keys from a target.
 *
 * @param {Object} target
 * @returns {Array} an array of own and inherited enumerable keys from the target.
 */
function getEnumerableKeys(target) {
  var keys = [];
  for (var key in target) {
    keys.push(key);
  }
  return keys;
}

/*!
 * Determines if two objects have matching values, given a set of keys. Defers to deepEqual for the equality check of
 * each key. If any value of the given key is not equal, the function will return false (early).
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {Array} keys An array of keys to compare the values of leftHandOperand and rightHandOperand against
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */
function keysEqual(leftHandOperand, rightHandOperand, keys, options) {
  var length = keys.length;
  if (length === 0) {
    return true;
  }
  for (var i = 0; i < length; i += 1) {
    if (deepEqual(leftHandOperand[keys[i]], rightHandOperand[keys[i]], options) === false) {
      return false;
    }
  }
  return true;
}

/*!
 * Recursively check the equality of two Objects. Once basic sameness has been established it will defer to `deepEqual`
 * for each enumerable key in the object.
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */

function objectEqual(leftHandOperand, rightHandOperand, options) {
  var leftHandKeys = getEnumerableKeys(leftHandOperand);
  var rightHandKeys = getEnumerableKeys(rightHandOperand);
  if (leftHandKeys.length && leftHandKeys.length === rightHandKeys.length) {
    leftHandKeys.sort();
    rightHandKeys.sort();
    if (iterableEqual(leftHandKeys, rightHandKeys) === false) {
      return false;
    }
    return keysEqual(leftHandOperand, rightHandOperand, leftHandKeys, options);
  }

  var leftHandEntries = getIteratorEntries(leftHandOperand);
  var rightHandEntries = getIteratorEntries(rightHandOperand);
  if (leftHandEntries.length && leftHandEntries.length === rightHandEntries.length) {
    leftHandEntries.sort();
    rightHandEntries.sort();
    return iterableEqual(leftHandEntries, rightHandEntries, options);
  }

  if (leftHandKeys.length === 0 &&
      leftHandEntries.length === 0 &&
      rightHandKeys.length === 0 &&
      rightHandEntries.length === 0) {
    return true;
  }

  return false;
}

/*!
 * Returns true if the argument is a primitive.
 *
 * This intentionally returns true for all objects that can be compared by reference,
 * including functions and symbols.
 *
 * @param {Mixed} value
 * @return {Boolean} result
 */
function isPrimitive(value) {
  return value === null || typeof value !== 'object';
}


/***/ }),

/***/ "../node_modules/get-func-name/index.js":
/*!**********************************************!*\
  !*** ../node_modules/get-func-name/index.js ***!
  \**********************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module */
/*! CommonJS bailout: module.exports is used directly at 44:0-14 */
/***/ ((module) => {

"use strict";


/* !
 * Chai - getFuncName utility
 * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .getFuncName(constructorFn)
 *
 * Returns the name of a function.
 * When a non-function instance is passed, returns `null`.
 * This also includes a polyfill function if `aFunc.name` is not defined.
 *
 * @name getFuncName
 * @param {Function} funct
 * @namespace Utils
 * @api public
 */

var toString = Function.prototype.toString;
var functionNameMatch = /\s*function(?:\s|\s*\/\*[^(?:*\/)]+\*\/\s*)*([^\s\(\/]+)/;
function getFuncName(aFunc) {
  if (typeof aFunc !== 'function') {
    return null;
  }

  var name = '';
  if (typeof Function.prototype.name === 'undefined' && typeof aFunc.name === 'undefined') {
    // Here we run a polyfill if Function does not support the `name` property and if aFunc.name is not defined
    var match = toString.call(aFunc).match(functionNameMatch);
    if (match) {
      name = match[1];
    }
  } else {
    // If we've got a `name` property we just use it
    name = aFunc.name;
  }

  return name;
}

module.exports = getFuncName;


/***/ }),

/***/ "../node_modules/jquery/dist/jquery.js":
/*!*********************************************!*\
  !*** ../node_modules/jquery/dist/jquery.js ***!
  \*********************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, top-level-this-exports, __webpack_exports__ */
/*! CommonJS bailout: this is used directly at 40:46-50 */
/*! CommonJS bailout: module.exports is used directly at 18:43-57 */
/*! CommonJS bailout: module.exports is used directly at 27:2-16 */
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v3.5.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2020-05-04T22:49Z
 */
( function( global, factory ) {

	"use strict";

	if (  true && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var flat = arr.flat ? function( array ) {
	return arr.flat.call( array );
} : function( array ) {
	return arr.concat.apply( [], array );
};


var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

      // Support: Chrome <=57, Firefox <=52
      // In some browsers, typeof returns "function" for HTML <object> elements
      // (i.e., `typeof document.createElement( "object" ) === "function"`).
      // We don't want to classify *any* DOM node as a function.
      return typeof obj === "function" && typeof obj.nodeType !== "number";
  };


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};


var document = window.document;



	var preservedScriptAttributes = {
		type: true,
		src: true,
		nonce: true,
		noModule: true
	};

	function DOMEval( code, node, doc ) {
		doc = doc || document;

		var i, val,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {

				// Support: Firefox 64+, Edge 18+
				// Some browsers don't support the "nonce" property on scripts.
				// On the other hand, just using `getAttribute` is not enough as
				// the `nonce` attribute is reset to an empty string whenever it
				// becomes browsing-context connected.
				// See https://github.com/whatwg/html/issues/2369
				// See https://html.spec.whatwg.org/#nonce-attributes
				// The `node.getAttribute` check was added for the sake of
				// `jQuery.globalEval` so that it can fake a nonce-containing node
				// via an object.
				val = node[ i ] || node.getAttribute && node.getAttribute( i );
				if ( val ) {
					script.setAttribute( i, val );
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.5.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	even: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return ( i + 1 ) % 2;
		} ) );
	},

	odd: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return i % 2;
		} ) );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				copy = options[ name ];

				// Prevent Object.prototype pollution
				// Prevent never-ending loop
				if ( name === "__proto__" || target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {
					src = target[ name ];

					// Ensure proper type for the source value
					if ( copyIsArray && !Array.isArray( src ) ) {
						clone = [];
					} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
						clone = {};
					} else {
						clone = src;
					}
					copyIsArray = false;

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a provided context; falls back to the global one
	// if not specified.
	globalEval: function( code, options, doc ) {
		DOMEval( code, { nonce: options && options.nonce }, doc );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return flat( ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( _i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.5
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2020-03-14
 */
( function( window ) {
var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	nonnativeSelectorCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ( {} ).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	pushNative = arr.push,
	push = arr.push,
	slice = arr.slice,

	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[ i ] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" +
		"ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
	identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace +
		"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +

		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +

		// "Attribute values must be CSS identifiers [capture 5]
		// or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" +
		whitespace + "*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +

		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +

		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +

		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" +
		whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace +
		"*" ),
	rdescend = new RegExp( whitespace + "|>" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
			whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" +
			whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),

		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace +
			"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
			"*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rhtml = /HTML$/i,
	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g" ),
	funescape = function( escape, nonHex ) {
		var high = "0x" + escape.slice( 1 ) - 0x10000;

		return nonHex ?

			// Strip the backslash prefix from a non-hex escape sequence
			nonHex :

			// Replace a hexadecimal escape sequence with the encoded Unicode code point
			// Support: IE <=11+
			// For values outside the Basic Multilingual Plane (BMP), manually construct a
			// surrogate pair
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" +
				ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	inDisabledFieldset = addCombinator(
		function( elem ) {
			return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		( arr = slice.call( preferredDoc.childNodes ) ),
		preferredDoc.childNodes
	);

	// Support: Android<4.0
	// Detect silently failing push.apply
	// eslint-disable-next-line no-unused-expressions
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			pushNative.apply( target, slice.call( els ) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;

			// Can't trust NodeList.length
			while ( ( target[ j++ ] = els[ i++ ] ) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {
		setDocument( context );
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {

				// ID selector
				if ( ( m = match[ 1 ] ) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( ( elem = context.getElementById( m ) ) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && ( elem = newContext.getElementById( m ) ) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[ 2 ] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( ( m = match[ 3 ] ) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!nonnativeSelectorCache[ selector + " " ] &&
				( !rbuggyQSA || !rbuggyQSA.test( selector ) ) &&

				// Support: IE 8 only
				// Exclude object elements
				( nodeType !== 1 || context.nodeName.toLowerCase() !== "object" ) ) {

				newSelector = selector;
				newContext = context;

				// qSA considers elements outside a scoping root when evaluating child or
				// descendant combinators, which is not what we want.
				// In such cases, we work around the behavior by prefixing every selector in the
				// list with an ID selector referencing the scope context.
				// The technique has to be used as well when a leading combinator is used
				// as such selectors are not recognized by querySelectorAll.
				// Thanks to Andrew Dupont for this technique.
				if ( nodeType === 1 &&
					( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;

					// We can use :scope instead of the ID hack if the browser
					// supports it & if we're not changing the context.
					if ( newContext !== context || !support.scope ) {

						// Capture the context ID, setting it first if necessary
						if ( ( nid = context.getAttribute( "id" ) ) ) {
							nid = nid.replace( rcssescape, fcssescape );
						} else {
							context.setAttribute( "id", ( nid = expando ) );
						}
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[ i ] = ( nid ? "#" + nid : ":scope" ) + " " +
							toSelector( groups[ i ] );
					}
					newSelector = groups.join( "," );
				}

				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch ( qsaError ) {
					nonnativeSelectorCache( selector, true );
				} finally {
					if ( nid === expando ) {
						context.removeAttribute( "id" );
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {

		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {

			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return ( cache[ key + " " ] = value );
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement( "fieldset" );

	try {
		return !!fn( el );
	} catch ( e ) {
		return false;
	} finally {

		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}

		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split( "|" ),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[ i ] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( ( cur = cur.nextSibling ) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return ( name === "input" || name === "button" ) && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
					inDisabledFieldset( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction( function( argument ) {
		argument = +argument;
		return markFunction( function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ ( j = matchIndexes[ i ] ) ] ) {
					seed[ j ] = !( matches[ j ] = seed[ j ] );
				}
			}
		} );
	} );
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	var namespace = elem.namespaceURI,
		docElem = ( elem.ownerDocument || elem ).documentElement;

	// Support: IE <=8
	// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
	// https://bugs.jquery.com/ticket/4833
	return !rhtml.test( namespace || docElem && docElem.nodeName || "HTML" );
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9 - 11+, Edge 12 - 18+
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( preferredDoc != document &&
		( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
	// Safari 4 - 5 only, Opera <=11.6 - 12.x only
	// IE/Edge & older browsers don't support the :scope pseudo-class.
	// Support: Safari 6.0 only
	// Safari 6.0 supports :scope but it's an alias of :root there.
	support.scope = assert( function( el ) {
		docElem.appendChild( el ).appendChild( document.createElement( "div" ) );
		return typeof el.querySelectorAll !== "undefined" &&
			!el.querySelectorAll( ":scope fieldset div" ).length;
	} );

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert( function( el ) {
		el.className = "i";
		return !el.getAttribute( "className" );
	} );

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert( function( el ) {
		el.appendChild( document.createComment( "" ) );
		return !el.getElementsByTagName( "*" ).length;
	} );

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert( function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	} );

	// ID filter and find
	if ( support.getById ) {
		Expr.filter[ "ID" ] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute( "id" ) === attrId;
			};
		};
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter[ "ID" ] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode( "id" );
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode( "id" );
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( ( elem = elems[ i++ ] ) ) {
						node = elem.getAttributeNode( "id" );
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find[ "TAG" ] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,

				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( ( elem = results[ i++ ] ) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find[ "CLASS" ] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( ( support.qsa = rnative.test( document.querySelectorAll ) ) ) {

		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert( function( el ) {

			var input;

			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll( "[msallowcapture^='']" ).length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll( "[selected]" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push( "~=" );
			}

			// Support: IE 11+, Edge 15 - 18+
			// IE 11/Edge don't find elements on a `[name='']` query in some cases.
			// Adding a temporary attribute to the document before the selection works
			// around the issue.
			// Interestingly, IE 10 & older don't seem to have the issue.
			input = document.createElement( "input" );
			input.setAttribute( "name", "" );
			el.appendChild( input );
			if ( !el.querySelectorAll( "[name='']" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*name" + whitespace + "*=" +
					whitespace + "*(?:''|\"\")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll( ":checked" ).length ) {
				rbuggyQSA.push( ":checked" );
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push( ".#.+[+~]" );
			}

			// Support: Firefox <=3.6 - 5 only
			// Old Firefox doesn't throw on a badly-escaped identifier.
			el.querySelectorAll( "\\\f" );
			rbuggyQSA.push( "[\\r\\n\\f]" );
		} );

		assert( function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement( "input" );
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll( "[name=d]" ).length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll( ":enabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll( ":disabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: Opera 10 - 11 only
			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll( "*,:x" );
			rbuggyQSA.push( ",.*:" );
		} );
	}

	if ( ( support.matchesSelector = rnative.test( ( matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector ) ) ) ) {

		assert( function( el ) {

			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		} );
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( "|" ) );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join( "|" ) );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			) );
		} :
		function( a, b ) {
			if ( b ) {
				while ( ( b = b.parentNode ) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		// Support: IE 11+, Edge 17 - 18+
		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
		// two documents; shallow comparisons work.
		// eslint-disable-next-line eqeqeq
		compare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {

			// Choose the first element that is related to our preferred document
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( a == document || a.ownerDocument == preferredDoc &&
				contains( preferredDoc, a ) ) {
				return -1;
			}

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( b == document || b.ownerDocument == preferredDoc &&
				contains( preferredDoc, b ) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			return a == document ? -1 :
				b == document ? 1 :
				/* eslint-enable eqeqeq */
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( ( cur = cur.parentNode ) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( ( cur = cur.parentNode ) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[ i ] === bp[ i ] ) {
			i++;
		}

		return i ?

			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[ i ], bp[ i ] ) :

			// Otherwise nodes in our document sort first
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			ap[ i ] == preferredDoc ? -1 :
			bp[ i ] == preferredDoc ? 1 :
			/* eslint-enable eqeqeq */
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	setDocument( elem );

	if ( support.matchesSelector && documentIsHTML &&
		!nonnativeSelectorCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||

				// As well, disconnected nodes are said to be in a document
				// fragment in IE 9
				elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch ( e ) {
			nonnativeSelectorCache( expr, true );
		}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( context.ownerDocument || context ) != document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( elem.ownerDocument || elem ) != document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],

		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			( val = elem.getAttributeNode( name ) ) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return ( sel + "" ).replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( ( elem = results[ i++ ] ) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {

		// If no nodeType, this is expected to be an array
		while ( ( node = elem[ i++ ] ) ) {

			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {

		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {

			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}

	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[ 1 ] = match[ 1 ].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[ 3 ] = ( match[ 3 ] || match[ 4 ] ||
				match[ 5 ] || "" ).replace( runescape, funescape );

			if ( match[ 2 ] === "~=" ) {
				match[ 3 ] = " " + match[ 3 ] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {

			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[ 1 ] = match[ 1 ].toLowerCase();

			if ( match[ 1 ].slice( 0, 3 ) === "nth" ) {

				// nth-* requires argument
				if ( !match[ 3 ] ) {
					Sizzle.error( match[ 0 ] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[ 4 ] = +( match[ 4 ] ?
					match[ 5 ] + ( match[ 6 ] || 1 ) :
					2 * ( match[ 3 ] === "even" || match[ 3 ] === "odd" ) );
				match[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === "odd" );

				// other types prohibit arguments
			} else if ( match[ 3 ] ) {
				Sizzle.error( match[ 0 ] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[ 6 ] && match[ 2 ];

			if ( matchExpr[ "CHILD" ].test( match[ 0 ] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[ 3 ] ) {
				match[ 2 ] = match[ 4 ] || match[ 5 ] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&

				// Get excess from tokenize (recursively)
				( excess = tokenize( unquoted, true ) ) &&

				// advance to the next closing parenthesis
				( excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length ) ) {

				// excess is a negative index
				match[ 0 ] = match[ 0 ].slice( 0, excess );
				match[ 2 ] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() {
					return true;
				} :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				( pattern = new RegExp( "(^|" + whitespace +
					")" + className + "(" + whitespace + "|$)" ) ) && classCache(
						className, function( elem ) {
							return pattern.test(
								typeof elem.className === "string" && elem.className ||
								typeof elem.getAttribute !== "undefined" &&
									elem.getAttribute( "class" ) ||
								""
							);
				} );
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				/* eslint-disable max-len */

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
				/* eslint-enable max-len */

			};
		},

		"CHILD": function( type, what, _argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, _context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( ( node = node[ dir ] ) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}

								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || ( node[ expando ] = {} );

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								( outerCache[ node.uniqueID ] = {} );

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( ( node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								( diff = nodeIndex = 0 ) || start.pop() ) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {

							// Use previously-cached element index if available
							if ( useCache ) {

								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || ( node[ expando ] = {} );

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									( outerCache[ node.uniqueID ] = {} );

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {

								// Use the same loop as above to seek `elem` from the start
								while ( ( node = ++nodeIndex && node && node[ dir ] ||
									( diff = nodeIndex = 0 ) || start.pop() ) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] ||
												( node[ expando ] = {} );

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												( outerCache[ node.uniqueID ] = {} );

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {

			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction( function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[ i ] );
							seed[ idx ] = !( matches[ idx ] = matched[ i ] );
						}
					} ) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {

		// Potentially complex pseudos
		"not": markFunction( function( selector ) {

			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction( function( seed, matches, _context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( ( elem = unmatched[ i ] ) ) {
							seed[ i ] = !( matches[ i ] = elem );
						}
					}
				} ) :
				function( elem, _context, xml ) {
					input[ 0 ] = elem;
					matcher( input, null, xml, results );

					// Don't keep the element (issue #299)
					input[ 0 ] = null;
					return !results.pop();
				};
		} ),

		"has": markFunction( function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		} ),

		"contains": markFunction( function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;
			};
		} ),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {

			// lang value must be a valid identifier
			if ( !ridentifier.test( lang || "" ) ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( ( elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute( "xml:lang" ) || elem.getAttribute( "lang" ) ) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );
				return false;
			};
		} ),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement &&
				( !document.hasFocus || document.hasFocus() ) &&
				!!( elem.type || elem.href || ~elem.tabIndex );
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {

			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return ( nodeName === "input" && !!elem.checked ) ||
				( nodeName === "option" && !!elem.selected );
		},

		"selected": function( elem ) {

			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				// eslint-disable-next-line no-unused-expressions
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {

			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos[ "empty" ]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( ( attr = elem.getAttribute( "type" ) ) == null ||
					attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo( function() {
			return [ 0 ];
		} ),

		"last": createPositionalPseudo( function( _matchIndexes, length ) {
			return [ length - 1 ];
		} ),

		"eq": createPositionalPseudo( function( _matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		} ),

		"even": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"odd": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"lt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ?
				argument + length :
				argument > length ?
					length :
					argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"gt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} )
	}
};

Expr.pseudos[ "nth" ] = Expr.pseudos[ "eq" ];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || ( match = rcomma.exec( soFar ) ) ) {
			if ( match ) {

				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[ 0 ].length ) || soFar;
			}
			groups.push( ( tokens = [] ) );
		}

		matched = false;

		// Combinators
		if ( ( match = rcombinators.exec( soFar ) ) ) {
			matched = match.shift();
			tokens.push( {
				value: matched,

				// Cast descendant combinators to space
				type: match[ 0 ].replace( rtrim, " " )
			} );
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||
				( match = preFilters[ type ]( match ) ) ) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,
					type: type,
					matches: match
				} );
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :

			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[ i ].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?

		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( ( elem = elem[ dir ] ) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || ( elem[ expando ] = {} );

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] ||
							( outerCache[ elem.uniqueID ] = {} );

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( ( oldCache = uniqueCache[ key ] ) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return ( newCache[ 2 ] = oldCache[ 2 ] );
						} else {

							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[ i ]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[ 0 ];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[ i ], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( ( elem = unmatched[ i ] ) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction( function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts(
				selector || "*",
				context.nodeType ? [ context ] : context,
				[]
			),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?

				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( ( elem = temp[ i ] ) ) {
					matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {

					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( ( elem = matcherOut[ i ] ) ) {

							// Restore matcherIn since elem is not yet a final match
							temp.push( ( matcherIn[ i ] = elem ) );
						}
					}
					postFinder( null, ( matcherOut = [] ), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( ( elem = matcherOut[ i ] ) &&
						( temp = postFinder ? indexOf( seed, elem ) : preMap[ i ] ) > -1 ) {

						seed[ temp ] = !( results[ temp ] = elem );
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	} );
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[ 0 ].type ],
		implicitRelative = leadingRelative || Expr.relative[ " " ],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				( checkContext = context ).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );

			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {
			matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
		} else {
			matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {

				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[ j ].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(

					// If the preceding token was a descendant combinator, insert an implicit any-element `*`
					tokens
						.slice( 0, i - 1 )
						.concat( { value: tokens[ i - 2 ].type === " " ? "*" : "" } )
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,

				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find[ "TAG" ]( "*", outermost ),

				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),
				len = elems.length;

			if ( outermost ) {

				// Support: IE 11+, Edge 17 - 18+
				// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
				// two documents; shallow comparisons work.
				// eslint-disable-next-line eqeqeq
				outermostContext = context == document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;

					// Support: IE 11+, Edge 17 - 18+
					// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
					// two documents; shallow comparisons work.
					// eslint-disable-next-line eqeqeq
					if ( !context && elem.ownerDocument != document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( ( matcher = elementMatchers[ j++ ] ) ) {
						if ( matcher( elem, context || document, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {

					// They will have gone through all possible matchers
					if ( ( elem = !matcher && elem ) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( ( matcher = setMatchers[ j++ ] ) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {

					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !( unmatched[ i ] || setMatched[ i ] ) ) {
								setMatched[ i ] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {

		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[ i ] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache(
			selector,
			matcherFromGroupMatchers( elementMatchers, setMatchers )
		);

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( ( selector = compiled.selector || selector ) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[ 0 ] = match[ 0 ].slice( 0 );
		if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === "ID" &&
			context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {

			context = ( Expr.find[ "ID" ]( token.matches[ 0 ]
				.replace( runescape, funescape ), context ) || [] )[ 0 ];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr[ "needsContext" ].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[ i ];

			// Abort if we hit a combinator
			if ( Expr.relative[ ( type = token.type ) ] ) {
				break;
			}
			if ( ( find = Expr.find[ type ] ) ) {

				// Search, expanding context for leading sibling combinators
				if ( ( seed = find(
					token.matches[ 0 ].replace( runescape, funescape ),
					rsibling.test( tokens[ 0 ].type ) && testContext( context.parentNode ) ||
						context
				) ) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split( "" ).sort( sortOrder ).join( "" ) === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert( function( el ) {

	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement( "fieldset" ) ) & 1;
} );

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert( function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute( "href" ) === "#";
} ) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	} );
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert( function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
} ) ) {
	addHandle( "value", function( elem, _name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	} );
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert( function( el ) {
	return el.getAttribute( "disabled" ) == null;
} ) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
				( val = elem.getAttributeNode( name ) ) && val.specified ?
					val.value :
					null;
		}
	} );
}

return Sizzle;

} )( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

};
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, _i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, _i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, _i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		if ( elem.contentDocument != null &&

			// Support: IE 11+
			// <object> elements with no `data` attribute has an object
			// `contentDocument` with a `null` prototype.
			getProto( elem.contentDocument ) ) {

			return elem.contentDocument;
		}

		// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
		// Treat the template element as a regular one in browsers that
		// don't support it.
		if ( nodeName( elem, "template" ) ) {
			elem = elem.content || elem;
		}

		return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( _i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, _key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( _all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var documentElement = document.documentElement;



	var isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem );
		},
		composed = { composed: true };

	// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
	// Check attachment across shadow DOM boundaries when possible (gh-3504)
	// Support: iOS 10.0-10.2 only
	// Early iOS 10 versions support `attachShadow` but not `getRootNode`,
	// leading to errors. We need to check for `getRootNode`.
	if ( documentElement.getRootNode ) {
		isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem ) ||
				elem.getRootNode( composed ) === elem.ownerDocument;
		};
	}
var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			isAttached( elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};



function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = elem.nodeType &&
			( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// Support: IE <=9 only
	// IE <=9 replaces <option> tags with their contents when inserted outside of
	// the select element.
	div.innerHTML = "<option></option>";
	support.option = !!div.lastChild;
} )();


// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: IE <=9 only
if ( !support.option ) {
	wrapMap.optgroup = wrapMap.option = [ 1, "<select multiple='multiple'>", "</select>" ];
}


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, attached, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		attached = isAttached( elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( attached ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 - 11+
// focus() and blur() are asynchronous, except when they are no-op.
// So expect focus to be synchronous when the element is already active,
// and blur to be synchronous when the element is not already active.
// (focus and blur are always synchronous in other supported browsers,
// this just defines when we can count on it).
function expectSync( elem, type ) {
	return ( elem === safeActiveElement() ) === ( type === "focus" );
}

// Support: IE <=9 only
// Accessing document.activeElement can throw unexpectedly
// https://bugs.jquery.com/ticket/13393
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Only attach events to objects that accept data
		if ( !acceptData( elem ) ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = Object.create( null );
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( nativeEvent ),

			handlers = (
					dataPriv.get( this, "events" ) || Object.create( null )
				)[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// If the event is namespaced, then each handler is only invoked if it is
				// specially universal or its namespaces are a superset of the event's.
				if ( !event.rnamespace || handleObj.namespace === false ||
					event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {

			// Utilize native event to ensure correct state for checkable inputs
			setup: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Claim the first handler
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					// dataPriv.set( el, "click", ... )
					leverageNative( el, "click", returnTrue );
				}

				// Return false to allow normal processing in the caller
				return false;
			},
			trigger: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Force setup before triggering a click
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					leverageNative( el, "click" );
				}

				// Return non-false to allow normal event-path propagation
				return true;
			},

			// For cross-browser consistency, suppress native .click() on links
			// Also prevent it if we're currently inside a leveraged native-event stack
			_default: function( event ) {
				var target = event.target;
				return rcheckableType.test( target.type ) &&
					target.click && nodeName( target, "input" ) &&
					dataPriv.get( target, "click" ) ||
					nodeName( target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

// Ensure the presence of an event listener that handles manually-triggered
// synthetic events by interrupting progress until reinvoked in response to
// *native* events that it fires directly, ensuring that state changes have
// already occurred before other listeners are invoked.
function leverageNative( el, type, expectSync ) {

	// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
	if ( !expectSync ) {
		if ( dataPriv.get( el, type ) === undefined ) {
			jQuery.event.add( el, type, returnTrue );
		}
		return;
	}

	// Register the controller as a special universal handler for all event namespaces
	dataPriv.set( el, type, false );
	jQuery.event.add( el, type, {
		namespace: false,
		handler: function( event ) {
			var notAsync, result,
				saved = dataPriv.get( this, type );

			if ( ( event.isTrigger & 1 ) && this[ type ] ) {

				// Interrupt processing of the outer synthetic .trigger()ed event
				// Saved data should be false in such cases, but might be a leftover capture object
				// from an async native handler (gh-4350)
				if ( !saved.length ) {

					// Store arguments for use when handling the inner native event
					// There will always be at least one argument (an event object), so this array
					// will not be confused with a leftover capture object.
					saved = slice.call( arguments );
					dataPriv.set( this, type, saved );

					// Trigger the native event and capture its result
					// Support: IE <=9 - 11+
					// focus() and blur() are asynchronous
					notAsync = expectSync( this, type );
					this[ type ]();
					result = dataPriv.get( this, type );
					if ( saved !== result || notAsync ) {
						dataPriv.set( this, type, false );
					} else {
						result = {};
					}
					if ( saved !== result ) {

						// Cancel the outer synthetic event
						event.stopImmediatePropagation();
						event.preventDefault();
						return result.value;
					}

				// If this is an inner synthetic event for an event with a bubbling surrogate
				// (focus or blur), assume that the surrogate already propagated from triggering the
				// native event and prevent that from happening again here.
				// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
				// bubbling surrogate propagates *after* the non-bubbling base), but that seems
				// less bad than duplication.
				} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
					event.stopPropagation();
				}

			// If this is a native event triggered above, everything is now in order
			// Fire an inner synthetic event with the original arguments
			} else if ( saved.length ) {

				// ...and capture the result
				dataPriv.set( this, type, {
					value: jQuery.event.trigger(

						// Support: IE <=9 - 11+
						// Extend with the prototype to reset the above stopImmediatePropagation()
						jQuery.extend( saved[ 0 ], jQuery.Event.prototype ),
						saved.slice( 1 ),
						this
					)
				} );

				// Abort handling of the native event
				event.stopImmediatePropagation();
			}
		}
	} );
}

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	code: true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {
	jQuery.event.special[ type ] = {

		// Utilize native event if possible so blur/focus sequence is correct
		setup: function() {

			// Claim the first handler
			// dataPriv.set( this, "focus", ... )
			// dataPriv.set( this, "blur", ... )
			leverageNative( this, type, expectSync );

			// Return false to allow normal processing in the caller
			return false;
		},
		trigger: function() {

			// Force setup before trigger
			leverageNative( this, type );

			// Return non-false to allow normal event-path propagation
			return true;
		},

		delegateType: delegateType
	};
} );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.get( src );
		events = pdataOld.events;

		if ( events ) {
			dataPriv.remove( dest, "handle events" );

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = flat( args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl && !node.noModule ) {
								jQuery._evalUrl( node.src, {
									nonce: node.nonce || node.getAttribute( "nonce" )
								}, doc );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && isAttached( node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html;
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = isAttached( elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var swap = function( elem, options, callback ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.call( elem );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		// Support: Chrome <=64
		// Don't get tricked when zoom affects offsetWidth (gh-4029)
		div.style.position = "absolute";
		scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableTrDimensionsVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		},

		// Support: IE 9 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Behavior in IE 9 is more subtle than in newer versions & it passes
		// some versions of this test; make sure not to make it pass there!
		reliableTrDimensions: function() {
			var table, tr, trChild, trStyle;
			if ( reliableTrDimensionsVal == null ) {
				table = document.createElement( "table" );
				tr = document.createElement( "tr" );
				trChild = document.createElement( "div" );

				table.style.cssText = "position:absolute;left:-11111px";
				tr.style.height = "1px";
				trChild.style.height = "9px";

				documentElement
					.appendChild( table )
					.appendChild( tr )
					.appendChild( trChild );

				trStyle = window.getComputedStyle( tr );
				reliableTrDimensionsVal = parseInt( trStyle.height ) > 3;

				documentElement.removeChild( table );
			}
			return reliableTrDimensionsVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !isAttached( elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style,
	vendorProps = {};

// Return a vendor-prefixed property or undefined
function vendorPropName( name ) {

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
function finalPropName( name ) {
	var final = jQuery.cssProps[ name ] || vendorProps[ name ];

	if ( final ) {
		return final;
	}
	if ( name in emptyStyle ) {
		return name;
	}
	return vendorProps[ name ] = vendorPropName( name ) || name;
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	};

function setPositiveNumber( _elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5

		// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
		// Use an explicit zero to avoid NaN (gh-3964)
		) ) || 0;
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),

		// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
		// Fake content-box until we know it's needed to know the true value.
		boxSizingNeeded = !support.boxSizingReliable() || extra,
		isBorderBox = boxSizingNeeded &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox,

		val = curCSS( elem, dimension, styles ),
		offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}


	// Support: IE 9 - 11 only
	// Use offsetWidth/offsetHeight for when box sizing is unreliable.
	// In those cases, the computed value can be trusted to be border-box.
	if ( ( !support.boxSizingReliable() && isBorderBox ||

		// Support: IE 10 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Interestingly, in some cases IE 9 doesn't suffer from this issue.
		!support.reliableTrDimensions() && nodeName( elem, "tr" ) ||

		// Fall back to offsetWidth/offsetHeight when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		val === "auto" ||

		// Support: Android <=4.1 - 4.3 only
		// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&

		// Make sure the element is visible & connected
		elem.getClientRects().length ) {

		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Where available, offsetWidth/offsetHeight approximate border box dimensions.
		// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
		// retrieved value as a content box dimension.
		valueIsBorderBox = offsetProp in elem;
		if ( valueIsBorderBox ) {
			val = elem[ offsetProp ];
		}
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"gridArea": true,
		"gridColumn": true,
		"gridColumnEnd": true,
		"gridColumnStart": true,
		"gridRow": true,
		"gridRowEnd": true,
		"gridRowStart": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
			// "px" to a few hardcoded values.
			if ( type === "number" && !isCustomProp ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( _i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, dimension, extra );
						} ) :
						getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),

				// Only read styles.position if the test has a chance to fail
				// to avoid forcing a reflow.
				scrollboxSizeBuggy = !support.scrollboxSize() &&
					styles.position === "absolute",

				// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
				boxSizingNeeded = scrollboxSizeBuggy || extra,
				isBorderBox = boxSizingNeeded &&
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra ?
					boxModelAdjustment(
						elem,
						dimension,
						extra,
						isBorderBox,
						styles
					) :
					0;

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && scrollboxSizeBuggy ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 && (
					jQuery.cssHooks[ tween.prop ] ||
					tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( _i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( _i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = (
					dataPriv.get( cur, "events" ) || Object.create( null )
				)[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {

				// Handle: regular nodes (via `this.ownerDocument`), window
				// (via `this.document`) & document (via `this`).
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = { guid: Date.now() };

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	if ( a == null ) {
		return "";
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( _i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
									( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
										.concat( match[ 2 ] );
							}
						}
						match = responseHeaders[ key.toLowerCase() + " " ];
					}
					return match == null ? null : match.join( ", " );
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce.guid++ ) +
					uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Use a noop converter for missing script
			if ( !isSuccess && jQuery.inArray( "script", s.dataTypes ) > -1 ) {
				s.converters[ "text script" ] = function() {};
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( _i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );

jQuery.ajaxPrefilter( function( s ) {
	var i;
	for ( i in s.headers ) {
		if ( i.toLowerCase() === "content-type" ) {
			s.contentType = s.headers[ i ] || "";
		}
	}
} );


jQuery._evalUrl = function( url, options, doc ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,

		// Only evaluate the response if it is successful (gh-4126)
		// dataFilter is not invoked for failure responses, so using it instead
		// of the default converter is kludgy but it works.
		converters: {
			"text script": function() {}
		},
		dataFilter: function( response ) {
			jQuery.globalEval( response, options, doc );
		}
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain or forced-by-attrs requests
	if ( s.crossDomain || s.scriptAttrs ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" )
					.attr( s.scriptAttrs || {} )
					.prop( { charset: s.scriptCharset, src: s.url } )
					.on( "load error", callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					} );

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce.guid++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			if ( typeof props.top === "number" ) {
				props.top += "px";
			}
			if ( typeof props.left === "number" ) {
				props.left += "px";
			}
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( _i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( _i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	},

	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );

jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( _i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );




// Support: Android <=4.0 only
// Make sure we trim BOM and NBSP
var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};

jQuery.trim = function( text ) {
	return text == null ?
		"" :
		( text + "" ).replace( rtrim, "" );
};



// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
		return jQuery;
	}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === "undefined" ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );


/***/ }),

/***/ "../node_modules/mocha-loader/dist/start.js":
/*!**************************************************!*\
  !*** ../node_modules/mocha-loader/dist/start.js ***!
  \**************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: __webpack_require__ */
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/* eslint-disable no-var */
var mochaModule = __webpack_require__(/*! mocha/mocha.js */ "../node_modules/mocha/mocha.js");

var mochaInstance = window.mocha || mochaModule;
/* global window document */

window.addEventListener('DOMContentLoaded', function runMocha() {
  if (!document.getElementById('mocha')) {
    // eslint-disable-next-line
    var mochaContainer = document.createElement('div');
    mochaContainer.id = 'mocha';
    document.body.appendChild(mochaContainer);
  }

  mochaInstance.run();
});

/***/ }),

/***/ "../node_modules/mocha/mocha.js":
/*!**************************************!*\
  !*** ../node_modules/mocha/mocha.js ***!
  \**************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, top-level-this-exports, __webpack_require__.g, __webpack_require__.* */
/*! CommonJS bailout: this is used directly at 5:2-6 */
/*! CommonJS bailout: module.exports is used directly at 2:64-78 */
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

(function (global, factory) {
	 true ? module.exports = factory() :
		0;
}(this, (function () {
	'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof __webpack_require__.g !== 'undefined' ? __webpack_require__.g : typeof self !== 'undefined' ? self : {};

	function createCommonjsModule(fn, basedir, module) {
		return module = {
			path: basedir,
			exports: {},
			require: function (path, base) {
				return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
			}
		}, fn(module, module.exports), module.exports;
	}

	function getCjsExportFromNamespace(n) {
		return n && n['default'] || n;
	}

	function commonjsRequire() {
		throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
	}

	var check = function (it) {
		return it && it.Math == Math && it;
	};

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global_1 =
		// eslint-disable-next-line no-undef
		check(typeof globalThis == 'object' && globalThis) ||
		check(typeof window == 'object' && window) ||
		check(typeof self == 'object' && self) ||
		check(typeof commonjsGlobal == 'object' && commonjsGlobal) ||
		// eslint-disable-next-line no-new-func
		Function('return this')();

	var fails = function (exec) {
		try {
			return !!exec();
		} catch (error) {
			return true;
		}
	};

	// Thank's IE8 for his funny defineProperty
	var descriptors = !fails(function () {
		return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
	});

	var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
	var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

	// Nashorn ~ JDK8 bug
	var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);

	// `Object.prototype.propertyIsEnumerable` method implementation
	// https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable
	var f = NASHORN_BUG ? function propertyIsEnumerable(V) {
		var descriptor = getOwnPropertyDescriptor(this, V);
		return !!descriptor && descriptor.enumerable;
	} : nativePropertyIsEnumerable;

	var objectPropertyIsEnumerable = {
		f: f
	};

	var createPropertyDescriptor = function (bitmap, value) {
		return {
			enumerable: !(bitmap & 1),
			configurable: !(bitmap & 2),
			writable: !(bitmap & 4),
			value: value
		};
	};

	var toString = {}.toString;

	var classofRaw = function (it) {
		return toString.call(it).slice(8, -1);
	};

	var split = ''.split;

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var indexedObject = fails(function () {
		// throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
		// eslint-disable-next-line no-prototype-builtins
		return !Object('z').propertyIsEnumerable(0);
	}) ? function (it) {
		return classofRaw(it) == 'String' ? split.call(it, '') : Object(it);
	} : Object;

	// `RequireObjectCoercible` abstract operation
	// https://tc39.github.io/ecma262/#sec-requireobjectcoercible
	var requireObjectCoercible = function (it) {
		if (it == undefined) throw TypeError("Can't call method on " + it);
		return it;
	};

	// toObject with fallback for non-array-like ES3 strings



	var toIndexedObject = function (it) {
		return indexedObject(requireObjectCoercible(it));
	};

	var isObject = function (it) {
		return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

	// `ToPrimitive` abstract operation
	// https://tc39.github.io/ecma262/#sec-toprimitive
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	var toPrimitive = function (input, PREFERRED_STRING) {
		if (!isObject(input)) return input;
		var fn, val;
		if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
		if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
		if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
		throw TypeError("Can't convert object to primitive value");
	};

	var hasOwnProperty = {}.hasOwnProperty;

	var has = function (it, key) {
		return hasOwnProperty.call(it, key);
	};

	var document$1 = global_1.document;
	// typeof document.createElement is 'object' in old IE
	var EXISTS = isObject(document$1) && isObject(document$1.createElement);

	var documentCreateElement = function (it) {
		return EXISTS ? document$1.createElement(it) : {};
	};

	// Thank's IE8 for his funny defineProperty
	var ie8DomDefine = !descriptors && !fails(function () {
		return Object.defineProperty(documentCreateElement('div'), 'a', {
			get: function () { return 7; }
		}).a != 7;
	});

	var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

	// `Object.getOwnPropertyDescriptor` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
	var f$1 = descriptors ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
		O = toIndexedObject(O);
		P = toPrimitive(P, true);
		if (ie8DomDefine) try {
			return nativeGetOwnPropertyDescriptor(O, P);
		} catch (error) { /* empty */ }
		if (has(O, P)) return createPropertyDescriptor(!objectPropertyIsEnumerable.f.call(O, P), O[P]);
	};

	var objectGetOwnPropertyDescriptor = {
		f: f$1
	};

	var anObject = function (it) {
		if (!isObject(it)) {
			throw TypeError(String(it) + ' is not an object');
		} return it;
	};

	var nativeDefineProperty = Object.defineProperty;

	// `Object.defineProperty` method
	// https://tc39.github.io/ecma262/#sec-object.defineproperty
	var f$2 = descriptors ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
		anObject(O);
		P = toPrimitive(P, true);
		anObject(Attributes);
		if (ie8DomDefine) try {
			return nativeDefineProperty(O, P, Attributes);
		} catch (error) { /* empty */ }
		if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
		if ('value' in Attributes) O[P] = Attributes.value;
		return O;
	};

	var objectDefineProperty = {
		f: f$2
	};

	var createNonEnumerableProperty = descriptors ? function (object, key, value) {
		return objectDefineProperty.f(object, key, createPropertyDescriptor(1, value));
	} : function (object, key, value) {
		object[key] = value;
		return object;
	};

	var setGlobal = function (key, value) {
		try {
			createNonEnumerableProperty(global_1, key, value);
		} catch (error) {
			global_1[key] = value;
		} return value;
	};

	var SHARED = '__core-js_shared__';
	var store = global_1[SHARED] || setGlobal(SHARED, {});

	var sharedStore = store;

	var functionToString = Function.toString;

	// this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper
	if (typeof sharedStore.inspectSource != 'function') {
		sharedStore.inspectSource = function (it) {
			return functionToString.call(it);
		};
	}

	var inspectSource = sharedStore.inspectSource;

	var WeakMap = global_1.WeakMap;

	var nativeWeakMap = typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));

	var shared = createCommonjsModule(function (module) {
		(module.exports = function (key, value) {
			return sharedStore[key] || (sharedStore[key] = value !== undefined ? value : {});
		})('versions', []).push({
			version: '3.6.5',
			mode: 'global',
			copyright: '© 2020 Denis Pushkarev (zloirock.ru)'
		});
	});

	var id = 0;
	var postfix = Math.random();

	var uid = function (key) {
		return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);
	};

	var keys = shared('keys');

	var sharedKey = function (key) {
		return keys[key] || (keys[key] = uid(key));
	};

	var hiddenKeys = {};

	var WeakMap$1 = global_1.WeakMap;
	var set, get, has$1;

	var enforce = function (it) {
		return has$1(it) ? get(it) : set(it, {});
	};

	var getterFor = function (TYPE) {
		return function (it) {
			var state;
			if (!isObject(it) || (state = get(it)).type !== TYPE) {
				throw TypeError('Incompatible receiver, ' + TYPE + ' required');
			} return state;
		};
	};

	if (nativeWeakMap) {
		var store$1 = new WeakMap$1();
		var wmget = store$1.get;
		var wmhas = store$1.has;
		var wmset = store$1.set;
		set = function (it, metadata) {
			wmset.call(store$1, it, metadata);
			return metadata;
		};
		get = function (it) {
			return wmget.call(store$1, it) || {};
		};
		has$1 = function (it) {
			return wmhas.call(store$1, it);
		};
	} else {
		var STATE = sharedKey('state');
		hiddenKeys[STATE] = true;
		set = function (it, metadata) {
			createNonEnumerableProperty(it, STATE, metadata);
			return metadata;
		};
		get = function (it) {
			return has(it, STATE) ? it[STATE] : {};
		};
		has$1 = function (it) {
			return has(it, STATE);
		};
	}

	var internalState = {
		set: set,
		get: get,
		has: has$1,
		enforce: enforce,
		getterFor: getterFor
	};

	var redefine = createCommonjsModule(function (module) {
		var getInternalState = internalState.get;
		var enforceInternalState = internalState.enforce;
		var TEMPLATE = String(String).split('String');

		(module.exports = function (O, key, value, options) {
			var unsafe = options ? !!options.unsafe : false;
			var simple = options ? !!options.enumerable : false;
			var noTargetGet = options ? !!options.noTargetGet : false;
			if (typeof value == 'function') {
				if (typeof key == 'string' && !has(value, 'name')) createNonEnumerableProperty(value, 'name', key);
				enforceInternalState(value).source = TEMPLATE.join(typeof key == 'string' ? key : '');
			}
			if (O === global_1) {
				if (simple) O[key] = value;
				else setGlobal(key, value);
				return;
			} else if (!unsafe) {
				delete O[key];
			} else if (!noTargetGet && O[key]) {
				simple = true;
			}
			if (simple) O[key] = value;
			else createNonEnumerableProperty(O, key, value);
			// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
		})(Function.prototype, 'toString', function toString() {
			return typeof this == 'function' && getInternalState(this).source || inspectSource(this);
		});
	});

	var path = global_1;

	var aFunction = function (variable) {
		return typeof variable == 'function' ? variable : undefined;
	};

	var getBuiltIn = function (namespace, method) {
		return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global_1[namespace])
			: path[namespace] && path[namespace][method] || global_1[namespace] && global_1[namespace][method];
	};

	var ceil = Math.ceil;
	var floor = Math.floor;

	// `ToInteger` abstract operation
	// https://tc39.github.io/ecma262/#sec-tointeger
	var toInteger = function (argument) {
		return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
	};

	var min = Math.min;

	// `ToLength` abstract operation
	// https://tc39.github.io/ecma262/#sec-tolength
	var toLength = function (argument) {
		return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
	};

	var max = Math.max;
	var min$1 = Math.min;

	// Helper for a popular repeating case of the spec:
	// Let integer be ? ToInteger(index).
	// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
	var toAbsoluteIndex = function (index, length) {
		var integer = toInteger(index);
		return integer < 0 ? max(integer + length, 0) : min$1(integer, length);
	};

	// `Array.prototype.{ indexOf, includes }` methods implementation
	var createMethod = function (IS_INCLUDES) {
		return function ($this, el, fromIndex) {
			var O = toIndexedObject($this);
			var length = toLength(O.length);
			var index = toAbsoluteIndex(fromIndex, length);
			var value;
			// Array#includes uses SameValueZero equality algorithm
			// eslint-disable-next-line no-self-compare
			if (IS_INCLUDES && el != el) while (length > index) {
				value = O[index++];
				// eslint-disable-next-line no-self-compare
				if (value != value) return true;
				// Array#indexOf ignores holes, Array#includes - not
			} else for (; length > index; index++) {
				if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
			} return !IS_INCLUDES && -1;
		};
	};

	var arrayIncludes = {
		// `Array.prototype.includes` method
		// https://tc39.github.io/ecma262/#sec-array.prototype.includes
		includes: createMethod(true),
		// `Array.prototype.indexOf` method
		// https://tc39.github.io/ecma262/#sec-array.prototype.indexof
		indexOf: createMethod(false)
	};

	var indexOf = arrayIncludes.indexOf;


	var objectKeysInternal = function (object, names) {
		var O = toIndexedObject(object);
		var i = 0;
		var result = [];
		var key;
		for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);
		// Don't enum bug & hidden keys
		while (names.length > i) if (has(O, key = names[i++])) {
			~indexOf(result, key) || result.push(key);
		}
		return result;
	};

	// IE8- don't enum bug keys
	var enumBugKeys = [
		'constructor',
		'hasOwnProperty',
		'isPrototypeOf',
		'propertyIsEnumerable',
		'toLocaleString',
		'toString',
		'valueOf'
	];

	var hiddenKeys$1 = enumBugKeys.concat('length', 'prototype');

	// `Object.getOwnPropertyNames` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertynames
	var f$3 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
		return objectKeysInternal(O, hiddenKeys$1);
	};

	var objectGetOwnPropertyNames = {
		f: f$3
	};

	var f$4 = Object.getOwnPropertySymbols;

	var objectGetOwnPropertySymbols = {
		f: f$4
	};

	// all object keys, includes non-enumerable and symbols
	var ownKeys = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
		var keys = objectGetOwnPropertyNames.f(anObject(it));
		var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
		return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
	};

	var copyConstructorProperties = function (target, source) {
		var keys = ownKeys(source);
		var defineProperty = objectDefineProperty.f;
		var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
		for (var i = 0; i < keys.length; i++) {
			var key = keys[i];
			if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
		}
	};

	var replacement = /#|\.prototype\./;

	var isForced = function (feature, detection) {
		var value = data[normalize(feature)];
		return value == POLYFILL ? true
			: value == NATIVE ? false
				: typeof detection == 'function' ? fails(detection)
					: !!detection;
	};

	var normalize = isForced.normalize = function (string) {
		return String(string).replace(replacement, '.').toLowerCase();
	};

	var data = isForced.data = {};
	var NATIVE = isForced.NATIVE = 'N';
	var POLYFILL = isForced.POLYFILL = 'P';

	var isForced_1 = isForced;

	var getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;






	/*
			options.target      - name of the target object
			options.global      - target is the global object
			options.stat        - export as static methods of target
			options.proto       - export as prototype methods of target
			options.real        - real prototype method for the `pure` version
			options.forced      - export even if the native feature is available
			options.bind        - bind methods to the target, required for the `pure` version
			options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
			options.unsafe      - use the simple assignment of property instead of delete + defineProperty
			options.sham        - add a flag to not completely full polyfills
			options.enumerable  - export as enumerable property
			options.noTargetGet - prevent calling a getter on target
	*/
	var _export = function (options, source) {
		var TARGET = options.target;
		var GLOBAL = options.global;
		var STATIC = options.stat;
		var FORCED, target, key, targetProperty, sourceProperty, descriptor;
		if (GLOBAL) {
			target = global_1;
		} else if (STATIC) {
			target = global_1[TARGET] || setGlobal(TARGET, {});
		} else {
			target = (global_1[TARGET] || {}).prototype;
		}
		if (target) for (key in source) {
			sourceProperty = source[key];
			if (options.noTargetGet) {
				descriptor = getOwnPropertyDescriptor$1(target, key);
				targetProperty = descriptor && descriptor.value;
			} else targetProperty = target[key];
			FORCED = isForced_1(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
			// contained in target
			if (!FORCED && targetProperty !== undefined) {
				if (typeof sourceProperty === typeof targetProperty) continue;
				copyConstructorProperties(sourceProperty, targetProperty);
			}
			// add a flag to not completely full polyfills
			if (options.sham || (targetProperty && targetProperty.sham)) {
				createNonEnumerableProperty(sourceProperty, 'sham', true);
			}
			// extend global
			redefine(target, key, sourceProperty, options);
		}
	};

	var aFunction$1 = function (it) {
		if (typeof it != 'function') {
			throw TypeError(String(it) + ' is not a function');
		} return it;
	};

	// optional / simple context binding
	var functionBindContext = function (fn, that, length) {
		aFunction$1(fn);
		if (that === undefined) return fn;
		switch (length) {
			case 0: return function () {
				return fn.call(that);
			};
			case 1: return function (a) {
				return fn.call(that, a);
			};
			case 2: return function (a, b) {
				return fn.call(that, a, b);
			};
			case 3: return function (a, b, c) {
				return fn.call(that, a, b, c);
			};
		}
		return function (/* ...args */) {
			return fn.apply(that, arguments);
		};
	};

	// `ToObject` abstract operation
	// https://tc39.github.io/ecma262/#sec-toobject
	var toObject = function (argument) {
		return Object(requireObjectCoercible(argument));
	};

	// `IsArray` abstract operation
	// https://tc39.github.io/ecma262/#sec-isarray
	var isArray = Array.isArray || function isArray(arg) {
		return classofRaw(arg) == 'Array';
	};

	var nativeSymbol = !!Object.getOwnPropertySymbols && !fails(function () {
		// Chrome 38 Symbol has incorrect toString conversion
		// eslint-disable-next-line no-undef
		return !String(Symbol());
	});

	var useSymbolAsUid = nativeSymbol
		// eslint-disable-next-line no-undef
		&& !Symbol.sham
		// eslint-disable-next-line no-undef
		&& typeof Symbol.iterator == 'symbol';

	var WellKnownSymbolsStore = shared('wks');
	var Symbol$1 = global_1.Symbol;
	var createWellKnownSymbol = useSymbolAsUid ? Symbol$1 : Symbol$1 && Symbol$1.withoutSetter || uid;

	var wellKnownSymbol = function (name) {
		if (!has(WellKnownSymbolsStore, name)) {
			if (nativeSymbol && has(Symbol$1, name)) WellKnownSymbolsStore[name] = Symbol$1[name];
			else WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);
		} return WellKnownSymbolsStore[name];
	};

	var SPECIES = wellKnownSymbol('species');

	// `ArraySpeciesCreate` abstract operation
	// https://tc39.github.io/ecma262/#sec-arrayspeciescreate
	var arraySpeciesCreate = function (originalArray, length) {
		var C;
		if (isArray(originalArray)) {
			C = originalArray.constructor;
			// cross-realm fallback
			if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
			else if (isObject(C)) {
				C = C[SPECIES];
				if (C === null) C = undefined;
			}
		} return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
	};

	var push = [].push;

	// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation
	var createMethod$1 = function (TYPE) {
		var IS_MAP = TYPE == 1;
		var IS_FILTER = TYPE == 2;
		var IS_SOME = TYPE == 3;
		var IS_EVERY = TYPE == 4;
		var IS_FIND_INDEX = TYPE == 6;
		var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
		return function ($this, callbackfn, that, specificCreate) {
			var O = toObject($this);
			var self = indexedObject(O);
			var boundFunction = functionBindContext(callbackfn, that, 3);
			var length = toLength(self.length);
			var index = 0;
			var create = specificCreate || arraySpeciesCreate;
			var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
			var value, result;
			for (; length > index; index++) if (NO_HOLES || index in self) {
				value = self[index];
				result = boundFunction(value, index, O);
				if (TYPE) {
					if (IS_MAP) target[index] = result; // map
					else if (result) switch (TYPE) {
						case 3: return true;              // some
						case 5: return value;             // find
						case 6: return index;             // findIndex
						case 2: push.call(target, value); // filter
					} else if (IS_EVERY) return false;  // every
				}
			}
			return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
		};
	};

	var arrayIteration = {
		// `Array.prototype.forEach` method
		// https://tc39.github.io/ecma262/#sec-array.prototype.foreach
		forEach: createMethod$1(0),
		// `Array.prototype.map` method
		// https://tc39.github.io/ecma262/#sec-array.prototype.map
		map: createMethod$1(1),
		// `Array.prototype.filter` method
		// https://tc39.github.io/ecma262/#sec-array.prototype.filter
		filter: createMethod$1(2),
		// `Array.prototype.some` method
		// https://tc39.github.io/ecma262/#sec-array.prototype.some
		some: createMethod$1(3),
		// `Array.prototype.every` method
		// https://tc39.github.io/ecma262/#sec-array.prototype.every
		every: createMethod$1(4),
		// `Array.prototype.find` method
		// https://tc39.github.io/ecma262/#sec-array.prototype.find
		find: createMethod$1(5),
		// `Array.prototype.findIndex` method
		// https://tc39.github.io/ecma262/#sec-array.prototype.findIndex
		findIndex: createMethod$1(6)
	};

	var engineUserAgent = getBuiltIn('navigator', 'userAgent') || '';

	var process = global_1.process;
	var versions = process && process.versions;
	var v8 = versions && versions.v8;
	var match, version;

	if (v8) {
		match = v8.split('.');
		version = match[0] + match[1];
	} else if (engineUserAgent) {
		match = engineUserAgent.match(/Edge\/(\d+)/);
		if (!match || match[1] >= 74) {
			match = engineUserAgent.match(/Chrome\/(\d+)/);
			if (match) version = match[1];
		}
	}

	var engineV8Version = version && +version;

	var SPECIES$1 = wellKnownSymbol('species');

	var arrayMethodHasSpeciesSupport = function (METHOD_NAME) {
		// We can't use this feature detection in V8 since it causes
		// deoptimization and serious performance degradation
		// https://github.com/zloirock/core-js/issues/677
		return engineV8Version >= 51 || !fails(function () {
			var array = [];
			var constructor = array.constructor = {};
			constructor[SPECIES$1] = function () {
				return { foo: 1 };
			};
			return array[METHOD_NAME](Boolean).foo !== 1;
		});
	};

	var defineProperty = Object.defineProperty;
	var cache = {};

	var thrower = function (it) { throw it; };

	var arrayMethodUsesToLength = function (METHOD_NAME, options) {
		if (has(cache, METHOD_NAME)) return cache[METHOD_NAME];
		if (!options) options = {};
		var method = [][METHOD_NAME];
		var ACCESSORS = has(options, 'ACCESSORS') ? options.ACCESSORS : false;
		var argument0 = has(options, 0) ? options[0] : thrower;
		var argument1 = has(options, 1) ? options[1] : undefined;

		return cache[METHOD_NAME] = !!method && !fails(function () {
			if (ACCESSORS && !descriptors) return true;
			var O = { length: -1 };

			if (ACCESSORS) defineProperty(O, 1, { enumerable: true, get: thrower });
			else O[1] = 1;

			method.call(O, argument0, argument1);
		});
	};

	var $filter = arrayIteration.filter;



	var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('filter');
	// Edge 14- issue
	var USES_TO_LENGTH = arrayMethodUsesToLength('filter');

	// `Array.prototype.filter` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.filter
	// with adding support of @@species
	_export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {
		filter: function filter(callbackfn /* , thisArg */) {
			return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
		}
	});

	var arrayMethodIsStrict = function (METHOD_NAME, argument) {
		var method = [][METHOD_NAME];
		return !!method && fails(function () {
			// eslint-disable-next-line no-useless-call,no-throw-literal
			method.call(null, argument || function () { throw 1; }, 1);
		});
	};

	var $forEach = arrayIteration.forEach;



	var STRICT_METHOD = arrayMethodIsStrict('forEach');
	var USES_TO_LENGTH$1 = arrayMethodUsesToLength('forEach');

	// `Array.prototype.forEach` method implementation
	// https://tc39.github.io/ecma262/#sec-array.prototype.foreach
	var arrayForEach = (!STRICT_METHOD || !USES_TO_LENGTH$1) ? function forEach(callbackfn /* , thisArg */) {
		return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	} : [].forEach;

	// `Array.prototype.forEach` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.foreach
	_export({ target: 'Array', proto: true, forced: [].forEach != arrayForEach }, {
		forEach: arrayForEach
	});

	var $indexOf = arrayIncludes.indexOf;



	var nativeIndexOf = [].indexOf;

	var NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;
	var STRICT_METHOD$1 = arrayMethodIsStrict('indexOf');
	var USES_TO_LENGTH$2 = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });

	// `Array.prototype.indexOf` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.indexof
	_export({ target: 'Array', proto: true, forced: NEGATIVE_ZERO || !STRICT_METHOD$1 || !USES_TO_LENGTH$2 }, {
		indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
			return NEGATIVE_ZERO
				// convert -0 to +0
				? nativeIndexOf.apply(this, arguments) || 0
				: $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);
		}
	});

	var createProperty = function (object, key, value) {
		var propertyKey = toPrimitive(key);
		if (propertyKey in object) objectDefineProperty.f(object, propertyKey, createPropertyDescriptor(0, value));
		else object[propertyKey] = value;
	};

	var HAS_SPECIES_SUPPORT$1 = arrayMethodHasSpeciesSupport('splice');
	var USES_TO_LENGTH$3 = arrayMethodUsesToLength('splice', { ACCESSORS: true, 0: 0, 1: 2 });

	var max$1 = Math.max;
	var min$2 = Math.min;
	var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
	var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';

	// `Array.prototype.splice` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.splice
	// with adding support of @@species
	_export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$1 || !USES_TO_LENGTH$3 }, {
		splice: function splice(start, deleteCount /* , ...items */) {
			var O = toObject(this);
			var len = toLength(O.length);
			var actualStart = toAbsoluteIndex(start, len);
			var argumentsLength = arguments.length;
			var insertCount, actualDeleteCount, A, k, from, to;
			if (argumentsLength === 0) {
				insertCount = actualDeleteCount = 0;
			} else if (argumentsLength === 1) {
				insertCount = 0;
				actualDeleteCount = len - actualStart;
			} else {
				insertCount = argumentsLength - 2;
				actualDeleteCount = min$2(max$1(toInteger(deleteCount), 0), len - actualStart);
			}
			if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {
				throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
			}
			A = arraySpeciesCreate(O, actualDeleteCount);
			for (k = 0; k < actualDeleteCount; k++) {
				from = actualStart + k;
				if (from in O) createProperty(A, k, O[from]);
			}
			A.length = actualDeleteCount;
			if (insertCount < actualDeleteCount) {
				for (k = actualStart; k < len - actualDeleteCount; k++) {
					from = k + actualDeleteCount;
					to = k + insertCount;
					if (from in O) O[to] = O[from];
					else delete O[to];
				}
				for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];
			} else if (insertCount > actualDeleteCount) {
				for (k = len - actualDeleteCount; k > actualStart; k--) {
					from = k + actualDeleteCount - 1;
					to = k + insertCount - 1;
					if (from in O) O[to] = O[from];
					else delete O[to];
				}
			}
			for (k = 0; k < insertCount; k++) {
				O[k + actualStart] = arguments[k + 2];
			}
			O.length = len - actualDeleteCount + insertCount;
			return A;
		}
	});

	// `Object.keys` method
	// https://tc39.github.io/ecma262/#sec-object.keys
	var objectKeys = Object.keys || function keys(O) {
		return objectKeysInternal(O, enumBugKeys);
	};

	var nativeAssign = Object.assign;
	var defineProperty$1 = Object.defineProperty;

	// `Object.assign` method
	// https://tc39.github.io/ecma262/#sec-object.assign
	var objectAssign = !nativeAssign || fails(function () {
		// should have correct order of operations (Edge bug)
		if (descriptors && nativeAssign({ b: 1 }, nativeAssign(defineProperty$1({}, 'a', {
			enumerable: true,
			get: function () {
				defineProperty$1(this, 'b', {
					value: 3,
					enumerable: false
				});
			}
		}), { b: 2 })).b !== 1) return true;
		// should work with symbols and should have deterministic property order (V8 bug)
		var A = {};
		var B = {};
		// eslint-disable-next-line no-undef
		var symbol = Symbol();
		var alphabet = 'abcdefghijklmnopqrst';
		A[symbol] = 7;
		alphabet.split('').forEach(function (chr) { B[chr] = chr; });
		return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;
	}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
		var T = toObject(target);
		var argumentsLength = arguments.length;
		var index = 1;
		var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
		var propertyIsEnumerable = objectPropertyIsEnumerable.f;
		while (argumentsLength > index) {
			var S = indexedObject(arguments[index++]);
			var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);
			var length = keys.length;
			var j = 0;
			var key;
			while (length > j) {
				key = keys[j++];
				if (!descriptors || propertyIsEnumerable.call(S, key)) T[key] = S[key];
			}
		} return T;
	} : nativeAssign;

	// `Object.assign` method
	// https://tc39.github.io/ecma262/#sec-object.assign
	_export({ target: 'Object', stat: true, forced: Object.assign !== objectAssign }, {
		assign: objectAssign
	});

	var FAILS_ON_PRIMITIVES = fails(function () { objectKeys(1); });

	// `Object.keys` method
	// https://tc39.github.io/ecma262/#sec-object.keys
	_export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {
		keys: function keys(it) {
			return objectKeys(toObject(it));
		}
	});

	// `RegExp.prototype.flags` getter implementation
	// https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags
	var regexpFlags = function () {
		var that = anObject(this);
		var result = '';
		if (that.global) result += 'g';
		if (that.ignoreCase) result += 'i';
		if (that.multiline) result += 'm';
		if (that.dotAll) result += 's';
		if (that.unicode) result += 'u';
		if (that.sticky) result += 'y';
		return result;
	};

	// babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError,
	// so we use an intermediate function.
	function RE(s, f) {
		return RegExp(s, f);
	}

	var UNSUPPORTED_Y = fails(function () {
		// babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError
		var re = RE('a', 'y');
		re.lastIndex = 2;
		return re.exec('abcd') != null;
	});

	var BROKEN_CARET = fails(function () {
		// https://bugzilla.mozilla.org/show_bug.cgi?id=773687
		var re = RE('^r', 'gy');
		re.lastIndex = 2;
		return re.exec('str') != null;
	});

	var regexpStickyHelpers = {
		UNSUPPORTED_Y: UNSUPPORTED_Y,
		BROKEN_CARET: BROKEN_CARET
	};

	var nativeExec = RegExp.prototype.exec;
	// This always refers to the native implementation, because the
	// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
	// which loads this file before patching the method.
	var nativeReplace = String.prototype.replace;

	var patchedExec = nativeExec;

	var UPDATES_LAST_INDEX_WRONG = (function () {
		var re1 = /a/;
		var re2 = /b*/g;
		nativeExec.call(re1, 'a');
		nativeExec.call(re2, 'a');
		return re1.lastIndex !== 0 || re2.lastIndex !== 0;
	})();

	var UNSUPPORTED_Y$1 = regexpStickyHelpers.UNSUPPORTED_Y || regexpStickyHelpers.BROKEN_CARET;

	// nonparticipating capturing group, copied from es5-shim's String#split patch.
	var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

	var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y$1;

	if (PATCH) {
		patchedExec = function exec(str) {
			var re = this;
			var lastIndex, reCopy, match, i;
			var sticky = UNSUPPORTED_Y$1 && re.sticky;
			var flags = regexpFlags.call(re);
			var source = re.source;
			var charsAdded = 0;
			var strCopy = str;

			if (sticky) {
				flags = flags.replace('y', '');
				if (flags.indexOf('g') === -1) {
					flags += 'g';
				}

				strCopy = String(str).slice(re.lastIndex);
				// Support anchored sticky behavior.
				if (re.lastIndex > 0 && (!re.multiline || re.multiline && str[re.lastIndex - 1] !== '\n')) {
					source = '(?: ' + source + ')';
					strCopy = ' ' + strCopy;
					charsAdded++;
				}
				// ^(? + rx + ) is needed, in combination with some str slicing, to
				// simulate the 'y' flag.
				reCopy = new RegExp('^(?:' + source + ')', flags);
			}

			if (NPCG_INCLUDED) {
				reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
			}
			if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

			match = nativeExec.call(sticky ? reCopy : re, strCopy);

			if (sticky) {
				if (match) {
					match.input = match.input.slice(charsAdded);
					match[0] = match[0].slice(charsAdded);
					match.index = re.lastIndex;
					re.lastIndex += match[0].length;
				} else re.lastIndex = 0;
			} else if (UPDATES_LAST_INDEX_WRONG && match) {
				re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
			}
			if (NPCG_INCLUDED && match && match.length > 1) {
				// Fix browsers whose `exec` methods don't consistently return `undefined`
				// for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
				nativeReplace.call(match[0], reCopy, function () {
					for (i = 1; i < arguments.length - 2; i++) {
						if (arguments[i] === undefined) match[i] = undefined;
					}
				});
			}

			return match;
		};
	}

	var regexpExec = patchedExec;

	_export({ target: 'RegExp', proto: true, forced: /./.exec !== regexpExec }, {
		exec: regexpExec
	});

	// TODO: Remove from `core-js@4` since it's moved to entry points







	var SPECIES$2 = wellKnownSymbol('species');

	var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
		// #replace needs built-in support for named groups.
		// #match works fine because it just return the exec results, even if it has
		// a "grops" property.
		var re = /./;
		re.exec = function () {
			var result = [];
			result.groups = { a: '7' };
			return result;
		};
		return ''.replace(re, '$<a>') !== '7';
	});

	// IE <= 11 replaces $0 with the whole match, as if it was $&
	// https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0
	var REPLACE_KEEPS_$0 = (function () {
		return 'a'.replace(/./, '$0') === '$0';
	})();

	var REPLACE = wellKnownSymbol('replace');
	// Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string
	var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = (function () {
		if (/./[REPLACE]) {
			return /./[REPLACE]('a', '$0') === '';
		}
		return false;
	})();

	// Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
	// Weex JS has frozen built-in prototypes, so use try / catch wrapper
	var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {
		var re = /(?:)/;
		var originalExec = re.exec;
		re.exec = function () { return originalExec.apply(this, arguments); };
		var result = 'ab'.split(re);
		return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
	});

	var fixRegexpWellKnownSymbolLogic = function (KEY, length, exec, sham) {
		var SYMBOL = wellKnownSymbol(KEY);

		var DELEGATES_TO_SYMBOL = !fails(function () {
			// String methods call symbol-named RegEp methods
			var O = {};
			O[SYMBOL] = function () { return 7; };
			return ''[KEY](O) != 7;
		});

		var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {
			// Symbol-named RegExp methods call .exec
			var execCalled = false;
			var re = /a/;

			if (KEY === 'split') {
				// We can't use real regex here since it causes deoptimization
				// and serious performance degradation in V8
				// https://github.com/zloirock/core-js/issues/306
				re = {};
				// RegExp[@@split] doesn't call the regex's exec method, but first creates
				// a new one. We need to return the patched regex when creating the new one.
				re.constructor = {};
				re.constructor[SPECIES$2] = function () { return re; };
				re.flags = '';
				re[SYMBOL] = /./[SYMBOL];
			}

			re.exec = function () { execCalled = true; return null; };

			re[SYMBOL]('');
			return !execCalled;
		});

		if (
			!DELEGATES_TO_SYMBOL ||
			!DELEGATES_TO_EXEC ||
			(KEY === 'replace' && !(
				REPLACE_SUPPORTS_NAMED_GROUPS &&
				REPLACE_KEEPS_$0 &&
				!REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
			)) ||
			(KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
		) {
			var nativeRegExpMethod = /./[SYMBOL];
			var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
				if (regexp.exec === regexpExec) {
					if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
						// The native String method already delegates to @@method (this
						// polyfilled function), leasing to infinite recursion.
						// We avoid it by directly calling the native @@method method.
						return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
					}
					return { done: true, value: nativeMethod.call(str, regexp, arg2) };
				}
				return { done: false };
			}, {
				REPLACE_KEEPS_$0: REPLACE_KEEPS_$0,
				REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
			});
			var stringMethod = methods[0];
			var regexMethod = methods[1];

			redefine(String.prototype, KEY, stringMethod);
			redefine(RegExp.prototype, SYMBOL, length == 2
				// 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
				// 21.2.5.11 RegExp.prototype[@@split](string, limit)
				? function (string, arg) { return regexMethod.call(string, this, arg); }
				// 21.2.5.6 RegExp.prototype[@@match](string)
				// 21.2.5.9 RegExp.prototype[@@search](string)
				: function (string) { return regexMethod.call(string, this); }
			);
		}

		if (sham) createNonEnumerableProperty(RegExp.prototype[SYMBOL], 'sham', true);
	};

	// `SameValue` abstract operation
	// https://tc39.github.io/ecma262/#sec-samevalue
	var sameValue = Object.is || function is(x, y) {
		// eslint-disable-next-line no-self-compare
		return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
	};

	// `RegExpExec` abstract operation
	// https://tc39.github.io/ecma262/#sec-regexpexec
	var regexpExecAbstract = function (R, S) {
		var exec = R.exec;
		if (typeof exec === 'function') {
			var result = exec.call(R, S);
			if (typeof result !== 'object') {
				throw TypeError('RegExp exec method returned something other than an Object or null');
			}
			return result;
		}

		if (classofRaw(R) !== 'RegExp') {
			throw TypeError('RegExp#exec called on incompatible receiver');
		}

		return regexpExec.call(R, S);
	};

	// @@search logic
	fixRegexpWellKnownSymbolLogic('search', 1, function (SEARCH, nativeSearch, maybeCallNative) {
		return [
			// `String.prototype.search` method
			// https://tc39.github.io/ecma262/#sec-string.prototype.search
			function search(regexp) {
				var O = requireObjectCoercible(this);
				var searcher = regexp == undefined ? undefined : regexp[SEARCH];
				return searcher !== undefined ? searcher.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
			},
			// `RegExp.prototype[@@search]` method
			// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
			function (regexp) {
				var res = maybeCallNative(nativeSearch, regexp, this);
				if (res.done) return res.value;

				var rx = anObject(regexp);
				var S = String(this);

				var previousLastIndex = rx.lastIndex;
				if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
				var result = regexpExecAbstract(rx, S);
				if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
				return result === null ? -1 : result.index;
			}
		];
	});

	// iterable DOM collections
	// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
	var domIterables = {
		CSSRuleList: 0,
		CSSStyleDeclaration: 0,
		CSSValueList: 0,
		ClientRectList: 0,
		DOMRectList: 0,
		DOMStringList: 0,
		DOMTokenList: 1,
		DataTransferItemList: 0,
		FileList: 0,
		HTMLAllCollection: 0,
		HTMLCollection: 0,
		HTMLFormElement: 0,
		HTMLSelectElement: 0,
		MediaList: 0,
		MimeTypeArray: 0,
		NamedNodeMap: 0,
		NodeList: 1,
		PaintRequestList: 0,
		Plugin: 0,
		PluginArray: 0,
		SVGLengthList: 0,
		SVGNumberList: 0,
		SVGPathSegList: 0,
		SVGPointList: 0,
		SVGStringList: 0,
		SVGTransformList: 0,
		SourceBufferList: 0,
		StyleSheetList: 0,
		TextTrackCueList: 0,
		TextTrackList: 0,
		TouchList: 0
	};

	for (var COLLECTION_NAME in domIterables) {
		var Collection = global_1[COLLECTION_NAME];
		var CollectionPrototype = Collection && Collection.prototype;
		// some Chrome versions have non-configurable methods on DOMTokenList
		if (CollectionPrototype && CollectionPrototype.forEach !== arrayForEach) try {
			createNonEnumerableProperty(CollectionPrototype, 'forEach', arrayForEach);
		} catch (error) {
			CollectionPrototype.forEach = arrayForEach;
		}
	}

	var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
	var MAX_SAFE_INTEGER$1 = 0x1FFFFFFFFFFFFF;
	var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';

	// We can't use this feature detection in V8 since it causes
	// deoptimization and serious performance degradation
	// https://github.com/zloirock/core-js/issues/679
	var IS_CONCAT_SPREADABLE_SUPPORT = engineV8Version >= 51 || !fails(function () {
		var array = [];
		array[IS_CONCAT_SPREADABLE] = false;
		return array.concat()[0] !== array;
	});

	var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');

	var isConcatSpreadable = function (O) {
		if (!isObject(O)) return false;
		var spreadable = O[IS_CONCAT_SPREADABLE];
		return spreadable !== undefined ? !!spreadable : isArray(O);
	};

	var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;

	// `Array.prototype.concat` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.concat
	// with adding support of @@isConcatSpreadable and @@species
	_export({ target: 'Array', proto: true, forced: FORCED }, {
		concat: function concat(arg) { // eslint-disable-line no-unused-vars
			var O = toObject(this);
			var A = arraySpeciesCreate(O, 0);
			var n = 0;
			var i, k, length, len, E;
			for (i = -1, length = arguments.length; i < length; i++) {
				E = i === -1 ? O : arguments[i];
				if (isConcatSpreadable(E)) {
					len = toLength(E.length);
					if (n + len > MAX_SAFE_INTEGER$1) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
					for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);
				} else {
					if (n >= MAX_SAFE_INTEGER$1) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
					createProperty(A, n++, E);
				}
			}
			A.length = n;
			return A;
		}
	});

	var global$1 = typeof global$2 !== "undefined" ? global$2 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};

	var global$2 = typeof global$1 !== "undefined" ? global$1 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};

	// based off https://github.com/defunctzombie/node-process/blob/master/browser.js

	function defaultSetTimout() {
		throw new Error('setTimeout has not been defined');
	}

	function defaultClearTimeout() {
		throw new Error('clearTimeout has not been defined');
	}

	var cachedSetTimeout = defaultSetTimout;
	var cachedClearTimeout = defaultClearTimeout;

	if (typeof global$2.setTimeout === 'function') {
		cachedSetTimeout = setTimeout;
	}

	if (typeof global$2.clearTimeout === 'function') {
		cachedClearTimeout = clearTimeout;
	}

	function runTimeout(fun) {
		if (cachedSetTimeout === setTimeout) {
			//normal enviroments in sane situations
			return setTimeout(fun, 0);
		} // if setTimeout wasn't available but was latter defined


		if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
			cachedSetTimeout = setTimeout;
			return setTimeout(fun, 0);
		}

		try {
			// when when somebody has screwed with setTimeout but no I.E. maddness
			return cachedSetTimeout(fun, 0);
		} catch (e) {
			try {
				// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
				return cachedSetTimeout.call(null, fun, 0);
			} catch (e) {
				// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
				return cachedSetTimeout.call(this, fun, 0);
			}
		}
	}

	function runClearTimeout(marker) {
		if (cachedClearTimeout === clearTimeout) {
			//normal enviroments in sane situations
			return clearTimeout(marker);
		} // if clearTimeout wasn't available but was latter defined


		if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
			cachedClearTimeout = clearTimeout;
			return clearTimeout(marker);
		}

		try {
			// when when somebody has screwed with setTimeout but no I.E. maddness
			return cachedClearTimeout(marker);
		} catch (e) {
			try {
				// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
				return cachedClearTimeout.call(null, marker);
			} catch (e) {
				// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
				// Some versions of I.E. have different rules for clearTimeout vs setTimeout
				return cachedClearTimeout.call(this, marker);
			}
		}
	}

	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
		if (!draining || !currentQueue) {
			return;
		}

		draining = false;

		if (currentQueue.length) {
			queue = currentQueue.concat(queue);
		} else {
			queueIndex = -1;
		}

		if (queue.length) {
			drainQueue();
		}
	}

	function drainQueue() {
		if (draining) {
			return;
		}

		var timeout = runTimeout(cleanUpNextTick);
		draining = true;
		var len = queue.length;

		while (len) {
			currentQueue = queue;
			queue = [];

			while (++queueIndex < len) {
				if (currentQueue) {
					currentQueue[queueIndex].run();
				}
			}

			queueIndex = -1;
			len = queue.length;
		}

		currentQueue = null;
		draining = false;
		runClearTimeout(timeout);
	}

	function nextTick(fun) {
		var args = new Array(arguments.length - 1);

		if (arguments.length > 1) {
			for (var i = 1; i < arguments.length; i++) {
				args[i - 1] = arguments[i];
			}
		}

		queue.push(new Item(fun, args));

		if (queue.length === 1 && !draining) {
			runTimeout(drainQueue);
		}
	} // v8 likes predictible objects

	function Item(fun, array) {
		this.fun = fun;
		this.array = array;
	}

	Item.prototype.run = function () {
		this.fun.apply(null, this.array);
	};

	var title = 'browser';
	var platform = 'browser';
	var browser = true;
	var env = {};
	var argv = [];
	var version$1 = ''; // empty string to avoid regexp issues

	var versions$1 = {};
	var release = {};
	var config = {};

	function noop() { }

	var on = noop;
	var addListener = noop;
	var once = noop;
	var off = noop;
	var removeListener = noop;
	var removeAllListeners = noop;
	var emit = noop;
	function binding(name) {
		throw new Error('process.binding is not supported');
	}
	function cwd() {
		return '/';
	}
	function chdir(dir) {
		throw new Error('process.chdir is not supported');
	}
	function umask() {
		return 0;
	} // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js

	var performance = global$2.performance || {};

	var performanceNow = performance.now || performance.mozNow || performance.msNow || performance.oNow || performance.webkitNow || function () {
		return new Date().getTime();
	}; // generate timestamp or delta
	// see http://nodejs.org/api/process.html#process_process_hrtime


	function hrtime(previousTimestamp) {
		var clocktime = performanceNow.call(performance) * 1e-3;
		var seconds = Math.floor(clocktime);
		var nanoseconds = Math.floor(clocktime % 1 * 1e9);

		if (previousTimestamp) {
			seconds = seconds - previousTimestamp[0];
			nanoseconds = nanoseconds - previousTimestamp[1];

			if (nanoseconds < 0) {
				seconds--;
				nanoseconds += 1e9;
			}
		}

		return [seconds, nanoseconds];
	}
	var startTime = new Date();
	function uptime() {
		var currentTime = new Date();
		var dif = currentTime - startTime;
		return dif / 1000;
	}
	var process$1 = {
		nextTick: nextTick,
		title: title,
		browser: browser,
		env: env,
		argv: argv,
		version: version$1,
		versions: versions$1,
		on: on,
		addListener: addListener,
		once: once,
		off: off,
		removeListener: removeListener,
		removeAllListeners: removeAllListeners,
		emit: emit,
		binding: binding,
		cwd: cwd,
		chdir: chdir,
		umask: umask,
		hrtime: hrtime,
		platform: platform,
		release: release,
		config: config,
		uptime: uptime
	};

	var TO_STRING_TAG = wellKnownSymbol('toStringTag');
	var test = {};

	test[TO_STRING_TAG] = 'z';

	var toStringTagSupport = String(test) === '[object z]';

	var TO_STRING_TAG$1 = wellKnownSymbol('toStringTag');
	// ES3 wrong here
	var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

	// fallback for IE11 Script Access Denied error
	var tryGet = function (it, key) {
		try {
			return it[key];
		} catch (error) { /* empty */ }
	};

	// getting tag from ES6+ `Object.prototype.toString`
	var classof = toStringTagSupport ? classofRaw : function (it) {
		var O, tag, result;
		return it === undefined ? 'Undefined' : it === null ? 'Null'
			// @@toStringTag case
			: typeof (tag = tryGet(O = Object(it), TO_STRING_TAG$1)) == 'string' ? tag
				// builtinTag case
				: CORRECT_ARGUMENTS ? classofRaw(O)
					// ES3 arguments fallback
					: (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
	};

	// `Object.prototype.toString` method implementation
	// https://tc39.github.io/ecma262/#sec-object.prototype.tostring
	var objectToString = toStringTagSupport ? {}.toString : function toString() {
		return '[object ' + classof(this) + ']';
	};

	// `Object.prototype.toString` method
	// https://tc39.github.io/ecma262/#sec-object.prototype.tostring
	if (!toStringTagSupport) {
		redefine(Object.prototype, 'toString', objectToString, { unsafe: true });
	}

	var TO_STRING = 'toString';
	var RegExpPrototype = RegExp.prototype;
	var nativeToString = RegExpPrototype[TO_STRING];

	var NOT_GENERIC = fails(function () { return nativeToString.call({ source: 'a', flags: 'b' }) != '/a/b'; });
	// FF44- RegExp#toString has a wrong name
	var INCORRECT_NAME = nativeToString.name != TO_STRING;

	// `RegExp.prototype.toString` method
	// https://tc39.github.io/ecma262/#sec-regexp.prototype.tostring
	if (NOT_GENERIC || INCORRECT_NAME) {
		redefine(RegExp.prototype, TO_STRING, function toString() {
			var R = anObject(this);
			var p = String(R.source);
			var rf = R.flags;
			var f = String(rf === undefined && R instanceof RegExp && !('flags' in RegExpPrototype) ? regexpFlags.call(R) : rf);
			return '/' + p + '/' + f;
		}, { unsafe: true });
	}

	var defineProperty$2 = objectDefineProperty.f;

	var FunctionPrototype = Function.prototype;
	var FunctionPrototypeToString = FunctionPrototype.toString;
	var nameRE = /^\s*function ([^ (]*)/;
	var NAME = 'name';

	// Function instances `.name` property
	// https://tc39.github.io/ecma262/#sec-function-instances-name
	if (descriptors && !(NAME in FunctionPrototype)) {
		defineProperty$2(FunctionPrototype, NAME, {
			configurable: true,
			get: function () {
				try {
					return FunctionPrototypeToString.call(this).match(nameRE)[1];
				} catch (error) {
					return '';
				}
			}
		});
	}

	var correctPrototypeGetter = !fails(function () {
		function F() { /* empty */ }
		F.prototype.constructor = null;
		return Object.getPrototypeOf(new F()) !== F.prototype;
	});

	var IE_PROTO = sharedKey('IE_PROTO');
	var ObjectPrototype = Object.prototype;

	// `Object.getPrototypeOf` method
	// https://tc39.github.io/ecma262/#sec-object.getprototypeof
	var objectGetPrototypeOf = correctPrototypeGetter ? Object.getPrototypeOf : function (O) {
		O = toObject(O);
		if (has(O, IE_PROTO)) return O[IE_PROTO];
		if (typeof O.constructor == 'function' && O instanceof O.constructor) {
			return O.constructor.prototype;
		} return O instanceof Object ? ObjectPrototype : null;
	};

	var FAILS_ON_PRIMITIVES$1 = fails(function () { objectGetPrototypeOf(1); });

	// `Object.getPrototypeOf` method
	// https://tc39.github.io/ecma262/#sec-object.getprototypeof
	_export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$1, sham: !correctPrototypeGetter }, {
		getPrototypeOf: function getPrototypeOf(it) {
			return objectGetPrototypeOf(toObject(it));
		}
	});

	// `Reflect.ownKeys` method
	// https://tc39.github.io/ecma262/#sec-reflect.ownkeys
	_export({ target: 'Reflect', stat: true }, {
		ownKeys: ownKeys
	});

	var domain; // This constructor is used to store event handlers. Instantiating this is
	// faster than explicitly calling `Object.create(null)` to get a "clean" empty
	// object (tested with v8 v4.9).

	function EventHandlers() { }

	EventHandlers.prototype = Object.create(null);

	function EventEmitter() {
		EventEmitter.init.call(this);
	}
	// require('events') === require('events').EventEmitter

	EventEmitter.EventEmitter = EventEmitter;
	EventEmitter.usingDomains = false;
	EventEmitter.prototype.domain = undefined;
	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.

	EventEmitter.defaultMaxListeners = 10;

	EventEmitter.init = function () {
		this.domain = null;

		if (EventEmitter.usingDomains) {
			// if there is an active domain, then attach to it.
			if (domain.active);
		}

		if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
			this._events = new EventHandlers();
			this._eventsCount = 0;
		}

		this._maxListeners = this._maxListeners || undefined;
	}; // Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.


	EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
		if (typeof n !== 'number' || n < 0 || isNaN(n)) throw new TypeError('"n" argument must be a positive number');
		this._maxListeners = n;
		return this;
	};

	function $getMaxListeners(that) {
		if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
		return that._maxListeners;
	}

	EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
		return $getMaxListeners(this);
	}; // These standalone emit* functions are used to optimize calling of event
	// handlers for fast cases because emit() itself often has a variable number of
	// arguments and can be deoptimized because of that. These functions always have
	// the same number of arguments and thus do not get deoptimized, so the code
	// inside them can execute faster.


	function emitNone(handler, isFn, self) {
		if (isFn) handler.call(self); else {
			var len = handler.length;
			var listeners = arrayClone(handler, len);

			for (var i = 0; i < len; ++i) {
				listeners[i].call(self);
			}
		}
	}

	function emitOne(handler, isFn, self, arg1) {
		if (isFn) handler.call(self, arg1); else {
			var len = handler.length;
			var listeners = arrayClone(handler, len);

			for (var i = 0; i < len; ++i) {
				listeners[i].call(self, arg1);
			}
		}
	}

	function emitTwo(handler, isFn, self, arg1, arg2) {
		if (isFn) handler.call(self, arg1, arg2); else {
			var len = handler.length;
			var listeners = arrayClone(handler, len);

			for (var i = 0; i < len; ++i) {
				listeners[i].call(self, arg1, arg2);
			}
		}
	}

	function emitThree(handler, isFn, self, arg1, arg2, arg3) {
		if (isFn) handler.call(self, arg1, arg2, arg3); else {
			var len = handler.length;
			var listeners = arrayClone(handler, len);

			for (var i = 0; i < len; ++i) {
				listeners[i].call(self, arg1, arg2, arg3);
			}
		}
	}

	function emitMany(handler, isFn, self, args) {
		if (isFn) handler.apply(self, args); else {
			var len = handler.length;
			var listeners = arrayClone(handler, len);

			for (var i = 0; i < len; ++i) {
				listeners[i].apply(self, args);
			}
		}
	}

	EventEmitter.prototype.emit = function emit(type) {
		var er, handler, len, args, i, events, domain;
		var doError = type === 'error';
		events = this._events;
		if (events) doError = doError && events.error == null; else if (!doError) return false;
		domain = this.domain; // If there is no 'error' event listener then throw.

		if (doError) {
			er = arguments[1];

			if (domain) {
				if (!er) er = new Error('Uncaught, unspecified "error" event');
				er.domainEmitter = this;
				er.domain = domain;
				er.domainThrown = false;
				domain.emit('error', er);
			} else if (er instanceof Error) {
				throw er; // Unhandled 'error' event
			} else {
				// At least give some kind of context to the user
				var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
				err.context = er;
				throw err;
			}

			return false;
		}

		handler = events[type];
		if (!handler) return false;
		var isFn = typeof handler === 'function';
		len = arguments.length;

		switch (len) {
			// fast cases
			case 1:
				emitNone(handler, isFn, this);
				break;

			case 2:
				emitOne(handler, isFn, this, arguments[1]);
				break;

			case 3:
				emitTwo(handler, isFn, this, arguments[1], arguments[2]);
				break;

			case 4:
				emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
				break;
			// slower

			default:
				args = new Array(len - 1);

				for (i = 1; i < len; i++) {
					args[i - 1] = arguments[i];
				}

				emitMany(handler, isFn, this, args);
		}
		return true;
	};

	function _addListener(target, type, listener, prepend) {
		var m;
		var events;
		var existing;
		if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
		events = target._events;

		if (!events) {
			events = target._events = new EventHandlers();
			target._eventsCount = 0;
		} else {
			// To avoid recursion in the case that type === "newListener"! Before
			// adding it to the listeners, first emit "newListener".
			if (events.newListener) {
				target.emit('newListener', type, listener.listener ? listener.listener : listener); // Re-assign `events` because a newListener handler could have caused the
				// this._events to be assigned to a new object

				events = target._events;
			}

			existing = events[type];
		}

		if (!existing) {
			// Optimize the case of one listener. Don't need the extra array object.
			existing = events[type] = listener;
			++target._eventsCount;
		} else {
			if (typeof existing === 'function') {
				// Adding the second element, need to change to array.
				existing = events[type] = prepend ? [listener, existing] : [existing, listener];
			} else {
				// If we've already got an array, just append.
				if (prepend) {
					existing.unshift(listener);
				} else {
					existing.push(listener);
				}
			} // Check for listener leak


			if (!existing.warned) {
				m = $getMaxListeners(target);

				if (m && m > 0 && existing.length > m) {
					existing.warned = true;
					var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + type + ' listeners added. ' + 'Use emitter.setMaxListeners() to increase limit');
					w.name = 'MaxListenersExceededWarning';
					w.emitter = target;
					w.type = type;
					w.count = existing.length;
					emitWarning(w);
				}
			}
		}

		return target;
	}

	function emitWarning(e) {
		typeof console.warn === 'function' ? console.warn(e) : console.log(e);
	}

	EventEmitter.prototype.addListener = function addListener(type, listener) {
		return _addListener(this, type, listener, false);
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.prependListener = function prependListener(type, listener) {
		return _addListener(this, type, listener, true);
	};

	function _onceWrap(target, type, listener) {
		var fired = false;

		function g() {
			target.removeListener(type, g);

			if (!fired) {
				fired = true;
				listener.apply(target, arguments);
			}
		}

		g.listener = listener;
		return g;
	}

	EventEmitter.prototype.once = function once(type, listener) {
		if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
		this.on(type, _onceWrap(this, type, listener));
		return this;
	};

	EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
		if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
		this.prependListener(type, _onceWrap(this, type, listener));
		return this;
	}; // emits a 'removeListener' event iff the listener was removed


	EventEmitter.prototype.removeListener = function removeListener(type, listener) {
		var list, events, position, i, originalListener;
		if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
		events = this._events;
		if (!events) return this;
		list = events[type];
		if (!list) return this;

		if (list === listener || list.listener && list.listener === listener) {
			if (--this._eventsCount === 0) this._events = new EventHandlers(); else {
				delete events[type];
				if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
			}
		} else if (typeof list !== 'function') {
			position = -1;

			for (i = list.length; i-- > 0;) {
				if (list[i] === listener || list[i].listener && list[i].listener === listener) {
					originalListener = list[i].listener;
					position = i;
					break;
				}
			}

			if (position < 0) return this;

			if (list.length === 1) {
				list[0] = undefined;

				if (--this._eventsCount === 0) {
					this._events = new EventHandlers();
					return this;
				} else {
					delete events[type];
				}
			} else {
				spliceOne(list, position);
			}

			if (events.removeListener) this.emit('removeListener', type, originalListener || listener);
		}

		return this;
	};

	EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
		var listeners, events;
		events = this._events;
		if (!events) return this; // not listening for removeListener, no need to emit

		if (!events.removeListener) {
			if (arguments.length === 0) {
				this._events = new EventHandlers();
				this._eventsCount = 0;
			} else if (events[type]) {
				if (--this._eventsCount === 0) this._events = new EventHandlers(); else delete events[type];
			}

			return this;
		} // emit removeListener for all listeners on all events


		if (arguments.length === 0) {
			var keys = Object.keys(events);

			for (var i = 0, key; i < keys.length; ++i) {
				key = keys[i];
				if (key === 'removeListener') continue;
				this.removeAllListeners(key);
			}

			this.removeAllListeners('removeListener');
			this._events = new EventHandlers();
			this._eventsCount = 0;
			return this;
		}

		listeners = events[type];

		if (typeof listeners === 'function') {
			this.removeListener(type, listeners);
		} else if (listeners) {
			// LIFO order
			do {
				this.removeListener(type, listeners[listeners.length - 1]);
			} while (listeners[0]);
		}

		return this;
	};

	EventEmitter.prototype.listeners = function listeners(type) {
		var evlistener;
		var ret;
		var events = this._events;
		if (!events) ret = []; else {
			evlistener = events[type];
			if (!evlistener) ret = []; else if (typeof evlistener === 'function') ret = [evlistener.listener || evlistener]; else ret = unwrapListeners(evlistener);
		}
		return ret;
	};

	EventEmitter.listenerCount = function (emitter, type) {
		if (typeof emitter.listenerCount === 'function') {
			return emitter.listenerCount(type);
		} else {
			return listenerCount.call(emitter, type);
		}
	};

	EventEmitter.prototype.listenerCount = listenerCount;

	function listenerCount(type) {
		var events = this._events;

		if (events) {
			var evlistener = events[type];

			if (typeof evlistener === 'function') {
				return 1;
			} else if (evlistener) {
				return evlistener.length;
			}
		}

		return 0;
	}

	EventEmitter.prototype.eventNames = function eventNames() {
		return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
	}; // About 1.5x faster than the two-arg version of Array#splice().


	function spliceOne(list, index) {
		for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
			list[i] = list[k];
		}

		list.pop();
	}

	function arrayClone(arr, i) {
		var copy = new Array(i);

		while (i--) {
			copy[i] = arr[i];
		}

		return copy;
	}

	function unwrapListeners(arr) {
		var ret = new Array(arr.length);

		for (var i = 0; i < ret.length; ++i) {
			ret[i] = arr[i].listener || arr[i];
		}

		return ret;
	}

	var nativeJoin = [].join;

	var ES3_STRINGS = indexedObject != Object;
	var STRICT_METHOD$2 = arrayMethodIsStrict('join', ',');

	// `Array.prototype.join` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.join
	_export({ target: 'Array', proto: true, forced: ES3_STRINGS || !STRICT_METHOD$2 }, {
		join: function join(separator) {
			return nativeJoin.call(toIndexedObject(this), separator === undefined ? ',' : separator);
		}
	});

	var $map = arrayIteration.map;



	var HAS_SPECIES_SUPPORT$2 = arrayMethodHasSpeciesSupport('map');
	// FF49- issue
	var USES_TO_LENGTH$4 = arrayMethodUsesToLength('map');

	// `Array.prototype.map` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.map
	// with adding support of @@species
	_export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$2 || !USES_TO_LENGTH$4 }, {
		map: function map(callbackfn /* , thisArg */) {
			return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
		}
	});

	// `Array.prototype.{ reduce, reduceRight }` methods implementation
	var createMethod$2 = function (IS_RIGHT) {
		return function (that, callbackfn, argumentsLength, memo) {
			aFunction$1(callbackfn);
			var O = toObject(that);
			var self = indexedObject(O);
			var length = toLength(O.length);
			var index = IS_RIGHT ? length - 1 : 0;
			var i = IS_RIGHT ? -1 : 1;
			if (argumentsLength < 2) while (true) {
				if (index in self) {
					memo = self[index];
					index += i;
					break;
				}
				index += i;
				if (IS_RIGHT ? index < 0 : length <= index) {
					throw TypeError('Reduce of empty array with no initial value');
				}
			}
			for (; IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {
				memo = callbackfn(memo, self[index], index, O);
			}
			return memo;
		};
	};

	var arrayReduce = {
		// `Array.prototype.reduce` method
		// https://tc39.github.io/ecma262/#sec-array.prototype.reduce
		left: createMethod$2(false),
		// `Array.prototype.reduceRight` method
		// https://tc39.github.io/ecma262/#sec-array.prototype.reduceright
		right: createMethod$2(true)
	};

	var $reduce = arrayReduce.left;



	var STRICT_METHOD$3 = arrayMethodIsStrict('reduce');
	var USES_TO_LENGTH$5 = arrayMethodUsesToLength('reduce', { 1: 0 });

	// `Array.prototype.reduce` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.reduce
	_export({ target: 'Array', proto: true, forced: !STRICT_METHOD$3 || !USES_TO_LENGTH$5 }, {
		reduce: function reduce(callbackfn /* , initialValue */) {
			return $reduce(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
		}
	});

	var aPossiblePrototype = function (it) {
		if (!isObject(it) && it !== null) {
			throw TypeError("Can't set " + String(it) + ' as a prototype');
		} return it;
	};

	// `Object.setPrototypeOf` method
	// https://tc39.github.io/ecma262/#sec-object.setprototypeof
	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var objectSetPrototypeOf = Object.setPrototypeOf || ('__proto__' in {} ? function () {
		var CORRECT_SETTER = false;
		var test = {};
		var setter;
		try {
			setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
			setter.call(test, []);
			CORRECT_SETTER = test instanceof Array;
		} catch (error) { /* empty */ }
		return function setPrototypeOf(O, proto) {
			anObject(O);
			aPossiblePrototype(proto);
			if (CORRECT_SETTER) setter.call(O, proto);
			else O.__proto__ = proto;
			return O;
		};
	}() : undefined);

	// makes subclassing work correct for wrapped built-ins
	var inheritIfRequired = function ($this, dummy, Wrapper) {
		var NewTarget, NewTargetPrototype;
		if (
			// it can work only with native `setPrototypeOf`
			objectSetPrototypeOf &&
			// we haven't completely correct pre-ES6 way for getting `new.target`, so use this
			typeof (NewTarget = dummy.constructor) == 'function' &&
			NewTarget !== Wrapper &&
			isObject(NewTargetPrototype = NewTarget.prototype) &&
			NewTargetPrototype !== Wrapper.prototype
		) objectSetPrototypeOf($this, NewTargetPrototype);
		return $this;
	};

	// `Object.defineProperties` method
	// https://tc39.github.io/ecma262/#sec-object.defineproperties
	var objectDefineProperties = descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
		anObject(O);
		var keys = objectKeys(Properties);
		var length = keys.length;
		var index = 0;
		var key;
		while (length > index) objectDefineProperty.f(O, key = keys[index++], Properties[key]);
		return O;
	};

	var html = getBuiltIn('document', 'documentElement');

	var GT = '>';
	var LT = '<';
	var PROTOTYPE = 'prototype';
	var SCRIPT = 'script';
	var IE_PROTO$1 = sharedKey('IE_PROTO');

	var EmptyConstructor = function () { /* empty */ };

	var scriptTag = function (content) {
		return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
	};

	// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
	var NullProtoObjectViaActiveX = function (activeXDocument) {
		activeXDocument.write(scriptTag(''));
		activeXDocument.close();
		var temp = activeXDocument.parentWindow.Object;
		activeXDocument = null; // avoid memory leak
		return temp;
	};

	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var NullProtoObjectViaIFrame = function () {
		// Thrash, waste and sodomy: IE GC bug
		var iframe = documentCreateElement('iframe');
		var JS = 'java' + SCRIPT + ':';
		var iframeDocument;
		iframe.style.display = 'none';
		html.appendChild(iframe);
		// https://github.com/zloirock/core-js/issues/475
		iframe.src = String(JS);
		iframeDocument = iframe.contentWindow.document;
		iframeDocument.open();
		iframeDocument.write(scriptTag('document.F=Object'));
		iframeDocument.close();
		return iframeDocument.F;
	};

	// Check for document.domain and active x support
	// No need to use active x approach when document.domain is not set
	// see https://github.com/es-shims/es5-shim/issues/150
	// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
	// avoid IE GC bug
	var activeXDocument;
	var NullProtoObject = function () {
		try {
			/* global ActiveXObject */
			activeXDocument = document.domain && new ActiveXObject('htmlfile');
		} catch (error) { /* ignore */ }
		NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();
		var length = enumBugKeys.length;
		while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
		return NullProtoObject();
	};

	hiddenKeys[IE_PROTO$1] = true;

	// `Object.create` method
	// https://tc39.github.io/ecma262/#sec-object.create
	var objectCreate = Object.create || function create(O, Properties) {
		var result;
		if (O !== null) {
			EmptyConstructor[PROTOTYPE] = anObject(O);
			result = new EmptyConstructor();
			EmptyConstructor[PROTOTYPE] = null;
			// add "__proto__" for Object.getPrototypeOf polyfill
			result[IE_PROTO$1] = O;
		} else result = NullProtoObject();
		return Properties === undefined ? result : objectDefineProperties(result, Properties);
	};

	// a string of all valid unicode whitespaces
	// eslint-disable-next-line max-len
	var whitespaces = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

	var whitespace = '[' + whitespaces + ']';
	var ltrim = RegExp('^' + whitespace + whitespace + '*');
	var rtrim = RegExp(whitespace + whitespace + '*$');

	// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
	var createMethod$3 = function (TYPE) {
		return function ($this) {
			var string = String(requireObjectCoercible($this));
			if (TYPE & 1) string = string.replace(ltrim, '');
			if (TYPE & 2) string = string.replace(rtrim, '');
			return string;
		};
	};

	var stringTrim = {
		// `String.prototype.{ trimLeft, trimStart }` methods
		// https://tc39.github.io/ecma262/#sec-string.prototype.trimstart
		start: createMethod$3(1),
		// `String.prototype.{ trimRight, trimEnd }` methods
		// https://tc39.github.io/ecma262/#sec-string.prototype.trimend
		end: createMethod$3(2),
		// `String.prototype.trim` method
		// https://tc39.github.io/ecma262/#sec-string.prototype.trim
		trim: createMethod$3(3)
	};

	var getOwnPropertyNames = objectGetOwnPropertyNames.f;
	var getOwnPropertyDescriptor$2 = objectGetOwnPropertyDescriptor.f;
	var defineProperty$3 = objectDefineProperty.f;
	var trim = stringTrim.trim;

	var NUMBER = 'Number';
	var NativeNumber = global_1[NUMBER];
	var NumberPrototype = NativeNumber.prototype;

	// Opera ~12 has broken Object#toString
	var BROKEN_CLASSOF = classofRaw(objectCreate(NumberPrototype)) == NUMBER;

	// `ToNumber` abstract operation
	// https://tc39.github.io/ecma262/#sec-tonumber
	var toNumber = function (argument) {
		var it = toPrimitive(argument, false);
		var first, third, radix, maxCode, digits, length, index, code;
		if (typeof it == 'string' && it.length > 2) {
			it = trim(it);
			first = it.charCodeAt(0);
			if (first === 43 || first === 45) {
				third = it.charCodeAt(2);
				if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
			} else if (first === 48) {
				switch (it.charCodeAt(1)) {
					case 66: case 98: radix = 2; maxCode = 49; break; // fast equal of /^0b[01]+$/i
					case 79: case 111: radix = 8; maxCode = 55; break; // fast equal of /^0o[0-7]+$/i
					default: return +it;
				}
				digits = it.slice(2);
				length = digits.length;
				for (index = 0; index < length; index++) {
					code = digits.charCodeAt(index);
					// parseInt parses a string to a first unavailable symbol
					// but ToNumber should return NaN if a string contains unavailable symbols
					if (code < 48 || code > maxCode) return NaN;
				} return parseInt(digits, radix);
			}
		} return +it;
	};

	// `Number` constructor
	// https://tc39.github.io/ecma262/#sec-number-constructor
	if (isForced_1(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {
		var NumberWrapper = function Number(value) {
			var it = arguments.length < 1 ? 0 : value;
			var dummy = this;
			return dummy instanceof NumberWrapper
				// check on 1..constructor(foo) case
				&& (BROKEN_CLASSOF ? fails(function () { NumberPrototype.valueOf.call(dummy); }) : classofRaw(dummy) != NUMBER)
				? inheritIfRequired(new NativeNumber(toNumber(it)), dummy, NumberWrapper) : toNumber(it);
		};
		for (var keys$1 = descriptors ? getOwnPropertyNames(NativeNumber) : (
			// ES3:
			'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
			// ES2015 (in case, if modules with ES2015 Number statics required before):
			'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
			'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
		).split(','), j = 0, key; keys$1.length > j; j++) {
			if (has(NativeNumber, key = keys$1[j]) && !has(NumberWrapper, key)) {
				defineProperty$3(NumberWrapper, key, getOwnPropertyDescriptor$2(NativeNumber, key));
			}
		}
		NumberWrapper.prototype = NumberPrototype;
		NumberPrototype.constructor = NumberWrapper;
		redefine(global_1, NUMBER, NumberWrapper);
	}

	var nativeGetOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;


	var FAILS_ON_PRIMITIVES$2 = fails(function () { nativeGetOwnPropertyDescriptor$1(1); });
	var FORCED$1 = !descriptors || FAILS_ON_PRIMITIVES$2;

	// `Object.getOwnPropertyDescriptor` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
	_export({ target: 'Object', stat: true, forced: FORCED$1, sham: !descriptors }, {
		getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {
			return nativeGetOwnPropertyDescriptor$1(toIndexedObject(it), key);
		}
	});

	var nativeGetOwnPropertyNames = objectGetOwnPropertyNames.f;

	var toString$1 = {}.toString;

	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
		? Object.getOwnPropertyNames(window) : [];

	var getWindowNames = function (it) {
		try {
			return nativeGetOwnPropertyNames(it);
		} catch (error) {
			return windowNames.slice();
		}
	};

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var f$5 = function getOwnPropertyNames(it) {
		return windowNames && toString$1.call(it) == '[object Window]'
			? getWindowNames(it)
			: nativeGetOwnPropertyNames(toIndexedObject(it));
	};

	var objectGetOwnPropertyNamesExternal = {
		f: f$5
	};

	var nativeGetOwnPropertyNames$1 = objectGetOwnPropertyNamesExternal.f;

	var FAILS_ON_PRIMITIVES$3 = fails(function () { return !Object.getOwnPropertyNames(1); });

	// `Object.getOwnPropertyNames` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertynames
	_export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$3 }, {
		getOwnPropertyNames: nativeGetOwnPropertyNames$1
	});

	var MATCH = wellKnownSymbol('match');

	// `IsRegExp` abstract operation
	// https://tc39.github.io/ecma262/#sec-isregexp
	var isRegexp = function (it) {
		var isRegExp;
		return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classofRaw(it) == 'RegExp');
	};

	var SPECIES$3 = wellKnownSymbol('species');

	var setSpecies = function (CONSTRUCTOR_NAME) {
		var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
		var defineProperty = objectDefineProperty.f;

		if (descriptors && Constructor && !Constructor[SPECIES$3]) {
			defineProperty(Constructor, SPECIES$3, {
				configurable: true,
				get: function () { return this; }
			});
		}
	};

	var defineProperty$4 = objectDefineProperty.f;
	var getOwnPropertyNames$1 = objectGetOwnPropertyNames.f;





	var setInternalState = internalState.set;



	var MATCH$1 = wellKnownSymbol('match');
	var NativeRegExp = global_1.RegExp;
	var RegExpPrototype$1 = NativeRegExp.prototype;
	var re1 = /a/g;
	var re2 = /a/g;

	// "new" should create a new object, old webkit bug
	var CORRECT_NEW = new NativeRegExp(re1) !== re1;

	var UNSUPPORTED_Y$2 = regexpStickyHelpers.UNSUPPORTED_Y;

	var FORCED$2 = descriptors && isForced_1('RegExp', (!CORRECT_NEW || UNSUPPORTED_Y$2 || fails(function () {
		re2[MATCH$1] = false;
		// RegExp constructor can alter flags and IsRegExp works correct with @@match
		return NativeRegExp(re1) != re1 || NativeRegExp(re2) == re2 || NativeRegExp(re1, 'i') != '/a/i';
	})));

	// `RegExp` constructor
	// https://tc39.github.io/ecma262/#sec-regexp-constructor
	if (FORCED$2) {
		var RegExpWrapper = function RegExp(pattern, flags) {
			var thisIsRegExp = this instanceof RegExpWrapper;
			var patternIsRegExp = isRegexp(pattern);
			var flagsAreUndefined = flags === undefined;
			var sticky;

			if (!thisIsRegExp && patternIsRegExp && pattern.constructor === RegExpWrapper && flagsAreUndefined) {
				return pattern;
			}

			if (CORRECT_NEW) {
				if (patternIsRegExp && !flagsAreUndefined) pattern = pattern.source;
			} else if (pattern instanceof RegExpWrapper) {
				if (flagsAreUndefined) flags = regexpFlags.call(pattern);
				pattern = pattern.source;
			}

			if (UNSUPPORTED_Y$2) {
				sticky = !!flags && flags.indexOf('y') > -1;
				if (sticky) flags = flags.replace(/y/g, '');
			}

			var result = inheritIfRequired(
				CORRECT_NEW ? new NativeRegExp(pattern, flags) : NativeRegExp(pattern, flags),
				thisIsRegExp ? this : RegExpPrototype$1,
				RegExpWrapper
			);

			if (UNSUPPORTED_Y$2 && sticky) setInternalState(result, { sticky: sticky });

			return result;
		};
		var proxy = function (key) {
			key in RegExpWrapper || defineProperty$4(RegExpWrapper, key, {
				configurable: true,
				get: function () { return NativeRegExp[key]; },
				set: function (it) { NativeRegExp[key] = it; }
			});
		};
		var keys$2 = getOwnPropertyNames$1(NativeRegExp);
		var index = 0;
		while (keys$2.length > index) proxy(keys$2[index++]);
		RegExpPrototype$1.constructor = RegExpWrapper;
		RegExpWrapper.prototype = RegExpPrototype$1;
		redefine(global_1, 'RegExp', RegExpWrapper);
	}

	// https://tc39.github.io/ecma262/#sec-get-regexp-@@species
	setSpecies('RegExp');

	// `String.prototype.{ codePointAt, at }` methods implementation
	var createMethod$4 = function (CONVERT_TO_STRING) {
		return function ($this, pos) {
			var S = String(requireObjectCoercible($this));
			var position = toInteger(pos);
			var size = S.length;
			var first, second;
			if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
			first = S.charCodeAt(position);
			return first < 0xD800 || first > 0xDBFF || position + 1 === size
				|| (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF
				? CONVERT_TO_STRING ? S.charAt(position) : first
				: CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
		};
	};

	var stringMultibyte = {
		// `String.prototype.codePointAt` method
		// https://tc39.github.io/ecma262/#sec-string.prototype.codepointat
		codeAt: createMethod$4(false),
		// `String.prototype.at` method
		// https://github.com/mathiasbynens/String.prototype.at
		charAt: createMethod$4(true)
	};

	var charAt = stringMultibyte.charAt;

	// `AdvanceStringIndex` abstract operation
	// https://tc39.github.io/ecma262/#sec-advancestringindex
	var advanceStringIndex = function (S, index, unicode) {
		return index + (unicode ? charAt(S, index).length : 1);
	};

	// @@match logic
	fixRegexpWellKnownSymbolLogic('match', 1, function (MATCH, nativeMatch, maybeCallNative) {
		return [
			// `String.prototype.match` method
			// https://tc39.github.io/ecma262/#sec-string.prototype.match
			function match(regexp) {
				var O = requireObjectCoercible(this);
				var matcher = regexp == undefined ? undefined : regexp[MATCH];
				return matcher !== undefined ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
			},
			// `RegExp.prototype[@@match]` method
			// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
			function (regexp) {
				var res = maybeCallNative(nativeMatch, regexp, this);
				if (res.done) return res.value;

				var rx = anObject(regexp);
				var S = String(this);

				if (!rx.global) return regexpExecAbstract(rx, S);

				var fullUnicode = rx.unicode;
				rx.lastIndex = 0;
				var A = [];
				var n = 0;
				var result;
				while ((result = regexpExecAbstract(rx, S)) !== null) {
					var matchStr = String(result[0]);
					A[n] = matchStr;
					if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
					n++;
				}
				return n === 0 ? null : A;
			}
		];
	});

	var max$2 = Math.max;
	var min$3 = Math.min;
	var floor$1 = Math.floor;
	var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d\d?|<[^>]*>)/g;
	var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d\d?)/g;

	var maybeToString = function (it) {
		return it === undefined ? it : String(it);
	};

	// @@replace logic
	fixRegexpWellKnownSymbolLogic('replace', 2, function (REPLACE, nativeReplace, maybeCallNative, reason) {
		var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = reason.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE;
		var REPLACE_KEEPS_$0 = reason.REPLACE_KEEPS_$0;
		var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';

		return [
			// `String.prototype.replace` method
			// https://tc39.github.io/ecma262/#sec-string.prototype.replace
			function replace(searchValue, replaceValue) {
				var O = requireObjectCoercible(this);
				var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];
				return replacer !== undefined
					? replacer.call(searchValue, O, replaceValue)
					: nativeReplace.call(String(O), searchValue, replaceValue);
			},
			// `RegExp.prototype[@@replace]` method
			// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
			function (regexp, replaceValue) {
				if (
					(!REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE && REPLACE_KEEPS_$0) ||
					(typeof replaceValue === 'string' && replaceValue.indexOf(UNSAFE_SUBSTITUTE) === -1)
				) {
					var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);
					if (res.done) return res.value;
				}

				var rx = anObject(regexp);
				var S = String(this);

				var functionalReplace = typeof replaceValue === 'function';
				if (!functionalReplace) replaceValue = String(replaceValue);

				var global = rx.global;
				if (global) {
					var fullUnicode = rx.unicode;
					rx.lastIndex = 0;
				}
				var results = [];
				while (true) {
					var result = regexpExecAbstract(rx, S);
					if (result === null) break;

					results.push(result);
					if (!global) break;

					var matchStr = String(result[0]);
					if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
				}

				var accumulatedResult = '';
				var nextSourcePosition = 0;
				for (var i = 0; i < results.length; i++) {
					result = results[i];

					var matched = String(result[0]);
					var position = max$2(min$3(toInteger(result.index), S.length), 0);
					var captures = [];
					// NOTE: This is equivalent to
					//   captures = result.slice(1).map(maybeToString)
					// but for some reason `nativeSlice.call(result, 1, result.length)` (called in
					// the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
					// causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
					for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
					var namedCaptures = result.groups;
					if (functionalReplace) {
						var replacerArgs = [matched].concat(captures, position, S);
						if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
						var replacement = String(replaceValue.apply(undefined, replacerArgs));
					} else {
						replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
					}
					if (position >= nextSourcePosition) {
						accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
						nextSourcePosition = position + matched.length;
					}
				}
				return accumulatedResult + S.slice(nextSourcePosition);
			}
		];

		// https://tc39.github.io/ecma262/#sec-getsubstitution
		function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
			var tailPos = position + matched.length;
			var m = captures.length;
			var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
			if (namedCaptures !== undefined) {
				namedCaptures = toObject(namedCaptures);
				symbols = SUBSTITUTION_SYMBOLS;
			}
			return nativeReplace.call(replacement, symbols, function (match, ch) {
				var capture;
				switch (ch.charAt(0)) {
					case '$': return '$';
					case '&': return matched;
					case '`': return str.slice(0, position);
					case "'": return str.slice(tailPos);
					case '<':
						capture = namedCaptures[ch.slice(1, -1)];
						break;
					default: // \d\d?
						var n = +ch;
						if (n === 0) return match;
						if (n > m) {
							var f = floor$1(n / 10);
							if (f === 0) return match;
							if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
							return match;
						}
						capture = captures[n - 1];
				}
				return capture === undefined ? '' : capture;
			});
		}
	});

	var SPECIES$4 = wellKnownSymbol('species');

	// `SpeciesConstructor` abstract operation
	// https://tc39.github.io/ecma262/#sec-speciesconstructor
	var speciesConstructor = function (O, defaultConstructor) {
		var C = anObject(O).constructor;
		var S;
		return C === undefined || (S = anObject(C)[SPECIES$4]) == undefined ? defaultConstructor : aFunction$1(S);
	};

	var arrayPush = [].push;
	var min$4 = Math.min;
	var MAX_UINT32 = 0xFFFFFFFF;

	// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
	var SUPPORTS_Y = !fails(function () { return !RegExp(MAX_UINT32, 'y'); });

	// @@split logic
	fixRegexpWellKnownSymbolLogic('split', 2, function (SPLIT, nativeSplit, maybeCallNative) {
		var internalSplit;
		if (
			'abbc'.split(/(b)*/)[1] == 'c' ||
			'test'.split(/(?:)/, -1).length != 4 ||
			'ab'.split(/(?:ab)*/).length != 2 ||
			'.'.split(/(.?)(.?)/).length != 4 ||
			'.'.split(/()()/).length > 1 ||
			''.split(/.?/).length
		) {
			// based on es5-shim implementation, need to rework it
			internalSplit = function (separator, limit) {
				var string = String(requireObjectCoercible(this));
				var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
				if (lim === 0) return [];
				if (separator === undefined) return [string];
				// If `separator` is not a regex, use native split
				if (!isRegexp(separator)) {
					return nativeSplit.call(string, separator, lim);
				}
				var output = [];
				var flags = (separator.ignoreCase ? 'i' : '') +
					(separator.multiline ? 'm' : '') +
					(separator.unicode ? 'u' : '') +
					(separator.sticky ? 'y' : '');
				var lastLastIndex = 0;
				// Make `global` and avoid `lastIndex` issues by working with a copy
				var separatorCopy = new RegExp(separator.source, flags + 'g');
				var match, lastIndex, lastLength;
				while (match = regexpExec.call(separatorCopy, string)) {
					lastIndex = separatorCopy.lastIndex;
					if (lastIndex > lastLastIndex) {
						output.push(string.slice(lastLastIndex, match.index));
						if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));
						lastLength = match[0].length;
						lastLastIndex = lastIndex;
						if (output.length >= lim) break;
					}
					if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
				}
				if (lastLastIndex === string.length) {
					if (lastLength || !separatorCopy.test('')) output.push('');
				} else output.push(string.slice(lastLastIndex));
				return output.length > lim ? output.slice(0, lim) : output;
			};
			// Chakra, V8
		} else if ('0'.split(undefined, 0).length) {
			internalSplit = function (separator, limit) {
				return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);
			};
		} else internalSplit = nativeSplit;

		return [
			// `String.prototype.split` method
			// https://tc39.github.io/ecma262/#sec-string.prototype.split
			function split(separator, limit) {
				var O = requireObjectCoercible(this);
				var splitter = separator == undefined ? undefined : separator[SPLIT];
				return splitter !== undefined
					? splitter.call(separator, O, limit)
					: internalSplit.call(String(O), separator, limit);
			},
			// `RegExp.prototype[@@split]` method
			// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
			//
			// NOTE: This cannot be properly polyfilled in engines that don't support
			// the 'y' flag.
			function (regexp, limit) {
				var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);
				if (res.done) return res.value;

				var rx = anObject(regexp);
				var S = String(this);
				var C = speciesConstructor(rx, RegExp);

				var unicodeMatching = rx.unicode;
				var flags = (rx.ignoreCase ? 'i' : '') +
					(rx.multiline ? 'm' : '') +
					(rx.unicode ? 'u' : '') +
					(SUPPORTS_Y ? 'y' : 'g');

				// ^(? + rx + ) is needed, in combination with some S slicing, to
				// simulate the 'y' flag.
				var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
				var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
				if (lim === 0) return [];
				if (S.length === 0) return regexpExecAbstract(splitter, S) === null ? [S] : [];
				var p = 0;
				var q = 0;
				var A = [];
				while (q < S.length) {
					splitter.lastIndex = SUPPORTS_Y ? q : 0;
					var z = regexpExecAbstract(splitter, SUPPORTS_Y ? S : S.slice(q));
					var e;
					if (
						z === null ||
						(e = min$4(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
					) {
						q = advanceStringIndex(S, q, unicodeMatching);
					} else {
						A.push(S.slice(p, q));
						if (A.length === lim) return A;
						for (var i = 1; i <= z.length - 1; i++) {
							A.push(z[i]);
							if (A.length === lim) return A;
						}
						q = p = e;
					}
				}
				A.push(S.slice(p));
				return A;
			}
		];
	}, !SUPPORTS_Y);

	function _typeof(obj) {
		"@babel/helpers - typeof";

		if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
			_typeof = function (obj) {
				return typeof obj;
			};
		} else {
			_typeof = function (obj) {
				return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
			};
		}

		return _typeof(obj);
	}

	function _asyncIterator(iterable) {
		var method;

		if (typeof Symbol !== "undefined") {
			if (Symbol.asyncIterator) {
				method = iterable[Symbol.asyncIterator];
				if (method != null) return method.call(iterable);
			}

			if (Symbol.iterator) {
				method = iterable[Symbol.iterator];
				if (method != null) return method.call(iterable);
			}
		}

		throw new TypeError("Object is not async iterable");
	}

	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
		try {
			var info = gen[key](arg);
			var value = info.value;
		} catch (error) {
			reject(error);
			return;
		}

		if (info.done) {
			resolve(value);
		} else {
			Promise.resolve(value).then(_next, _throw);
		}
	}

	function _asyncToGenerator(fn) {
		return function () {
			var self = this,
				args = arguments;
			return new Promise(function (resolve, reject) {
				var gen = fn.apply(self, args);

				function _next(value) {
					asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
				}

				function _throw(err) {
					asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
				}

				_next(undefined);
			});
		};
	}

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	function _defineProperty(obj, key, value) {
		if (key in obj) {
			Object.defineProperty(obj, key, {
				value: value,
				enumerable: true,
				configurable: true,
				writable: true
			});
		} else {
			obj[key] = value;
		}

		return obj;
	}

	function ownKeys$1(object, enumerableOnly) {
		var keys = Object.keys(object);

		if (Object.getOwnPropertySymbols) {
			var symbols = Object.getOwnPropertySymbols(object);
			if (enumerableOnly) symbols = symbols.filter(function (sym) {
				return Object.getOwnPropertyDescriptor(object, sym).enumerable;
			});
			keys.push.apply(keys, symbols);
		}

		return keys;
	}

	function _objectSpread2(target) {
		for (var i = 1; i < arguments.length; i++) {
			var source = arguments[i] != null ? arguments[i] : {};

			if (i % 2) {
				ownKeys$1(Object(source), true).forEach(function (key) {
					_defineProperty(target, key, source[key]);
				});
			} else if (Object.getOwnPropertyDescriptors) {
				Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
			} else {
				ownKeys$1(Object(source)).forEach(function (key) {
					Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
				});
			}
		}

		return target;
	}

	function _inherits(subClass, superClass) {
		if (typeof superClass !== "function" && superClass !== null) {
			throw new TypeError("Super expression must either be null or a function");
		}

		subClass.prototype = Object.create(superClass && superClass.prototype, {
			constructor: {
				value: subClass,
				writable: true,
				configurable: true
			}
		});
		if (superClass) _setPrototypeOf(subClass, superClass);
	}

	function _getPrototypeOf(o) {
		_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
			return o.__proto__ || Object.getPrototypeOf(o);
		};
		return _getPrototypeOf(o);
	}

	function _setPrototypeOf(o, p) {
		_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
			o.__proto__ = p;
			return o;
		};

		return _setPrototypeOf(o, p);
	}

	function _isNativeReflectConstruct() {
		if (typeof Reflect === "undefined" || !Reflect.construct) return false;
		if (Reflect.construct.sham) return false;
		if (typeof Proxy === "function") return true;

		try {
			Date.prototype.toString.call(Reflect.construct(Date, [], function () { }));
			return true;
		} catch (e) {
			return false;
		}
	}

	function _assertThisInitialized(self) {
		if (self === void 0) {
			throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		}

		return self;
	}

	function _possibleConstructorReturn(self, call) {
		if (call && (typeof call === "object" || typeof call === "function")) {
			return call;
		}

		return _assertThisInitialized(self);
	}

	function _createSuper(Derived) {
		var hasNativeReflectConstruct = _isNativeReflectConstruct();

		return function _createSuperInternal() {
			var Super = _getPrototypeOf(Derived),
				result;

			if (hasNativeReflectConstruct) {
				var NewTarget = _getPrototypeOf(this).constructor;

				result = Reflect.construct(Super, arguments, NewTarget);
			} else {
				result = Super.apply(this, arguments);
			}

			return _possibleConstructorReturn(this, result);
		};
	}

	function _toConsumableArray(arr) {
		return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
	}

	function _arrayWithoutHoles(arr) {
		if (Array.isArray(arr)) return _arrayLikeToArray(arr);
	}

	function _iterableToArray(iter) {
		if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
	}

	function _unsupportedIterableToArray(o, minLen) {
		if (!o) return;
		if (typeof o === "string") return _arrayLikeToArray(o, minLen);
		var n = Object.prototype.toString.call(o).slice(8, -1);
		if (n === "Object" && o.constructor) n = o.constructor.name;
		if (n === "Map" || n === "Set") return Array.from(o);
		if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
	}

	function _arrayLikeToArray(arr, len) {
		if (len == null || len > arr.length) len = arr.length;

		for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

		return arr2;
	}

	function _nonIterableSpread() {
		throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	var f$6 = wellKnownSymbol;

	var wellKnownSymbolWrapped = {
		f: f$6
	};

	var defineProperty$5 = objectDefineProperty.f;

	var defineWellKnownSymbol = function (NAME) {
		var Symbol = path.Symbol || (path.Symbol = {});
		if (!has(Symbol, NAME)) defineProperty$5(Symbol, NAME, {
			value: wellKnownSymbolWrapped.f(NAME)
		});
	};

	var defineProperty$6 = objectDefineProperty.f;



	var TO_STRING_TAG$2 = wellKnownSymbol('toStringTag');

	var setToStringTag = function (it, TAG, STATIC) {
		if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG$2)) {
			defineProperty$6(it, TO_STRING_TAG$2, { configurable: true, value: TAG });
		}
	};

	var $forEach$1 = arrayIteration.forEach;

	var HIDDEN = sharedKey('hidden');
	var SYMBOL = 'Symbol';
	var PROTOTYPE$1 = 'prototype';
	var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
	var setInternalState$1 = internalState.set;
	var getInternalState = internalState.getterFor(SYMBOL);
	var ObjectPrototype$1 = Object[PROTOTYPE$1];
	var $Symbol = global_1.Symbol;
	var $stringify = getBuiltIn('JSON', 'stringify');
	var nativeGetOwnPropertyDescriptor$2 = objectGetOwnPropertyDescriptor.f;
	var nativeDefineProperty$1 = objectDefineProperty.f;
	var nativeGetOwnPropertyNames$2 = objectGetOwnPropertyNamesExternal.f;
	var nativePropertyIsEnumerable$1 = objectPropertyIsEnumerable.f;
	var AllSymbols = shared('symbols');
	var ObjectPrototypeSymbols = shared('op-symbols');
	var StringToSymbolRegistry = shared('string-to-symbol-registry');
	var SymbolToStringRegistry = shared('symbol-to-string-registry');
	var WellKnownSymbolsStore$1 = shared('wks');
	var QObject = global_1.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var USE_SETTER = !QObject || !QObject[PROTOTYPE$1] || !QObject[PROTOTYPE$1].findChild;

	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDescriptor = descriptors && fails(function () {
		return objectCreate(nativeDefineProperty$1({}, 'a', {
			get: function () { return nativeDefineProperty$1(this, 'a', { value: 7 }).a; }
		})).a != 7;
	}) ? function (O, P, Attributes) {
		var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor$2(ObjectPrototype$1, P);
		if (ObjectPrototypeDescriptor) delete ObjectPrototype$1[P];
		nativeDefineProperty$1(O, P, Attributes);
		if (ObjectPrototypeDescriptor && O !== ObjectPrototype$1) {
			nativeDefineProperty$1(ObjectPrototype$1, P, ObjectPrototypeDescriptor);
		}
	} : nativeDefineProperty$1;

	var wrap = function (tag, description) {
		var symbol = AllSymbols[tag] = objectCreate($Symbol[PROTOTYPE$1]);
		setInternalState$1(symbol, {
			type: SYMBOL,
			tag: tag,
			description: description
		});
		if (!descriptors) symbol.description = description;
		return symbol;
	};

	var isSymbol = useSymbolAsUid ? function (it) {
		return typeof it == 'symbol';
	} : function (it) {
		return Object(it) instanceof $Symbol;
	};

	var $defineProperty = function defineProperty(O, P, Attributes) {
		if (O === ObjectPrototype$1) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
		anObject(O);
		var key = toPrimitive(P, true);
		anObject(Attributes);
		if (has(AllSymbols, key)) {
			if (!Attributes.enumerable) {
				if (!has(O, HIDDEN)) nativeDefineProperty$1(O, HIDDEN, createPropertyDescriptor(1, {}));
				O[HIDDEN][key] = true;
			} else {
				if (has(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
				Attributes = objectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });
			} return setSymbolDescriptor(O, key, Attributes);
		} return nativeDefineProperty$1(O, key, Attributes);
	};

	var $defineProperties = function defineProperties(O, Properties) {
		anObject(O);
		var properties = toIndexedObject(Properties);
		var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
		$forEach$1(keys, function (key) {
			if (!descriptors || $propertyIsEnumerable.call(properties, key)) $defineProperty(O, key, properties[key]);
		});
		return O;
	};

	var $create = function create(O, Properties) {
		return Properties === undefined ? objectCreate(O) : $defineProperties(objectCreate(O), Properties);
	};

	var $propertyIsEnumerable = function propertyIsEnumerable(V) {
		var P = toPrimitive(V, true);
		var enumerable = nativePropertyIsEnumerable$1.call(this, P);
		if (this === ObjectPrototype$1 && has(AllSymbols, P) && !has(ObjectPrototypeSymbols, P)) return false;
		return enumerable || !has(this, P) || !has(AllSymbols, P) || has(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
	};

	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
		var it = toIndexedObject(O);
		var key = toPrimitive(P, true);
		if (it === ObjectPrototype$1 && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return;
		var descriptor = nativeGetOwnPropertyDescriptor$2(it, key);
		if (descriptor && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) {
			descriptor.enumerable = true;
		}
		return descriptor;
	};

	var $getOwnPropertyNames = function getOwnPropertyNames(O) {
		var names = nativeGetOwnPropertyNames$2(toIndexedObject(O));
		var result = [];
		$forEach$1(names, function (key) {
			if (!has(AllSymbols, key) && !has(hiddenKeys, key)) result.push(key);
		});
		return result;
	};

	var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
		var IS_OBJECT_PROTOTYPE = O === ObjectPrototype$1;
		var names = nativeGetOwnPropertyNames$2(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
		var result = [];
		$forEach$1(names, function (key) {
			if (has(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || has(ObjectPrototype$1, key))) {
				result.push(AllSymbols[key]);
			}
		});
		return result;
	};

	// `Symbol` constructor
	// https://tc39.github.io/ecma262/#sec-symbol-constructor
	if (!nativeSymbol) {
		$Symbol = function Symbol() {
			if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor');
			var description = !arguments.length || arguments[0] === undefined ? undefined : String(arguments[0]);
			var tag = uid(description);
			var setter = function (value) {
				if (this === ObjectPrototype$1) setter.call(ObjectPrototypeSymbols, value);
				if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
				setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
			};
			if (descriptors && USE_SETTER) setSymbolDescriptor(ObjectPrototype$1, tag, { configurable: true, set: setter });
			return wrap(tag, description);
		};

		redefine($Symbol[PROTOTYPE$1], 'toString', function toString() {
			return getInternalState(this).tag;
		});

		redefine($Symbol, 'withoutSetter', function (description) {
			return wrap(uid(description), description);
		});

		objectPropertyIsEnumerable.f = $propertyIsEnumerable;
		objectDefineProperty.f = $defineProperty;
		objectGetOwnPropertyDescriptor.f = $getOwnPropertyDescriptor;
		objectGetOwnPropertyNames.f = objectGetOwnPropertyNamesExternal.f = $getOwnPropertyNames;
		objectGetOwnPropertySymbols.f = $getOwnPropertySymbols;

		wellKnownSymbolWrapped.f = function (name) {
			return wrap(wellKnownSymbol(name), name);
		};

		if (descriptors) {
			// https://github.com/tc39/proposal-Symbol-description
			nativeDefineProperty$1($Symbol[PROTOTYPE$1], 'description', {
				configurable: true,
				get: function description() {
					return getInternalState(this).description;
				}
			});
			{
				redefine(ObjectPrototype$1, 'propertyIsEnumerable', $propertyIsEnumerable, { unsafe: true });
			}
		}
	}

	_export({ global: true, wrap: true, forced: !nativeSymbol, sham: !nativeSymbol }, {
		Symbol: $Symbol
	});

	$forEach$1(objectKeys(WellKnownSymbolsStore$1), function (name) {
		defineWellKnownSymbol(name);
	});

	_export({ target: SYMBOL, stat: true, forced: !nativeSymbol }, {
		// `Symbol.for` method
		// https://tc39.github.io/ecma262/#sec-symbol.for
		'for': function (key) {
			var string = String(key);
			if (has(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
			var symbol = $Symbol(string);
			StringToSymbolRegistry[string] = symbol;
			SymbolToStringRegistry[symbol] = string;
			return symbol;
		},
		// `Symbol.keyFor` method
		// https://tc39.github.io/ecma262/#sec-symbol.keyfor
		keyFor: function keyFor(sym) {
			if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol');
			if (has(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
		},
		useSetter: function () { USE_SETTER = true; },
		useSimple: function () { USE_SETTER = false; }
	});

	_export({ target: 'Object', stat: true, forced: !nativeSymbol, sham: !descriptors }, {
		// `Object.create` method
		// https://tc39.github.io/ecma262/#sec-object.create
		create: $create,
		// `Object.defineProperty` method
		// https://tc39.github.io/ecma262/#sec-object.defineproperty
		defineProperty: $defineProperty,
		// `Object.defineProperties` method
		// https://tc39.github.io/ecma262/#sec-object.defineproperties
		defineProperties: $defineProperties,
		// `Object.getOwnPropertyDescriptor` method
		// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
		getOwnPropertyDescriptor: $getOwnPropertyDescriptor
	});

	_export({ target: 'Object', stat: true, forced: !nativeSymbol }, {
		// `Object.getOwnPropertyNames` method
		// https://tc39.github.io/ecma262/#sec-object.getownpropertynames
		getOwnPropertyNames: $getOwnPropertyNames,
		// `Object.getOwnPropertySymbols` method
		// https://tc39.github.io/ecma262/#sec-object.getownpropertysymbols
		getOwnPropertySymbols: $getOwnPropertySymbols
	});

	// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
	// https://bugs.chromium.org/p/v8/issues/detail?id=3443
	_export({ target: 'Object', stat: true, forced: fails(function () { objectGetOwnPropertySymbols.f(1); }) }, {
		getOwnPropertySymbols: function getOwnPropertySymbols(it) {
			return objectGetOwnPropertySymbols.f(toObject(it));
		}
	});

	// `JSON.stringify` method behavior with symbols
	// https://tc39.github.io/ecma262/#sec-json.stringify
	if ($stringify) {
		var FORCED_JSON_STRINGIFY = !nativeSymbol || fails(function () {
			var symbol = $Symbol();
			// MS Edge converts symbol values to JSON as {}
			return $stringify([symbol]) != '[null]'
				// WebKit converts symbol values to JSON as null
				|| $stringify({ a: symbol }) != '{}'
				// V8 throws on boxed symbols
				|| $stringify(Object(symbol)) != '{}';
		});

		_export({ target: 'JSON', stat: true, forced: FORCED_JSON_STRINGIFY }, {
			// eslint-disable-next-line no-unused-vars
			stringify: function stringify(it, replacer, space) {
				var args = [it];
				var index = 1;
				var $replacer;
				while (arguments.length > index) args.push(arguments[index++]);
				$replacer = replacer;
				if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
				if (!isArray(replacer)) replacer = function (key, value) {
					if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
					if (!isSymbol(value)) return value;
				};
				args[1] = replacer;
				return $stringify.apply(null, args);
			}
		});
	}

	// `Symbol.prototype[@@toPrimitive]` method
	// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@toprimitive
	if (!$Symbol[PROTOTYPE$1][TO_PRIMITIVE]) {
		createNonEnumerableProperty($Symbol[PROTOTYPE$1], TO_PRIMITIVE, $Symbol[PROTOTYPE$1].valueOf);
	}
	// `Symbol.prototype[@@toStringTag]` property
	// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@tostringtag
	setToStringTag($Symbol, SYMBOL);

	hiddenKeys[HIDDEN] = true;

	var defineProperty$7 = objectDefineProperty.f;


	var NativeSymbol = global_1.Symbol;

	if (descriptors && typeof NativeSymbol == 'function' && (!('description' in NativeSymbol.prototype) ||
		// Safari 12 bug
		NativeSymbol().description !== undefined
	)) {
		var EmptyStringDescriptionStore = {};
		// wrap Symbol constructor for correct work with undefined description
		var SymbolWrapper = function Symbol() {
			var description = arguments.length < 1 || arguments[0] === undefined ? undefined : String(arguments[0]);
			var result = this instanceof SymbolWrapper
				? new NativeSymbol(description)
				// in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'
				: description === undefined ? NativeSymbol() : NativeSymbol(description);
			if (description === '') EmptyStringDescriptionStore[result] = true;
			return result;
		};
		copyConstructorProperties(SymbolWrapper, NativeSymbol);
		var symbolPrototype = SymbolWrapper.prototype = NativeSymbol.prototype;
		symbolPrototype.constructor = SymbolWrapper;

		var symbolToString = symbolPrototype.toString;
		var native = String(NativeSymbol('test')) == 'Symbol(test)';
		var regexp = /^Symbol\((.*)\)[^)]+$/;
		defineProperty$7(symbolPrototype, 'description', {
			configurable: true,
			get: function description() {
				var symbol = isObject(this) ? this.valueOf() : this;
				var string = symbolToString.call(symbol);
				if (has(EmptyStringDescriptionStore, symbol)) return '';
				var desc = native ? string.slice(7, -1) : string.replace(regexp, '$1');
				return desc === '' ? undefined : desc;
			}
		});

		_export({ global: true, forced: true }, {
			Symbol: SymbolWrapper
		});
	}

	// `Symbol.species` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.species
	defineWellKnownSymbol('species');

	// `Array.prototype.fill` method implementation
	// https://tc39.github.io/ecma262/#sec-array.prototype.fill
	var arrayFill = function fill(value /* , start = 0, end = @length */) {
		var O = toObject(this);
		var length = toLength(O.length);
		var argumentsLength = arguments.length;
		var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);
		var end = argumentsLength > 2 ? arguments[2] : undefined;
		var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
		while (endPos > index) O[index++] = value;
		return O;
	};

	var UNSCOPABLES = wellKnownSymbol('unscopables');
	var ArrayPrototype = Array.prototype;

	// Array.prototype[@@unscopables]
	// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
	if (ArrayPrototype[UNSCOPABLES] == undefined) {
		objectDefineProperty.f(ArrayPrototype, UNSCOPABLES, {
			configurable: true,
			value: objectCreate(null)
		});
	}

	// add a key to Array.prototype[@@unscopables]
	var addToUnscopables = function (key) {
		ArrayPrototype[UNSCOPABLES][key] = true;
	};

	// `Array.prototype.fill` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.fill
	_export({ target: 'Array', proto: true }, {
		fill: arrayFill
	});

	// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables('fill');

	var $includes = arrayIncludes.includes;



	var USES_TO_LENGTH$6 = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });

	// `Array.prototype.includes` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.includes
	_export({ target: 'Array', proto: true, forced: !USES_TO_LENGTH$6 }, {
		includes: function includes(el /* , fromIndex = 0 */) {
			return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
		}
	});

	// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables('includes');

	var iterators = {};

	var ITERATOR = wellKnownSymbol('iterator');
	var BUGGY_SAFARI_ITERATORS = false;

	var returnThis = function () { return this; };

	// `%IteratorPrototype%` object
	// https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object
	var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

	if ([].keys) {
		arrayIterator = [].keys();
		// Safari 8 has buggy iterators w/o `next`
		if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
		else {
			PrototypeOfArrayIteratorPrototype = objectGetPrototypeOf(objectGetPrototypeOf(arrayIterator));
			if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
		}
	}

	if (IteratorPrototype == undefined) IteratorPrototype = {};

	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	if (!has(IteratorPrototype, ITERATOR)) {
		createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);
	}

	var iteratorsCore = {
		IteratorPrototype: IteratorPrototype,
		BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
	};

	var IteratorPrototype$1 = iteratorsCore.IteratorPrototype;





	var returnThis$1 = function () { return this; };

	var createIteratorConstructor = function (IteratorConstructor, NAME, next) {
		var TO_STRING_TAG = NAME + ' Iterator';
		IteratorConstructor.prototype = objectCreate(IteratorPrototype$1, { next: createPropertyDescriptor(1, next) });
		setToStringTag(IteratorConstructor, TO_STRING_TAG, false);
		iterators[TO_STRING_TAG] = returnThis$1;
		return IteratorConstructor;
	};

	var IteratorPrototype$2 = iteratorsCore.IteratorPrototype;
	var BUGGY_SAFARI_ITERATORS$1 = iteratorsCore.BUGGY_SAFARI_ITERATORS;
	var ITERATOR$1 = wellKnownSymbol('iterator');
	var KEYS = 'keys';
	var VALUES = 'values';
	var ENTRIES = 'entries';

	var returnThis$2 = function () { return this; };

	var defineIterator = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
		createIteratorConstructor(IteratorConstructor, NAME, next);

		var getIterationMethod = function (KIND) {
			if (KIND === DEFAULT && defaultIterator) return defaultIterator;
			if (!BUGGY_SAFARI_ITERATORS$1 && KIND in IterablePrototype) return IterablePrototype[KIND];
			switch (KIND) {
				case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
				case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
				case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
			} return function () { return new IteratorConstructor(this); };
		};

		var TO_STRING_TAG = NAME + ' Iterator';
		var INCORRECT_VALUES_NAME = false;
		var IterablePrototype = Iterable.prototype;
		var nativeIterator = IterablePrototype[ITERATOR$1]
			|| IterablePrototype['@@iterator']
			|| DEFAULT && IterablePrototype[DEFAULT];
		var defaultIterator = !BUGGY_SAFARI_ITERATORS$1 && nativeIterator || getIterationMethod(DEFAULT);
		var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
		var CurrentIteratorPrototype, methods, KEY;

		// fix native
		if (anyNativeIterator) {
			CurrentIteratorPrototype = objectGetPrototypeOf(anyNativeIterator.call(new Iterable()));
			if (IteratorPrototype$2 !== Object.prototype && CurrentIteratorPrototype.next) {
				if (objectGetPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype$2) {
					if (objectSetPrototypeOf) {
						objectSetPrototypeOf(CurrentIteratorPrototype, IteratorPrototype$2);
					} else if (typeof CurrentIteratorPrototype[ITERATOR$1] != 'function') {
						createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR$1, returnThis$2);
					}
				}
				// Set @@toStringTag to native iterators
				setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true);
			}
		}

		// fix Array#{values, @@iterator}.name in V8 / FF
		if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
			INCORRECT_VALUES_NAME = true;
			defaultIterator = function values() { return nativeIterator.call(this); };
		}

		// define iterator
		if (IterablePrototype[ITERATOR$1] !== defaultIterator) {
			createNonEnumerableProperty(IterablePrototype, ITERATOR$1, defaultIterator);
		}
		iterators[NAME] = defaultIterator;

		// export additional methods
		if (DEFAULT) {
			methods = {
				values: getIterationMethod(VALUES),
				keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
				entries: getIterationMethod(ENTRIES)
			};
			if (FORCED) for (KEY in methods) {
				if (BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
					redefine(IterablePrototype, KEY, methods[KEY]);
				}
			} else _export({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME }, methods);
		}

		return methods;
	};

	var ARRAY_ITERATOR = 'Array Iterator';
	var setInternalState$2 = internalState.set;
	var getInternalState$1 = internalState.getterFor(ARRAY_ITERATOR);

	// `Array.prototype.entries` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.entries
	// `Array.prototype.keys` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.keys
	// `Array.prototype.values` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.values
	// `Array.prototype[@@iterator]` method
	// https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator
	// `CreateArrayIterator` internal method
	// https://tc39.github.io/ecma262/#sec-createarrayiterator
	var es_array_iterator = defineIterator(Array, 'Array', function (iterated, kind) {
		setInternalState$2(this, {
			type: ARRAY_ITERATOR,
			target: toIndexedObject(iterated), // target
			index: 0,                          // next index
			kind: kind                         // kind
		});
		// `%ArrayIteratorPrototype%.next` method
		// https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next
	}, function () {
		var state = getInternalState$1(this);
		var target = state.target;
		var kind = state.kind;
		var index = state.index++;
		if (!target || index >= target.length) {
			state.target = undefined;
			return { value: undefined, done: true };
		}
		if (kind == 'keys') return { value: index, done: false };
		if (kind == 'values') return { value: target[index], done: false };
		return { value: [index, target[index]], done: false };
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values%
	// https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject
	// https://tc39.github.io/ecma262/#sec-createmappedargumentsobject
	iterators.Arguments = iterators.Array;

	// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

	var min$5 = Math.min;
	var nativeLastIndexOf = [].lastIndexOf;
	var NEGATIVE_ZERO$1 = !!nativeLastIndexOf && 1 / [1].lastIndexOf(1, -0) < 0;
	var STRICT_METHOD$4 = arrayMethodIsStrict('lastIndexOf');
	// For preventing possible almost infinite loop in non-standard implementations, test the forward version of the method
	var USES_TO_LENGTH$7 = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });
	var FORCED$3 = NEGATIVE_ZERO$1 || !STRICT_METHOD$4 || !USES_TO_LENGTH$7;

	// `Array.prototype.lastIndexOf` method implementation
	// https://tc39.github.io/ecma262/#sec-array.prototype.lastindexof
	var arrayLastIndexOf = FORCED$3 ? function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
		// convert -0 to +0
		if (NEGATIVE_ZERO$1) return nativeLastIndexOf.apply(this, arguments) || 0;
		var O = toIndexedObject(this);
		var length = toLength(O.length);
		var index = length - 1;
		if (arguments.length > 1) index = min$5(index, toInteger(arguments[1]));
		if (index < 0) index = length + index;
		for (; index >= 0; index--) if (index in O && O[index] === searchElement) return index || 0;
		return -1;
	} : nativeLastIndexOf;

	// `Array.prototype.lastIndexOf` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.lastindexof
	_export({ target: 'Array', proto: true, forced: arrayLastIndexOf !== [].lastIndexOf }, {
		lastIndexOf: arrayLastIndexOf
	});

	var HAS_SPECIES_SUPPORT$3 = arrayMethodHasSpeciesSupport('slice');
	var USES_TO_LENGTH$8 = arrayMethodUsesToLength('slice', { ACCESSORS: true, 0: 0, 1: 2 });

	var SPECIES$5 = wellKnownSymbol('species');
	var nativeSlice = [].slice;
	var max$3 = Math.max;

	// `Array.prototype.slice` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.slice
	// fallback for not array-like ES3 strings and DOM objects
	_export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$3 || !USES_TO_LENGTH$8 }, {
		slice: function slice(start, end) {
			var O = toIndexedObject(this);
			var length = toLength(O.length);
			var k = toAbsoluteIndex(start, length);
			var fin = toAbsoluteIndex(end === undefined ? length : end, length);
			// inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
			var Constructor, result, n;
			if (isArray(O)) {
				Constructor = O.constructor;
				// cross-realm fallback
				if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {
					Constructor = undefined;
				} else if (isObject(Constructor)) {
					Constructor = Constructor[SPECIES$5];
					if (Constructor === null) Constructor = undefined;
				}
				if (Constructor === Array || Constructor === undefined) {
					return nativeSlice.call(O, k, fin);
				}
			}
			result = new (Constructor === undefined ? Array : Constructor)(max$3(fin - k, 0));
			for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);
			result.length = n;
			return result;
		}
	});

	// `Array[@@species]` getter
	// https://tc39.github.io/ecma262/#sec-get-array-@@species
	setSpecies('Array');

	var arrayBufferNative = typeof ArrayBuffer !== 'undefined' && typeof DataView !== 'undefined';

	var redefineAll = function (target, src, options) {
		for (var key in src) redefine(target, key, src[key], options);
		return target;
	};

	var anInstance = function (it, Constructor, name) {
		if (!(it instanceof Constructor)) {
			throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
		} return it;
	};

	// `ToIndex` abstract operation
	// https://tc39.github.io/ecma262/#sec-toindex
	var toIndex = function (it) {
		if (it === undefined) return 0;
		var number = toInteger(it);
		var length = toLength(number);
		if (number !== length) throw RangeError('Wrong length or index');
		return length;
	};

	// IEEE754 conversions based on https://github.com/feross/ieee754
	// eslint-disable-next-line no-shadow-restricted-names
	var Infinity$1 = 1 / 0;
	var abs = Math.abs;
	var pow = Math.pow;
	var floor$2 = Math.floor;
	var log = Math.log;
	var LN2 = Math.LN2;

	var pack = function (number, mantissaLength, bytes) {
		var buffer = new Array(bytes);
		var exponentLength = bytes * 8 - mantissaLength - 1;
		var eMax = (1 << exponentLength) - 1;
		var eBias = eMax >> 1;
		var rt = mantissaLength === 23 ? pow(2, -24) - pow(2, -77) : 0;
		var sign = number < 0 || number === 0 && 1 / number < 0 ? 1 : 0;
		var index = 0;
		var exponent, mantissa, c;
		number = abs(number);
		// eslint-disable-next-line no-self-compare
		if (number != number || number === Infinity$1) {
			// eslint-disable-next-line no-self-compare
			mantissa = number != number ? 1 : 0;
			exponent = eMax;
		} else {
			exponent = floor$2(log(number) / LN2);
			if (number * (c = pow(2, -exponent)) < 1) {
				exponent--;
				c *= 2;
			}
			if (exponent + eBias >= 1) {
				number += rt / c;
			} else {
				number += rt * pow(2, 1 - eBias);
			}
			if (number * c >= 2) {
				exponent++;
				c /= 2;
			}
			if (exponent + eBias >= eMax) {
				mantissa = 0;
				exponent = eMax;
			} else if (exponent + eBias >= 1) {
				mantissa = (number * c - 1) * pow(2, mantissaLength);
				exponent = exponent + eBias;
			} else {
				mantissa = number * pow(2, eBias - 1) * pow(2, mantissaLength);
				exponent = 0;
			}
		}
		for (; mantissaLength >= 8; buffer[index++] = mantissa & 255, mantissa /= 256, mantissaLength -= 8);
		exponent = exponent << mantissaLength | mantissa;
		exponentLength += mantissaLength;
		for (; exponentLength > 0; buffer[index++] = exponent & 255, exponent /= 256, exponentLength -= 8);
		buffer[--index] |= sign * 128;
		return buffer;
	};

	var unpack = function (buffer, mantissaLength) {
		var bytes = buffer.length;
		var exponentLength = bytes * 8 - mantissaLength - 1;
		var eMax = (1 << exponentLength) - 1;
		var eBias = eMax >> 1;
		var nBits = exponentLength - 7;
		var index = bytes - 1;
		var sign = buffer[index--];
		var exponent = sign & 127;
		var mantissa;
		sign >>= 7;
		for (; nBits > 0; exponent = exponent * 256 + buffer[index], index--, nBits -= 8);
		mantissa = exponent & (1 << -nBits) - 1;
		exponent >>= -nBits;
		nBits += mantissaLength;
		for (; nBits > 0; mantissa = mantissa * 256 + buffer[index], index--, nBits -= 8);
		if (exponent === 0) {
			exponent = 1 - eBias;
		} else if (exponent === eMax) {
			return mantissa ? NaN : sign ? -Infinity$1 : Infinity$1;
		} else {
			mantissa = mantissa + pow(2, mantissaLength);
			exponent = exponent - eBias;
		} return (sign ? -1 : 1) * mantissa * pow(2, exponent - mantissaLength);
	};

	var ieee754 = {
		pack: pack,
		unpack: unpack
	};

	var getOwnPropertyNames$2 = objectGetOwnPropertyNames.f;
	var defineProperty$8 = objectDefineProperty.f;




	var getInternalState$2 = internalState.get;
	var setInternalState$3 = internalState.set;
	var ARRAY_BUFFER = 'ArrayBuffer';
	var DATA_VIEW = 'DataView';
	var PROTOTYPE$2 = 'prototype';
	var WRONG_LENGTH = 'Wrong length';
	var WRONG_INDEX = 'Wrong index';
	var NativeArrayBuffer = global_1[ARRAY_BUFFER];
	var $ArrayBuffer = NativeArrayBuffer;
	var $DataView = global_1[DATA_VIEW];
	var $DataViewPrototype = $DataView && $DataView[PROTOTYPE$2];
	var ObjectPrototype$2 = Object.prototype;
	var RangeError$1 = global_1.RangeError;

	var packIEEE754 = ieee754.pack;
	var unpackIEEE754 = ieee754.unpack;

	var packInt8 = function (number) {
		return [number & 0xFF];
	};

	var packInt16 = function (number) {
		return [number & 0xFF, number >> 8 & 0xFF];
	};

	var packInt32 = function (number) {
		return [number & 0xFF, number >> 8 & 0xFF, number >> 16 & 0xFF, number >> 24 & 0xFF];
	};

	var unpackInt32 = function (buffer) {
		return buffer[3] << 24 | buffer[2] << 16 | buffer[1] << 8 | buffer[0];
	};

	var packFloat32 = function (number) {
		return packIEEE754(number, 23, 4);
	};

	var packFloat64 = function (number) {
		return packIEEE754(number, 52, 8);
	};

	var addGetter = function (Constructor, key) {
		defineProperty$8(Constructor[PROTOTYPE$2], key, { get: function () { return getInternalState$2(this)[key]; } });
	};

	var get$1 = function (view, count, index, isLittleEndian) {
		var intIndex = toIndex(index);
		var store = getInternalState$2(view);
		if (intIndex + count > store.byteLength) throw RangeError$1(WRONG_INDEX);
		var bytes = getInternalState$2(store.buffer).bytes;
		var start = intIndex + store.byteOffset;
		var pack = bytes.slice(start, start + count);
		return isLittleEndian ? pack : pack.reverse();
	};

	var set$1 = function (view, count, index, conversion, value, isLittleEndian) {
		var intIndex = toIndex(index);
		var store = getInternalState$2(view);
		if (intIndex + count > store.byteLength) throw RangeError$1(WRONG_INDEX);
		var bytes = getInternalState$2(store.buffer).bytes;
		var start = intIndex + store.byteOffset;
		var pack = conversion(+value);
		for (var i = 0; i < count; i++) bytes[start + i] = pack[isLittleEndian ? i : count - i - 1];
	};

	if (!arrayBufferNative) {
		$ArrayBuffer = function ArrayBuffer(length) {
			anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
			var byteLength = toIndex(length);
			setInternalState$3(this, {
				bytes: arrayFill.call(new Array(byteLength), 0),
				byteLength: byteLength
			});
			if (!descriptors) this.byteLength = byteLength;
		};

		$DataView = function DataView(buffer, byteOffset, byteLength) {
			anInstance(this, $DataView, DATA_VIEW);
			anInstance(buffer, $ArrayBuffer, DATA_VIEW);
			var bufferLength = getInternalState$2(buffer).byteLength;
			var offset = toInteger(byteOffset);
			if (offset < 0 || offset > bufferLength) throw RangeError$1('Wrong offset');
			byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
			if (offset + byteLength > bufferLength) throw RangeError$1(WRONG_LENGTH);
			setInternalState$3(this, {
				buffer: buffer,
				byteLength: byteLength,
				byteOffset: offset
			});
			if (!descriptors) {
				this.buffer = buffer;
				this.byteLength = byteLength;
				this.byteOffset = offset;
			}
		};

		if (descriptors) {
			addGetter($ArrayBuffer, 'byteLength');
			addGetter($DataView, 'buffer');
			addGetter($DataView, 'byteLength');
			addGetter($DataView, 'byteOffset');
		}

		redefineAll($DataView[PROTOTYPE$2], {
			getInt8: function getInt8(byteOffset) {
				return get$1(this, 1, byteOffset)[0] << 24 >> 24;
			},
			getUint8: function getUint8(byteOffset) {
				return get$1(this, 1, byteOffset)[0];
			},
			getInt16: function getInt16(byteOffset /* , littleEndian */) {
				var bytes = get$1(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
				return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
			},
			getUint16: function getUint16(byteOffset /* , littleEndian */) {
				var bytes = get$1(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
				return bytes[1] << 8 | bytes[0];
			},
			getInt32: function getInt32(byteOffset /* , littleEndian */) {
				return unpackInt32(get$1(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined));
			},
			getUint32: function getUint32(byteOffset /* , littleEndian */) {
				return unpackInt32(get$1(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined)) >>> 0;
			},
			getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
				return unpackIEEE754(get$1(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 23);
			},
			getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
				return unpackIEEE754(get$1(this, 8, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 52);
			},
			setInt8: function setInt8(byteOffset, value) {
				set$1(this, 1, byteOffset, packInt8, value);
			},
			setUint8: function setUint8(byteOffset, value) {
				set$1(this, 1, byteOffset, packInt8, value);
			},
			setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
				set$1(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
			},
			setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
				set$1(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
			},
			setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
				set$1(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
			},
			setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
				set$1(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
			},
			setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
				set$1(this, 4, byteOffset, packFloat32, value, arguments.length > 2 ? arguments[2] : undefined);
			},
			setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
				set$1(this, 8, byteOffset, packFloat64, value, arguments.length > 2 ? arguments[2] : undefined);
			}
		});
	} else {
		if (!fails(function () {
			NativeArrayBuffer(1);
		}) || !fails(function () {
			new NativeArrayBuffer(-1); // eslint-disable-line no-new
		}) || fails(function () {
			new NativeArrayBuffer(); // eslint-disable-line no-new
			new NativeArrayBuffer(1.5); // eslint-disable-line no-new
			new NativeArrayBuffer(NaN); // eslint-disable-line no-new
			return NativeArrayBuffer.name != ARRAY_BUFFER;
		})) {
			$ArrayBuffer = function ArrayBuffer(length) {
				anInstance(this, $ArrayBuffer);
				return new NativeArrayBuffer(toIndex(length));
			};
			var ArrayBufferPrototype = $ArrayBuffer[PROTOTYPE$2] = NativeArrayBuffer[PROTOTYPE$2];
			for (var keys$3 = getOwnPropertyNames$2(NativeArrayBuffer), j$1 = 0, key$1; keys$3.length > j$1;) {
				if (!((key$1 = keys$3[j$1++]) in $ArrayBuffer)) {
					createNonEnumerableProperty($ArrayBuffer, key$1, NativeArrayBuffer[key$1]);
				}
			}
			ArrayBufferPrototype.constructor = $ArrayBuffer;
		}

		// WebKit bug - the same parent prototype for typed arrays and data view
		if (objectSetPrototypeOf && objectGetPrototypeOf($DataViewPrototype) !== ObjectPrototype$2) {
			objectSetPrototypeOf($DataViewPrototype, ObjectPrototype$2);
		}

		// iOS Safari 7.x bug
		var testView = new $DataView(new $ArrayBuffer(2));
		var nativeSetInt8 = $DataViewPrototype.setInt8;
		testView.setInt8(0, 2147483648);
		testView.setInt8(1, 2147483649);
		if (testView.getInt8(0) || !testView.getInt8(1)) redefineAll($DataViewPrototype, {
			setInt8: function setInt8(byteOffset, value) {
				nativeSetInt8.call(this, byteOffset, value << 24 >> 24);
			},
			setUint8: function setUint8(byteOffset, value) {
				nativeSetInt8.call(this, byteOffset, value << 24 >> 24);
			}
		}, { unsafe: true });
	}

	setToStringTag($ArrayBuffer, ARRAY_BUFFER);
	setToStringTag($DataView, DATA_VIEW);

	var arrayBuffer = {
		ArrayBuffer: $ArrayBuffer,
		DataView: $DataView
	};

	var ARRAY_BUFFER$1 = 'ArrayBuffer';
	var ArrayBuffer$1 = arrayBuffer[ARRAY_BUFFER$1];
	var NativeArrayBuffer$1 = global_1[ARRAY_BUFFER$1];

	// `ArrayBuffer` constructor
	// https://tc39.github.io/ecma262/#sec-arraybuffer-constructor
	_export({ global: true, forced: NativeArrayBuffer$1 !== ArrayBuffer$1 }, {
		ArrayBuffer: ArrayBuffer$1
	});

	setSpecies(ARRAY_BUFFER$1);

	var notARegexp = function (it) {
		if (isRegexp(it)) {
			throw TypeError("The method doesn't accept regular expressions");
		} return it;
	};

	var MATCH$2 = wellKnownSymbol('match');

	var correctIsRegexpLogic = function (METHOD_NAME) {
		var regexp = /./;
		try {
			'/./'[METHOD_NAME](regexp);
		} catch (e) {
			try {
				regexp[MATCH$2] = false;
				return '/./'[METHOD_NAME](regexp);
			} catch (f) { /* empty */ }
		} return false;
	};

	// `String.prototype.includes` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.includes
	_export({ target: 'String', proto: true, forced: !correctIsRegexpLogic('includes') }, {
		includes: function includes(searchString /* , position = 0 */) {
			return !!~String(requireObjectCoercible(this))
				.indexOf(notARegexp(searchString), arguments.length > 1 ? arguments[1] : undefined);
		}
	});

	var non = '\u200B\u0085\u180E';

	// check that a method works with the correct list
	// of whitespaces and has a correct name
	var stringTrimForced = function (METHOD_NAME) {
		return fails(function () {
			return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;
		});
	};

	var $trim = stringTrim.trim;


	// `String.prototype.trim` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.trim
	_export({ target: 'String', proto: true, forced: stringTrimForced('trim') }, {
		trim: function trim() {
			return $trim(this);
		}
	});

	var ITERATOR$2 = wellKnownSymbol('iterator');
	var SAFE_CLOSING = false;

	try {
		var called = 0;
		var iteratorWithReturn = {
			next: function () {
				return { done: !!called++ };
			},
			'return': function () {
				SAFE_CLOSING = true;
			}
		};
		iteratorWithReturn[ITERATOR$2] = function () {
			return this;
		};
		// eslint-disable-next-line no-throw-literal
		Array.from(iteratorWithReturn, function () { throw 2; });
	} catch (error) { /* empty */ }

	var checkCorrectnessOfIteration = function (exec, SKIP_CLOSING) {
		if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
		var ITERATION_SUPPORT = false;
		try {
			var object = {};
			object[ITERATOR$2] = function () {
				return {
					next: function () {
						return { done: ITERATION_SUPPORT = true };
					}
				};
			};
			exec(object);
		} catch (error) { /* empty */ }
		return ITERATION_SUPPORT;
	};

	var defineProperty$9 = objectDefineProperty.f;





	var Int8Array$1 = global_1.Int8Array;
	var Int8ArrayPrototype = Int8Array$1 && Int8Array$1.prototype;
	var Uint8ClampedArray = global_1.Uint8ClampedArray;
	var Uint8ClampedArrayPrototype = Uint8ClampedArray && Uint8ClampedArray.prototype;
	var TypedArray = Int8Array$1 && objectGetPrototypeOf(Int8Array$1);
	var TypedArrayPrototype = Int8ArrayPrototype && objectGetPrototypeOf(Int8ArrayPrototype);
	var ObjectPrototype$3 = Object.prototype;
	var isPrototypeOf = ObjectPrototype$3.isPrototypeOf;

	var TO_STRING_TAG$3 = wellKnownSymbol('toStringTag');
	var TYPED_ARRAY_TAG = uid('TYPED_ARRAY_TAG');
	// Fixing native typed arrays in Opera Presto crashes the browser, see #595
	var NATIVE_ARRAY_BUFFER_VIEWS = arrayBufferNative && !!objectSetPrototypeOf && classof(global_1.opera) !== 'Opera';
	var TYPED_ARRAY_TAG_REQIRED = false;
	var NAME$1;

	var TypedArrayConstructorsList = {
		Int8Array: 1,
		Uint8Array: 1,
		Uint8ClampedArray: 1,
		Int16Array: 2,
		Uint16Array: 2,
		Int32Array: 4,
		Uint32Array: 4,
		Float32Array: 4,
		Float64Array: 8
	};

	var isView = function isView(it) {
		var klass = classof(it);
		return klass === 'DataView' || has(TypedArrayConstructorsList, klass);
	};

	var isTypedArray = function (it) {
		return isObject(it) && has(TypedArrayConstructorsList, classof(it));
	};

	var aTypedArray = function (it) {
		if (isTypedArray(it)) return it;
		throw TypeError('Target is not a typed array');
	};

	var aTypedArrayConstructor = function (C) {
		if (objectSetPrototypeOf) {
			if (isPrototypeOf.call(TypedArray, C)) return C;
		} else for (var ARRAY in TypedArrayConstructorsList) if (has(TypedArrayConstructorsList, NAME$1)) {
			var TypedArrayConstructor = global_1[ARRAY];
			if (TypedArrayConstructor && (C === TypedArrayConstructor || isPrototypeOf.call(TypedArrayConstructor, C))) {
				return C;
			}
		} throw TypeError('Target is not a typed array constructor');
	};

	var exportTypedArrayMethod = function (KEY, property, forced) {
		if (!descriptors) return;
		if (forced) for (var ARRAY in TypedArrayConstructorsList) {
			var TypedArrayConstructor = global_1[ARRAY];
			if (TypedArrayConstructor && has(TypedArrayConstructor.prototype, KEY)) {
				delete TypedArrayConstructor.prototype[KEY];
			}
		}
		if (!TypedArrayPrototype[KEY] || forced) {
			redefine(TypedArrayPrototype, KEY, forced ? property
				: NATIVE_ARRAY_BUFFER_VIEWS && Int8ArrayPrototype[KEY] || property);
		}
	};

	var exportTypedArrayStaticMethod = function (KEY, property, forced) {
		var ARRAY, TypedArrayConstructor;
		if (!descriptors) return;
		if (objectSetPrototypeOf) {
			if (forced) for (ARRAY in TypedArrayConstructorsList) {
				TypedArrayConstructor = global_1[ARRAY];
				if (TypedArrayConstructor && has(TypedArrayConstructor, KEY)) {
					delete TypedArrayConstructor[KEY];
				}
			}
			if (!TypedArray[KEY] || forced) {
				// V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable
				try {
					return redefine(TypedArray, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && Int8Array$1[KEY] || property);
				} catch (error) { /* empty */ }
			} else return;
		}
		for (ARRAY in TypedArrayConstructorsList) {
			TypedArrayConstructor = global_1[ARRAY];
			if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {
				redefine(TypedArrayConstructor, KEY, property);
			}
		}
	};

	for (NAME$1 in TypedArrayConstructorsList) {
		if (!global_1[NAME$1]) NATIVE_ARRAY_BUFFER_VIEWS = false;
	}

	// WebKit bug - typed arrays constructors prototype is Object.prototype
	if (!NATIVE_ARRAY_BUFFER_VIEWS || typeof TypedArray != 'function' || TypedArray === Function.prototype) {
		// eslint-disable-next-line no-shadow
		TypedArray = function TypedArray() {
			throw TypeError('Incorrect invocation');
		};
		if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME$1 in TypedArrayConstructorsList) {
			if (global_1[NAME$1]) objectSetPrototypeOf(global_1[NAME$1], TypedArray);
		}
	}

	if (!NATIVE_ARRAY_BUFFER_VIEWS || !TypedArrayPrototype || TypedArrayPrototype === ObjectPrototype$3) {
		TypedArrayPrototype = TypedArray.prototype;
		if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME$1 in TypedArrayConstructorsList) {
			if (global_1[NAME$1]) objectSetPrototypeOf(global_1[NAME$1].prototype, TypedArrayPrototype);
		}
	}

	// WebKit bug - one more object in Uint8ClampedArray prototype chain
	if (NATIVE_ARRAY_BUFFER_VIEWS && objectGetPrototypeOf(Uint8ClampedArrayPrototype) !== TypedArrayPrototype) {
		objectSetPrototypeOf(Uint8ClampedArrayPrototype, TypedArrayPrototype);
	}

	if (descriptors && !has(TypedArrayPrototype, TO_STRING_TAG$3)) {
		TYPED_ARRAY_TAG_REQIRED = true;
		defineProperty$9(TypedArrayPrototype, TO_STRING_TAG$3, {
			get: function () {
				return isObject(this) ? this[TYPED_ARRAY_TAG] : undefined;
			}
		});
		for (NAME$1 in TypedArrayConstructorsList) if (global_1[NAME$1]) {
			createNonEnumerableProperty(global_1[NAME$1], TYPED_ARRAY_TAG, NAME$1);
		}
	}

	var arrayBufferViewCore = {
		NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS,
		TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQIRED && TYPED_ARRAY_TAG,
		aTypedArray: aTypedArray,
		aTypedArrayConstructor: aTypedArrayConstructor,
		exportTypedArrayMethod: exportTypedArrayMethod,
		exportTypedArrayStaticMethod: exportTypedArrayStaticMethod,
		isView: isView,
		isTypedArray: isTypedArray,
		TypedArray: TypedArray,
		TypedArrayPrototype: TypedArrayPrototype
	};

	/* eslint-disable no-new */



	var NATIVE_ARRAY_BUFFER_VIEWS$1 = arrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;

	var ArrayBuffer$2 = global_1.ArrayBuffer;
	var Int8Array$2 = global_1.Int8Array;

	var typedArrayConstructorsRequireWrappers = !NATIVE_ARRAY_BUFFER_VIEWS$1 || !fails(function () {
		Int8Array$2(1);
	}) || !fails(function () {
		new Int8Array$2(-1);
	}) || !checkCorrectnessOfIteration(function (iterable) {
		new Int8Array$2();
		new Int8Array$2(null);
		new Int8Array$2(1.5);
		new Int8Array$2(iterable);
	}, true) || fails(function () {
		// Safari (11+) bug - a reason why even Safari 13 should load a typed array polyfill
		return new Int8Array$2(new ArrayBuffer$2(2), 1, undefined).length !== 1;
	});

	var toPositiveInteger = function (it) {
		var result = toInteger(it);
		if (result < 0) throw RangeError("The argument can't be less than 0");
		return result;
	};

	var toOffset = function (it, BYTES) {
		var offset = toPositiveInteger(it);
		if (offset % BYTES) throw RangeError('Wrong offset');
		return offset;
	};

	var ITERATOR$3 = wellKnownSymbol('iterator');

	var getIteratorMethod = function (it) {
		if (it != undefined) return it[ITERATOR$3]
			|| it['@@iterator']
			|| iterators[classof(it)];
	};

	var ITERATOR$4 = wellKnownSymbol('iterator');
	var ArrayPrototype$1 = Array.prototype;

	// check on default Array iterator
	var isArrayIteratorMethod = function (it) {
		return it !== undefined && (iterators.Array === it || ArrayPrototype$1[ITERATOR$4] === it);
	};

	var aTypedArrayConstructor$1 = arrayBufferViewCore.aTypedArrayConstructor;

	var typedArrayFrom = function from(source /* , mapfn, thisArg */) {
		var O = toObject(source);
		var argumentsLength = arguments.length;
		var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
		var mapping = mapfn !== undefined;
		var iteratorMethod = getIteratorMethod(O);
		var i, length, result, step, iterator, next;
		if (iteratorMethod != undefined && !isArrayIteratorMethod(iteratorMethod)) {
			iterator = iteratorMethod.call(O);
			next = iterator.next;
			O = [];
			while (!(step = next.call(iterator)).done) {
				O.push(step.value);
			}
		}
		if (mapping && argumentsLength > 2) {
			mapfn = functionBindContext(mapfn, arguments[2], 2);
		}
		length = toLength(O.length);
		result = new (aTypedArrayConstructor$1(this))(length);
		for (i = 0; length > i; i++) {
			result[i] = mapping ? mapfn(O[i], i) : O[i];
		}
		return result;
	};

	var typedArrayConstructor = createCommonjsModule(function (module) {


















		var getOwnPropertyNames = objectGetOwnPropertyNames.f;

		var forEach = arrayIteration.forEach;






		var getInternalState = internalState.get;
		var setInternalState = internalState.set;
		var nativeDefineProperty = objectDefineProperty.f;
		var nativeGetOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
		var round = Math.round;
		var RangeError = global_1.RangeError;
		var ArrayBuffer = arrayBuffer.ArrayBuffer;
		var DataView = arrayBuffer.DataView;
		var NATIVE_ARRAY_BUFFER_VIEWS = arrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;
		var TYPED_ARRAY_TAG = arrayBufferViewCore.TYPED_ARRAY_TAG;
		var TypedArray = arrayBufferViewCore.TypedArray;
		var TypedArrayPrototype = arrayBufferViewCore.TypedArrayPrototype;
		var aTypedArrayConstructor = arrayBufferViewCore.aTypedArrayConstructor;
		var isTypedArray = arrayBufferViewCore.isTypedArray;
		var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
		var WRONG_LENGTH = 'Wrong length';

		var fromList = function (C, list) {
			var index = 0;
			var length = list.length;
			var result = new (aTypedArrayConstructor(C))(length);
			while (length > index) result[index] = list[index++];
			return result;
		};

		var addGetter = function (it, key) {
			nativeDefineProperty(it, key, {
				get: function () {
					return getInternalState(this)[key];
				}
			});
		};

		var isArrayBuffer = function (it) {
			var klass;
			return it instanceof ArrayBuffer || (klass = classof(it)) == 'ArrayBuffer' || klass == 'SharedArrayBuffer';
		};

		var isTypedArrayIndex = function (target, key) {
			return isTypedArray(target)
				&& typeof key != 'symbol'
				&& key in target
				&& String(+key) == String(key);
		};

		var wrappedGetOwnPropertyDescriptor = function getOwnPropertyDescriptor(target, key) {
			return isTypedArrayIndex(target, key = toPrimitive(key, true))
				? createPropertyDescriptor(2, target[key])
				: nativeGetOwnPropertyDescriptor(target, key);
		};

		var wrappedDefineProperty = function defineProperty(target, key, descriptor) {
			if (isTypedArrayIndex(target, key = toPrimitive(key, true))
				&& isObject(descriptor)
				&& has(descriptor, 'value')
				&& !has(descriptor, 'get')
				&& !has(descriptor, 'set')
				// TODO: add validation descriptor w/o calling accessors
				&& !descriptor.configurable
				&& (!has(descriptor, 'writable') || descriptor.writable)
				&& (!has(descriptor, 'enumerable') || descriptor.enumerable)
			) {
				target[key] = descriptor.value;
				return target;
			} return nativeDefineProperty(target, key, descriptor);
		};

		if (descriptors) {
			if (!NATIVE_ARRAY_BUFFER_VIEWS) {
				objectGetOwnPropertyDescriptor.f = wrappedGetOwnPropertyDescriptor;
				objectDefineProperty.f = wrappedDefineProperty;
				addGetter(TypedArrayPrototype, 'buffer');
				addGetter(TypedArrayPrototype, 'byteOffset');
				addGetter(TypedArrayPrototype, 'byteLength');
				addGetter(TypedArrayPrototype, 'length');
			}

			_export({ target: 'Object', stat: true, forced: !NATIVE_ARRAY_BUFFER_VIEWS }, {
				getOwnPropertyDescriptor: wrappedGetOwnPropertyDescriptor,
				defineProperty: wrappedDefineProperty
			});

			module.exports = function (TYPE, wrapper, CLAMPED) {
				var BYTES = TYPE.match(/\d+$/)[0] / 8;
				var CONSTRUCTOR_NAME = TYPE + (CLAMPED ? 'Clamped' : '') + 'Array';
				var GETTER = 'get' + TYPE;
				var SETTER = 'set' + TYPE;
				var NativeTypedArrayConstructor = global_1[CONSTRUCTOR_NAME];
				var TypedArrayConstructor = NativeTypedArrayConstructor;
				var TypedArrayConstructorPrototype = TypedArrayConstructor && TypedArrayConstructor.prototype;
				var exported = {};

				var getter = function (that, index) {
					var data = getInternalState(that);
					return data.view[GETTER](index * BYTES + data.byteOffset, true);
				};

				var setter = function (that, index, value) {
					var data = getInternalState(that);
					if (CLAMPED) value = (value = round(value)) < 0 ? 0 : value > 0xFF ? 0xFF : value & 0xFF;
					data.view[SETTER](index * BYTES + data.byteOffset, value, true);
				};

				var addElement = function (that, index) {
					nativeDefineProperty(that, index, {
						get: function () {
							return getter(this, index);
						},
						set: function (value) {
							return setter(this, index, value);
						},
						enumerable: true
					});
				};

				if (!NATIVE_ARRAY_BUFFER_VIEWS) {
					TypedArrayConstructor = wrapper(function (that, data, offset, $length) {
						anInstance(that, TypedArrayConstructor, CONSTRUCTOR_NAME);
						var index = 0;
						var byteOffset = 0;
						var buffer, byteLength, length;
						if (!isObject(data)) {
							length = toIndex(data);
							byteLength = length * BYTES;
							buffer = new ArrayBuffer(byteLength);
						} else if (isArrayBuffer(data)) {
							buffer = data;
							byteOffset = toOffset(offset, BYTES);
							var $len = data.byteLength;
							if ($length === undefined) {
								if ($len % BYTES) throw RangeError(WRONG_LENGTH);
								byteLength = $len - byteOffset;
								if (byteLength < 0) throw RangeError(WRONG_LENGTH);
							} else {
								byteLength = toLength($length) * BYTES;
								if (byteLength + byteOffset > $len) throw RangeError(WRONG_LENGTH);
							}
							length = byteLength / BYTES;
						} else if (isTypedArray(data)) {
							return fromList(TypedArrayConstructor, data);
						} else {
							return typedArrayFrom.call(TypedArrayConstructor, data);
						}
						setInternalState(that, {
							buffer: buffer,
							byteOffset: byteOffset,
							byteLength: byteLength,
							length: length,
							view: new DataView(buffer)
						});
						while (index < length) addElement(that, index++);
					});

					if (objectSetPrototypeOf) objectSetPrototypeOf(TypedArrayConstructor, TypedArray);
					TypedArrayConstructorPrototype = TypedArrayConstructor.prototype = objectCreate(TypedArrayPrototype);
				} else if (typedArrayConstructorsRequireWrappers) {
					TypedArrayConstructor = wrapper(function (dummy, data, typedArrayOffset, $length) {
						anInstance(dummy, TypedArrayConstructor, CONSTRUCTOR_NAME);
						return inheritIfRequired(function () {
							if (!isObject(data)) return new NativeTypedArrayConstructor(toIndex(data));
							if (isArrayBuffer(data)) return $length !== undefined
								? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES), $length)
								: typedArrayOffset !== undefined
									? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES))
									: new NativeTypedArrayConstructor(data);
							if (isTypedArray(data)) return fromList(TypedArrayConstructor, data);
							return typedArrayFrom.call(TypedArrayConstructor, data);
						}(), dummy, TypedArrayConstructor);
					});

					if (objectSetPrototypeOf) objectSetPrototypeOf(TypedArrayConstructor, TypedArray);
					forEach(getOwnPropertyNames(NativeTypedArrayConstructor), function (key) {
						if (!(key in TypedArrayConstructor)) {
							createNonEnumerableProperty(TypedArrayConstructor, key, NativeTypedArrayConstructor[key]);
						}
					});
					TypedArrayConstructor.prototype = TypedArrayConstructorPrototype;
				}

				if (TypedArrayConstructorPrototype.constructor !== TypedArrayConstructor) {
					createNonEnumerableProperty(TypedArrayConstructorPrototype, 'constructor', TypedArrayConstructor);
				}

				if (TYPED_ARRAY_TAG) {
					createNonEnumerableProperty(TypedArrayConstructorPrototype, TYPED_ARRAY_TAG, CONSTRUCTOR_NAME);
				}

				exported[CONSTRUCTOR_NAME] = TypedArrayConstructor;

				_export({
					global: true, forced: TypedArrayConstructor != NativeTypedArrayConstructor, sham: !NATIVE_ARRAY_BUFFER_VIEWS
				}, exported);

				if (!(BYTES_PER_ELEMENT in TypedArrayConstructor)) {
					createNonEnumerableProperty(TypedArrayConstructor, BYTES_PER_ELEMENT, BYTES);
				}

				if (!(BYTES_PER_ELEMENT in TypedArrayConstructorPrototype)) {
					createNonEnumerableProperty(TypedArrayConstructorPrototype, BYTES_PER_ELEMENT, BYTES);
				}

				setSpecies(CONSTRUCTOR_NAME);
			};
		} else module.exports = function () { /* empty */ };
	});

	// `Uint8Array` constructor
	// https://tc39.github.io/ecma262/#sec-typedarray-objects
	typedArrayConstructor('Uint8', function (init) {
		return function Uint8Array(data, byteOffset, length) {
			return init(this, data, byteOffset, length);
		};
	});

	var min$6 = Math.min;

	// `Array.prototype.copyWithin` method implementation
	// https://tc39.github.io/ecma262/#sec-array.prototype.copywithin
	var arrayCopyWithin = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
		var O = toObject(this);
		var len = toLength(O.length);
		var to = toAbsoluteIndex(target, len);
		var from = toAbsoluteIndex(start, len);
		var end = arguments.length > 2 ? arguments[2] : undefined;
		var count = min$6((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
		var inc = 1;
		if (from < to && to < from + count) {
			inc = -1;
			from += count - 1;
			to += count - 1;
		}
		while (count-- > 0) {
			if (from in O) O[to] = O[from];
			else delete O[to];
			to += inc;
			from += inc;
		} return O;
	};

	var aTypedArray$1 = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$1 = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.copyWithin` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.copywithin
	exportTypedArrayMethod$1('copyWithin', function copyWithin(target, start /* , end */) {
		return arrayCopyWithin.call(aTypedArray$1(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
	});

	var $every = arrayIteration.every;

	var aTypedArray$2 = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$2 = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.every` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.every
	exportTypedArrayMethod$2('every', function every(callbackfn /* , thisArg */) {
		return $every(aTypedArray$2(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	});

	var aTypedArray$3 = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$3 = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.fill` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.fill
	// eslint-disable-next-line no-unused-vars
	exportTypedArrayMethod$3('fill', function fill(value /* , start, end */) {
		return arrayFill.apply(aTypedArray$3(this), arguments);
	});

	var $filter$1 = arrayIteration.filter;


	var aTypedArray$4 = arrayBufferViewCore.aTypedArray;
	var aTypedArrayConstructor$2 = arrayBufferViewCore.aTypedArrayConstructor;
	var exportTypedArrayMethod$4 = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.filter` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.filter
	exportTypedArrayMethod$4('filter', function filter(callbackfn /* , thisArg */) {
		var list = $filter$1(aTypedArray$4(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
		var C = speciesConstructor(this, this.constructor);
		var index = 0;
		var length = list.length;
		var result = new (aTypedArrayConstructor$2(C))(length);
		while (length > index) result[index] = list[index++];
		return result;
	});

	var $find = arrayIteration.find;

	var aTypedArray$5 = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$5 = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.find` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.find
	exportTypedArrayMethod$5('find', function find(predicate /* , thisArg */) {
		return $find(aTypedArray$5(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	});

	var $findIndex = arrayIteration.findIndex;

	var aTypedArray$6 = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$6 = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.findIndex` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.findindex
	exportTypedArrayMethod$6('findIndex', function findIndex(predicate /* , thisArg */) {
		return $findIndex(aTypedArray$6(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	});

	var $forEach$2 = arrayIteration.forEach;

	var aTypedArray$7 = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$7 = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.forEach` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.foreach
	exportTypedArrayMethod$7('forEach', function forEach(callbackfn /* , thisArg */) {
		$forEach$2(aTypedArray$7(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	});

	var $includes$1 = arrayIncludes.includes;

	var aTypedArray$8 = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$8 = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.includes` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.includes
	exportTypedArrayMethod$8('includes', function includes(searchElement /* , fromIndex */) {
		return $includes$1(aTypedArray$8(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	});

	var $indexOf$1 = arrayIncludes.indexOf;

	var aTypedArray$9 = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$9 = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.indexOf` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.indexof
	exportTypedArrayMethod$9('indexOf', function indexOf(searchElement /* , fromIndex */) {
		return $indexOf$1(aTypedArray$9(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	});

	var ITERATOR$5 = wellKnownSymbol('iterator');
	var Uint8Array$1 = global_1.Uint8Array;
	var arrayValues = es_array_iterator.values;
	var arrayKeys = es_array_iterator.keys;
	var arrayEntries = es_array_iterator.entries;
	var aTypedArray$a = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$a = arrayBufferViewCore.exportTypedArrayMethod;
	var nativeTypedArrayIterator = Uint8Array$1 && Uint8Array$1.prototype[ITERATOR$5];

	var CORRECT_ITER_NAME = !!nativeTypedArrayIterator
		&& (nativeTypedArrayIterator.name == 'values' || nativeTypedArrayIterator.name == undefined);

	var typedArrayValues = function values() {
		return arrayValues.call(aTypedArray$a(this));
	};

	// `%TypedArray%.prototype.entries` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.entries
	exportTypedArrayMethod$a('entries', function entries() {
		return arrayEntries.call(aTypedArray$a(this));
	});
	// `%TypedArray%.prototype.keys` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.keys
	exportTypedArrayMethod$a('keys', function keys() {
		return arrayKeys.call(aTypedArray$a(this));
	});
	// `%TypedArray%.prototype.values` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.values
	exportTypedArrayMethod$a('values', typedArrayValues, !CORRECT_ITER_NAME);
	// `%TypedArray%.prototype[@@iterator]` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype-@@iterator
	exportTypedArrayMethod$a(ITERATOR$5, typedArrayValues, !CORRECT_ITER_NAME);

	var aTypedArray$b = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$b = arrayBufferViewCore.exportTypedArrayMethod;
	var $join = [].join;

	// `%TypedArray%.prototype.join` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.join
	// eslint-disable-next-line no-unused-vars
	exportTypedArrayMethod$b('join', function join(separator) {
		return $join.apply(aTypedArray$b(this), arguments);
	});

	var aTypedArray$c = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$c = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.lastIndexOf` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.lastindexof
	// eslint-disable-next-line no-unused-vars
	exportTypedArrayMethod$c('lastIndexOf', function lastIndexOf(searchElement /* , fromIndex */) {
		return arrayLastIndexOf.apply(aTypedArray$c(this), arguments);
	});

	var $map$1 = arrayIteration.map;


	var aTypedArray$d = arrayBufferViewCore.aTypedArray;
	var aTypedArrayConstructor$3 = arrayBufferViewCore.aTypedArrayConstructor;
	var exportTypedArrayMethod$d = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.map` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.map
	exportTypedArrayMethod$d('map', function map(mapfn /* , thisArg */) {
		return $map$1(aTypedArray$d(this), mapfn, arguments.length > 1 ? arguments[1] : undefined, function (O, length) {
			return new (aTypedArrayConstructor$3(speciesConstructor(O, O.constructor)))(length);
		});
	});

	var $reduce$1 = arrayReduce.left;

	var aTypedArray$e = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$e = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.reduce` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reduce
	exportTypedArrayMethod$e('reduce', function reduce(callbackfn /* , initialValue */) {
		return $reduce$1(aTypedArray$e(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
	});

	var $reduceRight = arrayReduce.right;

	var aTypedArray$f = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$f = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.reduceRicht` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reduceright
	exportTypedArrayMethod$f('reduceRight', function reduceRight(callbackfn /* , initialValue */) {
		return $reduceRight(aTypedArray$f(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
	});

	var aTypedArray$g = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$g = arrayBufferViewCore.exportTypedArrayMethod;
	var floor$3 = Math.floor;

	// `%TypedArray%.prototype.reverse` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reverse
	exportTypedArrayMethod$g('reverse', function reverse() {
		var that = this;
		var length = aTypedArray$g(that).length;
		var middle = floor$3(length / 2);
		var index = 0;
		var value;
		while (index < middle) {
			value = that[index];
			that[index++] = that[--length];
			that[length] = value;
		} return that;
	});

	var aTypedArray$h = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$h = arrayBufferViewCore.exportTypedArrayMethod;

	var FORCED$4 = fails(function () {
		// eslint-disable-next-line no-undef
		new Int8Array(1).set({});
	});

	// `%TypedArray%.prototype.set` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.set
	exportTypedArrayMethod$h('set', function set(arrayLike /* , offset */) {
		aTypedArray$h(this);
		var offset = toOffset(arguments.length > 1 ? arguments[1] : undefined, 1);
		var length = this.length;
		var src = toObject(arrayLike);
		var len = toLength(src.length);
		var index = 0;
		if (len + offset > length) throw RangeError('Wrong length');
		while (index < len) this[offset + index] = src[index++];
	}, FORCED$4);

	var aTypedArray$i = arrayBufferViewCore.aTypedArray;
	var aTypedArrayConstructor$4 = arrayBufferViewCore.aTypedArrayConstructor;
	var exportTypedArrayMethod$i = arrayBufferViewCore.exportTypedArrayMethod;
	var $slice = [].slice;

	var FORCED$5 = fails(function () {
		// eslint-disable-next-line no-undef
		new Int8Array(1).slice();
	});

	// `%TypedArray%.prototype.slice` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.slice
	exportTypedArrayMethod$i('slice', function slice(start, end) {
		var list = $slice.call(aTypedArray$i(this), start, end);
		var C = speciesConstructor(this, this.constructor);
		var index = 0;
		var length = list.length;
		var result = new (aTypedArrayConstructor$4(C))(length);
		while (length > index) result[index] = list[index++];
		return result;
	}, FORCED$5);

	var $some = arrayIteration.some;

	var aTypedArray$j = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$j = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.some` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.some
	exportTypedArrayMethod$j('some', function some(callbackfn /* , thisArg */) {
		return $some(aTypedArray$j(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	});

	var aTypedArray$k = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$k = arrayBufferViewCore.exportTypedArrayMethod;
	var $sort = [].sort;

	// `%TypedArray%.prototype.sort` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.sort
	exportTypedArrayMethod$k('sort', function sort(comparefn) {
		return $sort.call(aTypedArray$k(this), comparefn);
	});

	var aTypedArray$l = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$l = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.subarray` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.subarray
	exportTypedArrayMethod$l('subarray', function subarray(begin, end) {
		var O = aTypedArray$l(this);
		var length = O.length;
		var beginIndex = toAbsoluteIndex(begin, length);
		return new (speciesConstructor(O, O.constructor))(
			O.buffer,
			O.byteOffset + beginIndex * O.BYTES_PER_ELEMENT,
			toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - beginIndex)
		);
	});

	var Int8Array$3 = global_1.Int8Array;
	var aTypedArray$m = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$m = arrayBufferViewCore.exportTypedArrayMethod;
	var $toLocaleString = [].toLocaleString;
	var $slice$1 = [].slice;

	// iOS Safari 6.x fails here
	var TO_LOCALE_STRING_BUG = !!Int8Array$3 && fails(function () {
		$toLocaleString.call(new Int8Array$3(1));
	});

	var FORCED$6 = fails(function () {
		return [1, 2].toLocaleString() != new Int8Array$3([1, 2]).toLocaleString();
	}) || !fails(function () {
		Int8Array$3.prototype.toLocaleString.call([1, 2]);
	});

	// `%TypedArray%.prototype.toLocaleString` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.tolocalestring
	exportTypedArrayMethod$m('toLocaleString', function toLocaleString() {
		return $toLocaleString.apply(TO_LOCALE_STRING_BUG ? $slice$1.call(aTypedArray$m(this)) : aTypedArray$m(this), arguments);
	}, FORCED$6);

	var exportTypedArrayMethod$n = arrayBufferViewCore.exportTypedArrayMethod;



	var Uint8Array$2 = global_1.Uint8Array;
	var Uint8ArrayPrototype = Uint8Array$2 && Uint8Array$2.prototype || {};
	var arrayToString = [].toString;
	var arrayJoin = [].join;

	if (fails(function () { arrayToString.call({}); })) {
		arrayToString = function toString() {
			return arrayJoin.call(this);
		};
	}

	var IS_NOT_ARRAY_METHOD = Uint8ArrayPrototype.toString != arrayToString;

	// `%TypedArray%.prototype.toString` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.tostring
	exportTypedArrayMethod$n('toString', arrayToString, IS_NOT_ARRAY_METHOD);

	// `URL.prototype.toJSON` method
	// https://url.spec.whatwg.org/#dom-url-tojson
	_export({ target: 'URL', proto: true, enumerable: true }, {
		toJSON: function toJSON() {
			return URL.prototype.toString.call(this);
		}
	});

	var lookup = [];
	var revLookup = [];
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
	var inited = false;

	function init() {
		inited = true;
		var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

		for (var i = 0, len = code.length; i < len; ++i) {
			lookup[i] = code[i];
			revLookup[code.charCodeAt(i)] = i;
		}

		revLookup['-'.charCodeAt(0)] = 62;
		revLookup['_'.charCodeAt(0)] = 63;
	}

	function toByteArray(b64) {
		if (!inited) {
			init();
		}

		var i, j, l, tmp, placeHolders, arr;
		var len = b64.length;

		if (len % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4');
		} // the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice


		placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0; // base64 is 4/3 + up to two characters of the original data

		arr = new Arr(len * 3 / 4 - placeHolders); // if there are placeholders, only get up to the last complete 4 chars

		l = placeHolders > 0 ? len - 4 : len;
		var L = 0;

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
			arr[L++] = tmp >> 16 & 0xFF;
			arr[L++] = tmp >> 8 & 0xFF;
			arr[L++] = tmp & 0xFF;
		}

		if (placeHolders === 2) {
			tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
			arr[L++] = tmp & 0xFF;
		} else if (placeHolders === 1) {
			tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
			arr[L++] = tmp >> 8 & 0xFF;
			arr[L++] = tmp & 0xFF;
		}

		return arr;
	}

	function tripletToBase64(num) {
		return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
	}

	function encodeChunk(uint8, start, end) {
		var tmp;
		var output = [];

		for (var i = start; i < end; i += 3) {
			tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
			output.push(tripletToBase64(tmp));
		}

		return output.join('');
	}

	function fromByteArray(uint8) {
		if (!inited) {
			init();
		}

		var tmp;
		var len = uint8.length;
		var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes

		var output = '';
		var parts = [];
		var maxChunkLength = 16383; // must be multiple of 3
		// go through the array every three bytes, we'll deal with trailing stuff later

		for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
			parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
		} // pad the end with zeros, but make sure to not forget the extra bytes


		if (extraBytes === 1) {
			tmp = uint8[len - 1];
			output += lookup[tmp >> 2];
			output += lookup[tmp << 4 & 0x3F];
			output += '==';
		} else if (extraBytes === 2) {
			tmp = (uint8[len - 2] << 8) + uint8[len - 1];
			output += lookup[tmp >> 10];
			output += lookup[tmp >> 4 & 0x3F];
			output += lookup[tmp << 2 & 0x3F];
			output += '=';
		}

		parts.push(output);
		return parts.join('');
	}

	function read(buffer, offset, isLE, mLen, nBytes) {
		var e, m;
		var eLen = nBytes * 8 - mLen - 1;
		var eMax = (1 << eLen) - 1;
		var eBias = eMax >> 1;
		var nBits = -7;
		var i = isLE ? nBytes - 1 : 0;
		var d = isLE ? -1 : 1;
		var s = buffer[offset + i];
		i += d;
		e = s & (1 << -nBits) - 1;
		s >>= -nBits;
		nBits += eLen;

		for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) { }

		m = e & (1 << -nBits) - 1;
		e >>= -nBits;
		nBits += mLen;

		for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) { }

		if (e === 0) {
			e = 1 - eBias;
		} else if (e === eMax) {
			return m ? NaN : (s ? -1 : 1) * Infinity;
		} else {
			m = m + Math.pow(2, mLen);
			e = e - eBias;
		}

		return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
	}
	function write(buffer, value, offset, isLE, mLen, nBytes) {
		var e, m, c;
		var eLen = nBytes * 8 - mLen - 1;
		var eMax = (1 << eLen) - 1;
		var eBias = eMax >> 1;
		var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
		var i = isLE ? 0 : nBytes - 1;
		var d = isLE ? 1 : -1;
		var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
		value = Math.abs(value);

		if (isNaN(value) || value === Infinity) {
			m = isNaN(value) ? 1 : 0;
			e = eMax;
		} else {
			e = Math.floor(Math.log(value) / Math.LN2);

			if (value * (c = Math.pow(2, -e)) < 1) {
				e--;
				c *= 2;
			}

			if (e + eBias >= 1) {
				value += rt / c;
			} else {
				value += rt * Math.pow(2, 1 - eBias);
			}

			if (value * c >= 2) {
				e++;
				c /= 2;
			}

			if (e + eBias >= eMax) {
				m = 0;
				e = eMax;
			} else if (e + eBias >= 1) {
				m = (value * c - 1) * Math.pow(2, mLen);
				e = e + eBias;
			} else {
				m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
				e = 0;
			}
		}

		for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) { }

		e = e << mLen | m;
		eLen += mLen;

		for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) { }

		buffer[offset + i - d] |= s * 128;
	}

	var toString$2 = {}.toString;
	var isArray$1 = Array.isArray || function (arr) {
		return toString$2.call(arr) == '[object Array]';
	};

	var INSPECT_MAX_BYTES = 50;
	/**
		* If `Buffer.TYPED_ARRAY_SUPPORT`:
		*   === true    Use Uint8Array implementation (fastest)
		*   === false   Use Object implementation (most compatible, even IE6)
		*
		* Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
		* Opera 11.6+, iOS 4.2+.
		*
		* Due to various browser bugs, sometimes the Object implementation will be used even
		* when the browser supports typed arrays.
		*
		* Note:
		*
		*   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
		*     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
		*
		*   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
		*
		*   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
		*     incorrect length in some situations.

		* We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
		* get the Object implementation, which is slower but behaves correctly.
		*/

	Buffer.TYPED_ARRAY_SUPPORT = global$2.TYPED_ARRAY_SUPPORT !== undefined ? global$2.TYPED_ARRAY_SUPPORT : true;

	function kMaxLength() {
		return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
	}

	function createBuffer(that, length) {
		if (kMaxLength() < length) {
			throw new RangeError('Invalid typed array length');
		}

		if (Buffer.TYPED_ARRAY_SUPPORT) {
			// Return an augmented `Uint8Array` instance, for best performance
			that = new Uint8Array(length);
			that.__proto__ = Buffer.prototype;
		} else {
			// Fallback: Return an object instance of the Buffer class
			if (that === null) {
				that = new Buffer(length);
			}

			that.length = length;
		}

		return that;
	}
	/**
		* The Buffer constructor returns instances of `Uint8Array` that have their
		* prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
		* `Uint8Array`, so the returned instances will have all the node `Buffer` methods
		* and the `Uint8Array` methods. Square bracket notation works as expected -- it
		* returns a single octet.
		*
		* The `Uint8Array` prototype remains unmodified.
		*/


	function Buffer(arg, encodingOrOffset, length) {
		if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
			return new Buffer(arg, encodingOrOffset, length);
		} // Common case.


		if (typeof arg === 'number') {
			if (typeof encodingOrOffset === 'string') {
				throw new Error('If encoding is specified then the first argument must be a string');
			}

			return allocUnsafe(this, arg);
		}

		return from(this, arg, encodingOrOffset, length);
	}
	Buffer.poolSize = 8192; // not used by this implementation
	// TODO: Legacy, not needed anymore. Remove in next major version.

	Buffer._augment = function (arr) {
		arr.__proto__ = Buffer.prototype;
		return arr;
	};

	function from(that, value, encodingOrOffset, length) {
		if (typeof value === 'number') {
			throw new TypeError('"value" argument must not be a number');
		}

		if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
			return fromArrayBuffer(that, value, encodingOrOffset, length);
		}

		if (typeof value === 'string') {
			return fromString(that, value, encodingOrOffset);
		}

		return fromObject(that, value);
	}
	/**
		* Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
		* if value is a number.
		* Buffer.from(str[, encoding])
		* Buffer.from(array)
		* Buffer.from(buffer)
		* Buffer.from(arrayBuffer[, byteOffset[, length]])
		**/


	Buffer.from = function (value, encodingOrOffset, length) {
		return from(null, value, encodingOrOffset, length);
	};

	if (Buffer.TYPED_ARRAY_SUPPORT) {
		Buffer.prototype.__proto__ = Uint8Array.prototype;
		Buffer.__proto__ = Uint8Array;
	}

	function assertSize(size) {
		if (typeof size !== 'number') {
			throw new TypeError('"size" argument must be a number');
		} else if (size < 0) {
			throw new RangeError('"size" argument must not be negative');
		}
	}

	function alloc(that, size, fill, encoding) {
		assertSize(size);

		if (size <= 0) {
			return createBuffer(that, size);
		}

		if (fill !== undefined) {
			// Only pay attention to encoding if it's a string. This
			// prevents accidentally sending in a number that would
			// be interpretted as a start offset.
			return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
		}

		return createBuffer(that, size);
	}
	/**
		* Creates a new filled Buffer instance.
		* alloc(size[, fill[, encoding]])
		**/


	Buffer.alloc = function (size, fill, encoding) {
		return alloc(null, size, fill, encoding);
	};

	function allocUnsafe(that, size) {
		assertSize(size);
		that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);

		if (!Buffer.TYPED_ARRAY_SUPPORT) {
			for (var i = 0; i < size; ++i) {
				that[i] = 0;
			}
		}

		return that;
	}
	/**
		* Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
		* */


	Buffer.allocUnsafe = function (size) {
		return allocUnsafe(null, size);
	};
	/**
		* Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
		*/


	Buffer.allocUnsafeSlow = function (size) {
		return allocUnsafe(null, size);
	};

	function fromString(that, string, encoding) {
		if (typeof encoding !== 'string' || encoding === '') {
			encoding = 'utf8';
		}

		if (!Buffer.isEncoding(encoding)) {
			throw new TypeError('"encoding" must be a valid string encoding');
		}

		var length = byteLength(string, encoding) | 0;
		that = createBuffer(that, length);
		var actual = that.write(string, encoding);

		if (actual !== length) {
			// Writing a hex string, for example, that contains invalid characters will
			// cause everything after the first invalid character to be ignored. (e.g.
			// 'abxxcd' will be treated as 'ab')
			that = that.slice(0, actual);
		}

		return that;
	}

	function fromArrayLike(that, array) {
		var length = array.length < 0 ? 0 : checked(array.length) | 0;
		that = createBuffer(that, length);

		for (var i = 0; i < length; i += 1) {
			that[i] = array[i] & 255;
		}

		return that;
	}

	function fromArrayBuffer(that, array, byteOffset, length) {
		array.byteLength; // this throws if `array` is not a valid ArrayBuffer

		if (byteOffset < 0 || array.byteLength < byteOffset) {
			throw new RangeError('\'offset\' is out of bounds');
		}

		if (array.byteLength < byteOffset + (length || 0)) {
			throw new RangeError('\'length\' is out of bounds');
		}

		if (byteOffset === undefined && length === undefined) {
			array = new Uint8Array(array);
		} else if (length === undefined) {
			array = new Uint8Array(array, byteOffset);
		} else {
			array = new Uint8Array(array, byteOffset, length);
		}

		if (Buffer.TYPED_ARRAY_SUPPORT) {
			// Return an augmented `Uint8Array` instance, for best performance
			that = array;
			that.__proto__ = Buffer.prototype;
		} else {
			// Fallback: Return an object instance of the Buffer class
			that = fromArrayLike(that, array);
		}

		return that;
	}

	function fromObject(that, obj) {
		if (internalIsBuffer(obj)) {
			var len = checked(obj.length) | 0;
			that = createBuffer(that, len);

			if (that.length === 0) {
				return that;
			}

			obj.copy(that, 0, 0, len);
			return that;
		}

		if (obj) {
			if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
				if (typeof obj.length !== 'number' || isnan(obj.length)) {
					return createBuffer(that, 0);
				}

				return fromArrayLike(that, obj);
			}

			if (obj.type === 'Buffer' && isArray$1(obj.data)) {
				return fromArrayLike(that, obj.data);
			}
		}

		throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
	}

	function checked(length) {
		// Note: cannot use `length < kMaxLength()` here because that fails when
		// length is NaN (which is otherwise coerced to zero.)
		if (length >= kMaxLength()) {
			throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
		}

		return length | 0;
	}
	Buffer.isBuffer = isBuffer;

	function internalIsBuffer(b) {
		return !!(b != null && b._isBuffer);
	}

	Buffer.compare = function compare(a, b) {
		if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
			throw new TypeError('Arguments must be Buffers');
		}

		if (a === b) return 0;
		var x = a.length;
		var y = b.length;

		for (var i = 0, len = Math.min(x, y); i < len; ++i) {
			if (a[i] !== b[i]) {
				x = a[i];
				y = b[i];
				break;
			}
		}

		if (x < y) return -1;
		if (y < x) return 1;
		return 0;
	};

	Buffer.isEncoding = function isEncoding(encoding) {
		switch (String(encoding).toLowerCase()) {
			case 'hex':
			case 'utf8':
			case 'utf-8':
			case 'ascii':
			case 'latin1':
			case 'binary':
			case 'base64':
			case 'ucs2':
			case 'ucs-2':
			case 'utf16le':
			case 'utf-16le':
				return true;

			default:
				return false;
		}
	};

	Buffer.concat = function concat(list, length) {
		if (!isArray$1(list)) {
			throw new TypeError('"list" argument must be an Array of Buffers');
		}

		if (list.length === 0) {
			return Buffer.alloc(0);
		}

		var i;

		if (length === undefined) {
			length = 0;

			for (i = 0; i < list.length; ++i) {
				length += list[i].length;
			}
		}

		var buffer = Buffer.allocUnsafe(length);
		var pos = 0;

		for (i = 0; i < list.length; ++i) {
			var buf = list[i];

			if (!internalIsBuffer(buf)) {
				throw new TypeError('"list" argument must be an Array of Buffers');
			}

			buf.copy(buffer, pos);
			pos += buf.length;
		}

		return buffer;
	};

	function byteLength(string, encoding) {
		if (internalIsBuffer(string)) {
			return string.length;
		}

		if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
			return string.byteLength;
		}

		if (typeof string !== 'string') {
			string = '' + string;
		}

		var len = string.length;
		if (len === 0) return 0; // Use a for loop to avoid recursion

		var loweredCase = false;

		for (; ;) {
			switch (encoding) {
				case 'ascii':
				case 'latin1':
				case 'binary':
					return len;

				case 'utf8':
				case 'utf-8':
				case undefined:
					return utf8ToBytes(string).length;

				case 'ucs2':
				case 'ucs-2':
				case 'utf16le':
				case 'utf-16le':
					return len * 2;

				case 'hex':
					return len >>> 1;

				case 'base64':
					return base64ToBytes(string).length;

				default:
					if (loweredCase) return utf8ToBytes(string).length; // assume utf8

					encoding = ('' + encoding).toLowerCase();
					loweredCase = true;
			}
		}
	}

	Buffer.byteLength = byteLength;

	function slowToString(encoding, start, end) {
		var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
		// property of a typed array.
		// This behaves neither like String nor Uint8Array in that we set start/end
		// to their upper/lower bounds if the value passed is out of range.
		// undefined is handled specially as per ECMA-262 6th Edition,
		// Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

		if (start === undefined || start < 0) {
			start = 0;
		} // Return early if start > this.length. Done here to prevent potential uint32
		// coercion fail below.


		if (start > this.length) {
			return '';
		}

		if (end === undefined || end > this.length) {
			end = this.length;
		}

		if (end <= 0) {
			return '';
		} // Force coersion to uint32. This will also coerce falsey/NaN values to 0.


		end >>>= 0;
		start >>>= 0;

		if (end <= start) {
			return '';
		}

		if (!encoding) encoding = 'utf8';

		while (true) {
			switch (encoding) {
				case 'hex':
					return hexSlice(this, start, end);

				case 'utf8':
				case 'utf-8':
					return utf8Slice(this, start, end);

				case 'ascii':
					return asciiSlice(this, start, end);

				case 'latin1':
				case 'binary':
					return latin1Slice(this, start, end);

				case 'base64':
					return base64Slice(this, start, end);

				case 'ucs2':
				case 'ucs-2':
				case 'utf16le':
				case 'utf-16le':
					return utf16leSlice(this, start, end);

				default:
					if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
					encoding = (encoding + '').toLowerCase();
					loweredCase = true;
			}
		}
	} // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.


	Buffer.prototype._isBuffer = true;

	function swap(b, n, m) {
		var i = b[n];
		b[n] = b[m];
		b[m] = i;
	}

	Buffer.prototype.swap16 = function swap16() {
		var len = this.length;

		if (len % 2 !== 0) {
			throw new RangeError('Buffer size must be a multiple of 16-bits');
		}

		for (var i = 0; i < len; i += 2) {
			swap(this, i, i + 1);
		}

		return this;
	};

	Buffer.prototype.swap32 = function swap32() {
		var len = this.length;

		if (len % 4 !== 0) {
			throw new RangeError('Buffer size must be a multiple of 32-bits');
		}

		for (var i = 0; i < len; i += 4) {
			swap(this, i, i + 3);
			swap(this, i + 1, i + 2);
		}

		return this;
	};

	Buffer.prototype.swap64 = function swap64() {
		var len = this.length;

		if (len % 8 !== 0) {
			throw new RangeError('Buffer size must be a multiple of 64-bits');
		}

		for (var i = 0; i < len; i += 8) {
			swap(this, i, i + 7);
			swap(this, i + 1, i + 6);
			swap(this, i + 2, i + 5);
			swap(this, i + 3, i + 4);
		}

		return this;
	};

	Buffer.prototype.toString = function toString() {
		var length = this.length | 0;
		if (length === 0) return '';
		if (arguments.length === 0) return utf8Slice(this, 0, length);
		return slowToString.apply(this, arguments);
	};

	Buffer.prototype.equals = function equals(b) {
		if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer');
		if (this === b) return true;
		return Buffer.compare(this, b) === 0;
	};

	Buffer.prototype.inspect = function inspect() {
		var str = '';
		var max = INSPECT_MAX_BYTES;

		if (this.length > 0) {
			str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
			if (this.length > max) str += ' ... ';
		}

		return '<Buffer ' + str + '>';
	};

	Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
		if (!internalIsBuffer(target)) {
			throw new TypeError('Argument must be a Buffer');
		}

		if (start === undefined) {
			start = 0;
		}

		if (end === undefined) {
			end = target ? target.length : 0;
		}

		if (thisStart === undefined) {
			thisStart = 0;
		}

		if (thisEnd === undefined) {
			thisEnd = this.length;
		}

		if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
			throw new RangeError('out of range index');
		}

		if (thisStart >= thisEnd && start >= end) {
			return 0;
		}

		if (thisStart >= thisEnd) {
			return -1;
		}

		if (start >= end) {
			return 1;
		}

		start >>>= 0;
		end >>>= 0;
		thisStart >>>= 0;
		thisEnd >>>= 0;
		if (this === target) return 0;
		var x = thisEnd - thisStart;
		var y = end - start;
		var len = Math.min(x, y);
		var thisCopy = this.slice(thisStart, thisEnd);
		var targetCopy = target.slice(start, end);

		for (var i = 0; i < len; ++i) {
			if (thisCopy[i] !== targetCopy[i]) {
				x = thisCopy[i];
				y = targetCopy[i];
				break;
			}
		}

		if (x < y) return -1;
		if (y < x) return 1;
		return 0;
	}; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf


	function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
		// Empty buffer means no match
		if (buffer.length === 0) return -1; // Normalize byteOffset

		if (typeof byteOffset === 'string') {
			encoding = byteOffset;
			byteOffset = 0;
		} else if (byteOffset > 0x7fffffff) {
			byteOffset = 0x7fffffff;
		} else if (byteOffset < -0x80000000) {
			byteOffset = -0x80000000;
		}

		byteOffset = +byteOffset; // Coerce to Number.

		if (isNaN(byteOffset)) {
			// byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
			byteOffset = dir ? 0 : buffer.length - 1;
		} // Normalize byteOffset: negative offsets start from the end of the buffer


		if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

		if (byteOffset >= buffer.length) {
			if (dir) return -1; else byteOffset = buffer.length - 1;
		} else if (byteOffset < 0) {
			if (dir) byteOffset = 0; else return -1;
		} // Normalize val


		if (typeof val === 'string') {
			val = Buffer.from(val, encoding);
		} // Finally, search either indexOf (if dir is true) or lastIndexOf


		if (internalIsBuffer(val)) {
			// Special case: looking for empty string/buffer always fails
			if (val.length === 0) {
				return -1;
			}

			return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
		} else if (typeof val === 'number') {
			val = val & 0xFF; // Search for a byte value [0-255]

			if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
				if (dir) {
					return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
				} else {
					return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
				}
			}

			return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
		}

		throw new TypeError('val must be string, number or Buffer');
	}

	function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
		var indexSize = 1;
		var arrLength = arr.length;
		var valLength = val.length;

		if (encoding !== undefined) {
			encoding = String(encoding).toLowerCase();

			if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
				if (arr.length < 2 || val.length < 2) {
					return -1;
				}

				indexSize = 2;
				arrLength /= 2;
				valLength /= 2;
				byteOffset /= 2;
			}
		}

		function read(buf, i) {
			if (indexSize === 1) {
				return buf[i];
			} else {
				return buf.readUInt16BE(i * indexSize);
			}
		}

		var i;

		if (dir) {
			var foundIndex = -1;

			for (i = byteOffset; i < arrLength; i++) {
				if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
					if (foundIndex === -1) foundIndex = i;
					if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
				} else {
					if (foundIndex !== -1) i -= i - foundIndex;
					foundIndex = -1;
				}
			}
		} else {
			if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;

			for (i = byteOffset; i >= 0; i--) {
				var found = true;

				for (var j = 0; j < valLength; j++) {
					if (read(arr, i + j) !== read(val, j)) {
						found = false;
						break;
					}
				}

				if (found) return i;
			}
		}

		return -1;
	}

	Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
		return this.indexOf(val, byteOffset, encoding) !== -1;
	};

	Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
		return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
	};

	Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
		return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
	};

	function hexWrite(buf, string, offset, length) {
		offset = Number(offset) || 0;
		var remaining = buf.length - offset;

		if (!length) {
			length = remaining;
		} else {
			length = Number(length);

			if (length > remaining) {
				length = remaining;
			}
		} // must be an even number of digits


		var strLen = string.length;
		if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');

		if (length > strLen / 2) {
			length = strLen / 2;
		}

		for (var i = 0; i < length; ++i) {
			var parsed = parseInt(string.substr(i * 2, 2), 16);
			if (isNaN(parsed)) return i;
			buf[offset + i] = parsed;
		}

		return i;
	}

	function utf8Write(buf, string, offset, length) {
		return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
	}

	function asciiWrite(buf, string, offset, length) {
		return blitBuffer(asciiToBytes(string), buf, offset, length);
	}

	function latin1Write(buf, string, offset, length) {
		return asciiWrite(buf, string, offset, length);
	}

	function base64Write(buf, string, offset, length) {
		return blitBuffer(base64ToBytes(string), buf, offset, length);
	}

	function ucs2Write(buf, string, offset, length) {
		return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
	}

	Buffer.prototype.write = function write(string, offset, length, encoding) {
		// Buffer#write(string)
		if (offset === undefined) {
			encoding = 'utf8';
			length = this.length;
			offset = 0; // Buffer#write(string, encoding)
		} else if (length === undefined && typeof offset === 'string') {
			encoding = offset;
			length = this.length;
			offset = 0; // Buffer#write(string, offset[, length][, encoding])
		} else if (isFinite(offset)) {
			offset = offset | 0;

			if (isFinite(length)) {
				length = length | 0;
				if (encoding === undefined) encoding = 'utf8';
			} else {
				encoding = length;
				length = undefined;
			} // legacy write(string, encoding, offset, length) - remove in v0.13

		} else {
			throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
		}

		var remaining = this.length - offset;
		if (length === undefined || length > remaining) length = remaining;

		if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
			throw new RangeError('Attempt to write outside buffer bounds');
		}

		if (!encoding) encoding = 'utf8';
		var loweredCase = false;

		for (; ;) {
			switch (encoding) {
				case 'hex':
					return hexWrite(this, string, offset, length);

				case 'utf8':
				case 'utf-8':
					return utf8Write(this, string, offset, length);

				case 'ascii':
					return asciiWrite(this, string, offset, length);

				case 'latin1':
				case 'binary':
					return latin1Write(this, string, offset, length);

				case 'base64':
					// Warning: maxLength not taken into account in base64Write
					return base64Write(this, string, offset, length);

				case 'ucs2':
				case 'ucs-2':
				case 'utf16le':
				case 'utf-16le':
					return ucs2Write(this, string, offset, length);

				default:
					if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
					encoding = ('' + encoding).toLowerCase();
					loweredCase = true;
			}
		}
	};

	Buffer.prototype.toJSON = function toJSON() {
		return {
			type: 'Buffer',
			data: Array.prototype.slice.call(this._arr || this, 0)
		};
	};

	function base64Slice(buf, start, end) {
		if (start === 0 && end === buf.length) {
			return fromByteArray(buf);
		} else {
			return fromByteArray(buf.slice(start, end));
		}
	}

	function utf8Slice(buf, start, end) {
		end = Math.min(buf.length, end);
		var res = [];
		var i = start;

		while (i < end) {
			var firstByte = buf[i];
			var codePoint = null;
			var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

			if (i + bytesPerSequence <= end) {
				var secondByte, thirdByte, fourthByte, tempCodePoint;

				switch (bytesPerSequence) {
					case 1:
						if (firstByte < 0x80) {
							codePoint = firstByte;
						}

						break;

					case 2:
						secondByte = buf[i + 1];

						if ((secondByte & 0xC0) === 0x80) {
							tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;

							if (tempCodePoint > 0x7F) {
								codePoint = tempCodePoint;
							}
						}

						break;

					case 3:
						secondByte = buf[i + 1];
						thirdByte = buf[i + 2];

						if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
							tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;

							if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
								codePoint = tempCodePoint;
							}
						}

						break;

					case 4:
						secondByte = buf[i + 1];
						thirdByte = buf[i + 2];
						fourthByte = buf[i + 3];

						if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
							tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;

							if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
								codePoint = tempCodePoint;
							}
						}

				}
			}

			if (codePoint === null) {
				// we did not generate a valid codePoint so insert a
				// replacement char (U+FFFD) and advance only 1 byte
				codePoint = 0xFFFD;
				bytesPerSequence = 1;
			} else if (codePoint > 0xFFFF) {
				// encode to utf16 (surrogate pair dance)
				codePoint -= 0x10000;
				res.push(codePoint >>> 10 & 0x3FF | 0xD800);
				codePoint = 0xDC00 | codePoint & 0x3FF;
			}

			res.push(codePoint);
			i += bytesPerSequence;
		}

		return decodeCodePointsArray(res);
	} // Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety


	var MAX_ARGUMENTS_LENGTH = 0x1000;

	function decodeCodePointsArray(codePoints) {
		var len = codePoints.length;

		if (len <= MAX_ARGUMENTS_LENGTH) {
			return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
		} // Decode in chunks to avoid "call stack size exceeded".


		var res = '';
		var i = 0;

		while (i < len) {
			res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
		}

		return res;
	}

	function asciiSlice(buf, start, end) {
		var ret = '';
		end = Math.min(buf.length, end);

		for (var i = start; i < end; ++i) {
			ret += String.fromCharCode(buf[i] & 0x7F);
		}

		return ret;
	}

	function latin1Slice(buf, start, end) {
		var ret = '';
		end = Math.min(buf.length, end);

		for (var i = start; i < end; ++i) {
			ret += String.fromCharCode(buf[i]);
		}

		return ret;
	}

	function hexSlice(buf, start, end) {
		var len = buf.length;
		if (!start || start < 0) start = 0;
		if (!end || end < 0 || end > len) end = len;
		var out = '';

		for (var i = start; i < end; ++i) {
			out += toHex(buf[i]);
		}

		return out;
	}

	function utf16leSlice(buf, start, end) {
		var bytes = buf.slice(start, end);
		var res = '';

		for (var i = 0; i < bytes.length; i += 2) {
			res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
		}

		return res;
	}

	Buffer.prototype.slice = function slice(start, end) {
		var len = this.length;
		start = ~~start;
		end = end === undefined ? len : ~~end;

		if (start < 0) {
			start += len;
			if (start < 0) start = 0;
		} else if (start > len) {
			start = len;
		}

		if (end < 0) {
			end += len;
			if (end < 0) end = 0;
		} else if (end > len) {
			end = len;
		}

		if (end < start) end = start;
		var newBuf;

		if (Buffer.TYPED_ARRAY_SUPPORT) {
			newBuf = this.subarray(start, end);
			newBuf.__proto__ = Buffer.prototype;
		} else {
			var sliceLen = end - start;
			newBuf = new Buffer(sliceLen, undefined);

			for (var i = 0; i < sliceLen; ++i) {
				newBuf[i] = this[i + start];
			}
		}

		return newBuf;
	};
	/*
		* Need to make sure that buffer isn't trying to write out of bounds.
		*/


	function checkOffset(offset, ext, length) {
		if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
		if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
	}

	Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
		offset = offset | 0;
		byteLength = byteLength | 0;
		if (!noAssert) checkOffset(offset, byteLength, this.length);
		var val = this[offset];
		var mul = 1;
		var i = 0;

		while (++i < byteLength && (mul *= 0x100)) {
			val += this[offset + i] * mul;
		}

		return val;
	};

	Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
		offset = offset | 0;
		byteLength = byteLength | 0;

		if (!noAssert) {
			checkOffset(offset, byteLength, this.length);
		}

		var val = this[offset + --byteLength];
		var mul = 1;

		while (byteLength > 0 && (mul *= 0x100)) {
			val += this[offset + --byteLength] * mul;
		}

		return val;
	};

	Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
		if (!noAssert) checkOffset(offset, 1, this.length);
		return this[offset];
	};

	Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
		if (!noAssert) checkOffset(offset, 2, this.length);
		return this[offset] | this[offset + 1] << 8;
	};

	Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
		if (!noAssert) checkOffset(offset, 2, this.length);
		return this[offset] << 8 | this[offset + 1];
	};

	Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
		if (!noAssert) checkOffset(offset, 4, this.length);
		return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
	};

	Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
		if (!noAssert) checkOffset(offset, 4, this.length);
		return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
	};

	Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
		offset = offset | 0;
		byteLength = byteLength | 0;
		if (!noAssert) checkOffset(offset, byteLength, this.length);
		var val = this[offset];
		var mul = 1;
		var i = 0;

		while (++i < byteLength && (mul *= 0x100)) {
			val += this[offset + i] * mul;
		}

		mul *= 0x80;
		if (val >= mul) val -= Math.pow(2, 8 * byteLength);
		return val;
	};

	Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
		offset = offset | 0;
		byteLength = byteLength | 0;
		if (!noAssert) checkOffset(offset, byteLength, this.length);
		var i = byteLength;
		var mul = 1;
		var val = this[offset + --i];

		while (i > 0 && (mul *= 0x100)) {
			val += this[offset + --i] * mul;
		}

		mul *= 0x80;
		if (val >= mul) val -= Math.pow(2, 8 * byteLength);
		return val;
	};

	Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
		if (!noAssert) checkOffset(offset, 1, this.length);
		if (!(this[offset] & 0x80)) return this[offset];
		return (0xff - this[offset] + 1) * -1;
	};

	Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
		if (!noAssert) checkOffset(offset, 2, this.length);
		var val = this[offset] | this[offset + 1] << 8;
		return val & 0x8000 ? val | 0xFFFF0000 : val;
	};

	Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
		if (!noAssert) checkOffset(offset, 2, this.length);
		var val = this[offset + 1] | this[offset] << 8;
		return val & 0x8000 ? val | 0xFFFF0000 : val;
	};

	Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
		if (!noAssert) checkOffset(offset, 4, this.length);
		return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
	};

	Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
		if (!noAssert) checkOffset(offset, 4, this.length);
		return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
	};

	Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
		if (!noAssert) checkOffset(offset, 4, this.length);
		return read(this, offset, true, 23, 4);
	};

	Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
		if (!noAssert) checkOffset(offset, 4, this.length);
		return read(this, offset, false, 23, 4);
	};

	Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
		if (!noAssert) checkOffset(offset, 8, this.length);
		return read(this, offset, true, 52, 8);
	};

	Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
		if (!noAssert) checkOffset(offset, 8, this.length);
		return read(this, offset, false, 52, 8);
	};

	function checkInt(buf, value, offset, ext, max, min) {
		if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
		if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
		if (offset + ext > buf.length) throw new RangeError('Index out of range');
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
		value = +value;
		offset = offset | 0;
		byteLength = byteLength | 0;

		if (!noAssert) {
			var maxBytes = Math.pow(2, 8 * byteLength) - 1;
			checkInt(this, value, offset, byteLength, maxBytes, 0);
		}

		var mul = 1;
		var i = 0;
		this[offset] = value & 0xFF;

		while (++i < byteLength && (mul *= 0x100)) {
			this[offset + i] = value / mul & 0xFF;
		}

		return offset + byteLength;
	};

	Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
		value = +value;
		offset = offset | 0;
		byteLength = byteLength | 0;

		if (!noAssert) {
			var maxBytes = Math.pow(2, 8 * byteLength) - 1;
			checkInt(this, value, offset, byteLength, maxBytes, 0);
		}

		var i = byteLength - 1;
		var mul = 1;
		this[offset + i] = value & 0xFF;

		while (--i >= 0 && (mul *= 0x100)) {
			this[offset + i] = value / mul & 0xFF;
		}

		return offset + byteLength;
	};

	Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
		value = +value;
		offset = offset | 0;
		if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
		if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
		this[offset] = value & 0xff;
		return offset + 1;
	};

	function objectWriteUInt16(buf, value, offset, littleEndian) {
		if (value < 0) value = 0xffff + value + 1;

		for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
			buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
		}
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
		value = +value;
		offset = offset | 0;
		if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

		if (Buffer.TYPED_ARRAY_SUPPORT) {
			this[offset] = value & 0xff;
			this[offset + 1] = value >>> 8;
		} else {
			objectWriteUInt16(this, value, offset, true);
		}

		return offset + 2;
	};

	Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
		value = +value;
		offset = offset | 0;
		if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

		if (Buffer.TYPED_ARRAY_SUPPORT) {
			this[offset] = value >>> 8;
			this[offset + 1] = value & 0xff;
		} else {
			objectWriteUInt16(this, value, offset, false);
		}

		return offset + 2;
	};

	function objectWriteUInt32(buf, value, offset, littleEndian) {
		if (value < 0) value = 0xffffffff + value + 1;

		for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
			buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
		}
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
		value = +value;
		offset = offset | 0;
		if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

		if (Buffer.TYPED_ARRAY_SUPPORT) {
			this[offset + 3] = value >>> 24;
			this[offset + 2] = value >>> 16;
			this[offset + 1] = value >>> 8;
			this[offset] = value & 0xff;
		} else {
			objectWriteUInt32(this, value, offset, true);
		}

		return offset + 4;
	};

	Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
		value = +value;
		offset = offset | 0;
		if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

		if (Buffer.TYPED_ARRAY_SUPPORT) {
			this[offset] = value >>> 24;
			this[offset + 1] = value >>> 16;
			this[offset + 2] = value >>> 8;
			this[offset + 3] = value & 0xff;
		} else {
			objectWriteUInt32(this, value, offset, false);
		}

		return offset + 4;
	};

	Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
		value = +value;
		offset = offset | 0;

		if (!noAssert) {
			var limit = Math.pow(2, 8 * byteLength - 1);
			checkInt(this, value, offset, byteLength, limit - 1, -limit);
		}

		var i = 0;
		var mul = 1;
		var sub = 0;
		this[offset] = value & 0xFF;

		while (++i < byteLength && (mul *= 0x100)) {
			if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
				sub = 1;
			}

			this[offset + i] = (value / mul >> 0) - sub & 0xFF;
		}

		return offset + byteLength;
	};

	Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
		value = +value;
		offset = offset | 0;

		if (!noAssert) {
			var limit = Math.pow(2, 8 * byteLength - 1);
			checkInt(this, value, offset, byteLength, limit - 1, -limit);
		}

		var i = byteLength - 1;
		var mul = 1;
		var sub = 0;
		this[offset + i] = value & 0xFF;

		while (--i >= 0 && (mul *= 0x100)) {
			if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
				sub = 1;
			}

			this[offset + i] = (value / mul >> 0) - sub & 0xFF;
		}

		return offset + byteLength;
	};

	Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
		value = +value;
		offset = offset | 0;
		if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
		if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
		if (value < 0) value = 0xff + value + 1;
		this[offset] = value & 0xff;
		return offset + 1;
	};

	Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
		value = +value;
		offset = offset | 0;
		if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

		if (Buffer.TYPED_ARRAY_SUPPORT) {
			this[offset] = value & 0xff;
			this[offset + 1] = value >>> 8;
		} else {
			objectWriteUInt16(this, value, offset, true);
		}

		return offset + 2;
	};

	Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
		value = +value;
		offset = offset | 0;
		if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

		if (Buffer.TYPED_ARRAY_SUPPORT) {
			this[offset] = value >>> 8;
			this[offset + 1] = value & 0xff;
		} else {
			objectWriteUInt16(this, value, offset, false);
		}

		return offset + 2;
	};

	Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
		value = +value;
		offset = offset | 0;
		if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);

		if (Buffer.TYPED_ARRAY_SUPPORT) {
			this[offset] = value & 0xff;
			this[offset + 1] = value >>> 8;
			this[offset + 2] = value >>> 16;
			this[offset + 3] = value >>> 24;
		} else {
			objectWriteUInt32(this, value, offset, true);
		}

		return offset + 4;
	};

	Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
		value = +value;
		offset = offset | 0;
		if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
		if (value < 0) value = 0xffffffff + value + 1;

		if (Buffer.TYPED_ARRAY_SUPPORT) {
			this[offset] = value >>> 24;
			this[offset + 1] = value >>> 16;
			this[offset + 2] = value >>> 8;
			this[offset + 3] = value & 0xff;
		} else {
			objectWriteUInt32(this, value, offset, false);
		}

		return offset + 4;
	};

	function checkIEEE754(buf, value, offset, ext, max, min) {
		if (offset + ext > buf.length) throw new RangeError('Index out of range');
		if (offset < 0) throw new RangeError('Index out of range');
	}

	function writeFloat(buf, value, offset, littleEndian, noAssert) {
		if (!noAssert) {
			checkIEEE754(buf, value, offset, 4);
		}

		write(buf, value, offset, littleEndian, 23, 4);
		return offset + 4;
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
		return writeFloat(this, value, offset, true, noAssert);
	};

	Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
		return writeFloat(this, value, offset, false, noAssert);
	};

	function writeDouble(buf, value, offset, littleEndian, noAssert) {
		if (!noAssert) {
			checkIEEE754(buf, value, offset, 8);
		}

		write(buf, value, offset, littleEndian, 52, 8);
		return offset + 8;
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
		return writeDouble(this, value, offset, true, noAssert);
	};

	Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
		return writeDouble(this, value, offset, false, noAssert);
	}; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)


	Buffer.prototype.copy = function copy(target, targetStart, start, end) {
		if (!start) start = 0;
		if (!end && end !== 0) end = this.length;
		if (targetStart >= target.length) targetStart = target.length;
		if (!targetStart) targetStart = 0;
		if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done

		if (end === start) return 0;
		if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions

		if (targetStart < 0) {
			throw new RangeError('targetStart out of bounds');
		}

		if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
		if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?

		if (end > this.length) end = this.length;

		if (target.length - targetStart < end - start) {
			end = target.length - targetStart + start;
		}

		var len = end - start;
		var i;

		if (this === target && start < targetStart && targetStart < end) {
			// descending copy from end
			for (i = len - 1; i >= 0; --i) {
				target[i + targetStart] = this[i + start];
			}
		} else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
			// ascending copy from start
			for (i = 0; i < len; ++i) {
				target[i + targetStart] = this[i + start];
			}
		} else {
			Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
		}

		return len;
	}; // Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])


	Buffer.prototype.fill = function fill(val, start, end, encoding) {
		// Handle string cases:
		if (typeof val === 'string') {
			if (typeof start === 'string') {
				encoding = start;
				start = 0;
				end = this.length;
			} else if (typeof end === 'string') {
				encoding = end;
				end = this.length;
			}

			if (val.length === 1) {
				var code = val.charCodeAt(0);

				if (code < 256) {
					val = code;
				}
			}

			if (encoding !== undefined && typeof encoding !== 'string') {
				throw new TypeError('encoding must be a string');
			}

			if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
				throw new TypeError('Unknown encoding: ' + encoding);
			}
		} else if (typeof val === 'number') {
			val = val & 255;
		} // Invalid ranges are not set to a default, so can range check early.


		if (start < 0 || this.length < start || this.length < end) {
			throw new RangeError('Out of range index');
		}

		if (end <= start) {
			return this;
		}

		start = start >>> 0;
		end = end === undefined ? this.length : end >>> 0;
		if (!val) val = 0;
		var i;

		if (typeof val === 'number') {
			for (i = start; i < end; ++i) {
				this[i] = val;
			}
		} else {
			var bytes = internalIsBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
			var len = bytes.length;

			for (i = 0; i < end - start; ++i) {
				this[i + start] = bytes[i % len];
			}
		}

		return this;
	}; // HELPER FUNCTIONS
	// ================


	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

	function base64clean(str) {
		// Node strips out invalid characters like \n and \t from the string, base64-js does not
		str = stringtrim(str).replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''

		if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

		while (str.length % 4 !== 0) {
			str = str + '=';
		}

		return str;
	}

	function stringtrim(str) {
		if (str.trim) return str.trim();
		return str.replace(/^\s+|\s+$/g, '');
	}

	function toHex(n) {
		if (n < 16) return '0' + n.toString(16);
		return n.toString(16);
	}

	function utf8ToBytes(string, units) {
		units = units || Infinity;
		var codePoint;
		var length = string.length;
		var leadSurrogate = null;
		var bytes = [];

		for (var i = 0; i < length; ++i) {
			codePoint = string.charCodeAt(i); // is surrogate component

			if (codePoint > 0xD7FF && codePoint < 0xE000) {
				// last char was a lead
				if (!leadSurrogate) {
					// no lead yet
					if (codePoint > 0xDBFF) {
						// unexpected trail
						if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
						continue;
					} else if (i + 1 === length) {
						// unpaired lead
						if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
						continue;
					} // valid lead


					leadSurrogate = codePoint;
					continue;
				} // 2 leads in a row


				if (codePoint < 0xDC00) {
					if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
					leadSurrogate = codePoint;
					continue;
				} // valid surrogate pair


				codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
			} else if (leadSurrogate) {
				// valid bmp char, but last char was a lead
				if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
			}

			leadSurrogate = null; // encode utf8

			if (codePoint < 0x80) {
				if ((units -= 1) < 0) break;
				bytes.push(codePoint);
			} else if (codePoint < 0x800) {
				if ((units -= 2) < 0) break;
				bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
			} else if (codePoint < 0x10000) {
				if ((units -= 3) < 0) break;
				bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
			} else if (codePoint < 0x110000) {
				if ((units -= 4) < 0) break;
				bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
			} else {
				throw new Error('Invalid code point');
			}
		}

		return bytes;
	}

	function asciiToBytes(str) {
		var byteArray = [];

		for (var i = 0; i < str.length; ++i) {
			// Node's code seems to be doing this and not & 0x7F..
			byteArray.push(str.charCodeAt(i) & 0xFF);
		}

		return byteArray;
	}

	function utf16leToBytes(str, units) {
		var c, hi, lo;
		var byteArray = [];

		for (var i = 0; i < str.length; ++i) {
			if ((units -= 2) < 0) break;
			c = str.charCodeAt(i);
			hi = c >> 8;
			lo = c % 256;
			byteArray.push(lo);
			byteArray.push(hi);
		}

		return byteArray;
	}

	function base64ToBytes(str) {
		return toByteArray(base64clean(str));
	}

	function blitBuffer(src, dst, offset, length) {
		for (var i = 0; i < length; ++i) {
			if (i + offset >= dst.length || i >= src.length) break;
			dst[i + offset] = src[i];
		}

		return i;
	}

	function isnan(val) {
		return val !== val; // eslint-disable-line no-self-compare
	} // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
	// The _isBuffer check is for Safari 5-7 support, because it's missing
	// Object.prototype.constructor. Remove this eventually


	function isBuffer(obj) {
		return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj));
	}

	function isFastBuffer(obj) {
		return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
	} // For Node v0.10 support. Remove this eventually.


	function isSlowBuffer(obj) {
		return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0));
	}

	// based off https://github.com/defunctzombie/node-process/blob/master/browser.js

	function defaultSetTimout$1() {
		throw new Error('setTimeout has not been defined');
	}

	function defaultClearTimeout$1() {
		throw new Error('clearTimeout has not been defined');
	}

	var cachedSetTimeout$1 = defaultSetTimout$1;
	var cachedClearTimeout$1 = defaultClearTimeout$1;

	if (typeof global$2.setTimeout === 'function') {
		cachedSetTimeout$1 = setTimeout;
	}

	if (typeof global$2.clearTimeout === 'function') {
		cachedClearTimeout$1 = clearTimeout;
	}

	function runTimeout$1(fun) {
		if (cachedSetTimeout$1 === setTimeout) {
			//normal enviroments in sane situations
			return setTimeout(fun, 0);
		} // if setTimeout wasn't available but was latter defined


		if ((cachedSetTimeout$1 === defaultSetTimout$1 || !cachedSetTimeout$1) && setTimeout) {
			cachedSetTimeout$1 = setTimeout;
			return setTimeout(fun, 0);
		}

		try {
			// when when somebody has screwed with setTimeout but no I.E. maddness
			return cachedSetTimeout$1(fun, 0);
		} catch (e) {
			try {
				// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
				return cachedSetTimeout$1.call(null, fun, 0);
			} catch (e) {
				// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
				return cachedSetTimeout$1.call(this, fun, 0);
			}
		}
	}

	function runClearTimeout$1(marker) {
		if (cachedClearTimeout$1 === clearTimeout) {
			//normal enviroments in sane situations
			return clearTimeout(marker);
		} // if clearTimeout wasn't available but was latter defined


		if ((cachedClearTimeout$1 === defaultClearTimeout$1 || !cachedClearTimeout$1) && clearTimeout) {
			cachedClearTimeout$1 = clearTimeout;
			return clearTimeout(marker);
		}

		try {
			// when when somebody has screwed with setTimeout but no I.E. maddness
			return cachedClearTimeout$1(marker);
		} catch (e) {
			try {
				// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
				return cachedClearTimeout$1.call(null, marker);
			} catch (e) {
				// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
				// Some versions of I.E. have different rules for clearTimeout vs setTimeout
				return cachedClearTimeout$1.call(this, marker);
			}
		}
	}

	var queue$1 = [];
	var draining$1 = false;
	var currentQueue$1;
	var queueIndex$1 = -1;

	function cleanUpNextTick$1() {
		if (!draining$1 || !currentQueue$1) {
			return;
		}

		draining$1 = false;

		if (currentQueue$1.length) {
			queue$1 = currentQueue$1.concat(queue$1);
		} else {
			queueIndex$1 = -1;
		}

		if (queue$1.length) {
			drainQueue$1();
		}
	}

	function drainQueue$1() {
		if (draining$1) {
			return;
		}

		var timeout = runTimeout$1(cleanUpNextTick$1);
		draining$1 = true;
		var len = queue$1.length;

		while (len) {
			currentQueue$1 = queue$1;
			queue$1 = [];

			while (++queueIndex$1 < len) {
				if (currentQueue$1) {
					currentQueue$1[queueIndex$1].run();
				}
			}

			queueIndex$1 = -1;
			len = queue$1.length;
		}

		currentQueue$1 = null;
		draining$1 = false;
		runClearTimeout$1(timeout);
	}

	function nextTick$1(fun) {
		var args = new Array(arguments.length - 1);

		if (arguments.length > 1) {
			for (var i = 1; i < arguments.length; i++) {
				args[i - 1] = arguments[i];
			}
		}

		queue$1.push(new Item$1(fun, args));

		if (queue$1.length === 1 && !draining$1) {
			runTimeout$1(drainQueue$1);
		}
	} // v8 likes predictible objects


	function Item$1(fun, array) {
		this.fun = fun;
		this.array = array;
	}

	Item$1.prototype.run = function () {
		this.fun.apply(null, this.array);
	};


	var performance$1 = global$2.performance || {};

	var performanceNow$1 = performance$1.now || performance$1.mozNow || performance$1.msNow || performance$1.oNow || performance$1.webkitNow || function () {
		return new Date().getTime();
	}; // generate timestamp or delta

	var inherits;

	if (typeof Object.create === 'function') {
		inherits = function inherits(ctor, superCtor) {
			// implementation from standard node.js 'util' module
			ctor.super_ = superCtor;
			ctor.prototype = Object.create(superCtor.prototype, {
				constructor: {
					value: ctor,
					enumerable: false,
					writable: true,
					configurable: true
				}
			});
		};
	} else {
		inherits = function inherits(ctor, superCtor) {
			ctor.super_ = superCtor;

			var TempCtor = function TempCtor() { };

			TempCtor.prototype = superCtor.prototype;
			ctor.prototype = new TempCtor();
			ctor.prototype.constructor = ctor;
		};
	}

	var inherits$1 = inherits;

	var formatRegExp = /%[sdj%]/g;
	function format(f) {
		if (!isString(f)) {
			var objects = [];

			for (var i = 0; i < arguments.length; i++) {
				objects.push(inspect(arguments[i]));
			}

			return objects.join(' ');
		}

		var i = 1;
		var args = arguments;
		var len = args.length;
		var str = String(f).replace(formatRegExp, function (x) {
			if (x === '%%') return '%';
			if (i >= len) return x;

			switch (x) {
				case '%s':
					return String(args[i++]);

				case '%d':
					return Number(args[i++]);

				case '%j':
					try {
						return JSON.stringify(args[i++]);
					} catch (_) {
						return '[Circular]';
					}

				default:
					return x;
			}
		});

		for (var x = args[i]; i < len; x = args[++i]) {
			if (isNull(x) || !isObject$1(x)) {
				str += ' ' + x;
			} else {
				str += ' ' + inspect(x);
			}
		}

		return str;
	}
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.

	function deprecate(fn, msg) {
		// Allow for deprecating things in the process of starting up.
		if (isUndefined(global$2.process)) {
			return function () {
				return deprecate(fn, msg).apply(this, arguments);
			};
		}

		var warned = false;

		function deprecated() {
			if (!warned) {
				{
					console.error(msg);
				}

				warned = true;
			}

			return fn.apply(this, arguments);
		}

		return deprecated;
	}
	var debugs = {};
	var debugEnviron;
	function debuglog(set) {
		if (isUndefined(debugEnviron)) debugEnviron = '';
		set = set.toUpperCase();

		if (!debugs[set]) {
			if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
				var pid = 0;

				debugs[set] = function () {
					var msg = format.apply(null, arguments);
					console.error('%s %d: %s', set, pid, msg);
				};
			} else {
				debugs[set] = function () { };
			}
		}

		return debugs[set];
	}
	/**
		* Echos the value of a value. Trys to print the value out
		* in the best way possible given the different types.
		*
		* @param {Object} obj The object to print out.
		* @param {Object} opts Optional options object that alters the output.
		*/

	/* legacy: obj, showHidden, depth, colors*/

	function inspect(obj, opts) {
		// default options
		var ctx = {
			seen: [],
			stylize: stylizeNoColor
		}; // legacy...

		if (arguments.length >= 3) ctx.depth = arguments[2];
		if (arguments.length >= 4) ctx.colors = arguments[3];

		if (isBoolean(opts)) {
			// legacy...
			ctx.showHidden = opts;
		} else if (opts) {
			// got an "options" object
			_extend(ctx, opts);
		} // set default options


		if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
		if (isUndefined(ctx.depth)) ctx.depth = 2;
		if (isUndefined(ctx.colors)) ctx.colors = false;
		if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
		if (ctx.colors) ctx.stylize = stylizeWithColor;
		return formatValue(ctx, obj, ctx.depth);
	} // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics

	inspect.colors = {
		'bold': [1, 22],
		'italic': [3, 23],
		'underline': [4, 24],
		'inverse': [7, 27],
		'white': [37, 39],
		'grey': [90, 39],
		'black': [30, 39],
		'blue': [34, 39],
		'cyan': [36, 39],
		'green': [32, 39],
		'magenta': [35, 39],
		'red': [31, 39],
		'yellow': [33, 39]
	}; // Don't use 'blue' not visible on cmd.exe

	inspect.styles = {
		'special': 'cyan',
		'number': 'yellow',
		'boolean': 'yellow',
		'undefined': 'grey',
		'null': 'bold',
		'string': 'green',
		'date': 'magenta',
		// "name": intentionally not styling
		'regexp': 'red'
	};

	function stylizeWithColor(str, styleType) {
		var style = inspect.styles[styleType];

		if (style) {
			return "\x1B[" + inspect.colors[style][0] + 'm' + str + "\x1B[" + inspect.colors[style][1] + 'm';
		} else {
			return str;
		}
	}

	function stylizeNoColor(str, styleType) {
		return str;
	}

	function arrayToHash(array) {
		var hash = {};
		array.forEach(function (val, idx) {
			hash[val] = true;
		});
		return hash;
	}

	function formatValue(ctx, value, recurseTimes) {
		// Provide a hook for user-specified inspect functions.
		// Check that value is an object with an inspect function on it
		if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
			value.inspect !== inspect && // Also filter out any prototype objects using the circular check.
			!(value.constructor && value.constructor.prototype === value)) {
			var ret = value.inspect(recurseTimes, ctx);

			if (!isString(ret)) {
				ret = formatValue(ctx, ret, recurseTimes);
			}

			return ret;
		} // Primitive types cannot have properties


		var primitive = formatPrimitive(ctx, value);

		if (primitive) {
			return primitive;
		} // Look up the keys of the object.


		var keys = Object.keys(value);
		var visibleKeys = arrayToHash(keys);

		if (ctx.showHidden) {
			keys = Object.getOwnPropertyNames(value);
		} // IE doesn't make error fields non-enumerable
		// http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx


		if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
			return formatError(value);
		} // Some type of object without properties can be shortcutted.


		if (keys.length === 0) {
			if (isFunction(value)) {
				var name = value.name ? ': ' + value.name : '';
				return ctx.stylize('[Function' + name + ']', 'special');
			}

			if (isRegExp(value)) {
				return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
			}

			if (isDate(value)) {
				return ctx.stylize(Date.prototype.toString.call(value), 'date');
			}

			if (isError(value)) {
				return formatError(value);
			}
		}

		var base = '',
			array = false,
			braces = ['{', '}']; // Make Array say that they are Array

		if (isArray$2(value)) {
			array = true;
			braces = ['[', ']'];
		} // Make functions say that they are functions


		if (isFunction(value)) {
			var n = value.name ? ': ' + value.name : '';
			base = ' [Function' + n + ']';
		} // Make RegExps say that they are RegExps


		if (isRegExp(value)) {
			base = ' ' + RegExp.prototype.toString.call(value);
		} // Make dates with properties first say the date


		if (isDate(value)) {
			base = ' ' + Date.prototype.toUTCString.call(value);
		} // Make error with message first say the error


		if (isError(value)) {
			base = ' ' + formatError(value);
		}

		if (keys.length === 0 && (!array || value.length == 0)) {
			return braces[0] + base + braces[1];
		}

		if (recurseTimes < 0) {
			if (isRegExp(value)) {
				return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
			} else {
				return ctx.stylize('[Object]', 'special');
			}
		}

		ctx.seen.push(value);
		var output;

		if (array) {
			output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
		} else {
			output = keys.map(function (key) {
				return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
			});
		}

		ctx.seen.pop();
		return reduceToSingleString(output, base, braces);
	}

	function formatPrimitive(ctx, value) {
		if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');

		if (isString(value)) {
			var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
			return ctx.stylize(simple, 'string');
		}

		if (isNumber(value)) return ctx.stylize('' + value, 'number');
		if (isBoolean(value)) return ctx.stylize('' + value, 'boolean'); // For some reason typeof null is "object", so special case here.

		if (isNull(value)) return ctx.stylize('null', 'null');
	}

	function formatError(value) {
		return '[' + Error.prototype.toString.call(value) + ']';
	}

	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
		var output = [];

		for (var i = 0, l = value.length; i < l; ++i) {
			if (hasOwnProperty$1(value, String(i))) {
				output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
			} else {
				output.push('');
			}
		}

		keys.forEach(function (key) {
			if (!key.match(/^\d+$/)) {
				output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
			}
		});
		return output;
	}

	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
		var name, str, desc;
		desc = Object.getOwnPropertyDescriptor(value, key) || {
			value: value[key]
		};

		if (desc.get) {
			if (desc.set) {
				str = ctx.stylize('[Getter/Setter]', 'special');
			} else {
				str = ctx.stylize('[Getter]', 'special');
			}
		} else {
			if (desc.set) {
				str = ctx.stylize('[Setter]', 'special');
			}
		}

		if (!hasOwnProperty$1(visibleKeys, key)) {
			name = '[' + key + ']';
		}

		if (!str) {
			if (ctx.seen.indexOf(desc.value) < 0) {
				if (isNull(recurseTimes)) {
					str = formatValue(ctx, desc.value, null);
				} else {
					str = formatValue(ctx, desc.value, recurseTimes - 1);
				}

				if (str.indexOf('\n') > -1) {
					if (array) {
						str = str.split('\n').map(function (line) {
							return '  ' + line;
						}).join('\n').substr(2);
					} else {
						str = '\n' + str.split('\n').map(function (line) {
							return '   ' + line;
						}).join('\n');
					}
				}
			} else {
				str = ctx.stylize('[Circular]', 'special');
			}
		}

		if (isUndefined(name)) {
			if (array && key.match(/^\d+$/)) {
				return str;
			}

			name = JSON.stringify('' + key);

			if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
				name = name.substr(1, name.length - 2);
				name = ctx.stylize(name, 'name');
			} else {
				name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
				name = ctx.stylize(name, 'string');
			}
		}

		return name + ': ' + str;
	}

	function reduceToSingleString(output, base, braces) {
		var length = output.reduce(function (prev, cur) {
			if (cur.indexOf('\n') >= 0);
			return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
		}, 0);

		if (length > 60) {
			return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
		}

		return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	} // NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.


	function isArray$2(ar) {
		return Array.isArray(ar);
	}
	function isBoolean(arg) {
		return typeof arg === 'boolean';
	}
	function isNull(arg) {
		return arg === null;
	}
	function isNullOrUndefined(arg) {
		return arg == null;
	}
	function isNumber(arg) {
		return typeof arg === 'number';
	}
	function isString(arg) {
		return typeof arg === 'string';
	}
	function isSymbol$1(arg) {
		return _typeof(arg) === 'symbol';
	}
	function isUndefined(arg) {
		return arg === void 0;
	}
	function isRegExp(re) {
		return isObject$1(re) && objectToString$1(re) === '[object RegExp]';
	}
	function isObject$1(arg) {
		return _typeof(arg) === 'object' && arg !== null;
	}
	function isDate(d) {
		return isObject$1(d) && objectToString$1(d) === '[object Date]';
	}
	function isError(e) {
		return isObject$1(e) && (objectToString$1(e) === '[object Error]' || e instanceof Error);
	}
	function isFunction(arg) {
		return typeof arg === 'function';
	}
	function isPrimitive(arg) {
		return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || _typeof(arg) === 'symbol' || // ES6 symbol
			typeof arg === 'undefined';
	}
	function isBuffer$1(maybeBuf) {
		return isBuffer(maybeBuf);
	}

	function objectToString$1(o) {
		return Object.prototype.toString.call(o);
	}

	function pad(n) {
		return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}

	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']; // 26 Feb 16:19:34

	function timestamp() {
		var d = new Date();
		var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(':');
		return [d.getDate(), months[d.getMonth()], time].join(' ');
	} // log is just a thin wrapper to console.log that prepends a timestamp


	function log$1() {
		console.log('%s - %s', timestamp(), format.apply(null, arguments));
	}
	function _extend(origin, add) {
		// Don't do anything if add isn't an object
		if (!add || !isObject$1(add)) return origin;
		var keys = Object.keys(add);
		var i = keys.length;

		while (i--) {
			origin[keys[i]] = add[keys[i]];
		}

		return origin;
	}

	function hasOwnProperty$1(obj, prop) {
		return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	var util = {
		inherits: inherits$1,
		_extend: _extend,
		log: log$1,
		isBuffer: isBuffer$1,
		isPrimitive: isPrimitive,
		isFunction: isFunction,
		isError: isError,
		isDate: isDate,
		isObject: isObject$1,
		isRegExp: isRegExp,
		isUndefined: isUndefined,
		isSymbol: isSymbol$1,
		isString: isString,
		isNumber: isNumber,
		isNullOrUndefined: isNullOrUndefined,
		isNull: isNull,
		isBoolean: isBoolean,
		isArray: isArray$2,
		inspect: inspect,
		deprecate: deprecate,
		format: format,
		debuglog: debuglog
	};

	var lookup$1 = [];
	var revLookup$1 = [];
	var Arr$1 = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
	var inited$1 = false;

	function init$1() {
		inited$1 = true;
		var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

		for (var i = 0, len = code.length; i < len; ++i) {
			lookup$1[i] = code[i];
			revLookup$1[code.charCodeAt(i)] = i;
		}

		revLookup$1['-'.charCodeAt(0)] = 62;
		revLookup$1['_'.charCodeAt(0)] = 63;
	}

	function toByteArray$1(b64) {
		if (!inited$1) {
			init$1();
		}

		var i, j, l, tmp, placeHolders, arr;
		var len = b64.length;

		if (len % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4');
		} // the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice


		placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0; // base64 is 4/3 + up to two characters of the original data

		arr = new Arr$1(len * 3 / 4 - placeHolders); // if there are placeholders, only get up to the last complete 4 chars

		l = placeHolders > 0 ? len - 4 : len;
		var L = 0;

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = revLookup$1[b64.charCodeAt(i)] << 18 | revLookup$1[b64.charCodeAt(i + 1)] << 12 | revLookup$1[b64.charCodeAt(i + 2)] << 6 | revLookup$1[b64.charCodeAt(i + 3)];
			arr[L++] = tmp >> 16 & 0xFF;
			arr[L++] = tmp >> 8 & 0xFF;
			arr[L++] = tmp & 0xFF;
		}

		if (placeHolders === 2) {
			tmp = revLookup$1[b64.charCodeAt(i)] << 2 | revLookup$1[b64.charCodeAt(i + 1)] >> 4;
			arr[L++] = tmp & 0xFF;
		} else if (placeHolders === 1) {
			tmp = revLookup$1[b64.charCodeAt(i)] << 10 | revLookup$1[b64.charCodeAt(i + 1)] << 4 | revLookup$1[b64.charCodeAt(i + 2)] >> 2;
			arr[L++] = tmp >> 8 & 0xFF;
			arr[L++] = tmp & 0xFF;
		}

		return arr;
	}

	function tripletToBase64$1(num) {
		return lookup$1[num >> 18 & 0x3F] + lookup$1[num >> 12 & 0x3F] + lookup$1[num >> 6 & 0x3F] + lookup$1[num & 0x3F];
	}

	function encodeChunk$1(uint8, start, end) {
		var tmp;
		var output = [];

		for (var i = start; i < end; i += 3) {
			tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
			output.push(tripletToBase64$1(tmp));
		}

		return output.join('');
	}

	function fromByteArray$1(uint8) {
		if (!inited$1) {
			init$1();
		}

		var tmp;
		var len = uint8.length;
		var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes

		var output = '';
		var parts = [];
		var maxChunkLength = 16383; // must be multiple of 3
		// go through the array every three bytes, we'll deal with trailing stuff later

		for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
			parts.push(encodeChunk$1(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
		} // pad the end with zeros, but make sure to not forget the extra bytes


		if (extraBytes === 1) {
			tmp = uint8[len - 1];
			output += lookup$1[tmp >> 2];
			output += lookup$1[tmp << 4 & 0x3F];
			output += '==';
		} else if (extraBytes === 2) {
			tmp = (uint8[len - 2] << 8) + uint8[len - 1];
			output += lookup$1[tmp >> 10];
			output += lookup$1[tmp >> 4 & 0x3F];
			output += lookup$1[tmp << 2 & 0x3F];
			output += '=';
		}

		parts.push(output);
		return parts.join('');
	}

	function read$1(buffer, offset, isLE, mLen, nBytes) {
		var e, m;
		var eLen = nBytes * 8 - mLen - 1;
		var eMax = (1 << eLen) - 1;
		var eBias = eMax >> 1;
		var nBits = -7;
		var i = isLE ? nBytes - 1 : 0;
		var d = isLE ? -1 : 1;
		var s = buffer[offset + i];
		i += d;
		e = s & (1 << -nBits) - 1;
		s >>= -nBits;
		nBits += eLen;

		for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) { }

		m = e & (1 << -nBits) - 1;
		e >>= -nBits;
		nBits += mLen;

		for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) { }

		if (e === 0) {
			e = 1 - eBias;
		} else if (e === eMax) {
			return m ? NaN : (s ? -1 : 1) * Infinity;
		} else {
			m = m + Math.pow(2, mLen);
			e = e - eBias;
		}

		return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
	}

	function write$1(buffer, value, offset, isLE, mLen, nBytes) {
		var e, m, c;
		var eLen = nBytes * 8 - mLen - 1;
		var eMax = (1 << eLen) - 1;
		var eBias = eMax >> 1;
		var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
		var i = isLE ? 0 : nBytes - 1;
		var d = isLE ? 1 : -1;
		var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
		value = Math.abs(value);

		if (isNaN(value) || value === Infinity) {
			m = isNaN(value) ? 1 : 0;
			e = eMax;
		} else {
			e = Math.floor(Math.log(value) / Math.LN2);

			if (value * (c = Math.pow(2, -e)) < 1) {
				e--;
				c *= 2;
			}

			if (e + eBias >= 1) {
				value += rt / c;
			} else {
				value += rt * Math.pow(2, 1 - eBias);
			}

			if (value * c >= 2) {
				e++;
				c /= 2;
			}

			if (e + eBias >= eMax) {
				m = 0;
				e = eMax;
			} else if (e + eBias >= 1) {
				m = (value * c - 1) * Math.pow(2, mLen);
				e = e + eBias;
			} else {
				m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
				e = 0;
			}
		}

		for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) { }

		e = e << mLen | m;
		eLen += mLen;

		for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) { }

		buffer[offset + i - d] |= s * 128;
	}

	var toString$3 = {}.toString;

	var isArray$3 = Array.isArray || function (arr) {
		return toString$3.call(arr) == '[object Array]';
	};
	/*!
		* The buffer module from node.js, for the browser.
		*
		* @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
		* @license  MIT
		*/


	var INSPECT_MAX_BYTES$1 = 50;
	/**
		* If `Buffer.TYPED_ARRAY_SUPPORT`:
		*   === true    Use Uint8Array implementation (fastest)
		*   === false   Use Object implementation (most compatible, even IE6)
		*
		* Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
		* Opera 11.6+, iOS 4.2+.
		*
		* Due to various browser bugs, sometimes the Object implementation will be used even
		* when the browser supports typed arrays.
		*
		* Note:
		*
		*   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
		*     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
		*
		*   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
		*
		*   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
		*     incorrect length in some situations.

		* We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
		* get the Object implementation, which is slower but behaves correctly.
		*/

	Buffer$1.TYPED_ARRAY_SUPPORT = global$2.TYPED_ARRAY_SUPPORT !== undefined ? global$2.TYPED_ARRAY_SUPPORT : true;

	function kMaxLength$1() {
		return Buffer$1.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
	}

	function createBuffer$1(that, length) {
		if (kMaxLength$1() < length) {
			throw new RangeError('Invalid typed array length');
		}

		if (Buffer$1.TYPED_ARRAY_SUPPORT) {
			// Return an augmented `Uint8Array` instance, for best performance
			that = new Uint8Array(length);
			that.__proto__ = Buffer$1.prototype;
		} else {
			// Fallback: Return an object instance of the Buffer class
			if (that === null) {
				that = new Buffer$1(length);
			}

			that.length = length;
		}

		return that;
	}
	/**
		* The Buffer constructor returns instances of `Uint8Array` that have their
		* prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
		* `Uint8Array`, so the returned instances will have all the node `Buffer` methods
		* and the `Uint8Array` methods. Square bracket notation works as expected -- it
		* returns a single octet.
		*
		* The `Uint8Array` prototype remains unmodified.
		*/


	function Buffer$1(arg, encodingOrOffset, length) {
		if (!Buffer$1.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer$1)) {
			return new Buffer$1(arg, encodingOrOffset, length);
		} // Common case.


		if (typeof arg === 'number') {
			if (typeof encodingOrOffset === 'string') {
				throw new Error('If encoding is specified then the first argument must be a string');
			}

			return allocUnsafe$1(this, arg);
		}

		return from$1(this, arg, encodingOrOffset, length);
	}

	Buffer$1.poolSize = 8192; // not used by this implementation
	// TODO: Legacy, not needed anymore. Remove in next major version.

	Buffer$1._augment = function (arr) {
		arr.__proto__ = Buffer$1.prototype;
		return arr;
	};

	function from$1(that, value, encodingOrOffset, length) {
		if (typeof value === 'number') {
			throw new TypeError('"value" argument must not be a number');
		}

		if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
			return fromArrayBuffer$1(that, value, encodingOrOffset, length);
		}

		if (typeof value === 'string') {
			return fromString$1(that, value, encodingOrOffset);
		}

		return fromObject$1(that, value);
	}
	/**
		* Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
		* if value is a number.
		* Buffer.from(str[, encoding])
		* Buffer.from(array)
		* Buffer.from(buffer)
		* Buffer.from(arrayBuffer[, byteOffset[, length]])
		**/


	Buffer$1.from = function (value, encodingOrOffset, length) {
		return from$1(null, value, encodingOrOffset, length);
	};

	if (Buffer$1.TYPED_ARRAY_SUPPORT) {
		Buffer$1.prototype.__proto__ = Uint8Array.prototype;
		Buffer$1.__proto__ = Uint8Array;
	}

	function assertSize$1(size) {
		if (typeof size !== 'number') {
			throw new TypeError('"size" argument must be a number');
		} else if (size < 0) {
			throw new RangeError('"size" argument must not be negative');
		}
	}

	function alloc$1(that, size, fill, encoding) {
		assertSize$1(size);

		if (size <= 0) {
			return createBuffer$1(that, size);
		}

		if (fill !== undefined) {
			// Only pay attention to encoding if it's a string. This
			// prevents accidentally sending in a number that would
			// be interpretted as a start offset.
			return typeof encoding === 'string' ? createBuffer$1(that, size).fill(fill, encoding) : createBuffer$1(that, size).fill(fill);
		}

		return createBuffer$1(that, size);
	}
	/**
		* Creates a new filled Buffer instance.
		* alloc(size[, fill[, encoding]])
		**/


	Buffer$1.alloc = function (size, fill, encoding) {
		return alloc$1(null, size, fill, encoding);
	};

	function allocUnsafe$1(that, size) {
		assertSize$1(size);
		that = createBuffer$1(that, size < 0 ? 0 : checked$1(size) | 0);

		if (!Buffer$1.TYPED_ARRAY_SUPPORT) {
			for (var i = 0; i < size; ++i) {
				that[i] = 0;
			}
		}

		return that;
	}
	/**
		* Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
		* */


	Buffer$1.allocUnsafe = function (size) {
		return allocUnsafe$1(null, size);
	};
	/**
		* Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
		*/


	Buffer$1.allocUnsafeSlow = function (size) {
		return allocUnsafe$1(null, size);
	};

	function fromString$1(that, string, encoding) {
		if (typeof encoding !== 'string' || encoding === '') {
			encoding = 'utf8';
		}

		if (!Buffer$1.isEncoding(encoding)) {
			throw new TypeError('"encoding" must be a valid string encoding');
		}

		var length = byteLength$1(string, encoding) | 0;
		that = createBuffer$1(that, length);
		var actual = that.write(string, encoding);

		if (actual !== length) {
			// Writing a hex string, for example, that contains invalid characters will
			// cause everything after the first invalid character to be ignored. (e.g.
			// 'abxxcd' will be treated as 'ab')
			that = that.slice(0, actual);
		}

		return that;
	}

	function fromArrayLike$1(that, array) {
		var length = array.length < 0 ? 0 : checked$1(array.length) | 0;
		that = createBuffer$1(that, length);

		for (var i = 0; i < length; i += 1) {
			that[i] = array[i] & 255;
		}

		return that;
	}

	function fromArrayBuffer$1(that, array, byteOffset, length) {
		array.byteLength; // this throws if `array` is not a valid ArrayBuffer

		if (byteOffset < 0 || array.byteLength < byteOffset) {
			throw new RangeError('\'offset\' is out of bounds');
		}

		if (array.byteLength < byteOffset + (length || 0)) {
			throw new RangeError('\'length\' is out of bounds');
		}

		if (byteOffset === undefined && length === undefined) {
			array = new Uint8Array(array);
		} else if (length === undefined) {
			array = new Uint8Array(array, byteOffset);
		} else {
			array = new Uint8Array(array, byteOffset, length);
		}

		if (Buffer$1.TYPED_ARRAY_SUPPORT) {
			// Return an augmented `Uint8Array` instance, for best performance
			that = array;
			that.__proto__ = Buffer$1.prototype;
		} else {
			// Fallback: Return an object instance of the Buffer class
			that = fromArrayLike$1(that, array);
		}

		return that;
	}

	function fromObject$1(that, obj) {
		if (internalIsBuffer$1(obj)) {
			var len = checked$1(obj.length) | 0;
			that = createBuffer$1(that, len);

			if (that.length === 0) {
				return that;
			}

			obj.copy(that, 0, 0, len);
			return that;
		}

		if (obj) {
			if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
				if (typeof obj.length !== 'number' || isnan$1(obj.length)) {
					return createBuffer$1(that, 0);
				}

				return fromArrayLike$1(that, obj);
			}

			if (obj.type === 'Buffer' && isArray$3(obj.data)) {
				return fromArrayLike$1(that, obj.data);
			}
		}

		throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
	}

	function checked$1(length) {
		// Note: cannot use `length < kMaxLength()` here because that fails when
		// length is NaN (which is otherwise coerced to zero.)
		if (length >= kMaxLength$1()) {
			throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength$1().toString(16) + ' bytes');
		}

		return length | 0;
	}

	Buffer$1.isBuffer = isBuffer$2;

	function internalIsBuffer$1(b) {
		return !!(b != null && b._isBuffer);
	}

	Buffer$1.compare = function compare(a, b) {
		if (!internalIsBuffer$1(a) || !internalIsBuffer$1(b)) {
			throw new TypeError('Arguments must be Buffers');
		}

		if (a === b) return 0;
		var x = a.length;
		var y = b.length;

		for (var i = 0, len = Math.min(x, y); i < len; ++i) {
			if (a[i] !== b[i]) {
				x = a[i];
				y = b[i];
				break;
			}
		}

		if (x < y) return -1;
		if (y < x) return 1;
		return 0;
	};

	Buffer$1.isEncoding = function isEncoding(encoding) {
		switch (String(encoding).toLowerCase()) {
			case 'hex':
			case 'utf8':
			case 'utf-8':
			case 'ascii':
			case 'latin1':
			case 'binary':
			case 'base64':
			case 'ucs2':
			case 'ucs-2':
			case 'utf16le':
			case 'utf-16le':
				return true;

			default:
				return false;
		}
	};

	Buffer$1.concat = function concat(list, length) {
		if (!isArray$3(list)) {
			throw new TypeError('"list" argument must be an Array of Buffers');
		}

		if (list.length === 0) {
			return Buffer$1.alloc(0);
		}

		var i;

		if (length === undefined) {
			length = 0;

			for (i = 0; i < list.length; ++i) {
				length += list[i].length;
			}
		}

		var buffer = Buffer$1.allocUnsafe(length);
		var pos = 0;

		for (i = 0; i < list.length; ++i) {
			var buf = list[i];

			if (!internalIsBuffer$1(buf)) {
				throw new TypeError('"list" argument must be an Array of Buffers');
			}

			buf.copy(buffer, pos);
			pos += buf.length;
		}

		return buffer;
	};

	function byteLength$1(string, encoding) {
		if (internalIsBuffer$1(string)) {
			return string.length;
		}

		if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
			return string.byteLength;
		}

		if (typeof string !== 'string') {
			string = '' + string;
		}

		var len = string.length;
		if (len === 0) return 0; // Use a for loop to avoid recursion

		var loweredCase = false;

		for (; ;) {
			switch (encoding) {
				case 'ascii':
				case 'latin1':
				case 'binary':
					return len;

				case 'utf8':
				case 'utf-8':
				case undefined:
					return utf8ToBytes$1(string).length;

				case 'ucs2':
				case 'ucs-2':
				case 'utf16le':
				case 'utf-16le':
					return len * 2;

				case 'hex':
					return len >>> 1;

				case 'base64':
					return base64ToBytes$1(string).length;

				default:
					if (loweredCase) return utf8ToBytes$1(string).length; // assume utf8

					encoding = ('' + encoding).toLowerCase();
					loweredCase = true;
			}
		}
	}

	Buffer$1.byteLength = byteLength$1;

	function slowToString$1(encoding, start, end) {
		var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
		// property of a typed array.
		// This behaves neither like String nor Uint8Array in that we set start/end
		// to their upper/lower bounds if the value passed is out of range.
		// undefined is handled specially as per ECMA-262 6th Edition,
		// Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

		if (start === undefined || start < 0) {
			start = 0;
		} // Return early if start > this.length. Done here to prevent potential uint32
		// coercion fail below.


		if (start > this.length) {
			return '';
		}

		if (end === undefined || end > this.length) {
			end = this.length;
		}

		if (end <= 0) {
			return '';
		} // Force coersion to uint32. This will also coerce falsey/NaN values to 0.


		end >>>= 0;
		start >>>= 0;

		if (end <= start) {
			return '';
		}

		if (!encoding) encoding = 'utf8';

		while (true) {
			switch (encoding) {
				case 'hex':
					return hexSlice$1(this, start, end);

				case 'utf8':
				case 'utf-8':
					return utf8Slice$1(this, start, end);

				case 'ascii':
					return asciiSlice$1(this, start, end);

				case 'latin1':
				case 'binary':
					return latin1Slice$1(this, start, end);

				case 'base64':
					return base64Slice$1(this, start, end);

				case 'ucs2':
				case 'ucs-2':
				case 'utf16le':
				case 'utf-16le':
					return utf16leSlice$1(this, start, end);

				default:
					if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
					encoding = (encoding + '').toLowerCase();
					loweredCase = true;
			}
		}
	} // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.


	Buffer$1.prototype._isBuffer = true;

	function swap$1(b, n, m) {
		var i = b[n];
		b[n] = b[m];
		b[m] = i;
	}

	Buffer$1.prototype.swap16 = function swap16() {
		var len = this.length;

		if (len % 2 !== 0) {
			throw new RangeError('Buffer size must be a multiple of 16-bits');
		}

		for (var i = 0; i < len; i += 2) {
			swap$1(this, i, i + 1);
		}

		return this;
	};

	Buffer$1.prototype.swap32 = function swap32() {
		var len = this.length;

		if (len % 4 !== 0) {
			throw new RangeError('Buffer size must be a multiple of 32-bits');
		}

		for (var i = 0; i < len; i += 4) {
			swap$1(this, i, i + 3);
			swap$1(this, i + 1, i + 2);
		}

		return this;
	};

	Buffer$1.prototype.swap64 = function swap64() {
		var len = this.length;

		if (len % 8 !== 0) {
			throw new RangeError('Buffer size must be a multiple of 64-bits');
		}

		for (var i = 0; i < len; i += 8) {
			swap$1(this, i, i + 7);
			swap$1(this, i + 1, i + 6);
			swap$1(this, i + 2, i + 5);
			swap$1(this, i + 3, i + 4);
		}

		return this;
	};

	Buffer$1.prototype.toString = function toString() {
		var length = this.length | 0;
		if (length === 0) return '';
		if (arguments.length === 0) return utf8Slice$1(this, 0, length);
		return slowToString$1.apply(this, arguments);
	};

	Buffer$1.prototype.equals = function equals(b) {
		if (!internalIsBuffer$1(b)) throw new TypeError('Argument must be a Buffer');
		if (this === b) return true;
		return Buffer$1.compare(this, b) === 0;
	};

	Buffer$1.prototype.inspect = function inspect() {
		var str = '';
		var max = INSPECT_MAX_BYTES$1;

		if (this.length > 0) {
			str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
			if (this.length > max) str += ' ... ';
		}

		return '<Buffer ' + str + '>';
	};

	Buffer$1.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
		if (!internalIsBuffer$1(target)) {
			throw new TypeError('Argument must be a Buffer');
		}

		if (start === undefined) {
			start = 0;
		}

		if (end === undefined) {
			end = target ? target.length : 0;
		}

		if (thisStart === undefined) {
			thisStart = 0;
		}

		if (thisEnd === undefined) {
			thisEnd = this.length;
		}

		if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
			throw new RangeError('out of range index');
		}

		if (thisStart >= thisEnd && start >= end) {
			return 0;
		}

		if (thisStart >= thisEnd) {
			return -1;
		}

		if (start >= end) {
			return 1;
		}

		start >>>= 0;
		end >>>= 0;
		thisStart >>>= 0;
		thisEnd >>>= 0;
		if (this === target) return 0;
		var x = thisEnd - thisStart;
		var y = end - start;
		var len = Math.min(x, y);
		var thisCopy = this.slice(thisStart, thisEnd);
		var targetCopy = target.slice(start, end);

		for (var i = 0; i < len; ++i) {
			if (thisCopy[i] !== targetCopy[i]) {
				x = thisCopy[i];
				y = targetCopy[i];
				break;
			}
		}

		if (x < y) return -1;
		if (y < x) return 1;
		return 0;
	}; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf


	function bidirectionalIndexOf$1(buffer, val, byteOffset, encoding, dir) {
		// Empty buffer means no match
		if (buffer.length === 0) return -1; // Normalize byteOffset

		if (typeof byteOffset === 'string') {
			encoding = byteOffset;
			byteOffset = 0;
		} else if (byteOffset > 0x7fffffff) {
			byteOffset = 0x7fffffff;
		} else if (byteOffset < -0x80000000) {
			byteOffset = -0x80000000;
		}

		byteOffset = +byteOffset; // Coerce to Number.

		if (isNaN(byteOffset)) {
			// byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
			byteOffset = dir ? 0 : buffer.length - 1;
		} // Normalize byteOffset: negative offsets start from the end of the buffer


		if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

		if (byteOffset >= buffer.length) {
			if (dir) return -1; else byteOffset = buffer.length - 1;
		} else if (byteOffset < 0) {
			if (dir) byteOffset = 0; else return -1;
		} // Normalize val


		if (typeof val === 'string') {
			val = Buffer$1.from(val, encoding);
		} // Finally, search either indexOf (if dir is true) or lastIndexOf


		if (internalIsBuffer$1(val)) {
			// Special case: looking for empty string/buffer always fails
			if (val.length === 0) {
				return -1;
			}

			return arrayIndexOf$1(buffer, val, byteOffset, encoding, dir);
		} else if (typeof val === 'number') {
			val = val & 0xFF; // Search for a byte value [0-255]

			if (Buffer$1.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
				if (dir) {
					return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
				} else {
					return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
				}
			}

			return arrayIndexOf$1(buffer, [val], byteOffset, encoding, dir);
		}

		throw new TypeError('val must be string, number or Buffer');
	}

	function arrayIndexOf$1(arr, val, byteOffset, encoding, dir) {
		var indexSize = 1;
		var arrLength = arr.length;
		var valLength = val.length;

		if (encoding !== undefined) {
			encoding = String(encoding).toLowerCase();

			if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
				if (arr.length < 2 || val.length < 2) {
					return -1;
				}

				indexSize = 2;
				arrLength /= 2;
				valLength /= 2;
				byteOffset /= 2;
			}
		}

		function read(buf, i) {
			if (indexSize === 1) {
				return buf[i];
			} else {
				return buf.readUInt16BE(i * indexSize);
			}
		}

		var i;

		if (dir) {
			var foundIndex = -1;

			for (i = byteOffset; i < arrLength; i++) {
				if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
					if (foundIndex === -1) foundIndex = i;
					if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
				} else {
					if (foundIndex !== -1) i -= i - foundIndex;
					foundIndex = -1;
				}
			}
		} else {
			if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;

			for (i = byteOffset; i >= 0; i--) {
				var found = true;

				for (var j = 0; j < valLength; j++) {
					if (read(arr, i + j) !== read(val, j)) {
						found = false;
						break;
					}
				}

				if (found) return i;
			}
		}

		return -1;
	}

	Buffer$1.prototype.includes = function includes(val, byteOffset, encoding) {
		return this.indexOf(val, byteOffset, encoding) !== -1;
	};

	Buffer$1.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
		return bidirectionalIndexOf$1(this, val, byteOffset, encoding, true);
	};

	Buffer$1.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
		return bidirectionalIndexOf$1(this, val, byteOffset, encoding, false);
	};

	function hexWrite$1(buf, string, offset, length) {
		offset = Number(offset) || 0;
		var remaining = buf.length - offset;

		if (!length) {
			length = remaining;
		} else {
			length = Number(length);

			if (length > remaining) {
				length = remaining;
			}
		} // must be an even number of digits


		var strLen = string.length;
		if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');

		if (length > strLen / 2) {
			length = strLen / 2;
		}

		for (var i = 0; i < length; ++i) {
			var parsed = parseInt(string.substr(i * 2, 2), 16);
			if (isNaN(parsed)) return i;
			buf[offset + i] = parsed;
		}

		return i;
	}

	function utf8Write$1(buf, string, offset, length) {
		return blitBuffer$1(utf8ToBytes$1(string, buf.length - offset), buf, offset, length);
	}

	function asciiWrite$1(buf, string, offset, length) {
		return blitBuffer$1(asciiToBytes$1(string), buf, offset, length);
	}

	function latin1Write$1(buf, string, offset, length) {
		return asciiWrite$1(buf, string, offset, length);
	}

	function base64Write$1(buf, string, offset, length) {
		return blitBuffer$1(base64ToBytes$1(string), buf, offset, length);
	}

	function ucs2Write$1(buf, string, offset, length) {
		return blitBuffer$1(utf16leToBytes$1(string, buf.length - offset), buf, offset, length);
	}

	Buffer$1.prototype.write = function write(string, offset, length, encoding) {
		// Buffer#write(string)
		if (offset === undefined) {
			encoding = 'utf8';
			length = this.length;
			offset = 0; // Buffer#write(string, encoding)
		} else if (length === undefined && typeof offset === 'string') {
			encoding = offset;
			length = this.length;
			offset = 0; // Buffer#write(string, offset[, length][, encoding])
		} else if (isFinite(offset)) {
			offset = offset | 0;

			if (isFinite(length)) {
				length = length | 0;
				if (encoding === undefined) encoding = 'utf8';
			} else {
				encoding = length;
				length = undefined;
			} // legacy write(string, encoding, offset, length) - remove in v0.13

		} else {
			throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
		}

		var remaining = this.length - offset;
		if (length === undefined || length > remaining) length = remaining;

		if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
			throw new RangeError('Attempt to write outside buffer bounds');
		}

		if (!encoding) encoding = 'utf8';
		var loweredCase = false;

		for (; ;) {
			switch (encoding) {
				case 'hex':
					return hexWrite$1(this, string, offset, length);

				case 'utf8':
				case 'utf-8':
					return utf8Write$1(this, string, offset, length);

				case 'ascii':
					return asciiWrite$1(this, string, offset, length);

				case 'latin1':
				case 'binary':
					return latin1Write$1(this, string, offset, length);

				case 'base64':
					// Warning: maxLength not taken into account in base64Write
					return base64Write$1(this, string, offset, length);

				case 'ucs2':
				case 'ucs-2':
				case 'utf16le':
				case 'utf-16le':
					return ucs2Write$1(this, string, offset, length);

				default:
					if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
					encoding = ('' + encoding).toLowerCase();
					loweredCase = true;
			}
		}
	};

	Buffer$1.prototype.toJSON = function toJSON() {
		return {
			type: 'Buffer',
			data: Array.prototype.slice.call(this._arr || this, 0)
		};
	};

	function base64Slice$1(buf, start, end) {
		if (start === 0 && end === buf.length) {
			return fromByteArray$1(buf);
		} else {
			return fromByteArray$1(buf.slice(start, end));
		}
	}

	function utf8Slice$1(buf, start, end) {
		end = Math.min(buf.length, end);
		var res = [];
		var i = start;

		while (i < end) {
			var firstByte = buf[i];
			var codePoint = null;
			var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

			if (i + bytesPerSequence <= end) {
				var secondByte, thirdByte, fourthByte, tempCodePoint;

				switch (bytesPerSequence) {
					case 1:
						if (firstByte < 0x80) {
							codePoint = firstByte;
						}

						break;

					case 2:
						secondByte = buf[i + 1];

						if ((secondByte & 0xC0) === 0x80) {
							tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;

							if (tempCodePoint > 0x7F) {
								codePoint = tempCodePoint;
							}
						}

						break;

					case 3:
						secondByte = buf[i + 1];
						thirdByte = buf[i + 2];

						if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
							tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;

							if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
								codePoint = tempCodePoint;
							}
						}

						break;

					case 4:
						secondByte = buf[i + 1];
						thirdByte = buf[i + 2];
						fourthByte = buf[i + 3];

						if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
							tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;

							if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
								codePoint = tempCodePoint;
							}
						}

				}
			}

			if (codePoint === null) {
				// we did not generate a valid codePoint so insert a
				// replacement char (U+FFFD) and advance only 1 byte
				codePoint = 0xFFFD;
				bytesPerSequence = 1;
			} else if (codePoint > 0xFFFF) {
				// encode to utf16 (surrogate pair dance)
				codePoint -= 0x10000;
				res.push(codePoint >>> 10 & 0x3FF | 0xD800);
				codePoint = 0xDC00 | codePoint & 0x3FF;
			}

			res.push(codePoint);
			i += bytesPerSequence;
		}

		return decodeCodePointsArray$1(res);
	} // Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety


	var MAX_ARGUMENTS_LENGTH$1 = 0x1000;

	function decodeCodePointsArray$1(codePoints) {
		var len = codePoints.length;

		if (len <= MAX_ARGUMENTS_LENGTH$1) {
			return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
		} // Decode in chunks to avoid "call stack size exceeded".


		var res = '';
		var i = 0;

		while (i < len) {
			res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH$1));
		}

		return res;
	}

	function asciiSlice$1(buf, start, end) {
		var ret = '';
		end = Math.min(buf.length, end);

		for (var i = start; i < end; ++i) {
			ret += String.fromCharCode(buf[i] & 0x7F);
		}

		return ret;
	}

	function latin1Slice$1(buf, start, end) {
		var ret = '';
		end = Math.min(buf.length, end);

		for (var i = start; i < end; ++i) {
			ret += String.fromCharCode(buf[i]);
		}

		return ret;
	}

	function hexSlice$1(buf, start, end) {
		var len = buf.length;
		if (!start || start < 0) start = 0;
		if (!end || end < 0 || end > len) end = len;
		var out = '';

		for (var i = start; i < end; ++i) {
			out += toHex$1(buf[i]);
		}

		return out;
	}

	function utf16leSlice$1(buf, start, end) {
		var bytes = buf.slice(start, end);
		var res = '';

		for (var i = 0; i < bytes.length; i += 2) {
			res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
		}

		return res;
	}

	Buffer$1.prototype.slice = function slice(start, end) {
		var len = this.length;
		start = ~~start;
		end = end === undefined ? len : ~~end;

		if (start < 0) {
			start += len;
			if (start < 0) start = 0;
		} else if (start > len) {
			start = len;
		}

		if (end < 0) {
			end += len;
			if (end < 0) end = 0;
		} else if (end > len) {
			end = len;
		}

		if (end < start) end = start;
		var newBuf;

		if (Buffer$1.TYPED_ARRAY_SUPPORT) {
			newBuf = this.subarray(start, end);
			newBuf.__proto__ = Buffer$1.prototype;
		} else {
			var sliceLen = end - start;
			newBuf = new Buffer$1(sliceLen, undefined);

			for (var i = 0; i < sliceLen; ++i) {
				newBuf[i] = this[i + start];
			}
		}

		return newBuf;
	};
	/*
		* Need to make sure that buffer isn't trying to write out of bounds.
		*/


	function checkOffset$1(offset, ext, length) {
		if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
		if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
	}

	Buffer$1.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
		offset = offset | 0;
		byteLength = byteLength | 0;
		if (!noAssert) checkOffset$1(offset, byteLength, this.length);
		var val = this[offset];
		var mul = 1;
		var i = 0;

		while (++i < byteLength && (mul *= 0x100)) {
			val += this[offset + i] * mul;
		}

		return val;
	};

	Buffer$1.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
		offset = offset | 0;
		byteLength = byteLength | 0;

		if (!noAssert) {
			checkOffset$1(offset, byteLength, this.length);
		}

		var val = this[offset + --byteLength];
		var mul = 1;

		while (byteLength > 0 && (mul *= 0x100)) {
			val += this[offset + --byteLength] * mul;
		}

		return val;
	};

	Buffer$1.prototype.readUInt8 = function readUInt8(offset, noAssert) {
		if (!noAssert) checkOffset$1(offset, 1, this.length);
		return this[offset];
	};

	Buffer$1.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
		if (!noAssert) checkOffset$1(offset, 2, this.length);
		return this[offset] | this[offset + 1] << 8;
	};

	Buffer$1.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
		if (!noAssert) checkOffset$1(offset, 2, this.length);
		return this[offset] << 8 | this[offset + 1];
	};

	Buffer$1.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
		if (!noAssert) checkOffset$1(offset, 4, this.length);
		return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
	};

	Buffer$1.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
		if (!noAssert) checkOffset$1(offset, 4, this.length);
		return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
	};

	Buffer$1.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
		offset = offset | 0;
		byteLength = byteLength | 0;
		if (!noAssert) checkOffset$1(offset, byteLength, this.length);
		var val = this[offset];
		var mul = 1;
		var i = 0;

		while (++i < byteLength && (mul *= 0x100)) {
			val += this[offset + i] * mul;
		}

		mul *= 0x80;
		if (val >= mul) val -= Math.pow(2, 8 * byteLength);
		return val;
	};

	Buffer$1.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
		offset = offset | 0;
		byteLength = byteLength | 0;
		if (!noAssert) checkOffset$1(offset, byteLength, this.length);
		var i = byteLength;
		var mul = 1;
		var val = this[offset + --i];

		while (i > 0 && (mul *= 0x100)) {
			val += this[offset + --i] * mul;
		}

		mul *= 0x80;
		if (val >= mul) val -= Math.pow(2, 8 * byteLength);
		return val;
	};

	Buffer$1.prototype.readInt8 = function readInt8(offset, noAssert) {
		if (!noAssert) checkOffset$1(offset, 1, this.length);
		if (!(this[offset] & 0x80)) return this[offset];
		return (0xff - this[offset] + 1) * -1;
	};

	Buffer$1.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
		if (!noAssert) checkOffset$1(offset, 2, this.length);
		var val = this[offset] | this[offset + 1] << 8;
		return val & 0x8000 ? val | 0xFFFF0000 : val;
	};

	Buffer$1.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
		if (!noAssert) checkOffset$1(offset, 2, this.length);
		var val = this[offset + 1] | this[offset] << 8;
		return val & 0x8000 ? val | 0xFFFF0000 : val;
	};

	Buffer$1.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
		if (!noAssert) checkOffset$1(offset, 4, this.length);
		return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
	};

	Buffer$1.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
		if (!noAssert) checkOffset$1(offset, 4, this.length);
		return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
	};

	Buffer$1.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
		if (!noAssert) checkOffset$1(offset, 4, this.length);
		return read$1(this, offset, true, 23, 4);
	};

	Buffer$1.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
		if (!noAssert) checkOffset$1(offset, 4, this.length);
		return read$1(this, offset, false, 23, 4);
	};

	Buffer$1.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
		if (!noAssert) checkOffset$1(offset, 8, this.length);
		return read$1(this, offset, true, 52, 8);
	};

	Buffer$1.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
		if (!noAssert) checkOffset$1(offset, 8, this.length);
		return read$1(this, offset, false, 52, 8);
	};

	function checkInt$1(buf, value, offset, ext, max, min) {
		if (!internalIsBuffer$1(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
		if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
		if (offset + ext > buf.length) throw new RangeError('Index out of range');
	}

	Buffer$1.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
		value = +value;
		offset = offset | 0;
		byteLength = byteLength | 0;

		if (!noAssert) {
			var maxBytes = Math.pow(2, 8 * byteLength) - 1;
			checkInt$1(this, value, offset, byteLength, maxBytes, 0);
		}

		var mul = 1;
		var i = 0;
		this[offset] = value & 0xFF;

		while (++i < byteLength && (mul *= 0x100)) {
			this[offset + i] = value / mul & 0xFF;
		}

		return offset + byteLength;
	};

	Buffer$1.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
		value = +value;
		offset = offset | 0;
		byteLength = byteLength | 0;

		if (!noAssert) {
			var maxBytes = Math.pow(2, 8 * byteLength) - 1;
			checkInt$1(this, value, offset, byteLength, maxBytes, 0);
		}

		var i = byteLength - 1;
		var mul = 1;
		this[offset + i] = value & 0xFF;

		while (--i >= 0 && (mul *= 0x100)) {
			this[offset + i] = value / mul & 0xFF;
		}

		return offset + byteLength;
	};

	Buffer$1.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
		value = +value;
		offset = offset | 0;
		if (!noAssert) checkInt$1(this, value, offset, 1, 0xff, 0);
		if (!Buffer$1.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
		this[offset] = value & 0xff;
		return offset + 1;
	};

	function objectWriteUInt16$1(buf, value, offset, littleEndian) {
		if (value < 0) value = 0xffff + value + 1;

		for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
			buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
		}
	}

	Buffer$1.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
		value = +value;
		offset = offset | 0;
		if (!noAssert) checkInt$1(this, value, offset, 2, 0xffff, 0);

		if (Buffer$1.TYPED_ARRAY_SUPPORT) {
			this[offset] = value & 0xff;
			this[offset + 1] = value >>> 8;
		} else {
			objectWriteUInt16$1(this, value, offset, true);
		}

		return offset + 2;
	};

	Buffer$1.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
		value = +value;
		offset = offset | 0;
		if (!noAssert) checkInt$1(this, value, offset, 2, 0xffff, 0);

		if (Buffer$1.TYPED_ARRAY_SUPPORT) {
			this[offset] = value >>> 8;
			this[offset + 1] = value & 0xff;
		} else {
			objectWriteUInt16$1(this, value, offset, false);
		}

		return offset + 2;
	};

	function objectWriteUInt32$1(buf, value, offset, littleEndian) {
		if (value < 0) value = 0xffffffff + value + 1;

		for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
			buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
		}
	}

	Buffer$1.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
		value = +value;
		offset = offset | 0;
		if (!noAssert) checkInt$1(this, value, offset, 4, 0xffffffff, 0);

		if (Buffer$1.TYPED_ARRAY_SUPPORT) {
			this[offset + 3] = value >>> 24;
			this[offset + 2] = value >>> 16;
			this[offset + 1] = value >>> 8;
			this[offset] = value & 0xff;
		} else {
			objectWriteUInt32$1(this, value, offset, true);
		}

		return offset + 4;
	};

	Buffer$1.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
		value = +value;
		offset = offset | 0;
		if (!noAssert) checkInt$1(this, value, offset, 4, 0xffffffff, 0);

		if (Buffer$1.TYPED_ARRAY_SUPPORT) {
			this[offset] = value >>> 24;
			this[offset + 1] = value >>> 16;
			this[offset + 2] = value >>> 8;
			this[offset + 3] = value & 0xff;
		} else {
			objectWriteUInt32$1(this, value, offset, false);
		}

		return offset + 4;
	};

	Buffer$1.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
		value = +value;
		offset = offset | 0;

		if (!noAssert) {
			var limit = Math.pow(2, 8 * byteLength - 1);
			checkInt$1(this, value, offset, byteLength, limit - 1, -limit);
		}

		var i = 0;
		var mul = 1;
		var sub = 0;
		this[offset] = value & 0xFF;

		while (++i < byteLength && (mul *= 0x100)) {
			if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
				sub = 1;
			}

			this[offset + i] = (value / mul >> 0) - sub & 0xFF;
		}

		return offset + byteLength;
	};

	Buffer$1.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
		value = +value;
		offset = offset | 0;

		if (!noAssert) {
			var limit = Math.pow(2, 8 * byteLength - 1);
			checkInt$1(this, value, offset, byteLength, limit - 1, -limit);
		}

		var i = byteLength - 1;
		var mul = 1;
		var sub = 0;
		this[offset + i] = value & 0xFF;

		while (--i >= 0 && (mul *= 0x100)) {
			if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
				sub = 1;
			}

			this[offset + i] = (value / mul >> 0) - sub & 0xFF;
		}

		return offset + byteLength;
	};

	Buffer$1.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
		value = +value;
		offset = offset | 0;
		if (!noAssert) checkInt$1(this, value, offset, 1, 0x7f, -0x80);
		if (!Buffer$1.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
		if (value < 0) value = 0xff + value + 1;
		this[offset] = value & 0xff;
		return offset + 1;
	};

	Buffer$1.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
		value = +value;
		offset = offset | 0;
		if (!noAssert) checkInt$1(this, value, offset, 2, 0x7fff, -0x8000);

		if (Buffer$1.TYPED_ARRAY_SUPPORT) {
			this[offset] = value & 0xff;
			this[offset + 1] = value >>> 8;
		} else {
			objectWriteUInt16$1(this, value, offset, true);
		}

		return offset + 2;
	};

	Buffer$1.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
		value = +value;
		offset = offset | 0;
		if (!noAssert) checkInt$1(this, value, offset, 2, 0x7fff, -0x8000);

		if (Buffer$1.TYPED_ARRAY_SUPPORT) {
			this[offset] = value >>> 8;
			this[offset + 1] = value & 0xff;
		} else {
			objectWriteUInt16$1(this, value, offset, false);
		}

		return offset + 2;
	};

	Buffer$1.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
		value = +value;
		offset = offset | 0;
		if (!noAssert) checkInt$1(this, value, offset, 4, 0x7fffffff, -0x80000000);

		if (Buffer$1.TYPED_ARRAY_SUPPORT) {
			this[offset] = value & 0xff;
			this[offset + 1] = value >>> 8;
			this[offset + 2] = value >>> 16;
			this[offset + 3] = value >>> 24;
		} else {
			objectWriteUInt32$1(this, value, offset, true);
		}

		return offset + 4;
	};

	Buffer$1.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
		value = +value;
		offset = offset | 0;
		if (!noAssert) checkInt$1(this, value, offset, 4, 0x7fffffff, -0x80000000);
		if (value < 0) value = 0xffffffff + value + 1;

		if (Buffer$1.TYPED_ARRAY_SUPPORT) {
			this[offset] = value >>> 24;
			this[offset + 1] = value >>> 16;
			this[offset + 2] = value >>> 8;
			this[offset + 3] = value & 0xff;
		} else {
			objectWriteUInt32$1(this, value, offset, false);
		}

		return offset + 4;
	};

	function checkIEEE754$1(buf, value, offset, ext, max, min) {
		if (offset + ext > buf.length) throw new RangeError('Index out of range');
		if (offset < 0) throw new RangeError('Index out of range');
	}

	function writeFloat$1(buf, value, offset, littleEndian, noAssert) {
		if (!noAssert) {
			checkIEEE754$1(buf, value, offset, 4);
		}

		write$1(buf, value, offset, littleEndian, 23, 4);
		return offset + 4;
	}

	Buffer$1.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
		return writeFloat$1(this, value, offset, true, noAssert);
	};

	Buffer$1.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
		return writeFloat$1(this, value, offset, false, noAssert);
	};

	function writeDouble$1(buf, value, offset, littleEndian, noAssert) {
		if (!noAssert) {
			checkIEEE754$1(buf, value, offset, 8);
		}

		write$1(buf, value, offset, littleEndian, 52, 8);
		return offset + 8;
	}

	Buffer$1.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
		return writeDouble$1(this, value, offset, true, noAssert);
	};

	Buffer$1.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
		return writeDouble$1(this, value, offset, false, noAssert);
	}; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)


	Buffer$1.prototype.copy = function copy(target, targetStart, start, end) {
		if (!start) start = 0;
		if (!end && end !== 0) end = this.length;
		if (targetStart >= target.length) targetStart = target.length;
		if (!targetStart) targetStart = 0;
		if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done

		if (end === start) return 0;
		if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions

		if (targetStart < 0) {
			throw new RangeError('targetStart out of bounds');
		}

		if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
		if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?

		if (end > this.length) end = this.length;

		if (target.length - targetStart < end - start) {
			end = target.length - targetStart + start;
		}

		var len = end - start;
		var i;

		if (this === target && start < targetStart && targetStart < end) {
			// descending copy from end
			for (i = len - 1; i >= 0; --i) {
				target[i + targetStart] = this[i + start];
			}
		} else if (len < 1000 || !Buffer$1.TYPED_ARRAY_SUPPORT) {
			// ascending copy from start
			for (i = 0; i < len; ++i) {
				target[i + targetStart] = this[i + start];
			}
		} else {
			Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
		}

		return len;
	}; // Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])


	Buffer$1.prototype.fill = function fill(val, start, end, encoding) {
		// Handle string cases:
		if (typeof val === 'string') {
			if (typeof start === 'string') {
				encoding = start;
				start = 0;
				end = this.length;
			} else if (typeof end === 'string') {
				encoding = end;
				end = this.length;
			}

			if (val.length === 1) {
				var code = val.charCodeAt(0);

				if (code < 256) {
					val = code;
				}
			}

			if (encoding !== undefined && typeof encoding !== 'string') {
				throw new TypeError('encoding must be a string');
			}

			if (typeof encoding === 'string' && !Buffer$1.isEncoding(encoding)) {
				throw new TypeError('Unknown encoding: ' + encoding);
			}
		} else if (typeof val === 'number') {
			val = val & 255;
		} // Invalid ranges are not set to a default, so can range check early.


		if (start < 0 || this.length < start || this.length < end) {
			throw new RangeError('Out of range index');
		}

		if (end <= start) {
			return this;
		}

		start = start >>> 0;
		end = end === undefined ? this.length : end >>> 0;
		if (!val) val = 0;
		var i;

		if (typeof val === 'number') {
			for (i = start; i < end; ++i) {
				this[i] = val;
			}
		} else {
			var bytes = internalIsBuffer$1(val) ? val : utf8ToBytes$1(new Buffer$1(val, encoding).toString());
			var len = bytes.length;

			for (i = 0; i < end - start; ++i) {
				this[i + start] = bytes[i % len];
			}
		}

		return this;
	}; // HELPER FUNCTIONS
	// ================


	var INVALID_BASE64_RE$1 = /[^+\/0-9A-Za-z-_]/g;

	function base64clean$1(str) {
		// Node strips out invalid characters like \n and \t from the string, base64-js does not
		str = stringtrim$1(str).replace(INVALID_BASE64_RE$1, ''); // Node converts strings with length < 2 to ''

		if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

		while (str.length % 4 !== 0) {
			str = str + '=';
		}

		return str;
	}

	function stringtrim$1(str) {
		if (str.trim) return str.trim();
		return str.replace(/^\s+|\s+$/g, '');
	}

	function toHex$1(n) {
		if (n < 16) return '0' + n.toString(16);
		return n.toString(16);
	}

	function utf8ToBytes$1(string, units) {
		units = units || Infinity;
		var codePoint;
		var length = string.length;
		var leadSurrogate = null;
		var bytes = [];

		for (var i = 0; i < length; ++i) {
			codePoint = string.charCodeAt(i); // is surrogate component

			if (codePoint > 0xD7FF && codePoint < 0xE000) {
				// last char was a lead
				if (!leadSurrogate) {
					// no lead yet
					if (codePoint > 0xDBFF) {
						// unexpected trail
						if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
						continue;
					} else if (i + 1 === length) {
						// unpaired lead
						if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
						continue;
					} // valid lead


					leadSurrogate = codePoint;
					continue;
				} // 2 leads in a row


				if (codePoint < 0xDC00) {
					if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
					leadSurrogate = codePoint;
					continue;
				} // valid surrogate pair


				codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
			} else if (leadSurrogate) {
				// valid bmp char, but last char was a lead
				if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
			}

			leadSurrogate = null; // encode utf8

			if (codePoint < 0x80) {
				if ((units -= 1) < 0) break;
				bytes.push(codePoint);
			} else if (codePoint < 0x800) {
				if ((units -= 2) < 0) break;
				bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
			} else if (codePoint < 0x10000) {
				if ((units -= 3) < 0) break;
				bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
			} else if (codePoint < 0x110000) {
				if ((units -= 4) < 0) break;
				bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
			} else {
				throw new Error('Invalid code point');
			}
		}

		return bytes;
	}

	function asciiToBytes$1(str) {
		var byteArray = [];

		for (var i = 0; i < str.length; ++i) {
			// Node's code seems to be doing this and not & 0x7F..
			byteArray.push(str.charCodeAt(i) & 0xFF);
		}

		return byteArray;
	}

	function utf16leToBytes$1(str, units) {
		var c, hi, lo;
		var byteArray = [];

		for (var i = 0; i < str.length; ++i) {
			if ((units -= 2) < 0) break;
			c = str.charCodeAt(i);
			hi = c >> 8;
			lo = c % 256;
			byteArray.push(lo);
			byteArray.push(hi);
		}

		return byteArray;
	}

	function base64ToBytes$1(str) {
		return toByteArray$1(base64clean$1(str));
	}

	function blitBuffer$1(src, dst, offset, length) {
		for (var i = 0; i < length; ++i) {
			if (i + offset >= dst.length || i >= src.length) break;
			dst[i + offset] = src[i];
		}

		return i;
	}

	function isnan$1(val) {
		return val !== val; // eslint-disable-line no-self-compare
	} // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
	// The _isBuffer check is for Safari 5-7 support, because it's missing
	// Object.prototype.constructor. Remove this eventually


	function isBuffer$2(obj) {
		return obj != null && (!!obj._isBuffer || isFastBuffer$1(obj) || isSlowBuffer$1(obj));
	}

	function isFastBuffer$1(obj) {
		return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
	} // For Node v0.10 support. Remove this eventually.


	function isSlowBuffer$1(obj) {
		return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer$1(obj.slice(0, 0));
	}

	function BufferList() {
		this.head = null;
		this.tail = null;
		this.length = 0;
	}

	BufferList.prototype.push = function (v) {
		var entry = {
			data: v,
			next: null
		};
		if (this.length > 0) this.tail.next = entry; else this.head = entry;
		this.tail = entry;
		++this.length;
	};

	BufferList.prototype.unshift = function (v) {
		var entry = {
			data: v,
			next: this.head
		};
		if (this.length === 0) this.tail = entry;
		this.head = entry;
		++this.length;
	};

	BufferList.prototype.shift = function () {
		if (this.length === 0) return;
		var ret = this.head.data;
		if (this.length === 1) this.head = this.tail = null; else this.head = this.head.next;
		--this.length;
		return ret;
	};

	BufferList.prototype.clear = function () {
		this.head = this.tail = null;
		this.length = 0;
	};

	BufferList.prototype.join = function (s) {
		if (this.length === 0) return '';
		var p = this.head;
		var ret = '' + p.data;

		while (p = p.next) {
			ret += s + p.data;
		}

		return ret;
	};

	BufferList.prototype.concat = function (n) {
		if (this.length === 0) return Buffer$1.alloc(0);
		if (this.length === 1) return this.head.data;
		var ret = Buffer$1.allocUnsafe(n >>> 0);
		var p = this.head;
		var i = 0;

		while (p) {
			p.data.copy(ret, i);
			i += p.data.length;
			p = p.next;
		}

		return ret;
	};

	var isBufferEncoding = Buffer$1.isEncoding || function (encoding) {
		switch (encoding && encoding.toLowerCase()) {
			case 'hex':
			case 'utf8':
			case 'utf-8':
			case 'ascii':
			case 'binary':
			case 'base64':
			case 'ucs2':
			case 'ucs-2':
			case 'utf16le':
			case 'utf-16le':
			case 'raw':
				return true;

			default:
				return false;
		}
	};

	function assertEncoding(encoding) {
		if (encoding && !isBufferEncoding(encoding)) {
			throw new Error('Unknown encoding: ' + encoding);
		}
	} // StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.


	function StringDecoder(encoding) {
		this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
		assertEncoding(encoding);

		switch (this.encoding) {
			case 'utf8':
				// CESU-8 represents each of Surrogate Pair by 3-bytes
				this.surrogateSize = 3;
				break;

			case 'ucs2':
			case 'utf16le':
				// UTF-16 represents each of Surrogate Pair by 2-bytes
				this.surrogateSize = 2;
				this.detectIncompleteChar = utf16DetectIncompleteChar;
				break;

			case 'base64':
				// Base-64 stores 3 bytes in 4 chars, and pads the remainder.
				this.surrogateSize = 3;
				this.detectIncompleteChar = base64DetectIncompleteChar;
				break;

			default:
				this.write = passThroughWrite;
				return;
		} // Enough space to store all bytes of a single character. UTF-8 needs 4
		// bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).


		this.charBuffer = new Buffer$1(6); // Number of bytes received for the current incomplete multi-byte character.

		this.charReceived = 0; // Number of bytes expected for the current incomplete multi-byte character.

		this.charLength = 0;
	}
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .

	StringDecoder.prototype.write = function (buffer) {
		var charStr = ''; // if our last write ended with an incomplete multibyte character

		while (this.charLength) {
			// determine how many remaining bytes this buffer has to offer for this char
			var available = buffer.length >= this.charLength - this.charReceived ? this.charLength - this.charReceived : buffer.length; // add the new bytes to the char buffer

			buffer.copy(this.charBuffer, this.charReceived, 0, available);
			this.charReceived += available;

			if (this.charReceived < this.charLength) {
				// still not enough chars in this buffer? wait for more ...
				return '';
			} // remove bytes belonging to the current character from the buffer


			buffer = buffer.slice(available, buffer.length); // get the character that was split

			charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding); // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character

			var charCode = charStr.charCodeAt(charStr.length - 1);

			if (charCode >= 0xD800 && charCode <= 0xDBFF) {
				this.charLength += this.surrogateSize;
				charStr = '';
				continue;
			}

			this.charReceived = this.charLength = 0; // if there are no more bytes in this buffer, just emit our char

			if (buffer.length === 0) {
				return charStr;
			}

			break;
		} // determine and set charLength / charReceived


		this.detectIncompleteChar(buffer);
		var end = buffer.length;

		if (this.charLength) {
			// buffer the incomplete character bytes we got
			buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
			end -= this.charReceived;
		}

		charStr += buffer.toString(this.encoding, 0, end);
		var end = charStr.length - 1;
		var charCode = charStr.charCodeAt(end); // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character

		if (charCode >= 0xD800 && charCode <= 0xDBFF) {
			var size = this.surrogateSize;
			this.charLength += size;
			this.charReceived += size;
			this.charBuffer.copy(this.charBuffer, size, 0, size);
			buffer.copy(this.charBuffer, 0, 0, size);
			return charStr.substring(0, end);
		} // or just emit the charStr


		return charStr;
	}; // detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.


	StringDecoder.prototype.detectIncompleteChar = function (buffer) {
		// determine how many bytes we have to check at the end of this buffer
		var i = buffer.length >= 3 ? 3 : buffer.length; // Figure out if one of the last i bytes of our buffer announces an
		// incomplete char.

		for (; i > 0; i--) {
			var c = buffer[buffer.length - i]; // See http://en.wikipedia.org/wiki/UTF-8#Description
			// 110XXXXX

			if (i == 1 && c >> 5 == 0x06) {
				this.charLength = 2;
				break;
			} // 1110XXXX


			if (i <= 2 && c >> 4 == 0x0E) {
				this.charLength = 3;
				break;
			} // 11110XXX


			if (i <= 3 && c >> 3 == 0x1E) {
				this.charLength = 4;
				break;
			}
		}

		this.charReceived = i;
	};

	StringDecoder.prototype.end = function (buffer) {
		var res = '';
		if (buffer && buffer.length) res = this.write(buffer);

		if (this.charReceived) {
			var cr = this.charReceived;
			var buf = this.charBuffer;
			var enc = this.encoding;
			res += buf.slice(0, cr).toString(enc);
		}

		return res;
	};

	function passThroughWrite(buffer) {
		return buffer.toString(this.encoding);
	}

	function utf16DetectIncompleteChar(buffer) {
		this.charReceived = buffer.length % 2;
		this.charLength = this.charReceived ? 2 : 0;
	}

	function base64DetectIncompleteChar(buffer) {
		this.charReceived = buffer.length % 3;
		this.charLength = this.charReceived ? 3 : 0;
	}

	Readable.ReadableState = ReadableState;
	var debug = debuglog('stream');
	inherits$1(Readable, EventEmitter);

	function prependListener(emitter, event, fn) {
		// Sadly this is not cacheable as some libraries bundle their own
		// event emitter implementation with them.
		if (typeof emitter.prependListener === 'function') {
			return emitter.prependListener(event, fn);
		} else {
			// This is a hack to make sure that our error handler is attached before any
			// userland ones.  NEVER DO THIS. This is here only because this code needs
			// to continue to work with older versions of Node.js that do not include
			// the prependListener() method. The goal is to eventually remove this hack.
			if (!emitter._events || !emitter._events[event]) emitter.on(event, fn); else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn); else emitter._events[event] = [fn, emitter._events[event]];
		}
	}

	function listenerCount$1(emitter, type) {
		return emitter.listeners(type).length;
	}

	function ReadableState(options, stream) {
		options = options || {}; // object stream flag. Used to make read(n) ignore n and to
		// make all the buffer merging and length checks go away

		this.objectMode = !!options.objectMode;
		if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
		// Note: 0 is a valid value, means "don't call _read preemptively ever"

		var hwm = options.highWaterMark;
		var defaultHwm = this.objectMode ? 16 : 16 * 1024;
		this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm; // cast to ints.

		this.highWaterMark = ~~this.highWaterMark; // A linked list is used to store data chunks instead of an array because the
		// linked list can remove elements from the beginning faster than
		// array.shift()

		this.buffer = new BufferList();
		this.length = 0;
		this.pipes = null;
		this.pipesCount = 0;
		this.flowing = null;
		this.ended = false;
		this.endEmitted = false;
		this.reading = false; // a flag to be able to tell if the onwrite cb is called immediately,
		// or on a later tick.  We set this to true at first, because any
		// actions that shouldn't happen until "later" should generally also
		// not happen before the first write call.

		this.sync = true; // whenever we return null, then we set a flag to say
		// that we're awaiting a 'readable' event emission.

		this.needReadable = false;
		this.emittedReadable = false;
		this.readableListening = false;
		this.resumeScheduled = false; // Crypto is kind of old and crusty.  Historically, its default string
		// encoding is 'binary' so we have to make this configurable.
		// Everything else in the universe uses 'utf8', though.

		this.defaultEncoding = options.defaultEncoding || 'utf8'; // when piping, we only care about 'readable' events that happen
		// after read()ing all the bytes and not getting any pushback.

		this.ranOut = false; // the number of writers that are awaiting a drain event in .pipe()s

		this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

		this.readingMore = false;
		this.decoder = null;
		this.encoding = null;

		if (options.encoding) {
			this.decoder = new StringDecoder(options.encoding);
			this.encoding = options.encoding;
		}
	}
	function Readable(options) {
		if (!(this instanceof Readable)) return new Readable(options);
		this._readableState = new ReadableState(options, this); // legacy

		this.readable = true;
		if (options && typeof options.read === 'function') this._read = options.read;
		EventEmitter.call(this);
	} // Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.

	Readable.prototype.push = function (chunk, encoding) {
		var state = this._readableState;

		if (!state.objectMode && typeof chunk === 'string') {
			encoding = encoding || state.defaultEncoding;

			if (encoding !== state.encoding) {
				chunk = Buffer.from(chunk, encoding);
				encoding = '';
			}
		}

		return readableAddChunk(this, state, chunk, encoding, false);
	}; // Unshift should *always* be something directly out of read()


	Readable.prototype.unshift = function (chunk) {
		var state = this._readableState;
		return readableAddChunk(this, state, chunk, '', true);
	};

	Readable.prototype.isPaused = function () {
		return this._readableState.flowing === false;
	};

	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
		var er = chunkInvalid(state, chunk);

		if (er) {
			stream.emit('error', er);
		} else if (chunk === null) {
			state.reading = false;
			onEofChunk(stream, state);
		} else if (state.objectMode || chunk && chunk.length > 0) {
			if (state.ended && !addToFront) {
				var e = new Error('stream.push() after EOF');
				stream.emit('error', e);
			} else if (state.endEmitted && addToFront) {
				var _e = new Error('stream.unshift() after end event');

				stream.emit('error', _e);
			} else {
				var skipAdd;

				if (state.decoder && !addToFront && !encoding) {
					chunk = state.decoder.write(chunk);
					skipAdd = !state.objectMode && chunk.length === 0;
				}

				if (!addToFront) state.reading = false; // Don't add to the buffer if we've decoded to an empty string chunk and
				// we're not in object mode

				if (!skipAdd) {
					// if we want the data now, just emit it.
					if (state.flowing && state.length === 0 && !state.sync) {
						stream.emit('data', chunk);
						stream.read(0);
					} else {
						// update the buffer info.
						state.length += state.objectMode ? 1 : chunk.length;
						if (addToFront) state.buffer.unshift(chunk); else state.buffer.push(chunk);
						if (state.needReadable) emitReadable(stream);
					}
				}

				maybeReadMore(stream, state);
			}
		} else if (!addToFront) {
			state.reading = false;
		}

		return needMoreData(state);
	} // if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.


	function needMoreData(state) {
		return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
	} // backwards compatibility.


	Readable.prototype.setEncoding = function (enc) {
		this._readableState.decoder = new StringDecoder(enc);
		this._readableState.encoding = enc;
		return this;
	}; // Don't raise the hwm > 8MB


	var MAX_HWM = 0x800000;

	function computeNewHighWaterMark(n) {
		if (n >= MAX_HWM) {
			n = MAX_HWM;
		} else {
			// Get the next highest power of 2 to prevent increasing hwm excessively in
			// tiny amounts
			n--;
			n |= n >>> 1;
			n |= n >>> 2;
			n |= n >>> 4;
			n |= n >>> 8;
			n |= n >>> 16;
			n++;
		}

		return n;
	} // This function is designed to be inlinable, so please take care when making
	// changes to the function body.


	function howMuchToRead(n, state) {
		if (n <= 0 || state.length === 0 && state.ended) return 0;
		if (state.objectMode) return 1;

		if (n !== n) {
			// Only flow one buffer at a time
			if (state.flowing && state.length) return state.buffer.head.data.length; else return state.length;
		} // If we're asking for more than the current hwm, then raise the hwm.


		if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
		if (n <= state.length) return n; // Don't have enough

		if (!state.ended) {
			state.needReadable = true;
			return 0;
		}

		return state.length;
	} // you can override either this method, or the async _read(n) below.


	Readable.prototype.read = function (n) {
		debug('read', n);
		n = parseInt(n, 10);
		var state = this._readableState;
		var nOrig = n;
		if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
		// already have a bunch of data in the buffer, then just trigger
		// the 'readable' event and move on.

		if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
			debug('read: emitReadable', state.length, state.ended);
			if (state.length === 0 && state.ended) endReadable(this); else emitReadable(this);
			return null;
		}

		n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

		if (n === 0 && state.ended) {
			if (state.length === 0) endReadable(this);
			return null;
		} // All the actual chunk generation logic needs to be
		// *below* the call to _read.  The reason is that in certain
		// synthetic stream cases, such as passthrough streams, _read
		// may be a completely synchronous operation which may change
		// the state of the read buffer, providing enough data when
		// before there was *not* enough.
		//
		// So, the steps are:
		// 1. Figure out what the state of things will be after we do
		// a read from the buffer.
		//
		// 2. If that resulting state will trigger a _read, then call _read.
		// Note that this may be asynchronous, or synchronous.  Yes, it is
		// deeply ugly to write APIs this way, but that still doesn't mean
		// that the Readable class should behave improperly, as streams are
		// designed to be sync/async agnostic.
		// Take note if the _read call is sync or async (ie, if the read call
		// has returned yet), so that we know whether or not it's safe to emit
		// 'readable' etc.
		//
		// 3. Actually pull the requested chunks out of the buffer and return.
		// if we need a readable event, then we need to do some reading.


		var doRead = state.needReadable;
		debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

		if (state.length === 0 || state.length - n < state.highWaterMark) {
			doRead = true;
			debug('length less than watermark', doRead);
		} // however, if we've ended, then there's no point, and if we're already
		// reading, then it's unnecessary.


		if (state.ended || state.reading) {
			doRead = false;
			debug('reading or ended', doRead);
		} else if (doRead) {
			debug('do read');
			state.reading = true;
			state.sync = true; // if the length is currently zero, then we *need* a readable event.

			if (state.length === 0) state.needReadable = true; // call internal read method

			this._read(state.highWaterMark);

			state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
			// and we need to re-evaluate how much data we can return to the user.

			if (!state.reading) n = howMuchToRead(nOrig, state);
		}

		var ret;
		if (n > 0) ret = fromList(n, state); else ret = null;

		if (ret === null) {
			state.needReadable = true;
			n = 0;
		} else {
			state.length -= n;
		}

		if (state.length === 0) {
			// If we have nothing in the buffer, then we want to know
			// as soon as we *do* get something into the buffer.
			if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

			if (nOrig !== n && state.ended) endReadable(this);
		}

		if (ret !== null) this.emit('data', ret);
		return ret;
	};

	function chunkInvalid(state, chunk) {
		var er = null;

		if (!isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
			er = new TypeError('Invalid non-string/buffer chunk');
		}

		return er;
	}

	function onEofChunk(stream, state) {
		if (state.ended) return;

		if (state.decoder) {
			var chunk = state.decoder.end();

			if (chunk && chunk.length) {
				state.buffer.push(chunk);
				state.length += state.objectMode ? 1 : chunk.length;
			}
		}

		state.ended = true; // emit 'readable' now to make sure it gets picked up.

		emitReadable(stream);
	} // Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.


	function emitReadable(stream) {
		var state = stream._readableState;
		state.needReadable = false;

		if (!state.emittedReadable) {
			debug('emitReadable', state.flowing);
			state.emittedReadable = true;
			if (state.sync) nextTick$1(emitReadable_, stream); else emitReadable_(stream);
		}
	}

	function emitReadable_(stream) {
		debug('emit readable');
		stream.emit('readable');
		flow(stream);
	} // at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.


	function maybeReadMore(stream, state) {
		if (!state.readingMore) {
			state.readingMore = true;
			nextTick$1(maybeReadMore_, stream, state);
		}
	}

	function maybeReadMore_(stream, state) {
		var len = state.length;

		while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
			debug('maybeReadMore read 0');
			stream.read(0);
			if (len === state.length) // didn't get any data, stop spinning.
				break; else len = state.length;
		}

		state.readingMore = false;
	} // abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.


	Readable.prototype._read = function (n) {
		this.emit('error', new Error('not implemented'));
	};

	Readable.prototype.pipe = function (dest, pipeOpts) {
		var src = this;
		var state = this._readableState;

		switch (state.pipesCount) {
			case 0:
				state.pipes = dest;
				break;

			case 1:
				state.pipes = [state.pipes, dest];
				break;

			default:
				state.pipes.push(dest);
				break;
		}

		state.pipesCount += 1;
		debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
		var doEnd = !pipeOpts || pipeOpts.end !== false;
		var endFn = doEnd ? onend : cleanup;
		if (state.endEmitted) nextTick$1(endFn); else src.once('end', endFn);
		dest.on('unpipe', onunpipe);

		function onunpipe(readable) {
			debug('onunpipe');

			if (readable === src) {
				cleanup();
			}
		}

		function onend() {
			debug('onend');
			dest.end();
		} // when the dest drains, it reduces the awaitDrain counter
		// on the source.  This would be more elegant with a .once()
		// handler in flow(), but adding and removing repeatedly is
		// too slow.


		var ondrain = pipeOnDrain(src);
		dest.on('drain', ondrain);
		var cleanedUp = false;

		function cleanup() {
			debug('cleanup'); // cleanup event handlers once the pipe is broken

			dest.removeListener('close', onclose);
			dest.removeListener('finish', onfinish);
			dest.removeListener('drain', ondrain);
			dest.removeListener('error', onerror);
			dest.removeListener('unpipe', onunpipe);
			src.removeListener('end', onend);
			src.removeListener('end', cleanup);
			src.removeListener('data', ondata);
			cleanedUp = true; // if the reader is waiting for a drain event from this
			// specific writer, then it would cause it to never start
			// flowing again.
			// So, if this is awaiting a drain, then we just call it now.
			// If we don't know, then assume that we are waiting for one.

			if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
		} // If the user pushes more data while we're writing to dest then we'll end up
		// in ondata again. However, we only want to increase awaitDrain once because
		// dest will only emit one 'drain' event for the multiple writes.
		// => Introduce a guard on increasing awaitDrain.


		var increasedAwaitDrain = false;
		src.on('data', ondata);

		function ondata(chunk) {
			debug('ondata');
			increasedAwaitDrain = false;
			var ret = dest.write(chunk);

			if (false === ret && !increasedAwaitDrain) {
				// If the user unpiped during `dest.write()`, it is possible
				// to get stuck in a permanently paused state if that write
				// also returned false.
				// => Check whether `dest` is still a piping destination.
				if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf$1(state.pipes, dest) !== -1) && !cleanedUp) {
					debug('false write response, pause', src._readableState.awaitDrain);
					src._readableState.awaitDrain++;
					increasedAwaitDrain = true;
				}

				src.pause();
			}
		} // if the dest has an error, then stop piping into it.
		// however, don't suppress the throwing behavior for this.


		function onerror(er) {
			debug('onerror', er);
			unpipe();
			dest.removeListener('error', onerror);
			if (listenerCount$1(dest, 'error') === 0) dest.emit('error', er);
		} // Make sure our error handler is attached before userland ones.


		prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

		function onclose() {
			dest.removeListener('finish', onfinish);
			unpipe();
		}

		dest.once('close', onclose);

		function onfinish() {
			debug('onfinish');
			dest.removeListener('close', onclose);
			unpipe();
		}

		dest.once('finish', onfinish);

		function unpipe() {
			debug('unpipe');
			src.unpipe(dest);
		} // tell the dest that it's being piped to


		dest.emit('pipe', src); // start the flow if it hasn't been started already.

		if (!state.flowing) {
			debug('pipe resume');
			src.resume();
		}

		return dest;
	};

	function pipeOnDrain(src) {
		return function () {
			var state = src._readableState;
			debug('pipeOnDrain', state.awaitDrain);
			if (state.awaitDrain) state.awaitDrain--;

			if (state.awaitDrain === 0 && src.listeners('data').length) {
				state.flowing = true;
				flow(src);
			}
		};
	}

	Readable.prototype.unpipe = function (dest) {
		var state = this._readableState; // if we're not piping anywhere, then do nothing.

		if (state.pipesCount === 0) return this; // just one destination.  most common case.

		if (state.pipesCount === 1) {
			// passed in one, but it's not the right one.
			if (dest && dest !== state.pipes) return this;
			if (!dest) dest = state.pipes; // got a match.

			state.pipes = null;
			state.pipesCount = 0;
			state.flowing = false;
			if (dest) dest.emit('unpipe', this);
			return this;
		} // slow case. multiple pipe destinations.


		if (!dest) {
			// remove all.
			var dests = state.pipes;
			var len = state.pipesCount;
			state.pipes = null;
			state.pipesCount = 0;
			state.flowing = false;

			for (var _i = 0; _i < len; _i++) {
				dests[_i].emit('unpipe', this);
			}

			return this;
		} // try to find the right one.


		var i = indexOf$1(state.pipes, dest);
		if (i === -1) return this;
		state.pipes.splice(i, 1);
		state.pipesCount -= 1;
		if (state.pipesCount === 1) state.pipes = state.pipes[0];
		dest.emit('unpipe', this);
		return this;
	}; // set up data events if they are asked for
	// Ensure readable listeners eventually get something


	Readable.prototype.on = function (ev, fn) {
		var res = EventEmitter.prototype.on.call(this, ev, fn);

		if (ev === 'data') {
			// Start flowing on next tick if stream isn't explicitly paused
			if (this._readableState.flowing !== false) this.resume();
		} else if (ev === 'readable') {
			var state = this._readableState;

			if (!state.endEmitted && !state.readableListening) {
				state.readableListening = state.needReadable = true;
				state.emittedReadable = false;

				if (!state.reading) {
					nextTick$1(nReadingNextTick, this);
				} else if (state.length) {
					emitReadable(this);
				}
			}
		}

		return res;
	};

	Readable.prototype.addListener = Readable.prototype.on;

	function nReadingNextTick(self) {
		debug('readable nexttick read 0');
		self.read(0);
	} // pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.


	Readable.prototype.resume = function () {
		var state = this._readableState;

		if (!state.flowing) {
			debug('resume');
			state.flowing = true;
			resume(this, state);
		}

		return this;
	};

	function resume(stream, state) {
		if (!state.resumeScheduled) {
			state.resumeScheduled = true;
			nextTick$1(resume_, stream, state);
		}
	}

	function resume_(stream, state) {
		if (!state.reading) {
			debug('resume read 0');
			stream.read(0);
		}

		state.resumeScheduled = false;
		state.awaitDrain = 0;
		stream.emit('resume');
		flow(stream);
		if (state.flowing && !state.reading) stream.read(0);
	}

	Readable.prototype.pause = function () {
		debug('call pause flowing=%j', this._readableState.flowing);

		if (false !== this._readableState.flowing) {
			debug('pause');
			this._readableState.flowing = false;
			this.emit('pause');
		}

		return this;
	};

	function flow(stream) {
		var state = stream._readableState;
		debug('flow', state.flowing);

		while (state.flowing && stream.read() !== null) { }
	} // wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.


	Readable.prototype.wrap = function (stream) {
		var state = this._readableState;
		var paused = false;
		var self = this;
		stream.on('end', function () {
			debug('wrapped end');

			if (state.decoder && !state.ended) {
				var chunk = state.decoder.end();
				if (chunk && chunk.length) self.push(chunk);
			}

			self.push(null);
		});
		stream.on('data', function (chunk) {
			debug('wrapped data');
			if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

			if (state.objectMode && (chunk === null || chunk === undefined)) return; else if (!state.objectMode && (!chunk || !chunk.length)) return;
			var ret = self.push(chunk);

			if (!ret) {
				paused = true;
				stream.pause();
			}
		}); // proxy all the other methods.
		// important when wrapping filters and duplexes.

		for (var i in stream) {
			if (this[i] === undefined && typeof stream[i] === 'function') {
				this[i] = function (method) {
					return function () {
						return stream[method].apply(stream, arguments);
					};
				}(i);
			}
		} // proxy certain important events.


		var events = ['error', 'close', 'destroy', 'pause', 'resume'];
		forEach(events, function (ev) {
			stream.on(ev, self.emit.bind(self, ev));
		}); // when we try to consume some more bytes, simply unpause the
		// underlying stream.

		self._read = function (n) {
			debug('wrapped _read', n);

			if (paused) {
				paused = false;
				stream.resume();
			}
		};

		return self;
	}; // exposed for testing purposes only.


	Readable._fromList = fromList; // Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.

	function fromList(n, state) {
		// nothing buffered
		if (state.length === 0) return null;
		var ret;
		if (state.objectMode) ret = state.buffer.shift(); else if (!n || n >= state.length) {
			// read it all, truncate the list
			if (state.decoder) ret = state.buffer.join(''); else if (state.buffer.length === 1) ret = state.buffer.head.data; else ret = state.buffer.concat(state.length);
			state.buffer.clear();
		} else {
			// read part of list
			ret = fromListPartial(n, state.buffer, state.decoder);
		}
		return ret;
	} // Extracts only enough buffered data to satisfy the amount requested.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.


	function fromListPartial(n, list, hasStrings) {
		var ret;

		if (n < list.head.data.length) {
			// slice is the same for buffers and strings
			ret = list.head.data.slice(0, n);
			list.head.data = list.head.data.slice(n);
		} else if (n === list.head.data.length) {
			// first chunk is a perfect match
			ret = list.shift();
		} else {
			// result spans more than one buffer
			ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
		}

		return ret;
	} // Copies a specified amount of characters from the list of buffered data
	// chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.


	function copyFromBufferString(n, list) {
		var p = list.head;
		var c = 1;
		var ret = p.data;
		n -= ret.length;

		while (p = p.next) {
			var str = p.data;
			var nb = n > str.length ? str.length : n;
			if (nb === str.length) ret += str; else ret += str.slice(0, n);
			n -= nb;

			if (n === 0) {
				if (nb === str.length) {
					++c;
					if (p.next) list.head = p.next; else list.head = list.tail = null;
				} else {
					list.head = p;
					p.data = str.slice(nb);
				}

				break;
			}

			++c;
		}

		list.length -= c;
		return ret;
	} // Copies a specified amount of bytes from the list of buffered data chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.


	function copyFromBuffer(n, list) {
		var ret = Buffer.allocUnsafe(n);
		var p = list.head;
		var c = 1;
		p.data.copy(ret);
		n -= p.data.length;

		while (p = p.next) {
			var buf = p.data;
			var nb = n > buf.length ? buf.length : n;
			buf.copy(ret, ret.length - n, 0, nb);
			n -= nb;

			if (n === 0) {
				if (nb === buf.length) {
					++c;
					if (p.next) list.head = p.next; else list.head = list.tail = null;
				} else {
					list.head = p;
					p.data = buf.slice(nb);
				}

				break;
			}

			++c;
		}

		list.length -= c;
		return ret;
	}

	function endReadable(stream) {
		var state = stream._readableState; // If we get here before consuming all the bytes, then that is a
		// bug in node.  Should never happen.

		if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

		if (!state.endEmitted) {
			state.ended = true;
			nextTick$1(endReadableNT, state, stream);
		}
	}

	function endReadableNT(state, stream) {
		// Check that we didn't get one last unshift.
		if (!state.endEmitted && state.length === 0) {
			state.endEmitted = true;
			stream.readable = false;
			stream.emit('end');
		}
	}

	function forEach(xs, f) {
		for (var i = 0, l = xs.length; i < l; i++) {
			f(xs[i], i);
		}
	}

	function indexOf$1(xs, x) {
		for (var i = 0, l = xs.length; i < l; i++) {
			if (xs[i] === x) return i;
		}

		return -1;
	}

	Writable.WritableState = WritableState;
	inherits$1(Writable, EventEmitter);

	function nop() { }

	function WriteReq(chunk, encoding, cb) {
		this.chunk = chunk;
		this.encoding = encoding;
		this.callback = cb;
		this.next = null;
	}

	function WritableState(options, stream) {
		Object.defineProperty(this, 'buffer', {
			get: deprecate(function () {
				return this.getBuffer();
			}, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
		});
		options = options || {}; // object stream flag to indicate whether or not this stream
		// contains buffers or objects.

		this.objectMode = !!options.objectMode;
		if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
		// Note: 0 is a valid value, means that we always return false if
		// the entire buffer is not flushed immediately on write()

		var hwm = options.highWaterMark;
		var defaultHwm = this.objectMode ? 16 : 16 * 1024;
		this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm; // cast to ints.

		this.highWaterMark = ~~this.highWaterMark;
		this.needDrain = false; // at the start of calling end()

		this.ending = false; // when end() has been called, and returned

		this.ended = false; // when 'finish' is emitted

		this.finished = false; // should we decode strings into buffers before passing to _write?
		// this is here so that some node-core streams can optimize string
		// handling at a lower level.

		var noDecode = options.decodeStrings === false;
		this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
		// encoding is 'binary' so we have to make this configurable.
		// Everything else in the universe uses 'utf8', though.

		this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
		// of how much we're waiting to get pushed to some underlying
		// socket or file.

		this.length = 0; // a flag to see when we're in the middle of a write.

		this.writing = false; // when true all writes will be buffered until .uncork() call

		this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
		// or on a later tick.  We set this to true at first, because any
		// actions that shouldn't happen until "later" should generally also
		// not happen before the first write call.

		this.sync = true; // a flag to know if we're processing previously buffered items, which
		// may call the _write() callback in the same tick, so that we don't
		// end up in an overlapped onwrite situation.

		this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

		this.onwrite = function (er) {
			onwrite(stream, er);
		}; // the callback that the user supplies to write(chunk,encoding,cb)


		this.writecb = null; // the amount that is being written when _write is called.

		this.writelen = 0;
		this.bufferedRequest = null;
		this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
		// this must be 0 before 'finish' can be emitted

		this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
		// This is relevant for synchronous Transform streams

		this.prefinished = false; // True if the error was already emitted and should not be thrown again

		this.errorEmitted = false; // count buffered requests

		this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
		// one allocated and free to use, and we maintain at most two

		this.corkedRequestsFree = new CorkedRequest(this);
	}

	WritableState.prototype.getBuffer = function writableStateGetBuffer() {
		var current = this.bufferedRequest;
		var out = [];

		while (current) {
			out.push(current);
			current = current.next;
		}

		return out;
	};
	function Writable(options) {
		// Writable ctor is applied to Duplexes, though they're not
		// instanceof Writable, they're instanceof Readable.
		if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);
		this._writableState = new WritableState(options, this); // legacy.

		this.writable = true;

		if (options) {
			if (typeof options.write === 'function') this._write = options.write;
			if (typeof options.writev === 'function') this._writev = options.writev;
		}

		EventEmitter.call(this);
	} // Otherwise people can pipe Writable streams, which is just wrong.

	Writable.prototype.pipe = function () {
		this.emit('error', new Error('Cannot pipe, not readable'));
	};

	function writeAfterEnd(stream, cb) {
		var er = new Error('write after end'); // TODO: defer error events consistently everywhere, not just the cb

		stream.emit('error', er);
		nextTick$1(cb, er);
	} // If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.


	function validChunk(stream, state, chunk, cb) {
		var valid = true;
		var er = false; // Always throw error if a null is written
		// if we are not in object mode then throw
		// if it is not a buffer, string, or undefined.

		if (chunk === null) {
			er = new TypeError('May not write null values to stream');
		} else if (!Buffer$1.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
			er = new TypeError('Invalid non-string/buffer chunk');
		}

		if (er) {
			stream.emit('error', er);
			nextTick$1(cb, er);
			valid = false;
		}

		return valid;
	}

	Writable.prototype.write = function (chunk, encoding, cb) {
		var state = this._writableState;
		var ret = false;

		if (typeof encoding === 'function') {
			cb = encoding;
			encoding = null;
		}

		if (Buffer$1.isBuffer(chunk)) encoding = 'buffer'; else if (!encoding) encoding = state.defaultEncoding;
		if (typeof cb !== 'function') cb = nop;
		if (state.ended) writeAfterEnd(this, cb); else if (validChunk(this, state, chunk, cb)) {
			state.pendingcb++;
			ret = writeOrBuffer(this, state, chunk, encoding, cb);
		}
		return ret;
	};

	Writable.prototype.cork = function () {
		var state = this._writableState;
		state.corked++;
	};

	Writable.prototype.uncork = function () {
		var state = this._writableState;

		if (state.corked) {
			state.corked--;
			if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
		}
	};

	Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
		// node::ParseEncoding() requires lower case.
		if (typeof encoding === 'string') encoding = encoding.toLowerCase();
		if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
		this._writableState.defaultEncoding = encoding;
		return this;
	};

	function decodeChunk(state, chunk, encoding) {
		if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
			chunk = Buffer$1.from(chunk, encoding);
		}

		return chunk;
	} // if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.


	function writeOrBuffer(stream, state, chunk, encoding, cb) {
		chunk = decodeChunk(state, chunk, encoding);
		if (Buffer$1.isBuffer(chunk)) encoding = 'buffer';
		var len = state.objectMode ? 1 : chunk.length;
		state.length += len;
		var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

		if (!ret) state.needDrain = true;

		if (state.writing || state.corked) {
			var last = state.lastBufferedRequest;
			state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);

			if (last) {
				last.next = state.lastBufferedRequest;
			} else {
				state.bufferedRequest = state.lastBufferedRequest;
			}

			state.bufferedRequestCount += 1;
		} else {
			doWrite(stream, state, false, len, chunk, encoding, cb);
		}

		return ret;
	}

	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
		state.writelen = len;
		state.writecb = cb;
		state.writing = true;
		state.sync = true;
		if (writev) stream._writev(chunk, state.onwrite); else stream._write(chunk, encoding, state.onwrite);
		state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
		--state.pendingcb;
		if (sync) nextTick$1(cb, er); else cb(er);
		stream._writableState.errorEmitted = true;
		stream.emit('error', er);
	}

	function onwriteStateUpdate(state) {
		state.writing = false;
		state.writecb = null;
		state.length -= state.writelen;
		state.writelen = 0;
	}

	function onwrite(stream, er) {
		var state = stream._writableState;
		var sync = state.sync;
		var cb = state.writecb;
		onwriteStateUpdate(state);
		if (er) onwriteError(stream, state, sync, er, cb); else {
			// Check if we're actually ready to finish, but don't emit yet
			var finished = needFinish(state);

			if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
				clearBuffer(stream, state);
			}

			if (sync) {
				/*<replacement>*/
				nextTick$1(afterWrite, stream, state, finished, cb);
				/*</replacement>*/
			} else {
				afterWrite(stream, state, finished, cb);
			}
		}
	}

	function afterWrite(stream, state, finished, cb) {
		if (!finished) onwriteDrain(stream, state);
		state.pendingcb--;
		cb();
		finishMaybe(stream, state);
	} // Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.


	function onwriteDrain(stream, state) {
		if (state.length === 0 && state.needDrain) {
			state.needDrain = false;
			stream.emit('drain');
		}
	} // if there's something in the buffer waiting, then process it


	function clearBuffer(stream, state) {
		state.bufferProcessing = true;
		var entry = state.bufferedRequest;

		if (stream._writev && entry && entry.next) {
			// Fast case, write everything using _writev()
			var l = state.bufferedRequestCount;
			var buffer = new Array(l);
			var holder = state.corkedRequestsFree;
			holder.entry = entry;
			var count = 0;

			while (entry) {
				buffer[count] = entry;
				entry = entry.next;
				count += 1;
			}

			doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
			// as the hot path ends with doWrite

			state.pendingcb++;
			state.lastBufferedRequest = null;

			if (holder.next) {
				state.corkedRequestsFree = holder.next;
				holder.next = null;
			} else {
				state.corkedRequestsFree = new CorkedRequest(state);
			}
		} else {
			// Slow case, write chunks one-by-one
			while (entry) {
				var chunk = entry.chunk;
				var encoding = entry.encoding;
				var cb = entry.callback;
				var len = state.objectMode ? 1 : chunk.length;
				doWrite(stream, state, false, len, chunk, encoding, cb);
				entry = entry.next; // if we didn't call the onwrite immediately, then
				// it means that we need to wait until it does.
				// also, that means that the chunk and cb are currently
				// being processed, so move the buffer counter past them.

				if (state.writing) {
					break;
				}
			}

			if (entry === null) state.lastBufferedRequest = null;
		}

		state.bufferedRequestCount = 0;
		state.bufferedRequest = entry;
		state.bufferProcessing = false;
	}

	Writable.prototype._write = function (chunk, encoding, cb) {
		cb(new Error('not implemented'));
	};

	Writable.prototype._writev = null;

	Writable.prototype.end = function (chunk, encoding, cb) {
		var state = this._writableState;

		if (typeof chunk === 'function') {
			cb = chunk;
			chunk = null;
			encoding = null;
		} else if (typeof encoding === 'function') {
			cb = encoding;
			encoding = null;
		}

		if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

		if (state.corked) {
			state.corked = 1;
			this.uncork();
		} // ignore unnecessary end() calls.


		if (!state.ending && !state.finished) endWritable(this, state, cb);
	};

	function needFinish(state) {
		return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
	}

	function prefinish(stream, state) {
		if (!state.prefinished) {
			state.prefinished = true;
			stream.emit('prefinish');
		}
	}

	function finishMaybe(stream, state) {
		var need = needFinish(state);

		if (need) {
			if (state.pendingcb === 0) {
				prefinish(stream, state);
				state.finished = true;
				stream.emit('finish');
			} else {
				prefinish(stream, state);
			}
		}

		return need;
	}

	function endWritable(stream, state, cb) {
		state.ending = true;
		finishMaybe(stream, state);

		if (cb) {
			if (state.finished) nextTick$1(cb); else stream.once('finish', cb);
		}

		state.ended = true;
		stream.writable = false;
	} // It seems a linked list but it is not
	// there will be only 2 of these for each stream


	function CorkedRequest(state) {
		var _this = this;

		this.next = null;
		this.entry = null;

		this.finish = function (err) {
			var entry = _this.entry;
			_this.entry = null;

			while (entry) {
				var cb = entry.callback;
				state.pendingcb--;
				cb(err);
				entry = entry.next;
			}

			if (state.corkedRequestsFree) {
				state.corkedRequestsFree.next = _this;
			} else {
				state.corkedRequestsFree = _this;
			}
		};
	}

	inherits$1(Duplex, Readable);
	var keys$4 = Object.keys(Writable.prototype);

	for (var v = 0; v < keys$4.length; v++) {
		var method = keys$4[v];
		if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
	}
	function Duplex(options) {
		if (!(this instanceof Duplex)) return new Duplex(options);
		Readable.call(this, options);
		Writable.call(this, options);
		if (options && options.readable === false) this.readable = false;
		if (options && options.writable === false) this.writable = false;
		this.allowHalfOpen = true;
		if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;
		this.once('end', onend);
	} // the no-half-open enforcer

	function onend() {
		// if we allow half-open state, or if the writable side ended,
		// then we're ok.
		if (this.allowHalfOpen || this._writableState.ended) return; // no more data can be written.
		// But allow more writes to happen in this tick.

		nextTick$1(onEndNT, this);
	}

	function onEndNT(self) {
		self.end();
	}

	// a transform stream is a readable/writable stream where you do
	inherits$1(Transform, Duplex);

	function TransformState(stream) {
		this.afterTransform = function (er, data) {
			return afterTransform(stream, er, data);
		};

		this.needTransform = false;
		this.transforming = false;
		this.writecb = null;
		this.writechunk = null;
		this.writeencoding = null;
	}

	function afterTransform(stream, er, data) {
		var ts = stream._transformState;
		ts.transforming = false;
		var cb = ts.writecb;
		if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));
		ts.writechunk = null;
		ts.writecb = null;
		if (data !== null && data !== undefined) stream.push(data);
		cb(er);
		var rs = stream._readableState;
		rs.reading = false;

		if (rs.needReadable || rs.length < rs.highWaterMark) {
			stream._read(rs.highWaterMark);
		}
	}
	function Transform(options) {
		if (!(this instanceof Transform)) return new Transform(options);
		Duplex.call(this, options);
		this._transformState = new TransformState(this); // when the writable side finishes, then flush out anything remaining.

		var stream = this; // start out asking for a readable event once data is transformed.

		this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
		// that Readable wants before the first _read call, so unset the
		// sync guard flag.

		this._readableState.sync = false;

		if (options) {
			if (typeof options.transform === 'function') this._transform = options.transform;
			if (typeof options.flush === 'function') this._flush = options.flush;
		}

		this.once('prefinish', function () {
			if (typeof this._flush === 'function') this._flush(function (er) {
				done(stream, er);
			}); else done(stream);
		});
	}

	Transform.prototype.push = function (chunk, encoding) {
		this._transformState.needTransform = false;
		return Duplex.prototype.push.call(this, chunk, encoding);
	}; // This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.


	Transform.prototype._transform = function (chunk, encoding, cb) {
		throw new Error('Not implemented');
	};

	Transform.prototype._write = function (chunk, encoding, cb) {
		var ts = this._transformState;
		ts.writecb = cb;
		ts.writechunk = chunk;
		ts.writeencoding = encoding;

		if (!ts.transforming) {
			var rs = this._readableState;
			if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
		}
	}; // Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.


	Transform.prototype._read = function (n) {
		var ts = this._transformState;

		if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
			ts.transforming = true;

			this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
		} else {
			// mark that we need a transform, so that any data that comes in
			// will get processed, now that we've asked for it.
			ts.needTransform = true;
		}
	};

	function done(stream, er) {
		if (er) return stream.emit('error', er); // if there's nothing in the write buffer, then that means
		// that nothing more will ever be provided

		var ws = stream._writableState;
		var ts = stream._transformState;
		if (ws.length) throw new Error('Calling transform done when ws.length != 0');
		if (ts.transforming) throw new Error('Calling transform done when still transforming');
		return stream.push(null);
	}

	inherits$1(PassThrough, Transform);
	function PassThrough(options) {
		if (!(this instanceof PassThrough)) return new PassThrough(options);
		Transform.call(this, options);
	}

	PassThrough.prototype._transform = function (chunk, encoding, cb) {
		cb(null, chunk);
	};

	inherits$1(Stream, EventEmitter);
	Stream.Readable = Readable;
	Stream.Writable = Writable;
	Stream.Duplex = Duplex;
	Stream.Transform = Transform;
	Stream.PassThrough = PassThrough; // Backwards-compat with node 0.4.x

	Stream.Stream = Stream;
	// part of this class) is overridden in the Readable class.

	function Stream() {
		EventEmitter.call(this);
	}

	Stream.prototype.pipe = function (dest, options) {
		var source = this;

		function ondata(chunk) {
			if (dest.writable) {
				if (false === dest.write(chunk) && source.pause) {
					source.pause();
				}
			}
		}

		source.on('data', ondata);

		function ondrain() {
			if (source.readable && source.resume) {
				source.resume();
			}
		}

		dest.on('drain', ondrain); // If the 'end' option is not supplied, dest.end() will be called when
		// source gets the 'end' or 'close' events.  Only dest.end() once.

		if (!dest._isStdio && (!options || options.end !== false)) {
			source.on('end', onend);
			source.on('close', onclose);
		}

		var didOnEnd = false;

		function onend() {
			if (didOnEnd) return;
			didOnEnd = true;
			dest.end();
		}

		function onclose() {
			if (didOnEnd) return;
			didOnEnd = true;
			if (typeof dest.destroy === 'function') dest.destroy();
		} // don't leave dangling pipes when there are errors.


		function onerror(er) {
			cleanup();

			if (EventEmitter.listenerCount(this, 'error') === 0) {
				throw er; // Unhandled stream error in pipe.
			}
		}

		source.on('error', onerror);
		dest.on('error', onerror); // remove all the event listeners that were added.

		function cleanup() {
			source.removeListener('data', ondata);
			dest.removeListener('drain', ondrain);
			source.removeListener('end', onend);
			source.removeListener('close', onclose);
			source.removeListener('error', onerror);
			dest.removeListener('error', onerror);
			source.removeListener('end', cleanup);
			source.removeListener('close', cleanup);
			dest.removeListener('close', cleanup);
		}

		source.on('end', cleanup);
		source.on('close', cleanup);
		dest.on('close', cleanup);
		dest.emit('pipe', source); // Allow for unix-like usage: A.pipe(B).pipe(C)

		return dest;
	};

	var WritableStream = Stream.Writable;
	var inherits$2 = util.inherits;
	var browserStdout = BrowserStdout;
	inherits$2(BrowserStdout, WritableStream);

	function BrowserStdout(opts) {
		if (!(this instanceof BrowserStdout)) return new BrowserStdout(opts);
		opts = opts || {};
		WritableStream.call(this, opts);
		this.label = opts.label !== undefined ? opts.label : 'stdout';
	}

	BrowserStdout.prototype._write = function (chunks, encoding, cb) {
		var output = chunks.toString ? chunks.toString() : chunks;

		if (this.label === false) {
			console.log(output);
		} else {
			console.log(this.label + ':', output);
		}

		nextTick(cb);
	};

	var parseQuery = function parseQuery(qs) {
		return qs.replace('?', '').split('&').reduce(function (obj, pair) {
			var i = pair.indexOf('=');
			var key = pair.slice(0, i);
			var val = pair.slice(++i); // Due to how the URLSearchParams API treats spaces

			obj[key] = decodeURIComponent(val.replace(/\+/g, '%20'));
			return obj;
		}, {});
	};

	function highlight(js) {
		return js.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\/\/(.*)/gm, '<span class="comment">//$1</span>').replace(/('.*?')/gm, '<span class="string">$1</span>').replace(/(\d+\.\d+)/gm, '<span class="number">$1</span>').replace(/(\d+)/gm, '<span class="number">$1</span>').replace(/\bnew[ \t]+(\w+)/gm, '<span class="keyword">new</span> <span class="init">$1</span>').replace(/\b(function|new|throw|return|var|if|else)\b/gm, '<span class="keyword">$1</span>');
	}
	/**
		* Highlight the contents of tag `name`.
		*
		* @private
		* @param {string} name
		*/


	var highlightTags = function highlightTags(name) {
		var code = document.getElementById('mocha').getElementsByTagName(name);

		for (var i = 0, len = code.length; i < len; ++i) {
			code[i].innerHTML = highlight(code[i].innerHTML);
		}
	};

	var nativePromiseConstructor = global_1.Promise;

	// call something on iterator step with safe closing on error
	var callWithSafeIterationClosing = function (iterator, fn, value, ENTRIES) {
		try {
			return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
			// 7.4.6 IteratorClose(iterator, completion)
		} catch (error) {
			var returnMethod = iterator['return'];
			if (returnMethod !== undefined) anObject(returnMethod.call(iterator));
			throw error;
		}
	};

	var iterate_1 = createCommonjsModule(function (module) {
		var Result = function (stopped, result) {
			this.stopped = stopped;
			this.result = result;
		};

		var iterate = module.exports = function (iterable, fn, that, AS_ENTRIES, IS_ITERATOR) {
			var boundFunction = functionBindContext(fn, that, AS_ENTRIES ? 2 : 1);
			var iterator, iterFn, index, length, result, next, step;

			if (IS_ITERATOR) {
				iterator = iterable;
			} else {
				iterFn = getIteratorMethod(iterable);
				if (typeof iterFn != 'function') throw TypeError('Target is not iterable');
				// optimisation for array iterators
				if (isArrayIteratorMethod(iterFn)) {
					for (index = 0, length = toLength(iterable.length); length > index; index++) {
						result = AS_ENTRIES
							? boundFunction(anObject(step = iterable[index])[0], step[1])
							: boundFunction(iterable[index]);
						if (result && result instanceof Result) return result;
					} return new Result(false);
				}
				iterator = iterFn.call(iterable);
			}

			next = iterator.next;
			while (!(step = next.call(iterator)).done) {
				result = callWithSafeIterationClosing(iterator, boundFunction, step.value, AS_ENTRIES);
				if (typeof result == 'object' && result && result instanceof Result) return result;
			} return new Result(false);
		};

		iterate.stop = function (result) {
			return new Result(true, result);
		};
	});

	var engineIsIos = /(iphone|ipod|ipad).*applewebkit/i.test(engineUserAgent);

	var location$1 = global_1.location;
	var set$2 = global_1.setImmediate;
	var clear = global_1.clearImmediate;
	var process$2 = global_1.process;
	var MessageChannel = global_1.MessageChannel;
	var Dispatch = global_1.Dispatch;
	var counter = 0;
	var queue$2 = {};
	var ONREADYSTATECHANGE = 'onreadystatechange';
	var defer, channel, port;

	var run = function (id) {
		// eslint-disable-next-line no-prototype-builtins
		if (queue$2.hasOwnProperty(id)) {
			var fn = queue$2[id];
			delete queue$2[id];
			fn();
		}
	};

	var runner = function (id) {
		return function () {
			run(id);
		};
	};

	var listener = function (event) {
		run(event.data);
	};

	var post = function (id) {
		// old engines have not location.origin
		global_1.postMessage(id + '', location$1.protocol + '//' + location$1.host);
	};

	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if (!set$2 || !clear) {
		set$2 = function setImmediate(fn) {
			var args = [];
			var i = 1;
			while (arguments.length > i) args.push(arguments[i++]);
			queue$2[++counter] = function () {
				// eslint-disable-next-line no-new-func
				(typeof fn == 'function' ? fn : Function(fn)).apply(undefined, args);
			};
			defer(counter);
			return counter;
		};
		clear = function clearImmediate(id) {
			delete queue$2[id];
		};
		// Node.js 0.8-
		if (classofRaw(process$2) == 'process') {
			defer = function (id) {
				process$2.nextTick(runner(id));
			};
			// Sphere (JS game engine) Dispatch API
		} else if (Dispatch && Dispatch.now) {
			defer = function (id) {
				Dispatch.now(runner(id));
			};
			// Browsers with MessageChannel, includes WebWorkers
			// except iOS - https://github.com/zloirock/core-js/issues/624
		} else if (MessageChannel && !engineIsIos) {
			channel = new MessageChannel();
			port = channel.port2;
			channel.port1.onmessage = listener;
			defer = functionBindContext(port.postMessage, port, 1);
			// Browsers with postMessage, skip WebWorkers
			// IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
		} else if (
			global_1.addEventListener &&
			typeof postMessage == 'function' &&
			!global_1.importScripts &&
			!fails(post) &&
			location$1.protocol !== 'file:'
		) {
			defer = post;
			global_1.addEventListener('message', listener, false);
			// IE8-
		} else if (ONREADYSTATECHANGE in documentCreateElement('script')) {
			defer = function (id) {
				html.appendChild(documentCreateElement('script'))[ONREADYSTATECHANGE] = function () {
					html.removeChild(this);
					run(id);
				};
			};
			// Rest old browsers
		} else {
			defer = function (id) {
				setTimeout(runner(id), 0);
			};
		}
	}

	var task = {
		set: set$2,
		clear: clear
	};

	var getOwnPropertyDescriptor$3 = objectGetOwnPropertyDescriptor.f;

	var macrotask = task.set;


	var MutationObserver = global_1.MutationObserver || global_1.WebKitMutationObserver;
	var process$3 = global_1.process;
	var Promise$1 = global_1.Promise;
	var IS_NODE = classofRaw(process$3) == 'process';
	// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
	var queueMicrotaskDescriptor = getOwnPropertyDescriptor$3(global_1, 'queueMicrotask');
	var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;

	var flush, head, last, notify, toggle, node, promise, then;

	// modern engines have queueMicrotask method
	if (!queueMicrotask) {
		flush = function () {
			var parent, fn;
			if (IS_NODE && (parent = process$3.domain)) parent.exit();
			while (head) {
				fn = head.fn;
				head = head.next;
				try {
					fn();
				} catch (error) {
					if (head) notify();
					else last = undefined;
					throw error;
				}
			} last = undefined;
			if (parent) parent.enter();
		};

		// Node.js
		if (IS_NODE) {
			notify = function () {
				process$3.nextTick(flush);
			};
			// browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
		} else if (MutationObserver && !engineIsIos) {
			toggle = true;
			node = document.createTextNode('');
			new MutationObserver(flush).observe(node, { characterData: true });
			notify = function () {
				node.data = toggle = !toggle;
			};
			// environments with maybe non-completely correct, but existent Promise
		} else if (Promise$1 && Promise$1.resolve) {
			// Promise.resolve without an argument throws an error in LG WebOS 2
			promise = Promise$1.resolve(undefined);
			then = promise.then;
			notify = function () {
				then.call(promise, flush);
			};
			// for other environments - macrotask based on:
			// - setImmediate
			// - MessageChannel
			// - window.postMessag
			// - onreadystatechange
			// - setTimeout
		} else {
			notify = function () {
				// strange IE + webpack dev server bug - use .call(global)
				macrotask.call(global_1, flush);
			};
		}
	}

	var microtask = queueMicrotask || function (fn) {
		var task = { fn: fn, next: undefined };
		if (last) last.next = task;
		if (!head) {
			head = task;
			notify();
		} last = task;
	};

	var PromiseCapability = function (C) {
		var resolve, reject;
		this.promise = new C(function ($$resolve, $$reject) {
			if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
			resolve = $$resolve;
			reject = $$reject;
		});
		this.resolve = aFunction$1(resolve);
		this.reject = aFunction$1(reject);
	};

	// 25.4.1.5 NewPromiseCapability(C)
	var f$7 = function (C) {
		return new PromiseCapability(C);
	};

	var newPromiseCapability = {
		f: f$7
	};

	var promiseResolve = function (C, x) {
		anObject(C);
		if (isObject(x) && x.constructor === C) return x;
		var promiseCapability = newPromiseCapability.f(C);
		var resolve = promiseCapability.resolve;
		resolve(x);
		return promiseCapability.promise;
	};

	var hostReportErrors = function (a, b) {
		var console = global_1.console;
		if (console && console.error) {
			arguments.length === 1 ? console.error(a) : console.error(a, b);
		}
	};

	var perform = function (exec) {
		try {
			return { error: false, value: exec() };
		} catch (error) {
			return { error: true, value: error };
		}
	};

	var task$1 = task.set;










	var SPECIES$6 = wellKnownSymbol('species');
	var PROMISE = 'Promise';
	var getInternalState$3 = internalState.get;
	var setInternalState$4 = internalState.set;
	var getInternalPromiseState = internalState.getterFor(PROMISE);
	var PromiseConstructor = nativePromiseConstructor;
	var TypeError$1 = global_1.TypeError;
	var document$2 = global_1.document;
	var process$4 = global_1.process;
	var $fetch = getBuiltIn('fetch');
	var newPromiseCapability$1 = newPromiseCapability.f;
	var newGenericPromiseCapability = newPromiseCapability$1;
	var IS_NODE$1 = classofRaw(process$4) == 'process';
	var DISPATCH_EVENT = !!(document$2 && document$2.createEvent && global_1.dispatchEvent);
	var UNHANDLED_REJECTION = 'unhandledrejection';
	var REJECTION_HANDLED = 'rejectionhandled';
	var PENDING = 0;
	var FULFILLED = 1;
	var REJECTED = 2;
	var HANDLED = 1;
	var UNHANDLED = 2;
	var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;

	var FORCED$7 = isForced_1(PROMISE, function () {
		var GLOBAL_CORE_JS_PROMISE = inspectSource(PromiseConstructor) !== String(PromiseConstructor);
		if (!GLOBAL_CORE_JS_PROMISE) {
			// V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
			// https://bugs.chromium.org/p/chromium/issues/detail?id=830565
			// We can't detect it synchronously, so just check versions
			if (engineV8Version === 66) return true;
			// Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
			if (!IS_NODE$1 && typeof PromiseRejectionEvent != 'function') return true;
		}
		// We can't use @@species feature detection in V8 since it causes
		// deoptimization and performance degradation
		// https://github.com/zloirock/core-js/issues/679
		if (engineV8Version >= 51 && /native code/.test(PromiseConstructor)) return false;
		// Detect correctness of subclassing with @@species support
		var promise = PromiseConstructor.resolve(1);
		var FakePromise = function (exec) {
			exec(function () { /* empty */ }, function () { /* empty */ });
		};
		var constructor = promise.constructor = {};
		constructor[SPECIES$6] = FakePromise;
		return !(promise.then(function () { /* empty */ }) instanceof FakePromise);
	});

	var INCORRECT_ITERATION = FORCED$7 || !checkCorrectnessOfIteration(function (iterable) {
		PromiseConstructor.all(iterable)['catch'](function () { /* empty */ });
	});

	// helpers
	var isThenable = function (it) {
		var then;
		return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};

	var notify$1 = function (promise, state, isReject) {
		if (state.notified) return;
		state.notified = true;
		var chain = state.reactions;
		microtask(function () {
			var value = state.value;
			var ok = state.state == FULFILLED;
			var index = 0;
			// variable length - can't use forEach
			while (chain.length > index) {
				var reaction = chain[index++];
				var handler = ok ? reaction.ok : reaction.fail;
				var resolve = reaction.resolve;
				var reject = reaction.reject;
				var domain = reaction.domain;
				var result, then, exited;
				try {
					if (handler) {
						if (!ok) {
							if (state.rejection === UNHANDLED) onHandleUnhandled(promise, state);
							state.rejection = HANDLED;
						}
						if (handler === true) result = value;
						else {
							if (domain) domain.enter();
							result = handler(value); // can throw
							if (domain) {
								domain.exit();
								exited = true;
							}
						}
						if (result === reaction.promise) {
							reject(TypeError$1('Promise-chain cycle'));
						} else if (then = isThenable(result)) {
							then.call(result, resolve, reject);
						} else resolve(result);
					} else reject(value);
				} catch (error) {
					if (domain && !exited) domain.exit();
					reject(error);
				}
			}
			state.reactions = [];
			state.notified = false;
			if (isReject && !state.rejection) onUnhandled(promise, state);
		});
	};

	var dispatchEvent = function (name, promise, reason) {
		var event, handler;
		if (DISPATCH_EVENT) {
			event = document$2.createEvent('Event');
			event.promise = promise;
			event.reason = reason;
			event.initEvent(name, false, true);
			global_1.dispatchEvent(event);
		} else event = { promise: promise, reason: reason };
		if (handler = global_1['on' + name]) handler(event);
		else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
	};

	var onUnhandled = function (promise, state) {
		task$1.call(global_1, function () {
			var value = state.value;
			var IS_UNHANDLED = isUnhandled(state);
			var result;
			if (IS_UNHANDLED) {
				result = perform(function () {
					if (IS_NODE$1) {
						process$4.emit('unhandledRejection', value, promise);
					} else dispatchEvent(UNHANDLED_REJECTION, promise, value);
				});
				// Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
				state.rejection = IS_NODE$1 || isUnhandled(state) ? UNHANDLED : HANDLED;
				if (result.error) throw result.value;
			}
		});
	};

	var isUnhandled = function (state) {
		return state.rejection !== HANDLED && !state.parent;
	};

	var onHandleUnhandled = function (promise, state) {
		task$1.call(global_1, function () {
			if (IS_NODE$1) {
				process$4.emit('rejectionHandled', promise);
			} else dispatchEvent(REJECTION_HANDLED, promise, state.value);
		});
	};

	var bind = function (fn, promise, state, unwrap) {
		return function (value) {
			fn(promise, state, value, unwrap);
		};
	};

	var internalReject = function (promise, state, value, unwrap) {
		if (state.done) return;
		state.done = true;
		if (unwrap) state = unwrap;
		state.value = value;
		state.state = REJECTED;
		notify$1(promise, state, true);
	};

	var internalResolve = function (promise, state, value, unwrap) {
		if (state.done) return;
		state.done = true;
		if (unwrap) state = unwrap;
		try {
			if (promise === value) throw TypeError$1("Promise can't be resolved itself");
			var then = isThenable(value);
			if (then) {
				microtask(function () {
					var wrapper = { done: false };
					try {
						then.call(value,
							bind(internalResolve, promise, wrapper, state),
							bind(internalReject, promise, wrapper, state)
						);
					} catch (error) {
						internalReject(promise, wrapper, error, state);
					}
				});
			} else {
				state.value = value;
				state.state = FULFILLED;
				notify$1(promise, state, false);
			}
		} catch (error) {
			internalReject(promise, { done: false }, error, state);
		}
	};

	// constructor polyfill
	if (FORCED$7) {
		// 25.4.3.1 Promise(executor)
		PromiseConstructor = function Promise(executor) {
			anInstance(this, PromiseConstructor, PROMISE);
			aFunction$1(executor);
			Internal.call(this);
			var state = getInternalState$3(this);
			try {
				executor(bind(internalResolve, this, state), bind(internalReject, this, state));
			} catch (error) {
				internalReject(this, state, error);
			}
		};
		// eslint-disable-next-line no-unused-vars
		Internal = function Promise(executor) {
			setInternalState$4(this, {
				type: PROMISE,
				done: false,
				notified: false,
				parent: false,
				reactions: [],
				rejection: false,
				state: PENDING,
				value: undefined
			});
		};
		Internal.prototype = redefineAll(PromiseConstructor.prototype, {
			// `Promise.prototype.then` method
			// https://tc39.github.io/ecma262/#sec-promise.prototype.then
			then: function then(onFulfilled, onRejected) {
				var state = getInternalPromiseState(this);
				var reaction = newPromiseCapability$1(speciesConstructor(this, PromiseConstructor));
				reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
				reaction.fail = typeof onRejected == 'function' && onRejected;
				reaction.domain = IS_NODE$1 ? process$4.domain : undefined;
				state.parent = true;
				state.reactions.push(reaction);
				if (state.state != PENDING) notify$1(this, state, false);
				return reaction.promise;
			},
			// `Promise.prototype.catch` method
			// https://tc39.github.io/ecma262/#sec-promise.prototype.catch
			'catch': function (onRejected) {
				return this.then(undefined, onRejected);
			}
		});
		OwnPromiseCapability = function () {
			var promise = new Internal();
			var state = getInternalState$3(promise);
			this.promise = promise;
			this.resolve = bind(internalResolve, promise, state);
			this.reject = bind(internalReject, promise, state);
		};
		newPromiseCapability.f = newPromiseCapability$1 = function (C) {
			return C === PromiseConstructor || C === PromiseWrapper
				? new OwnPromiseCapability(C)
				: newGenericPromiseCapability(C);
		};

		if (typeof nativePromiseConstructor == 'function') {
			nativeThen = nativePromiseConstructor.prototype.then;

			// wrap native Promise#then for native async functions
			redefine(nativePromiseConstructor.prototype, 'then', function then(onFulfilled, onRejected) {
				var that = this;
				return new PromiseConstructor(function (resolve, reject) {
					nativeThen.call(that, resolve, reject);
				}).then(onFulfilled, onRejected);
				// https://github.com/zloirock/core-js/issues/640
			}, { unsafe: true });

			// wrap fetch result
			if (typeof $fetch == 'function') _export({ global: true, enumerable: true, forced: true }, {
				// eslint-disable-next-line no-unused-vars
				fetch: function fetch(input /* , init */) {
					return promiseResolve(PromiseConstructor, $fetch.apply(global_1, arguments));
				}
			});
		}
	}

	_export({ global: true, wrap: true, forced: FORCED$7 }, {
		Promise: PromiseConstructor
	});

	setToStringTag(PromiseConstructor, PROMISE, false);
	setSpecies(PROMISE);

	PromiseWrapper = getBuiltIn(PROMISE);

	// statics
	_export({ target: PROMISE, stat: true, forced: FORCED$7 }, {
		// `Promise.reject` method
		// https://tc39.github.io/ecma262/#sec-promise.reject
		reject: function reject(r) {
			var capability = newPromiseCapability$1(this);
			capability.reject.call(undefined, r);
			return capability.promise;
		}
	});

	_export({ target: PROMISE, stat: true, forced: FORCED$7 }, {
		// `Promise.resolve` method
		// https://tc39.github.io/ecma262/#sec-promise.resolve
		resolve: function resolve(x) {
			return promiseResolve(this, x);
		}
	});

	_export({ target: PROMISE, stat: true, forced: INCORRECT_ITERATION }, {
		// `Promise.all` method
		// https://tc39.github.io/ecma262/#sec-promise.all
		all: function all(iterable) {
			var C = this;
			var capability = newPromiseCapability$1(C);
			var resolve = capability.resolve;
			var reject = capability.reject;
			var result = perform(function () {
				var $promiseResolve = aFunction$1(C.resolve);
				var values = [];
				var counter = 0;
				var remaining = 1;
				iterate_1(iterable, function (promise) {
					var index = counter++;
					var alreadyCalled = false;
					values.push(undefined);
					remaining++;
					$promiseResolve.call(C, promise).then(function (value) {
						if (alreadyCalled) return;
						alreadyCalled = true;
						values[index] = value;
						--remaining || resolve(values);
					}, reject);
				});
				--remaining || resolve(values);
			});
			if (result.error) reject(result.value);
			return capability.promise;
		},
		// `Promise.race` method
		// https://tc39.github.io/ecma262/#sec-promise.race
		race: function race(iterable) {
			var C = this;
			var capability = newPromiseCapability$1(C);
			var reject = capability.reject;
			var result = perform(function () {
				var $promiseResolve = aFunction$1(C.resolve);
				iterate_1(iterable, function (promise) {
					$promiseResolve.call(C, promise).then(capability.resolve, reject);
				});
			});
			if (result.error) reject(result.value);
			return capability.promise;
		}
	});

	// `Symbol.asyncIterator` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.asynciterator
	defineWellKnownSymbol('asyncIterator');

	// `Symbol.iterator` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.iterator
	defineWellKnownSymbol('iterator');

	// `Symbol.toStringTag` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.tostringtag
	defineWellKnownSymbol('toStringTag');

	// JSON[@@toStringTag] property
	// https://tc39.github.io/ecma262/#sec-json-@@tostringtag
	setToStringTag(global_1.JSON, 'JSON', true);

	// Math[@@toStringTag] property
	// https://tc39.github.io/ecma262/#sec-math-@@tostringtag
	setToStringTag(Math, 'Math', true);

	var charAt$1 = stringMultibyte.charAt;



	var STRING_ITERATOR = 'String Iterator';
	var setInternalState$5 = internalState.set;
	var getInternalState$4 = internalState.getterFor(STRING_ITERATOR);

	// `String.prototype[@@iterator]` method
	// https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator
	defineIterator(String, 'String', function (iterated) {
		setInternalState$5(this, {
			type: STRING_ITERATOR,
			string: String(iterated),
			index: 0
		});
		// `%StringIteratorPrototype%.next` method
		// https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next
	}, function next() {
		var state = getInternalState$4(this);
		var string = state.string;
		var index = state.index;
		var point;
		if (index >= string.length) return { value: undefined, done: true };
		point = charAt$1(string, index);
		state.index += point.length;
		return { value: point, done: false };
	});

	var ITERATOR$6 = wellKnownSymbol('iterator');
	var TO_STRING_TAG$4 = wellKnownSymbol('toStringTag');
	var ArrayValues = es_array_iterator.values;

	for (var COLLECTION_NAME$1 in domIterables) {
		var Collection$1 = global_1[COLLECTION_NAME$1];
		var CollectionPrototype$1 = Collection$1 && Collection$1.prototype;
		if (CollectionPrototype$1) {
			// some Chrome versions have non-configurable methods on DOMTokenList
			if (CollectionPrototype$1[ITERATOR$6] !== ArrayValues) try {
				createNonEnumerableProperty(CollectionPrototype$1, ITERATOR$6, ArrayValues);
			} catch (error) {
				CollectionPrototype$1[ITERATOR$6] = ArrayValues;
			}
			if (!CollectionPrototype$1[TO_STRING_TAG$4]) {
				createNonEnumerableProperty(CollectionPrototype$1, TO_STRING_TAG$4, COLLECTION_NAME$1);
			}
			if (domIterables[COLLECTION_NAME$1]) for (var METHOD_NAME in es_array_iterator) {
				// some Chrome versions have non-configurable methods on DOMTokenList
				if (CollectionPrototype$1[METHOD_NAME] !== es_array_iterator[METHOD_NAME]) try {
					createNonEnumerableProperty(CollectionPrototype$1, METHOD_NAME, es_array_iterator[METHOD_NAME]);
				} catch (error) {
					CollectionPrototype$1[METHOD_NAME] = es_array_iterator[METHOD_NAME];
				}
			}
		}
	}

	var runtime = createCommonjsModule(function (module) {
		/**
			* Copyright (c) 2014-present, Facebook, Inc.
			*
			* This source code is licensed under the MIT license found in the
			* LICENSE file in the root directory of this source tree.
			*/
		!function (global) {

			var Op = Object.prototype;
			var hasOwn = Op.hasOwnProperty;
			var undefined$1; // More compressible than void 0.

			var $Symbol = typeof Symbol === "function" ? Symbol : {};
			var iteratorSymbol = $Symbol.iterator || "@@iterator";
			var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
			var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
			var runtime = global.regeneratorRuntime;

			if (runtime) {
				{
					// If regeneratorRuntime is defined globally and we're in a module,
					// make the exports object identical to regeneratorRuntime.
					module.exports = runtime;
				} // Don't bother evaluating the rest of this file if the runtime was
				// already defined globally.


				return;
			} // Define the runtime globally (as expected by generated code) as either
			// module.exports (if we're in a module) or a new, empty object.


			runtime = global.regeneratorRuntime = module.exports;

			function wrap(innerFn, outerFn, self, tryLocsList) {
				// If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
				var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
				var generator = Object.create(protoGenerator.prototype);
				var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
				// .throw, and .return methods.

				generator._invoke = makeInvokeMethod(innerFn, self, context);
				return generator;
			}

			runtime.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
			// record like context.tryEntries[i].completion. This interface could
			// have been (and was previously) designed to take a closure to be
			// invoked without arguments, but in all the cases we care about we
			// already have an existing method we want to call, so there's no need
			// to create a new function object. We can even get away with assuming
			// the method takes exactly one argument, since that happens to be true
			// in every case, so we don't have to touch the arguments object. The
			// only additional allocation required is the completion record, which
			// has a stable shape and so hopefully should be cheap to allocate.

			function tryCatch(fn, obj, arg) {
				try {
					return {
						type: "normal",
						arg: fn.call(obj, arg)
					};
				} catch (err) {
					return {
						type: "throw",
						arg: err
					};
				}
			}

			var GenStateSuspendedStart = "suspendedStart";
			var GenStateSuspendedYield = "suspendedYield";
			var GenStateExecuting = "executing";
			var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
			// breaking out of the dispatch switch statement.

			var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
			// .constructor.prototype properties for functions that return Generator
			// objects. For full spec compliance, you may wish to configure your
			// minifier not to mangle the names of these two functions.

			function Generator() { }

			function GeneratorFunction() { }

			function GeneratorFunctionPrototype() { } // This is a polyfill for %IteratorPrototype% for environments that
			// don't natively support it.


			var IteratorPrototype = {};

			IteratorPrototype[iteratorSymbol] = function () {
				return this;
			};

			var getProto = Object.getPrototypeOf;
			var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

			if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
				// This environment has a native %IteratorPrototype%; use it instead
				// of the polyfill.
				IteratorPrototype = NativeIteratorPrototype;
			}

			var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
			GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
			GeneratorFunctionPrototype.constructor = GeneratorFunction;
			GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction"; // Helper for defining the .next, .throw, and .return methods of the
			// Iterator interface in terms of a single ._invoke method.

			function defineIteratorMethods(prototype) {
				["next", "throw", "return"].forEach(function (method) {
					prototype[method] = function (arg) {
						return this._invoke(method, arg);
					};
				});
			}

			runtime.isGeneratorFunction = function (genFun) {
				var ctor = typeof genFun === "function" && genFun.constructor;
				return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
					// do is to check its .name property.
					(ctor.displayName || ctor.name) === "GeneratorFunction" : false;
			};

			runtime.mark = function (genFun) {
				if (Object.setPrototypeOf) {
					Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
				} else {
					genFun.__proto__ = GeneratorFunctionPrototype;

					if (!(toStringTagSymbol in genFun)) {
						genFun[toStringTagSymbol] = "GeneratorFunction";
					}
				}

				genFun.prototype = Object.create(Gp);
				return genFun;
			}; // Within the body of any async function, `await x` is transformed to
			// `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
			// `hasOwn.call(value, "__await")` to determine if the yielded value is
			// meant to be awaited.


			runtime.awrap = function (arg) {
				return {
					__await: arg
				};
			};

			function AsyncIterator(generator) {
				function invoke(method, arg, resolve, reject) {
					var record = tryCatch(generator[method], generator, arg);

					if (record.type === "throw") {
						reject(record.arg);
					} else {
						var result = record.arg;
						var value = result.value;

						if (value && _typeof(value) === "object" && hasOwn.call(value, "__await")) {
							return Promise.resolve(value.__await).then(function (value) {
								invoke("next", value, resolve, reject);
							}, function (err) {
								invoke("throw", err, resolve, reject);
							});
						}

						return Promise.resolve(value).then(function (unwrapped) {
							// When a yielded Promise is resolved, its final value becomes
							// the .value of the Promise<{value,done}> result for the
							// current iteration. If the Promise is rejected, however, the
							// result for this iteration will be rejected with the same
							// reason. Note that rejections of yielded Promises are not
							// thrown back into the generator function, as is the case
							// when an awaited Promise is rejected. This difference in
							// behavior between yield and await is important, because it
							// allows the consumer to decide what to do with the yielded
							// rejection (swallow it and continue, manually .throw it back
							// into the generator, abandon iteration, whatever). With
							// await, by contrast, there is no opportunity to examine the
							// rejection reason outside the generator function, so the
							// only option is to throw it from the await expression, and
							// let the generator function handle the exception.
							result.value = unwrapped;
							resolve(result);
						}, reject);
					}
				}

				var previousPromise;

				function enqueue(method, arg) {
					function callInvokeWithMethodAndArg() {
						return new Promise(function (resolve, reject) {
							invoke(method, arg, resolve, reject);
						});
					}

					return previousPromise = // If enqueue has been called before, then we want to wait until
						// all previous Promises have been resolved before calling invoke,
						// so that results are always delivered in the correct order. If
						// enqueue has not been called before, then it is important to
						// call invoke immediately, without waiting on a callback to fire,
						// so that the async generator function has the opportunity to do
						// any necessary setup in a predictable way. This predictability
						// is why the Promise constructor synchronously invokes its
						// executor callback, and why async functions synchronously
						// execute code before the first await. Since we implement simple
						// async functions in terms of async generators, it is especially
						// important to get this right, even though it requires care.
						previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
							// invocations of the iterator.
							callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
				} // Define the unified helper method that is used to implement .next,
				// .throw, and .return (see defineIteratorMethods).


				this._invoke = enqueue;
			}

			defineIteratorMethods(AsyncIterator.prototype);

			AsyncIterator.prototype[asyncIteratorSymbol] = function () {
				return this;
			};

			runtime.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
			// AsyncIterator objects; they just return a Promise for the value of
			// the final result produced by the iterator.

			runtime.async = function (innerFn, outerFn, self, tryLocsList) {
				var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
				return runtime.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
					: iter.next().then(function (result) {
						return result.done ? result.value : iter.next();
					});
			};

			function makeInvokeMethod(innerFn, self, context) {
				var state = GenStateSuspendedStart;
				return function invoke(method, arg) {
					if (state === GenStateExecuting) {
						throw new Error("Generator is already running");
					}

					if (state === GenStateCompleted) {
						if (method === "throw") {
							throw arg;
						} // Be forgiving, per 25.3.3.3.3 of the spec:
						// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


						return doneResult();
					}

					context.method = method;
					context.arg = arg;

					while (true) {
						var delegate = context.delegate;

						if (delegate) {
							var delegateResult = maybeInvokeDelegate(delegate, context);

							if (delegateResult) {
								if (delegateResult === ContinueSentinel) continue;
								return delegateResult;
							}
						}

						if (context.method === "next") {
							// Setting context._sent for legacy support of Babel's
							// function.sent implementation.
							context.sent = context._sent = context.arg;
						} else if (context.method === "throw") {
							if (state === GenStateSuspendedStart) {
								state = GenStateCompleted;
								throw context.arg;
							}

							context.dispatchException(context.arg);
						} else if (context.method === "return") {
							context.abrupt("return", context.arg);
						}

						state = GenStateExecuting;
						var record = tryCatch(innerFn, self, context);

						if (record.type === "normal") {
							// If an exception is thrown from innerFn, we leave state ===
							// GenStateExecuting and loop back for another invocation.
							state = context.done ? GenStateCompleted : GenStateSuspendedYield;

							if (record.arg === ContinueSentinel) {
								continue;
							}

							return {
								value: record.arg,
								done: context.done
							};
						} else if (record.type === "throw") {
							state = GenStateCompleted; // Dispatch the exception by looping back around to the
							// context.dispatchException(context.arg) call above.

							context.method = "throw";
							context.arg = record.arg;
						}
					}
				};
			} // Call delegate.iterator[context.method](context.arg) and handle the
			// result, either by returning a { value, done } result from the
			// delegate iterator, or by modifying context.method and context.arg,
			// setting context.delegate to null, and returning the ContinueSentinel.


			function maybeInvokeDelegate(delegate, context) {
				var method = delegate.iterator[context.method];

				if (method === undefined$1) {
					// A .throw or .return when the delegate iterator has no .throw
					// method always terminates the yield* loop.
					context.delegate = null;

					if (context.method === "throw") {
						if (delegate.iterator["return"]) {
							// If the delegate iterator has a return method, give it a
							// chance to clean up.
							context.method = "return";
							context.arg = undefined$1;
							maybeInvokeDelegate(delegate, context);

							if (context.method === "throw") {
								// If maybeInvokeDelegate(context) changed context.method from
								// "return" to "throw", let that override the TypeError below.
								return ContinueSentinel;
							}
						}

						context.method = "throw";
						context.arg = new TypeError("The iterator does not provide a 'throw' method");
					}

					return ContinueSentinel;
				}

				var record = tryCatch(method, delegate.iterator, context.arg);

				if (record.type === "throw") {
					context.method = "throw";
					context.arg = record.arg;
					context.delegate = null;
					return ContinueSentinel;
				}

				var info = record.arg;

				if (!info) {
					context.method = "throw";
					context.arg = new TypeError("iterator result is not an object");
					context.delegate = null;
					return ContinueSentinel;
				}

				if (info.done) {
					// Assign the result of the finished delegate to the temporary
					// variable specified by delegate.resultName (see delegateYield).
					context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

					context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
					// exception, let the outer generator proceed normally. If
					// context.method was "next", forget context.arg since it has been
					// "consumed" by the delegate iterator. If context.method was
					// "return", allow the original .return call to continue in the
					// outer generator.

					if (context.method !== "return") {
						context.method = "next";
						context.arg = undefined$1;
					}
				} else {
					// Re-yield the result returned by the delegate method.
					return info;
				} // The delegate iterator is finished, so forget it and continue with
				// the outer generator.


				context.delegate = null;
				return ContinueSentinel;
			} // Define Generator.prototype.{next,throw,return} in terms of the
			// unified ._invoke helper method.


			defineIteratorMethods(Gp);
			Gp[toStringTagSymbol] = "Generator"; // A Generator should always return itself as the iterator object when the
			// @@iterator function is called on it. Some browsers' implementations of the
			// iterator prototype chain incorrectly implement this, causing the Generator
			// object to not be returned from this call. This ensures that doesn't happen.
			// See https://github.com/facebook/regenerator/issues/274 for more details.

			Gp[iteratorSymbol] = function () {
				return this;
			};

			Gp.toString = function () {
				return "[object Generator]";
			};

			function pushTryEntry(locs) {
				var entry = {
					tryLoc: locs[0]
				};

				if (1 in locs) {
					entry.catchLoc = locs[1];
				}

				if (2 in locs) {
					entry.finallyLoc = locs[2];
					entry.afterLoc = locs[3];
				}

				this.tryEntries.push(entry);
			}

			function resetTryEntry(entry) {
				var record = entry.completion || {};
				record.type = "normal";
				delete record.arg;
				entry.completion = record;
			}

			function Context(tryLocsList) {
				// The root entry object (effectively a try statement without a catch
				// or a finally block) gives us a place to store values thrown from
				// locations where there is no enclosing try statement.
				this.tryEntries = [{
					tryLoc: "root"
				}];
				tryLocsList.forEach(pushTryEntry, this);
				this.reset(true);
			}

			runtime.keys = function (object) {
				var keys = [];

				for (var key in object) {
					keys.push(key);
				}

				keys.reverse(); // Rather than returning an object with a next method, we keep
				// things simple and return the next function itself.

				return function next() {
					while (keys.length) {
						var key = keys.pop();

						if (key in object) {
							next.value = key;
							next.done = false;
							return next;
						}
					} // To avoid creating an additional object, we just hang the .value
					// and .done properties off the next function object itself. This
					// also ensures that the minifier will not anonymize the function.


					next.done = true;
					return next;
				};
			};

			function values(iterable) {
				if (iterable) {
					var iteratorMethod = iterable[iteratorSymbol];

					if (iteratorMethod) {
						return iteratorMethod.call(iterable);
					}

					if (typeof iterable.next === "function") {
						return iterable;
					}

					if (!isNaN(iterable.length)) {
						var i = -1,
							next = function next() {
								while (++i < iterable.length) {
									if (hasOwn.call(iterable, i)) {
										next.value = iterable[i];
										next.done = false;
										return next;
									}
								}

								next.value = undefined$1;
								next.done = true;
								return next;
							};

						return next.next = next;
					}
				} // Return an iterator with no values.


				return {
					next: doneResult
				};
			}

			runtime.values = values;

			function doneResult() {
				return {
					value: undefined$1,
					done: true
				};
			}

			Context.prototype = {
				constructor: Context,
				reset: function reset(skipTempReset) {
					this.prev = 0;
					this.next = 0; // Resetting context._sent for legacy support of Babel's
					// function.sent implementation.

					this.sent = this._sent = undefined$1;
					this.done = false;
					this.delegate = null;
					this.method = "next";
					this.arg = undefined$1;
					this.tryEntries.forEach(resetTryEntry);

					if (!skipTempReset) {
						for (var name in this) {
							// Not sure about the optimal order of these conditions:
							if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
								this[name] = undefined$1;
							}
						}
					}
				},
				stop: function stop() {
					this.done = true;
					var rootEntry = this.tryEntries[0];
					var rootRecord = rootEntry.completion;

					if (rootRecord.type === "throw") {
						throw rootRecord.arg;
					}

					return this.rval;
				},
				dispatchException: function dispatchException(exception) {
					if (this.done) {
						throw exception;
					}

					var context = this;

					function handle(loc, caught) {
						record.type = "throw";
						record.arg = exception;
						context.next = loc;

						if (caught) {
							// If the dispatched exception was caught by a catch block,
							// then let that catch block handle the exception normally.
							context.method = "next";
							context.arg = undefined$1;
						}

						return !!caught;
					}

					for (var i = this.tryEntries.length - 1; i >= 0; --i) {
						var entry = this.tryEntries[i];
						var record = entry.completion;

						if (entry.tryLoc === "root") {
							// Exception thrown outside of any try block that could handle
							// it, so set the completion value of the entire function to
							// throw the exception.
							return handle("end");
						}

						if (entry.tryLoc <= this.prev) {
							var hasCatch = hasOwn.call(entry, "catchLoc");
							var hasFinally = hasOwn.call(entry, "finallyLoc");

							if (hasCatch && hasFinally) {
								if (this.prev < entry.catchLoc) {
									return handle(entry.catchLoc, true);
								} else if (this.prev < entry.finallyLoc) {
									return handle(entry.finallyLoc);
								}
							} else if (hasCatch) {
								if (this.prev < entry.catchLoc) {
									return handle(entry.catchLoc, true);
								}
							} else if (hasFinally) {
								if (this.prev < entry.finallyLoc) {
									return handle(entry.finallyLoc);
								}
							} else {
								throw new Error("try statement without catch or finally");
							}
						}
					}
				},
				abrupt: function abrupt(type, arg) {
					for (var i = this.tryEntries.length - 1; i >= 0; --i) {
						var entry = this.tryEntries[i];

						if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
							var finallyEntry = entry;
							break;
						}
					}

					if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
						// Ignore the finally entry if control is not jumping to a
						// location outside the try/catch block.
						finallyEntry = null;
					}

					var record = finallyEntry ? finallyEntry.completion : {};
					record.type = type;
					record.arg = arg;

					if (finallyEntry) {
						this.method = "next";
						this.next = finallyEntry.finallyLoc;
						return ContinueSentinel;
					}

					return this.complete(record);
				},
				complete: function complete(record, afterLoc) {
					if (record.type === "throw") {
						throw record.arg;
					}

					if (record.type === "break" || record.type === "continue") {
						this.next = record.arg;
					} else if (record.type === "return") {
						this.rval = this.arg = record.arg;
						this.method = "return";
						this.next = "end";
					} else if (record.type === "normal" && afterLoc) {
						this.next = afterLoc;
					}

					return ContinueSentinel;
				},
				finish: function finish(finallyLoc) {
					for (var i = this.tryEntries.length - 1; i >= 0; --i) {
						var entry = this.tryEntries[i];

						if (entry.finallyLoc === finallyLoc) {
							this.complete(entry.completion, entry.afterLoc);
							resetTryEntry(entry);
							return ContinueSentinel;
						}
					}
				},
				"catch": function _catch(tryLoc) {
					for (var i = this.tryEntries.length - 1; i >= 0; --i) {
						var entry = this.tryEntries[i];

						if (entry.tryLoc === tryLoc) {
							var record = entry.completion;

							if (record.type === "throw") {
								var thrown = record.arg;
								resetTryEntry(entry);
							}

							return thrown;
						}
					} // The context.catch method must only be called with a location
					// argument that corresponds to a known catch block.


					throw new Error("illegal catch attempt");
				},
				delegateYield: function delegateYield(iterable, resultName, nextLoc) {
					this.delegate = {
						iterator: values(iterable),
						resultName: resultName,
						nextLoc: nextLoc
					};

					if (this.method === "next") {
						// Deliberately forget the last sent value so that we don't
						// accidentally pass it on to the delegate.
						this.arg = undefined$1;
					}

					return ContinueSentinel;
				}
			};
		}( // In sloppy mode, unbound `this` refers to the global object, fallback to
			// Function constructor if we're in global strict mode. That is sadly a form
			// of indirect eval which violates Content Security Policy.
			function () {
				return this;
			}() || Function("return this")());
	});

	var escapeStringRegexp = function escapeStringRegexp(string) {
		if (typeof string !== 'string') {
			throw new TypeError('Expected a string');
		} // Escape characters with special meaning either inside or outside character sets.
		// Use a simple backslash escape when it’s always valid, and a \unnnn escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.


		return string.replace(/[|\\{}()[\]^$+*?.]/g, '\\$&').replace(/-/g, '\\x2d');
	};

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	// resolves . and .. elements in a path array with directory names there
	// must be no slashes, empty elements, or device names (c:\) in the array
	// (so also no leading and trailing slashes - it does not distinguish
	// relative and absolute paths)
	function normalizeArray(parts, allowAboveRoot) {
		// if the path tries to go above the root, `up` ends up > 0
		var up = 0;

		for (var i = parts.length - 1; i >= 0; i--) {
			var last = parts[i];

			if (last === '.') {
				parts.splice(i, 1);
			} else if (last === '..') {
				parts.splice(i, 1);
				up++;
			} else if (up) {
				parts.splice(i, 1);
				up--;
			}
		} // if the path is allowed to go above the root, restore leading ..s


		if (allowAboveRoot) {
			for (; up--; up) {
				parts.unshift('..');
			}
		}

		return parts;
	} // Split a filename into [root, dir, basename, ext], unix version
	// 'root' is just a slash, or nothing.


	var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;

	var splitPath = function splitPath(filename) {
		return splitPathRe.exec(filename).slice(1);
	}; // path.resolve([from ...], to)
	// posix version


	function resolve() {
		var resolvedPath = '',
			resolvedAbsolute = false;

		for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
			var path = i >= 0 ? arguments[i] : '/'; // Skip empty and invalid entries

			if (typeof path !== 'string') {
				throw new TypeError('Arguments to path.resolve must be strings');
			} else if (!path) {
				continue;
			}

			resolvedPath = path + '/' + resolvedPath;
			resolvedAbsolute = path.charAt(0) === '/';
		} // At this point the path should be resolved to a full absolute path, but
		// handle relative paths to be safe (might happen when process.cwd() fails)
		// Normalize the path


		resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function (p) {
			return !!p;
		}), !resolvedAbsolute).join('/');
		return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';
	}
	// posix version

	function normalize$1(path) {
		var isPathAbsolute = isAbsolute(path),
			trailingSlash = substr(path, -1) === '/'; // Normalize the path

		path = normalizeArray(filter(path.split('/'), function (p) {
			return !!p;
		}), !isPathAbsolute).join('/');

		if (!path && !isPathAbsolute) {
			path = '.';
		}

		if (path && trailingSlash) {
			path += '/';
		}

		return (isPathAbsolute ? '/' : '') + path;
	}

	function isAbsolute(path) {
		return path.charAt(0) === '/';
	} // posix version

	function join() {
		var paths = Array.prototype.slice.call(arguments, 0);
		return normalize$1(filter(paths, function (p, index) {
			if (typeof p !== 'string') {
				throw new TypeError('Arguments to path.join must be strings');
			}

			return p;
		}).join('/'));
	} // path.relative(from, to)
	// posix version

	function relative(from, to) {
		from = resolve(from).substr(1);
		to = resolve(to).substr(1);

		function trim(arr) {
			var start = 0;

			for (; start < arr.length; start++) {
				if (arr[start] !== '') break;
			}

			var end = arr.length - 1;

			for (; end >= 0; end--) {
				if (arr[end] !== '') break;
			}

			if (start > end) return [];
			return arr.slice(start, end - start + 1);
		}

		var fromParts = trim(from.split('/'));
		var toParts = trim(to.split('/'));
		var length = Math.min(fromParts.length, toParts.length);
		var samePartsLength = length;

		for (var i = 0; i < length; i++) {
			if (fromParts[i] !== toParts[i]) {
				samePartsLength = i;
				break;
			}
		}

		var outputParts = [];

		for (var i = samePartsLength; i < fromParts.length; i++) {
			outputParts.push('..');
		}

		outputParts = outputParts.concat(toParts.slice(samePartsLength));
		return outputParts.join('/');
	}
	var sep = '/';
	var delimiter = ':';
	function dirname(path) {
		var result = splitPath(path),
			root = result[0],
			dir = result[1];

		if (!root && !dir) {
			// No dirname whatsoever
			return '.';
		}

		if (dir) {
			// It has a dirname, strip trailing slash
			dir = dir.substr(0, dir.length - 1);
		}

		return root + dir;
	}
	function basename(path, ext) {
		var f = splitPath(path)[2]; // TODO: make this comparison case-insensitive on windows?

		if (ext && f.substr(-1 * ext.length) === ext) {
			f = f.substr(0, f.length - ext.length);
		}

		return f;
	}
	function extname(path) {
		return splitPath(path)[3];
	}
	var path$1 = {
		extname: extname,
		basename: basename,
		dirname: dirname,
		sep: sep,
		delimiter: delimiter,
		relative: relative,
		join: join,
		isAbsolute: isAbsolute,
		normalize: normalize$1,
		resolve: resolve
	};

	function filter(xs, f) {
		if (xs.filter) return xs.filter(f);
		var res = [];

		for (var i = 0; i < xs.length; i++) {
			if (f(xs[i], i, xs)) res.push(xs[i]);
		}

		return res;
	} // String.prototype.substr - negative index don't work in IE8


	var substr =  true ? function (str, start, len) {
		return str.substr(start, len);
	} : 0;

	// `Array.from` method implementation
	// https://tc39.github.io/ecma262/#sec-array.from
	var arrayFrom = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
		var O = toObject(arrayLike);
		var C = typeof this == 'function' ? this : Array;
		var argumentsLength = arguments.length;
		var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
		var mapping = mapfn !== undefined;
		var iteratorMethod = getIteratorMethod(O);
		var index = 0;
		var length, result, step, iterator, next, value;
		if (mapping) mapfn = functionBindContext(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);
		// if the target is not iterable or it's an array with the default iterator - use a simple case
		if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {
			iterator = iteratorMethod.call(O);
			next = iterator.next;
			result = new C();
			for (; !(step = next.call(iterator)).done; index++) {
				value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
				createProperty(result, index, value);
			}
		} else {
			length = toLength(O.length);
			result = new C(length);
			for (; length > index; index++) {
				value = mapping ? mapfn(O[index], index) : O[index];
				createProperty(result, index, value);
			}
		}
		result.length = index;
		return result;
	};

	var INCORRECT_ITERATION$1 = !checkCorrectnessOfIteration(function (iterable) {
		Array.from(iterable);
	});

	// `Array.from` method
	// https://tc39.github.io/ecma262/#sec-array.from
	_export({ target: 'Array', stat: true, forced: INCORRECT_ITERATION$1 }, {
		from: arrayFrom
	});

	var diff = createCommonjsModule(function (module, exports) {
		/*!
	 
			diff v4.0.1
	 
		Software License Agreement (BSD License)
	 
		Copyright (c) 2009-2015, Kevin Decker <kpdecker@gmail.com>
	 
		All rights reserved.
	 
		Redistribution and use of this software in source and binary forms, with or without modification,
		are permitted provided that the following conditions are met:
	 
		* Redistributions of source code must retain the above
				copyright notice, this list of conditions and the
				following disclaimer.
	 
		* Redistributions in binary form must reproduce the above
				copyright notice, this list of conditions and the
				following disclaimer in the documentation and/or other
				materials provided with the distribution.
	 
		* Neither the name of Kevin Decker nor the names of its
				contributors may be used to endorse or promote products
				derived from this software without specific prior
				written permission.
	 
		THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
		IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
		FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
		CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
		DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
		DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
		IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
		OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		@license
		*/
		(function (global, factory) {
			factory(exports);
		})(commonjsGlobal, function (exports) {

			function Diff() { }

			Diff.prototype = {
				diff: function diff(oldString, newString) {
					var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
					var callback = options.callback;

					if (typeof options === 'function') {
						callback = options;
						options = {};
					}

					this.options = options;
					var self = this;

					function done(value) {
						if (callback) {
							setTimeout(function () {
								callback(undefined, value);
							}, 0);
							return true;
						} else {
							return value;
						}
					} // Allow subclasses to massage the input prior to running


					oldString = this.castInput(oldString);
					newString = this.castInput(newString);
					oldString = this.removeEmpty(this.tokenize(oldString));
					newString = this.removeEmpty(this.tokenize(newString));
					var newLen = newString.length,
						oldLen = oldString.length;
					var editLength = 1;
					var maxEditLength = newLen + oldLen;
					var bestPath = [{
						newPos: -1,
						components: []
					}]; // Seed editLength = 0, i.e. the content starts with the same values

					var oldPos = this.extractCommon(bestPath[0], newString, oldString, 0);

					if (bestPath[0].newPos + 1 >= newLen && oldPos + 1 >= oldLen) {
						// Identity per the equality and tokenizer
						return done([{
							value: this.join(newString),
							count: newString.length
						}]);
					} // Main worker method. checks all permutations of a given edit length for acceptance.


					function execEditLength() {
						for (var diagonalPath = -1 * editLength; diagonalPath <= editLength; diagonalPath += 2) {
							var basePath = void 0;

							var addPath = bestPath[diagonalPath - 1],
								removePath = bestPath[diagonalPath + 1],
								_oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;

							if (addPath) {
								// No one else is going to attempt to use this value, clear it
								bestPath[diagonalPath - 1] = undefined;
							}

							var canAdd = addPath && addPath.newPos + 1 < newLen,
								canRemove = removePath && 0 <= _oldPos && _oldPos < oldLen;

							if (!canAdd && !canRemove) {
								// If this path is a terminal then prune
								bestPath[diagonalPath] = undefined;
								continue;
							} // Select the diagonal that we want to branch from. We select the prior
							// path whose position in the new string is the farthest from the origin
							// and does not pass the bounds of the diff graph


							if (!canAdd || canRemove && addPath.newPos < removePath.newPos) {
								basePath = clonePath(removePath);
								self.pushComponent(basePath.components, undefined, true);
							} else {
								basePath = addPath; // No need to clone, we've pulled it from the list

								basePath.newPos++;
								self.pushComponent(basePath.components, true, undefined);
							}

							_oldPos = self.extractCommon(basePath, newString, oldString, diagonalPath); // If we have hit the end of both strings, then we are done

							if (basePath.newPos + 1 >= newLen && _oldPos + 1 >= oldLen) {
								return done(buildValues(self, basePath.components, newString, oldString, self.useLongestToken));
							} else {
								// Otherwise track this path as a potential candidate and continue.
								bestPath[diagonalPath] = basePath;
							}
						}

						editLength++;
					} // Performs the length of edit iteration. Is a bit fugly as this has to support the
					// sync and async mode which is never fun. Loops over execEditLength until a value
					// is produced.


					if (callback) {
						(function exec() {
							setTimeout(function () {
								// This should not happen, but we want to be safe.

								/* istanbul ignore next */
								if (editLength > maxEditLength) {
									return callback();
								}

								if (!execEditLength()) {
									exec();
								}
							}, 0);
						})();
					} else {
						while (editLength <= maxEditLength) {
							var ret = execEditLength();

							if (ret) {
								return ret;
							}
						}
					}
				},
				pushComponent: function pushComponent(components, added, removed) {
					var last = components[components.length - 1];

					if (last && last.added === added && last.removed === removed) {
						// We need to clone here as the component clone operation is just
						// as shallow array clone
						components[components.length - 1] = {
							count: last.count + 1,
							added: added,
							removed: removed
						};
					} else {
						components.push({
							count: 1,
							added: added,
							removed: removed
						});
					}
				},
				extractCommon: function extractCommon(basePath, newString, oldString, diagonalPath) {
					var newLen = newString.length,
						oldLen = oldString.length,
						newPos = basePath.newPos,
						oldPos = newPos - diagonalPath,
						commonCount = 0;

					while (newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(newString[newPos + 1], oldString[oldPos + 1])) {
						newPos++;
						oldPos++;
						commonCount++;
					}

					if (commonCount) {
						basePath.components.push({
							count: commonCount
						});
					}

					basePath.newPos = newPos;
					return oldPos;
				},
				equals: function equals(left, right) {
					if (this.options.comparator) {
						return this.options.comparator(left, right);
					} else {
						return left === right || this.options.ignoreCase && left.toLowerCase() === right.toLowerCase();
					}
				},
				removeEmpty: function removeEmpty(array) {
					var ret = [];

					for (var i = 0; i < array.length; i++) {
						if (array[i]) {
							ret.push(array[i]);
						}
					}

					return ret;
				},
				castInput: function castInput(value) {
					return value;
				},
				tokenize: function tokenize(value) {
					return value.split('');
				},
				join: function join(chars) {
					return chars.join('');
				}
			};

			function buildValues(diff, components, newString, oldString, useLongestToken) {
				var componentPos = 0,
					componentLen = components.length,
					newPos = 0,
					oldPos = 0;

				for (; componentPos < componentLen; componentPos++) {
					var component = components[componentPos];

					if (!component.removed) {
						if (!component.added && useLongestToken) {
							var value = newString.slice(newPos, newPos + component.count);
							value = value.map(function (value, i) {
								var oldValue = oldString[oldPos + i];
								return oldValue.length > value.length ? oldValue : value;
							});
							component.value = diff.join(value);
						} else {
							component.value = diff.join(newString.slice(newPos, newPos + component.count));
						}

						newPos += component.count; // Common case

						if (!component.added) {
							oldPos += component.count;
						}
					} else {
						component.value = diff.join(oldString.slice(oldPos, oldPos + component.count));
						oldPos += component.count; // Reverse add and remove so removes are output first to match common convention
						// The diffing algorithm is tied to add then remove output and this is the simplest
						// route to get the desired output with minimal overhead.

						if (componentPos && components[componentPos - 1].added) {
							var tmp = components[componentPos - 1];
							components[componentPos - 1] = components[componentPos];
							components[componentPos] = tmp;
						}
					}
				} // Special case handle for when one terminal is ignored (i.e. whitespace).
				// For this case we merge the terminal into the prior string and drop the change.
				// This is only available for string mode.


				var lastComponent = components[componentLen - 1];

				if (componentLen > 1 && typeof lastComponent.value === 'string' && (lastComponent.added || lastComponent.removed) && diff.equals('', lastComponent.value)) {
					components[componentLen - 2].value += lastComponent.value;
					components.pop();
				}

				return components;
			}

			function clonePath(path) {
				return {
					newPos: path.newPos,
					components: path.components.slice(0)
				};
			}

			var characterDiff = new Diff();

			function diffChars(oldStr, newStr, options) {
				return characterDiff.diff(oldStr, newStr, options);
			}

			function generateOptions(options, defaults) {
				if (typeof options === 'function') {
					defaults.callback = options;
				} else if (options) {
					for (var name in options) {
						/* istanbul ignore else */
						if (options.hasOwnProperty(name)) {
							defaults[name] = options[name];
						}
					}
				}

				return defaults;
			} //
			// Ranges and exceptions:
			// Latin-1 Supplement, 0080–00FF
			//  - U+00D7  × Multiplication sign
			//  - U+00F7  ÷ Division sign
			// Latin Extended-A, 0100–017F
			// Latin Extended-B, 0180–024F
			// IPA Extensions, 0250–02AF
			// Spacing Modifier Letters, 02B0–02FF
			//  - U+02C7  ˇ &#711;  Caron
			//  - U+02D8  ˘ &#728;  Breve
			//  - U+02D9  ˙ &#729;  Dot Above
			//  - U+02DA  ˚ &#730;  Ring Above
			//  - U+02DB  ˛ &#731;  Ogonek
			//  - U+02DC  ˜ &#732;  Small Tilde
			//  - U+02DD  ˝ &#733;  Double Acute Accent
			// Latin Extended Additional, 1E00–1EFF


			var extendedWordChars = /^[A-Za-z\xC0-\u02C6\u02C8-\u02D7\u02DE-\u02FF\u1E00-\u1EFF]+$/;
			var reWhitespace = /\S/;
			var wordDiff = new Diff();

			wordDiff.equals = function (left, right) {
				if (this.options.ignoreCase) {
					left = left.toLowerCase();
					right = right.toLowerCase();
				}

				return left === right || this.options.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right);
			};

			wordDiff.tokenize = function (value) {
				var tokens = value.split(/(\s+|[()[\]{}'"]|\b)/); // Join the boundary splits that we do not consider to be boundaries. This is primarily the extended Latin character set.

				for (var i = 0; i < tokens.length - 1; i++) {
					// If we have an empty string in the next field and we have only word chars before and after, merge
					if (!tokens[i + 1] && tokens[i + 2] && extendedWordChars.test(tokens[i]) && extendedWordChars.test(tokens[i + 2])) {
						tokens[i] += tokens[i + 2];
						tokens.splice(i + 1, 2);
						i--;
					}
				}

				return tokens;
			};

			function diffWords(oldStr, newStr, options) {
				options = generateOptions(options, {
					ignoreWhitespace: true
				});
				return wordDiff.diff(oldStr, newStr, options);
			}

			function diffWordsWithSpace(oldStr, newStr, options) {
				return wordDiff.diff(oldStr, newStr, options);
			}

			var lineDiff = new Diff();

			lineDiff.tokenize = function (value) {
				var retLines = [],
					linesAndNewlines = value.split(/(\n|\r\n)/); // Ignore the final empty token that occurs if the string ends with a new line

				if (!linesAndNewlines[linesAndNewlines.length - 1]) {
					linesAndNewlines.pop();
				} // Merge the content and line separators into single tokens


				for (var i = 0; i < linesAndNewlines.length; i++) {
					var line = linesAndNewlines[i];

					if (i % 2 && !this.options.newlineIsToken) {
						retLines[retLines.length - 1] += line;
					} else {
						if (this.options.ignoreWhitespace) {
							line = line.trim();
						}

						retLines.push(line);
					}
				}

				return retLines;
			};

			function diffLines(oldStr, newStr, callback) {
				return lineDiff.diff(oldStr, newStr, callback);
			}

			function diffTrimmedLines(oldStr, newStr, callback) {
				var options = generateOptions(callback, {
					ignoreWhitespace: true
				});
				return lineDiff.diff(oldStr, newStr, options);
			}

			var sentenceDiff = new Diff();

			sentenceDiff.tokenize = function (value) {
				return value.split(/(\S.+?[.!?])(?=\s+|$)/);
			};

			function diffSentences(oldStr, newStr, callback) {
				return sentenceDiff.diff(oldStr, newStr, callback);
			}

			var cssDiff = new Diff();

			cssDiff.tokenize = function (value) {
				return value.split(/([{}:;,]|\s+)/);
			};

			function diffCss(oldStr, newStr, callback) {
				return cssDiff.diff(oldStr, newStr, callback);
			}

			function _typeof$1(obj) {
				if (typeof Symbol === "function" && _typeof(Symbol.iterator) === "symbol") {
					_typeof$1 = function _typeof$1(obj) {
						return _typeof(obj);
					};
				} else {
					_typeof$1 = function _typeof$1(obj) {
						return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof(obj);
					};
				}

				return _typeof$1(obj);
			}

			function _toConsumableArray(arr) {
				return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
			}

			function _arrayWithoutHoles(arr) {
				if (Array.isArray(arr)) {
					for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
						arr2[i] = arr[i];
					}

					return arr2;
				}
			}

			function _iterableToArray(iter) {
				if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
			}

			function _nonIterableSpread() {
				throw new TypeError("Invalid attempt to spread non-iterable instance");
			}

			var objectPrototypeToString = Object.prototype.toString;
			var jsonDiff = new Diff(); // Discriminate between two lines of pretty-printed, serialized JSON where one of them has a
			// dangling comma and the other doesn't. Turns out including the dangling comma yields the nicest output:

			jsonDiff.useLongestToken = true;
			jsonDiff.tokenize = lineDiff.tokenize;

			jsonDiff.castInput = function (value) {
				var _this$options = this.options,
					undefinedReplacement = _this$options.undefinedReplacement,
					_this$options$stringi = _this$options.stringifyReplacer,
					stringifyReplacer = _this$options$stringi === void 0 ? function (k, v) {
						return typeof v === 'undefined' ? undefinedReplacement : v;
					} : _this$options$stringi;
				return typeof value === 'string' ? value : JSON.stringify(canonicalize(value, null, null, stringifyReplacer), stringifyReplacer, '  ');
			};

			jsonDiff.equals = function (left, right) {
				return Diff.prototype.equals.call(jsonDiff, left.replace(/,([\r\n])/g, '$1'), right.replace(/,([\r\n])/g, '$1'));
			};

			function diffJson(oldObj, newObj, options) {
				return jsonDiff.diff(oldObj, newObj, options);
			} // This function handles the presence of circular references by bailing out when encountering an
			// object that is already on the "stack" of items being processed. Accepts an optional replacer


			function canonicalize(obj, stack, replacementStack, replacer, key) {
				stack = stack || [];
				replacementStack = replacementStack || [];

				if (replacer) {
					obj = replacer(key, obj);
				}

				var i;

				for (i = 0; i < stack.length; i += 1) {
					if (stack[i] === obj) {
						return replacementStack[i];
					}
				}

				var canonicalizedObj;

				if ('[object Array]' === objectPrototypeToString.call(obj)) {
					stack.push(obj);
					canonicalizedObj = new Array(obj.length);
					replacementStack.push(canonicalizedObj);

					for (i = 0; i < obj.length; i += 1) {
						canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack, replacer, key);
					}

					stack.pop();
					replacementStack.pop();
					return canonicalizedObj;
				}

				if (obj && obj.toJSON) {
					obj = obj.toJSON();
				}

				if (_typeof$1(obj) === 'object' && obj !== null) {
					stack.push(obj);
					canonicalizedObj = {};
					replacementStack.push(canonicalizedObj);

					var sortedKeys = [],
						_key;

					for (_key in obj) {
						/* istanbul ignore else */
						if (obj.hasOwnProperty(_key)) {
							sortedKeys.push(_key);
						}
					}

					sortedKeys.sort();

					for (i = 0; i < sortedKeys.length; i += 1) {
						_key = sortedKeys[i];
						canonicalizedObj[_key] = canonicalize(obj[_key], stack, replacementStack, replacer, _key);
					}

					stack.pop();
					replacementStack.pop();
				} else {
					canonicalizedObj = obj;
				}

				return canonicalizedObj;
			}

			var arrayDiff = new Diff();

			arrayDiff.tokenize = function (value) {
				return value.slice();
			};

			arrayDiff.join = arrayDiff.removeEmpty = function (value) {
				return value;
			};

			function diffArrays(oldArr, newArr, callback) {
				return arrayDiff.diff(oldArr, newArr, callback);
			}

			function parsePatch(uniDiff) {
				var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
				var diffstr = uniDiff.split(/\r\n|[\n\v\f\r\x85]/),
					delimiters = uniDiff.match(/\r\n|[\n\v\f\r\x85]/g) || [],
					list = [],
					i = 0;

				function parseIndex() {
					var index = {};
					list.push(index); // Parse diff metadata

					while (i < diffstr.length) {
						var line = diffstr[i]; // File header found, end parsing diff metadata

						if (/^(\-\-\-|\+\+\+|@@)\s/.test(line)) {
							break;
						} // Diff index


						var header = /^(?:Index:|diff(?: -r \w+)+)\s+(.+?)\s*$/.exec(line);

						if (header) {
							index.index = header[1];
						}

						i++;
					} // Parse file headers if they are defined. Unified diff requires them, but
					// there's no technical issues to have an isolated hunk without file header


					parseFileHeader(index);
					parseFileHeader(index); // Parse hunks

					index.hunks = [];

					while (i < diffstr.length) {
						var _line = diffstr[i];

						if (/^(Index:|diff|\-\-\-|\+\+\+)\s/.test(_line)) {
							break;
						} else if (/^@@/.test(_line)) {
							index.hunks.push(parseHunk());
						} else if (_line && options.strict) {
							// Ignore unexpected content unless in strict mode
							throw new Error('Unknown line ' + (i + 1) + ' ' + JSON.stringify(_line));
						} else {
							i++;
						}
					}
				} // Parses the --- and +++ headers, if none are found, no lines
				// are consumed.


				function parseFileHeader(index) {
					var fileHeader = /^(---|\+\+\+)\s+(.*)$/.exec(diffstr[i]);

					if (fileHeader) {
						var keyPrefix = fileHeader[1] === '---' ? 'old' : 'new';
						var data = fileHeader[2].split('\t', 2);
						var fileName = data[0].replace(/\\\\/g, '\\');

						if (/^".*"$/.test(fileName)) {
							fileName = fileName.substr(1, fileName.length - 2);
						}

						index[keyPrefix + 'FileName'] = fileName;
						index[keyPrefix + 'Header'] = (data[1] || '').trim();
						i++;
					}
				} // Parses a hunk
				// This assumes that we are at the start of a hunk.


				function parseHunk() {
					var chunkHeaderIndex = i,
						chunkHeaderLine = diffstr[i++],
						chunkHeader = chunkHeaderLine.split(/@@ -(\d+)(?:,(\d+))? \+(\d+)(?:,(\d+))? @@/);
					var hunk = {
						oldStart: +chunkHeader[1],
						oldLines: +chunkHeader[2] || 1,
						newStart: +chunkHeader[3],
						newLines: +chunkHeader[4] || 1,
						lines: [],
						linedelimiters: []
					};
					var addCount = 0,
						removeCount = 0;

					for (; i < diffstr.length; i++) {
						// Lines starting with '---' could be mistaken for the "remove line" operation
						// But they could be the header for the next file. Therefore prune such cases out.
						if (diffstr[i].indexOf('--- ') === 0 && i + 2 < diffstr.length && diffstr[i + 1].indexOf('+++ ') === 0 && diffstr[i + 2].indexOf('@@') === 0) {
							break;
						}

						var operation = diffstr[i].length == 0 && i != diffstr.length - 1 ? ' ' : diffstr[i][0];

						if (operation === '+' || operation === '-' || operation === ' ' || operation === '\\') {
							hunk.lines.push(diffstr[i]);
							hunk.linedelimiters.push(delimiters[i] || '\n');

							if (operation === '+') {
								addCount++;
							} else if (operation === '-') {
								removeCount++;
							} else if (operation === ' ') {
								addCount++;
								removeCount++;
							}
						} else {
							break;
						}
					} // Handle the empty block count case


					if (!addCount && hunk.newLines === 1) {
						hunk.newLines = 0;
					}

					if (!removeCount && hunk.oldLines === 1) {
						hunk.oldLines = 0;
					} // Perform optional sanity checking


					if (options.strict) {
						if (addCount !== hunk.newLines) {
							throw new Error('Added line count did not match for hunk at line ' + (chunkHeaderIndex + 1));
						}

						if (removeCount !== hunk.oldLines) {
							throw new Error('Removed line count did not match for hunk at line ' + (chunkHeaderIndex + 1));
						}
					}

					return hunk;
				}

				while (i < diffstr.length) {
					parseIndex();
				}

				return list;
			} // Iterator that traverses in the range of [min, max], stepping
			// by distance from a given start position. I.e. for [0, 4], with
			// start of 2, this will iterate 2, 3, 1, 4, 0.


			function distanceIterator(start, minLine, maxLine) {
				var wantForward = true,
					backwardExhausted = false,
					forwardExhausted = false,
					localOffset = 1;
				return function iterator() {
					if (wantForward && !forwardExhausted) {
						if (backwardExhausted) {
							localOffset++;
						} else {
							wantForward = false;
						} // Check if trying to fit beyond text length, and if not, check it fits
						// after offset location (or desired location on first iteration)


						if (start + localOffset <= maxLine) {
							return localOffset;
						}

						forwardExhausted = true;
					}

					if (!backwardExhausted) {
						if (!forwardExhausted) {
							wantForward = true;
						} // Check if trying to fit before text beginning, and if not, check it fits
						// before offset location


						if (minLine <= start - localOffset) {
							return -localOffset++;
						}

						backwardExhausted = true;
						return iterator();
					} // We tried to fit hunk before text beginning and beyond text length, then
					// hunk can't fit on the text. Return undefined

				};
			}

			function applyPatch(source, uniDiff) {
				var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

				if (typeof uniDiff === 'string') {
					uniDiff = parsePatch(uniDiff);
				}

				if (Array.isArray(uniDiff)) {
					if (uniDiff.length > 1) {
						throw new Error('applyPatch only works with a single input.');
					}

					uniDiff = uniDiff[0];
				} // Apply the diff to the input


				var lines = source.split(/\r\n|[\n\v\f\r\x85]/),
					delimiters = source.match(/\r\n|[\n\v\f\r\x85]/g) || [],
					hunks = uniDiff.hunks,
					compareLine = options.compareLine || function (lineNumber, line, operation, patchContent) {
						return line === patchContent;
					},
					errorCount = 0,
					fuzzFactor = options.fuzzFactor || 0,
					minLine = 0,
					offset = 0,
					removeEOFNL,
					addEOFNL;
				/**
					* Checks if the hunk exactly fits on the provided location
					*/


				function hunkFits(hunk, toPos) {
					for (var j = 0; j < hunk.lines.length; j++) {
						var line = hunk.lines[j],
							operation = line.length > 0 ? line[0] : ' ',
							content = line.length > 0 ? line.substr(1) : line;

						if (operation === ' ' || operation === '-') {
							// Context sanity check
							if (!compareLine(toPos + 1, lines[toPos], operation, content)) {
								errorCount++;

								if (errorCount > fuzzFactor) {
									return false;
								}
							}

							toPos++;
						}
					}

					return true;
				} // Search best fit offsets for each hunk based on the previous ones


				for (var i = 0; i < hunks.length; i++) {
					var hunk = hunks[i],
						maxLine = lines.length - hunk.oldLines,
						localOffset = 0,
						toPos = offset + hunk.oldStart - 1;
					var iterator = distanceIterator(toPos, minLine, maxLine);

					for (; localOffset !== undefined; localOffset = iterator()) {
						if (hunkFits(hunk, toPos + localOffset)) {
							hunk.offset = offset += localOffset;
							break;
						}
					}

					if (localOffset === undefined) {
						return false;
					} // Set lower text limit to end of the current hunk, so next ones don't try
					// to fit over already patched text


					minLine = hunk.offset + hunk.oldStart + hunk.oldLines;
				} // Apply patch hunks


				var diffOffset = 0;

				for (var _i = 0; _i < hunks.length; _i++) {
					var _hunk = hunks[_i],
						_toPos = _hunk.oldStart + _hunk.offset + diffOffset - 1;

					diffOffset += _hunk.newLines - _hunk.oldLines;

					if (_toPos < 0) {
						// Creating a new file
						_toPos = 0;
					}

					for (var j = 0; j < _hunk.lines.length; j++) {
						var line = _hunk.lines[j],
							operation = line.length > 0 ? line[0] : ' ',
							content = line.length > 0 ? line.substr(1) : line,
							delimiter = _hunk.linedelimiters[j];

						if (operation === ' ') {
							_toPos++;
						} else if (operation === '-') {
							lines.splice(_toPos, 1);
							delimiters.splice(_toPos, 1);
							/* istanbul ignore else */
						} else if (operation === '+') {
							lines.splice(_toPos, 0, content);
							delimiters.splice(_toPos, 0, delimiter);
							_toPos++;
						} else if (operation === '\\') {
							var previousOperation = _hunk.lines[j - 1] ? _hunk.lines[j - 1][0] : null;

							if (previousOperation === '+') {
								removeEOFNL = true;
							} else if (previousOperation === '-') {
								addEOFNL = true;
							}
						}
					}
				} // Handle EOFNL insertion/removal


				if (removeEOFNL) {
					while (!lines[lines.length - 1]) {
						lines.pop();
						delimiters.pop();
					}
				} else if (addEOFNL) {
					lines.push('');
					delimiters.push('\n');
				}

				for (var _k = 0; _k < lines.length - 1; _k++) {
					lines[_k] = lines[_k] + delimiters[_k];
				}

				return lines.join('');
			} // Wrapper that supports multiple file patches via callbacks.


			function applyPatches(uniDiff, options) {
				if (typeof uniDiff === 'string') {
					uniDiff = parsePatch(uniDiff);
				}

				var currentIndex = 0;

				function processIndex() {
					var index = uniDiff[currentIndex++];

					if (!index) {
						return options.complete();
					}

					options.loadFile(index, function (err, data) {
						if (err) {
							return options.complete(err);
						}

						var updatedContent = applyPatch(data, index, options);
						options.patched(index, updatedContent, function (err) {
							if (err) {
								return options.complete(err);
							}

							processIndex();
						});
					});
				}

				processIndex();
			}

			function structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {
				if (!options) {
					options = {};
				}

				if (typeof options.context === 'undefined') {
					options.context = 4;
				}

				var diff = diffLines(oldStr, newStr, options);
				diff.push({
					value: '',
					lines: []
				}); // Append an empty value to make cleanup easier

				function contextLines(lines) {
					return lines.map(function (entry) {
						return ' ' + entry;
					});
				}

				var hunks = [];
				var oldRangeStart = 0,
					newRangeStart = 0,
					curRange = [],
					oldLine = 1,
					newLine = 1;

				var _loop = function _loop(i) {
					var current = diff[i],
						lines = current.lines || current.value.replace(/\n$/, '').split('\n');
					current.lines = lines;

					if (current.added || current.removed) {
						var _curRange; // If we have previous context, start with that


						if (!oldRangeStart) {
							var prev = diff[i - 1];
							oldRangeStart = oldLine;
							newRangeStart = newLine;

							if (prev) {
								curRange = options.context > 0 ? contextLines(prev.lines.slice(-options.context)) : [];
								oldRangeStart -= curRange.length;
								newRangeStart -= curRange.length;
							}
						} // Output our changes


						(_curRange = curRange).push.apply(_curRange, _toConsumableArray(lines.map(function (entry) {
							return (current.added ? '+' : '-') + entry;
						}))); // Track the updated file position


						if (current.added) {
							newLine += lines.length;
						} else {
							oldLine += lines.length;
						}
					} else {
						// Identical context lines. Track line changes
						if (oldRangeStart) {
							// Close out any changes that have been output (or join overlapping)
							if (lines.length <= options.context * 2 && i < diff.length - 2) {
								var _curRange2; // Overlapping


								(_curRange2 = curRange).push.apply(_curRange2, _toConsumableArray(contextLines(lines)));
							} else {
								var _curRange3; // end the range and output


								var contextSize = Math.min(lines.length, options.context);

								(_curRange3 = curRange).push.apply(_curRange3, _toConsumableArray(contextLines(lines.slice(0, contextSize))));

								var hunk = {
									oldStart: oldRangeStart,
									oldLines: oldLine - oldRangeStart + contextSize,
									newStart: newRangeStart,
									newLines: newLine - newRangeStart + contextSize,
									lines: curRange
								};

								if (i >= diff.length - 2 && lines.length <= options.context) {
									// EOF is inside this hunk
									var oldEOFNewline = /\n$/.test(oldStr);
									var newEOFNewline = /\n$/.test(newStr);
									var noNlBeforeAdds = lines.length == 0 && curRange.length > hunk.oldLines;

									if (!oldEOFNewline && noNlBeforeAdds) {
										// special case: old has no eol and no trailing context; no-nl can end up before adds
										curRange.splice(hunk.oldLines, 0, '\\ No newline at end of file');
									}

									if (!oldEOFNewline && !noNlBeforeAdds || !newEOFNewline) {
										curRange.push('\\ No newline at end of file');
									}
								}

								hunks.push(hunk);
								oldRangeStart = 0;
								newRangeStart = 0;
								curRange = [];
							}
						}

						oldLine += lines.length;
						newLine += lines.length;
					}
				};

				for (var i = 0; i < diff.length; i++) {
					_loop(i);
				}

				return {
					oldFileName: oldFileName,
					newFileName: newFileName,
					oldHeader: oldHeader,
					newHeader: newHeader,
					hunks: hunks
				};
			}

			function createTwoFilesPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {
				var diff = structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options);
				var ret = [];

				if (oldFileName == newFileName) {
					ret.push('Index: ' + oldFileName);
				}

				ret.push('===================================================================');
				ret.push('--- ' + diff.oldFileName + (typeof diff.oldHeader === 'undefined' ? '' : '\t' + diff.oldHeader));
				ret.push('+++ ' + diff.newFileName + (typeof diff.newHeader === 'undefined' ? '' : '\t' + diff.newHeader));

				for (var i = 0; i < diff.hunks.length; i++) {
					var hunk = diff.hunks[i];
					ret.push('@@ -' + hunk.oldStart + ',' + hunk.oldLines + ' +' + hunk.newStart + ',' + hunk.newLines + ' @@');
					ret.push.apply(ret, hunk.lines);
				}

				return ret.join('\n') + '\n';
			}

			function createPatch(fileName, oldStr, newStr, oldHeader, newHeader, options) {
				return createTwoFilesPatch(fileName, fileName, oldStr, newStr, oldHeader, newHeader, options);
			}

			function arrayEqual(a, b) {
				if (a.length !== b.length) {
					return false;
				}

				return arrayStartsWith(a, b);
			}

			function arrayStartsWith(array, start) {
				if (start.length > array.length) {
					return false;
				}

				for (var i = 0; i < start.length; i++) {
					if (start[i] !== array[i]) {
						return false;
					}
				}

				return true;
			}

			function calcLineCount(hunk) {
				var _calcOldNewLineCount = calcOldNewLineCount(hunk.lines),
					oldLines = _calcOldNewLineCount.oldLines,
					newLines = _calcOldNewLineCount.newLines;

				if (oldLines !== undefined) {
					hunk.oldLines = oldLines;
				} else {
					delete hunk.oldLines;
				}

				if (newLines !== undefined) {
					hunk.newLines = newLines;
				} else {
					delete hunk.newLines;
				}
			}

			function merge(mine, theirs, base) {
				mine = loadPatch(mine, base);
				theirs = loadPatch(theirs, base);
				var ret = {}; // For index we just let it pass through as it doesn't have any necessary meaning.
				// Leaving sanity checks on this to the API consumer that may know more about the
				// meaning in their own context.

				if (mine.index || theirs.index) {
					ret.index = mine.index || theirs.index;
				}

				if (mine.newFileName || theirs.newFileName) {
					if (!fileNameChanged(mine)) {
						// No header or no change in ours, use theirs (and ours if theirs does not exist)
						ret.oldFileName = theirs.oldFileName || mine.oldFileName;
						ret.newFileName = theirs.newFileName || mine.newFileName;
						ret.oldHeader = theirs.oldHeader || mine.oldHeader;
						ret.newHeader = theirs.newHeader || mine.newHeader;
					} else if (!fileNameChanged(theirs)) {
						// No header or no change in theirs, use ours
						ret.oldFileName = mine.oldFileName;
						ret.newFileName = mine.newFileName;
						ret.oldHeader = mine.oldHeader;
						ret.newHeader = mine.newHeader;
					} else {
						// Both changed... figure it out
						ret.oldFileName = selectField(ret, mine.oldFileName, theirs.oldFileName);
						ret.newFileName = selectField(ret, mine.newFileName, theirs.newFileName);
						ret.oldHeader = selectField(ret, mine.oldHeader, theirs.oldHeader);
						ret.newHeader = selectField(ret, mine.newHeader, theirs.newHeader);
					}
				}

				ret.hunks = [];
				var mineIndex = 0,
					theirsIndex = 0,
					mineOffset = 0,
					theirsOffset = 0;

				while (mineIndex < mine.hunks.length || theirsIndex < theirs.hunks.length) {
					var mineCurrent = mine.hunks[mineIndex] || {
						oldStart: Infinity
					},
						theirsCurrent = theirs.hunks[theirsIndex] || {
							oldStart: Infinity
						};

					if (hunkBefore(mineCurrent, theirsCurrent)) {
						// This patch does not overlap with any of the others, yay.
						ret.hunks.push(cloneHunk(mineCurrent, mineOffset));
						mineIndex++;
						theirsOffset += mineCurrent.newLines - mineCurrent.oldLines;
					} else if (hunkBefore(theirsCurrent, mineCurrent)) {
						// This patch does not overlap with any of the others, yay.
						ret.hunks.push(cloneHunk(theirsCurrent, theirsOffset));
						theirsIndex++;
						mineOffset += theirsCurrent.newLines - theirsCurrent.oldLines;
					} else {
						// Overlap, merge as best we can
						var mergedHunk = {
							oldStart: Math.min(mineCurrent.oldStart, theirsCurrent.oldStart),
							oldLines: 0,
							newStart: Math.min(mineCurrent.newStart + mineOffset, theirsCurrent.oldStart + theirsOffset),
							newLines: 0,
							lines: []
						};
						mergeLines(mergedHunk, mineCurrent.oldStart, mineCurrent.lines, theirsCurrent.oldStart, theirsCurrent.lines);
						theirsIndex++;
						mineIndex++;
						ret.hunks.push(mergedHunk);
					}
				}

				return ret;
			}

			function loadPatch(param, base) {
				if (typeof param === 'string') {
					if (/^@@/m.test(param) || /^Index:/m.test(param)) {
						return parsePatch(param)[0];
					}

					if (!base) {
						throw new Error('Must provide a base reference or pass in a patch');
					}

					return structuredPatch(undefined, undefined, base, param);
				}

				return param;
			}

			function fileNameChanged(patch) {
				return patch.newFileName && patch.newFileName !== patch.oldFileName;
			}

			function selectField(index, mine, theirs) {
				if (mine === theirs) {
					return mine;
				} else {
					index.conflict = true;
					return {
						mine: mine,
						theirs: theirs
					};
				}
			}

			function hunkBefore(test, check) {
				return test.oldStart < check.oldStart && test.oldStart + test.oldLines < check.oldStart;
			}

			function cloneHunk(hunk, offset) {
				return {
					oldStart: hunk.oldStart,
					oldLines: hunk.oldLines,
					newStart: hunk.newStart + offset,
					newLines: hunk.newLines,
					lines: hunk.lines
				};
			}

			function mergeLines(hunk, mineOffset, mineLines, theirOffset, theirLines) {
				// This will generally result in a conflicted hunk, but there are cases where the context
				// is the only overlap where we can successfully merge the content here.
				var mine = {
					offset: mineOffset,
					lines: mineLines,
					index: 0
				},
					their = {
						offset: theirOffset,
						lines: theirLines,
						index: 0
					}; // Handle any leading content

				insertLeading(hunk, mine, their);
				insertLeading(hunk, their, mine); // Now in the overlap content. Scan through and select the best changes from each.

				while (mine.index < mine.lines.length && their.index < their.lines.length) {
					var mineCurrent = mine.lines[mine.index],
						theirCurrent = their.lines[their.index];

					if ((mineCurrent[0] === '-' || mineCurrent[0] === '+') && (theirCurrent[0] === '-' || theirCurrent[0] === '+')) {
						// Both modified ...
						mutualChange(hunk, mine, their);
					} else if (mineCurrent[0] === '+' && theirCurrent[0] === ' ') {
						var _hunk$lines; // Mine inserted


						(_hunk$lines = hunk.lines).push.apply(_hunk$lines, _toConsumableArray(collectChange(mine)));
					} else if (theirCurrent[0] === '+' && mineCurrent[0] === ' ') {
						var _hunk$lines2; // Theirs inserted


						(_hunk$lines2 = hunk.lines).push.apply(_hunk$lines2, _toConsumableArray(collectChange(their)));
					} else if (mineCurrent[0] === '-' && theirCurrent[0] === ' ') {
						// Mine removed or edited
						removal(hunk, mine, their);
					} else if (theirCurrent[0] === '-' && mineCurrent[0] === ' ') {
						// Their removed or edited
						removal(hunk, their, mine, true);
					} else if (mineCurrent === theirCurrent) {
						// Context identity
						hunk.lines.push(mineCurrent);
						mine.index++;
						their.index++;
					} else {
						// Context mismatch
						conflict(hunk, collectChange(mine), collectChange(their));
					}
				} // Now push anything that may be remaining


				insertTrailing(hunk, mine);
				insertTrailing(hunk, their);
				calcLineCount(hunk);
			}

			function mutualChange(hunk, mine, their) {
				var myChanges = collectChange(mine),
					theirChanges = collectChange(their);

				if (allRemoves(myChanges) && allRemoves(theirChanges)) {
					// Special case for remove changes that are supersets of one another
					if (arrayStartsWith(myChanges, theirChanges) && skipRemoveSuperset(their, myChanges, myChanges.length - theirChanges.length)) {
						var _hunk$lines3;

						(_hunk$lines3 = hunk.lines).push.apply(_hunk$lines3, _toConsumableArray(myChanges));

						return;
					} else if (arrayStartsWith(theirChanges, myChanges) && skipRemoveSuperset(mine, theirChanges, theirChanges.length - myChanges.length)) {
						var _hunk$lines4;

						(_hunk$lines4 = hunk.lines).push.apply(_hunk$lines4, _toConsumableArray(theirChanges));

						return;
					}
				} else if (arrayEqual(myChanges, theirChanges)) {
					var _hunk$lines5;

					(_hunk$lines5 = hunk.lines).push.apply(_hunk$lines5, _toConsumableArray(myChanges));

					return;
				}

				conflict(hunk, myChanges, theirChanges);
			}

			function removal(hunk, mine, their, swap) {
				var myChanges = collectChange(mine),
					theirChanges = collectContext(their, myChanges);

				if (theirChanges.merged) {
					var _hunk$lines6;

					(_hunk$lines6 = hunk.lines).push.apply(_hunk$lines6, _toConsumableArray(theirChanges.merged));
				} else {
					conflict(hunk, swap ? theirChanges : myChanges, swap ? myChanges : theirChanges);
				}
			}

			function conflict(hunk, mine, their) {
				hunk.conflict = true;
				hunk.lines.push({
					conflict: true,
					mine: mine,
					theirs: their
				});
			}

			function insertLeading(hunk, insert, their) {
				while (insert.offset < their.offset && insert.index < insert.lines.length) {
					var line = insert.lines[insert.index++];
					hunk.lines.push(line);
					insert.offset++;
				}
			}

			function insertTrailing(hunk, insert) {
				while (insert.index < insert.lines.length) {
					var line = insert.lines[insert.index++];
					hunk.lines.push(line);
				}
			}

			function collectChange(state) {
				var ret = [],
					operation = state.lines[state.index][0];

				while (state.index < state.lines.length) {
					var line = state.lines[state.index]; // Group additions that are immediately after subtractions and treat them as one "atomic" modify change.

					if (operation === '-' && line[0] === '+') {
						operation = '+';
					}

					if (operation === line[0]) {
						ret.push(line);
						state.index++;
					} else {
						break;
					}
				}

				return ret;
			}

			function collectContext(state, matchChanges) {
				var changes = [],
					merged = [],
					matchIndex = 0,
					contextChanges = false,
					conflicted = false;

				while (matchIndex < matchChanges.length && state.index < state.lines.length) {
					var change = state.lines[state.index],
						match = matchChanges[matchIndex]; // Once we've hit our add, then we are done

					if (match[0] === '+') {
						break;
					}

					contextChanges = contextChanges || change[0] !== ' ';
					merged.push(match);
					matchIndex++; // Consume any additions in the other block as a conflict to attempt
					// to pull in the remaining context after this

					if (change[0] === '+') {
						conflicted = true;

						while (change[0] === '+') {
							changes.push(change);
							change = state.lines[++state.index];
						}
					}

					if (match.substr(1) === change.substr(1)) {
						changes.push(change);
						state.index++;
					} else {
						conflicted = true;
					}
				}

				if ((matchChanges[matchIndex] || '')[0] === '+' && contextChanges) {
					conflicted = true;
				}

				if (conflicted) {
					return changes;
				}

				while (matchIndex < matchChanges.length) {
					merged.push(matchChanges[matchIndex++]);
				}

				return {
					merged: merged,
					changes: changes
				};
			}

			function allRemoves(changes) {
				return changes.reduce(function (prev, change) {
					return prev && change[0] === '-';
				}, true);
			}

			function skipRemoveSuperset(state, removeChanges, delta) {
				for (var i = 0; i < delta; i++) {
					var changeContent = removeChanges[removeChanges.length - delta + i].substr(1);

					if (state.lines[state.index + i] !== ' ' + changeContent) {
						return false;
					}
				}

				state.index += delta;
				return true;
			}

			function calcOldNewLineCount(lines) {
				var oldLines = 0;
				var newLines = 0;
				lines.forEach(function (line) {
					if (typeof line !== 'string') {
						var myCount = calcOldNewLineCount(line.mine);
						var theirCount = calcOldNewLineCount(line.theirs);

						if (oldLines !== undefined) {
							if (myCount.oldLines === theirCount.oldLines) {
								oldLines += myCount.oldLines;
							} else {
								oldLines = undefined;
							}
						}

						if (newLines !== undefined) {
							if (myCount.newLines === theirCount.newLines) {
								newLines += myCount.newLines;
							} else {
								newLines = undefined;
							}
						}
					} else {
						if (newLines !== undefined && (line[0] === '+' || line[0] === ' ')) {
							newLines++;
						}

						if (oldLines !== undefined && (line[0] === '-' || line[0] === ' ')) {
							oldLines++;
						}
					}
				});
				return {
					oldLines: oldLines,
					newLines: newLines
				};
			} // See: http://code.google.com/p/google-diff-match-patch/wiki/API


			function convertChangesToDMP(changes) {
				var ret = [],
					change,
					operation;

				for (var i = 0; i < changes.length; i++) {
					change = changes[i];

					if (change.added) {
						operation = 1;
					} else if (change.removed) {
						operation = -1;
					} else {
						operation = 0;
					}

					ret.push([operation, change.value]);
				}

				return ret;
			}

			function convertChangesToXML(changes) {
				var ret = [];

				for (var i = 0; i < changes.length; i++) {
					var change = changes[i];

					if (change.added) {
						ret.push('<ins>');
					} else if (change.removed) {
						ret.push('<del>');
					}

					ret.push(escapeHTML(change.value));

					if (change.added) {
						ret.push('</ins>');
					} else if (change.removed) {
						ret.push('</del>');
					}
				}

				return ret.join('');
			}

			function escapeHTML(s) {
				var n = s;
				n = n.replace(/&/g, '&amp;');
				n = n.replace(/</g, '&lt;');
				n = n.replace(/>/g, '&gt;');
				n = n.replace(/"/g, '&quot;');
				return n;
			}
			/* See LICENSE file for terms of use */


			exports.Diff = Diff;
			exports.diffChars = diffChars;
			exports.diffWords = diffWords;
			exports.diffWordsWithSpace = diffWordsWithSpace;
			exports.diffLines = diffLines;
			exports.diffTrimmedLines = diffTrimmedLines;
			exports.diffSentences = diffSentences;
			exports.diffCss = diffCss;
			exports.diffJson = diffJson;
			exports.diffArrays = diffArrays;
			exports.structuredPatch = structuredPatch;
			exports.createTwoFilesPatch = createTwoFilesPatch;
			exports.createPatch = createPatch;
			exports.applyPatch = applyPatch;
			exports.applyPatches = applyPatches;
			exports.parsePatch = parsePatch;
			exports.merge = merge;
			exports.convertChangesToDMP = convertChangesToDMP;
			exports.convertChangesToXML = convertChangesToXML;
			exports.canonicalize = canonicalize;
			Object.defineProperty(exports, '__esModule', {
				value: true
			});
		});
	});

	/**
		* Helpers.
		*/
	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var w = d * 7;
	var y = d * 365.25;
	/**
		* Parse or format the given `val`.
		*
		* Options:
		*
		*  - `long` verbose formatting [false]
		*
		* @param {String|Number} val
		* @param {Object} [options]
		* @throws {Error} throw an error if val is not a non-empty string or a number
		* @return {String|Number}
		* @api public
		*/

	var ms = function ms(val, options) {
		options = options || {};

		var type = _typeof(val);

		if (type === 'string' && val.length > 0) {
			return parse(val);
		} else if (type === 'number' && isFinite(val)) {
			return options["long"] ? fmtLong(val) : fmtShort(val);
		}

		throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
	};
	/**
		* Parse the given `str` and return milliseconds.
		*
		* @param {String} str
		* @return {Number}
		* @api private
		*/


	function parse(str) {
		str = String(str);

		if (str.length > 100) {
			return;
		}

		var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);

		if (!match) {
			return;
		}

		var n = parseFloat(match[1]);
		var type = (match[2] || 'ms').toLowerCase();

		switch (type) {
			case 'years':
			case 'year':
			case 'yrs':
			case 'yr':
			case 'y':
				return n * y;

			case 'weeks':
			case 'week':
			case 'w':
				return n * w;

			case 'days':
			case 'day':
			case 'd':
				return n * d;

			case 'hours':
			case 'hour':
			case 'hrs':
			case 'hr':
			case 'h':
				return n * h;

			case 'minutes':
			case 'minute':
			case 'mins':
			case 'min':
			case 'm':
				return n * m;

			case 'seconds':
			case 'second':
			case 'secs':
			case 'sec':
			case 's':
				return n * s;

			case 'milliseconds':
			case 'millisecond':
			case 'msecs':
			case 'msec':
			case 'ms':
				return n;

			default:
				return undefined;
		}
	}
	/**
		* Short format for `ms`.
		*
		* @param {Number} ms
		* @return {String}
		* @api private
		*/


	function fmtShort(ms) {
		var msAbs = Math.abs(ms);

		if (msAbs >= d) {
			return Math.round(ms / d) + 'd';
		}

		if (msAbs >= h) {
			return Math.round(ms / h) + 'h';
		}

		if (msAbs >= m) {
			return Math.round(ms / m) + 'm';
		}

		if (msAbs >= s) {
			return Math.round(ms / s) + 's';
		}

		return ms + 'ms';
	}
	/**
		* Long format for `ms`.
		*
		* @param {Number} ms
		* @return {String}
		* @api private
		*/


	function fmtLong(ms) {
		var msAbs = Math.abs(ms);

		if (msAbs >= d) {
			return plural(ms, msAbs, d, 'day');
		}

		if (msAbs >= h) {
			return plural(ms, msAbs, h, 'hour');
		}

		if (msAbs >= m) {
			return plural(ms, msAbs, m, 'minute');
		}

		if (msAbs >= s) {
			return plural(ms, msAbs, s, 'second');
		}

		return ms + ' ms';
	}
	/**
		* Pluralization helper.
		*/


	function plural(ms, msAbs, n, name) {
		var isPlural = msAbs >= n * 1.5;
		return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
	}

	var freezing = !fails(function () {
		return Object.isExtensible(Object.preventExtensions({}));
	});

	var internalMetadata = createCommonjsModule(function (module) {
		var defineProperty = objectDefineProperty.f;



		var METADATA = uid('meta');
		var id = 0;

		var isExtensible = Object.isExtensible || function () {
			return true;
		};

		var setMetadata = function (it) {
			defineProperty(it, METADATA, {
				value: {
					objectID: 'O' + ++id, // object ID
					weakData: {}          // weak collections IDs
				}
			});
		};

		var fastKey = function (it, create) {
			// return a primitive with prefix
			if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
			if (!has(it, METADATA)) {
				// can't set metadata to uncaught frozen object
				if (!isExtensible(it)) return 'F';
				// not necessary to add metadata
				if (!create) return 'E';
				// add missing metadata
				setMetadata(it);
				// return object ID
			} return it[METADATA].objectID;
		};

		var getWeakData = function (it, create) {
			if (!has(it, METADATA)) {
				// can't set metadata to uncaught frozen object
				if (!isExtensible(it)) return true;
				// not necessary to add metadata
				if (!create) return false;
				// add missing metadata
				setMetadata(it);
				// return the store of weak collections IDs
			} return it[METADATA].weakData;
		};

		// add metadata on freeze-family methods calling
		var onFreeze = function (it) {
			if (freezing && meta.REQUIRED && isExtensible(it) && !has(it, METADATA)) setMetadata(it);
			return it;
		};

		var meta = module.exports = {
			REQUIRED: false,
			fastKey: fastKey,
			getWeakData: getWeakData,
			onFreeze: onFreeze
		};

		hiddenKeys[METADATA] = true;
	});

	var onFreeze = internalMetadata.onFreeze;

	var nativeFreeze = Object.freeze;
	var FAILS_ON_PRIMITIVES$4 = fails(function () { nativeFreeze(1); });

	// `Object.freeze` method
	// https://tc39.github.io/ecma262/#sec-object.freeze
	_export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$4, sham: !freezing }, {
		freeze: function freeze(it) {
			return nativeFreeze && isObject(it) ? nativeFreeze(onFreeze(it)) : it;
		}
	});

	var collection = function (CONSTRUCTOR_NAME, wrapper, common) {
		var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;
		var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;
		var ADDER = IS_MAP ? 'set' : 'add';
		var NativeConstructor = global_1[CONSTRUCTOR_NAME];
		var NativePrototype = NativeConstructor && NativeConstructor.prototype;
		var Constructor = NativeConstructor;
		var exported = {};

		var fixMethod = function (KEY) {
			var nativeMethod = NativePrototype[KEY];
			redefine(NativePrototype, KEY,
				KEY == 'add' ? function add(value) {
					nativeMethod.call(this, value === 0 ? 0 : value);
					return this;
				} : KEY == 'delete' ? function (key) {
					return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);
				} : KEY == 'get' ? function get(key) {
					return IS_WEAK && !isObject(key) ? undefined : nativeMethod.call(this, key === 0 ? 0 : key);
				} : KEY == 'has' ? function has(key) {
					return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);
				} : function set(key, value) {
					nativeMethod.call(this, key === 0 ? 0 : key, value);
					return this;
				}
			);
		};

		// eslint-disable-next-line max-len
		if (isForced_1(CONSTRUCTOR_NAME, typeof NativeConstructor != 'function' || !(IS_WEAK || NativePrototype.forEach && !fails(function () {
			new NativeConstructor().entries().next();
		})))) {
			// create collection constructor
			Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
			internalMetadata.REQUIRED = true;
		} else if (isForced_1(CONSTRUCTOR_NAME, true)) {
			var instance = new Constructor();
			// early implementations not supports chaining
			var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
			// V8 ~ Chromium 40- weak-collections throws on primitives, but should return false
			var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
			// most early implementations doesn't supports iterables, most modern - not close it correctly
			// eslint-disable-next-line no-new
			var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function (iterable) { new NativeConstructor(iterable); });
			// for early implementations -0 and +0 not the same
			var BUGGY_ZERO = !IS_WEAK && fails(function () {
				// V8 ~ Chromium 42- fails only with 5+ elements
				var $instance = new NativeConstructor();
				var index = 5;
				while (index--) $instance[ADDER](index, index);
				return !$instance.has(-0);
			});

			if (!ACCEPT_ITERABLES) {
				Constructor = wrapper(function (dummy, iterable) {
					anInstance(dummy, Constructor, CONSTRUCTOR_NAME);
					var that = inheritIfRequired(new NativeConstructor(), dummy, Constructor);
					if (iterable != undefined) iterate_1(iterable, that[ADDER], that, IS_MAP);
					return that;
				});
				Constructor.prototype = NativePrototype;
				NativePrototype.constructor = Constructor;
			}

			if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
				fixMethod('delete');
				fixMethod('has');
				IS_MAP && fixMethod('get');
			}

			if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);

			// weak collections should not contains .clear method
			if (IS_WEAK && NativePrototype.clear) delete NativePrototype.clear;
		}

		exported[CONSTRUCTOR_NAME] = Constructor;
		_export({ global: true, forced: Constructor != NativeConstructor }, exported);

		setToStringTag(Constructor, CONSTRUCTOR_NAME);

		if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);

		return Constructor;
	};

	var defineProperty$a = objectDefineProperty.f;








	var fastKey = internalMetadata.fastKey;


	var setInternalState$6 = internalState.set;
	var internalStateGetterFor = internalState.getterFor;

	var collectionStrong = {
		getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
			var C = wrapper(function (that, iterable) {
				anInstance(that, C, CONSTRUCTOR_NAME);
				setInternalState$6(that, {
					type: CONSTRUCTOR_NAME,
					index: objectCreate(null),
					first: undefined,
					last: undefined,
					size: 0
				});
				if (!descriptors) that.size = 0;
				if (iterable != undefined) iterate_1(iterable, that[ADDER], that, IS_MAP);
			});

			var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

			var define = function (that, key, value) {
				var state = getInternalState(that);
				var entry = getEntry(that, key);
				var previous, index;
				// change existing entry
				if (entry) {
					entry.value = value;
					// create new entry
				} else {
					state.last = entry = {
						index: index = fastKey(key, true),
						key: key,
						value: value,
						previous: previous = state.last,
						next: undefined,
						removed: false
					};
					if (!state.first) state.first = entry;
					if (previous) previous.next = entry;
					if (descriptors) state.size++;
					else that.size++;
					// add to index
					if (index !== 'F') state.index[index] = entry;
				} return that;
			};

			var getEntry = function (that, key) {
				var state = getInternalState(that);
				// fast case
				var index = fastKey(key);
				var entry;
				if (index !== 'F') return state.index[index];
				// frozen object case
				for (entry = state.first; entry; entry = entry.next) {
					if (entry.key == key) return entry;
				}
			};

			redefineAll(C.prototype, {
				// 23.1.3.1 Map.prototype.clear()
				// 23.2.3.2 Set.prototype.clear()
				clear: function clear() {
					var that = this;
					var state = getInternalState(that);
					var data = state.index;
					var entry = state.first;
					while (entry) {
						entry.removed = true;
						if (entry.previous) entry.previous = entry.previous.next = undefined;
						delete data[entry.index];
						entry = entry.next;
					}
					state.first = state.last = undefined;
					if (descriptors) state.size = 0;
					else that.size = 0;
				},
				// 23.1.3.3 Map.prototype.delete(key)
				// 23.2.3.4 Set.prototype.delete(value)
				'delete': function (key) {
					var that = this;
					var state = getInternalState(that);
					var entry = getEntry(that, key);
					if (entry) {
						var next = entry.next;
						var prev = entry.previous;
						delete state.index[entry.index];
						entry.removed = true;
						if (prev) prev.next = next;
						if (next) next.previous = prev;
						if (state.first == entry) state.first = next;
						if (state.last == entry) state.last = prev;
						if (descriptors) state.size--;
						else that.size--;
					} return !!entry;
				},
				// 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
				// 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
				forEach: function forEach(callbackfn /* , that = undefined */) {
					var state = getInternalState(this);
					var boundFunction = functionBindContext(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
					var entry;
					while (entry = entry ? entry.next : state.first) {
						boundFunction(entry.value, entry.key, this);
						// revert to the last existing entry
						while (entry && entry.removed) entry = entry.previous;
					}
				},
				// 23.1.3.7 Map.prototype.has(key)
				// 23.2.3.7 Set.prototype.has(value)
				has: function has(key) {
					return !!getEntry(this, key);
				}
			});

			redefineAll(C.prototype, IS_MAP ? {
				// 23.1.3.6 Map.prototype.get(key)
				get: function get(key) {
					var entry = getEntry(this, key);
					return entry && entry.value;
				},
				// 23.1.3.9 Map.prototype.set(key, value)
				set: function set(key, value) {
					return define(this, key === 0 ? 0 : key, value);
				}
			} : {
					// 23.2.3.1 Set.prototype.add(value)
					add: function add(value) {
						return define(this, value = value === 0 ? 0 : value, value);
					}
				});
			if (descriptors) defineProperty$a(C.prototype, 'size', {
				get: function () {
					return getInternalState(this).size;
				}
			});
			return C;
		},
		setStrong: function (C, CONSTRUCTOR_NAME, IS_MAP) {
			var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';
			var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
			var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME);
			// add .keys, .values, .entries, [@@iterator]
			// 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
			defineIterator(C, CONSTRUCTOR_NAME, function (iterated, kind) {
				setInternalState$6(this, {
					type: ITERATOR_NAME,
					target: iterated,
					state: getInternalCollectionState(iterated),
					kind: kind,
					last: undefined
				});
			}, function () {
				var state = getInternalIteratorState(this);
				var kind = state.kind;
				var entry = state.last;
				// revert to the last existing entry
				while (entry && entry.removed) entry = entry.previous;
				// get next entry
				if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
					// or finish the iteration
					state.target = undefined;
					return { value: undefined, done: true };
				}
				// return step by kind
				if (kind == 'keys') return { value: entry.key, done: false };
				if (kind == 'values') return { value: entry.value, done: false };
				return { value: [entry.key, entry.value], done: false };
			}, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

			// add [@@species], 23.1.2.2, 23.2.2.2
			setSpecies(CONSTRUCTOR_NAME);
		}
	};

	// `Set` constructor
	// https://tc39.github.io/ecma262/#sec-set-objects
	var es_set = collection('Set', function (init) {
		return function Set() { return init(this, arguments.length ? arguments[0] : undefined); };
	}, collectionStrong);

	var browser$1 = true;

	// This alphabet uses `A-Za-z0-9_-` symbols. The genetic algorithm helped
	// optimize the gzip compression for this alphabet.
	var urlAlphabet = 'ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW';

	var customAlphabet = function customAlphabet(alphabet, size) {
		return function () {
			var id = ''; // A compact alternative for `for (var i = 0; i < step; i++)`.

			var i = size;

			while (i--) {
				// `| 0` is more compact and faster than `Math.floor()`.
				id += alphabet[Math.random() * alphabet.length | 0];
			}

			return id;
		};
	};

	var nanoid = function nanoid() {
		var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 21;
		var id = ''; // A compact alternative for `for (var i = 0; i < step; i++)`.

		var i = size;

		while (i--) {
			// `| 0` is more compact and faster than `Math.floor()`.
			id += urlAlphabet[Math.random() * 64 | 0];
		}

		return id;
	};

	var nonSecure = /*#__PURE__*/Object.freeze({
		__proto__: null,
		nanoid: nanoid,
		customAlphabet: customAlphabet
	});

	var he = createCommonjsModule(function (module, exports) {

		(function (root) {
			// Detect free variables `exports`.
			var freeExports = exports; // Detect free variable `module`.

			var freeModule = module && module.exports == freeExports && module; // Detect free variable `global`, from Node.js or Browserified code,
			// and use it as `root`.

			var freeGlobal = _typeof(commonjsGlobal) == 'object' && commonjsGlobal;

			if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
				root = freeGlobal;
			}
			/*--------------------------------------------------------------------------*/
			// All astral symbols.


			var regexAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g; // All ASCII symbols (not just printable ASCII) except those listed in the
			// first column of the overrides table.
			// https://html.spec.whatwg.org/multipage/syntax.html#table-charref-overrides

			var regexAsciiWhitelist = /[\x01-\x7F]/g; // All BMP symbols that are not ASCII newlines, printable ASCII symbols, or
			// code points listed in the first column of the overrides table on
			// https://html.spec.whatwg.org/multipage/syntax.html#table-charref-overrides.

			var regexBmpWhitelist = /[\x01-\t\x0B\f\x0E-\x1F\x7F\x81\x8D\x8F\x90\x9D\xA0-\uFFFF]/g;
			var regexEncodeNonAscii = /<\u20D2|=\u20E5|>\u20D2|\u205F\u200A|\u219D\u0338|\u2202\u0338|\u2220\u20D2|\u2229\uFE00|\u222A\uFE00|\u223C\u20D2|\u223D\u0331|\u223E\u0333|\u2242\u0338|\u224B\u0338|\u224D\u20D2|\u224E\u0338|\u224F\u0338|\u2250\u0338|\u2261\u20E5|\u2264\u20D2|\u2265\u20D2|\u2266\u0338|\u2267\u0338|\u2268\uFE00|\u2269\uFE00|\u226A\u0338|\u226A\u20D2|\u226B\u0338|\u226B\u20D2|\u227F\u0338|\u2282\u20D2|\u2283\u20D2|\u228A\uFE00|\u228B\uFE00|\u228F\u0338|\u2290\u0338|\u2293\uFE00|\u2294\uFE00|\u22B4\u20D2|\u22B5\u20D2|\u22D8\u0338|\u22D9\u0338|\u22DA\uFE00|\u22DB\uFE00|\u22F5\u0338|\u22F9\u0338|\u2933\u0338|\u29CF\u0338|\u29D0\u0338|\u2A6D\u0338|\u2A70\u0338|\u2A7D\u0338|\u2A7E\u0338|\u2AA1\u0338|\u2AA2\u0338|\u2AAC\uFE00|\u2AAD\uFE00|\u2AAF\u0338|\u2AB0\u0338|\u2AC5\u0338|\u2AC6\u0338|\u2ACB\uFE00|\u2ACC\uFE00|\u2AFD\u20E5|[\xA0-\u0113\u0116-\u0122\u0124-\u012B\u012E-\u014D\u0150-\u017E\u0192\u01B5\u01F5\u0237\u02C6\u02C7\u02D8-\u02DD\u0311\u0391-\u03A1\u03A3-\u03A9\u03B1-\u03C9\u03D1\u03D2\u03D5\u03D6\u03DC\u03DD\u03F0\u03F1\u03F5\u03F6\u0401-\u040C\u040E-\u044F\u0451-\u045C\u045E\u045F\u2002-\u2005\u2007-\u2010\u2013-\u2016\u2018-\u201A\u201C-\u201E\u2020-\u2022\u2025\u2026\u2030-\u2035\u2039\u203A\u203E\u2041\u2043\u2044\u204F\u2057\u205F-\u2063\u20AC\u20DB\u20DC\u2102\u2105\u210A-\u2113\u2115-\u211E\u2122\u2124\u2127-\u2129\u212C\u212D\u212F-\u2131\u2133-\u2138\u2145-\u2148\u2153-\u215E\u2190-\u219B\u219D-\u21A7\u21A9-\u21AE\u21B0-\u21B3\u21B5-\u21B7\u21BA-\u21DB\u21DD\u21E4\u21E5\u21F5\u21FD-\u2205\u2207-\u2209\u220B\u220C\u220F-\u2214\u2216-\u2218\u221A\u221D-\u2238\u223A-\u2257\u2259\u225A\u225C\u225F-\u2262\u2264-\u228B\u228D-\u229B\u229D-\u22A5\u22A7-\u22B0\u22B2-\u22BB\u22BD-\u22DB\u22DE-\u22E3\u22E6-\u22F7\u22F9-\u22FE\u2305\u2306\u2308-\u2310\u2312\u2313\u2315\u2316\u231C-\u231F\u2322\u2323\u232D\u232E\u2336\u233D\u233F\u237C\u23B0\u23B1\u23B4-\u23B6\u23DC-\u23DF\u23E2\u23E7\u2423\u24C8\u2500\u2502\u250C\u2510\u2514\u2518\u251C\u2524\u252C\u2534\u253C\u2550-\u256C\u2580\u2584\u2588\u2591-\u2593\u25A1\u25AA\u25AB\u25AD\u25AE\u25B1\u25B3-\u25B5\u25B8\u25B9\u25BD-\u25BF\u25C2\u25C3\u25CA\u25CB\u25EC\u25EF\u25F8-\u25FC\u2605\u2606\u260E\u2640\u2642\u2660\u2663\u2665\u2666\u266A\u266D-\u266F\u2713\u2717\u2720\u2736\u2758\u2772\u2773\u27C8\u27C9\u27E6-\u27ED\u27F5-\u27FA\u27FC\u27FF\u2902-\u2905\u290C-\u2913\u2916\u2919-\u2920\u2923-\u292A\u2933\u2935-\u2939\u293C\u293D\u2945\u2948-\u294B\u294E-\u2976\u2978\u2979\u297B-\u297F\u2985\u2986\u298B-\u2996\u299A\u299C\u299D\u29A4-\u29B7\u29B9\u29BB\u29BC\u29BE-\u29C5\u29C9\u29CD-\u29D0\u29DC-\u29DE\u29E3-\u29E5\u29EB\u29F4\u29F6\u2A00-\u2A02\u2A04\u2A06\u2A0C\u2A0D\u2A10-\u2A17\u2A22-\u2A27\u2A29\u2A2A\u2A2D-\u2A31\u2A33-\u2A3C\u2A3F\u2A40\u2A42-\u2A4D\u2A50\u2A53-\u2A58\u2A5A-\u2A5D\u2A5F\u2A66\u2A6A\u2A6D-\u2A75\u2A77-\u2A9A\u2A9D-\u2AA2\u2AA4-\u2AB0\u2AB3-\u2AC8\u2ACB\u2ACC\u2ACF-\u2ADB\u2AE4\u2AE6-\u2AE9\u2AEB-\u2AF3\u2AFD\uFB00-\uFB04]|\uD835[\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDD6B]/g;
			var encodeMap = {
				'\xAD': 'shy',
				"\u200C": 'zwnj',
				"\u200D": 'zwj',
				"\u200E": 'lrm',
				"\u2063": 'ic',
				"\u2062": 'it',
				"\u2061": 'af',
				"\u200F": 'rlm',
				"\u200B": 'ZeroWidthSpace',
				"\u2060": 'NoBreak',
				"\u0311": 'DownBreve',
				"\u20DB": 'tdot',
				"\u20DC": 'DotDot',
				'\t': 'Tab',
				'\n': 'NewLine',
				"\u2008": 'puncsp',
				"\u205F": 'MediumSpace',
				"\u2009": 'thinsp',
				"\u200A": 'hairsp',
				"\u2004": 'emsp13',
				"\u2002": 'ensp',
				"\u2005": 'emsp14',
				"\u2003": 'emsp',
				"\u2007": 'numsp',
				'\xA0': 'nbsp',
				"\u205F\u200A": 'ThickSpace',
				"\u203E": 'oline',
				'_': 'lowbar',
				"\u2010": 'dash',
				"\u2013": 'ndash',
				"\u2014": 'mdash',
				"\u2015": 'horbar',
				',': 'comma',
				';': 'semi',
				"\u204F": 'bsemi',
				':': 'colon',
				"\u2A74": 'Colone',
				'!': 'excl',
				'\xA1': 'iexcl',
				'?': 'quest',
				'\xBF': 'iquest',
				'.': 'period',
				"\u2025": 'nldr',
				"\u2026": 'mldr',
				'\xB7': 'middot',
				'\'': 'apos',
				"\u2018": 'lsquo',
				"\u2019": 'rsquo',
				"\u201A": 'sbquo',
				"\u2039": 'lsaquo',
				"\u203A": 'rsaquo',
				'"': 'quot',
				"\u201C": 'ldquo',
				"\u201D": 'rdquo',
				"\u201E": 'bdquo',
				'\xAB': 'laquo',
				'\xBB': 'raquo',
				'(': 'lpar',
				')': 'rpar',
				'[': 'lsqb',
				']': 'rsqb',
				'{': 'lcub',
				'}': 'rcub',
				"\u2308": 'lceil',
				"\u2309": 'rceil',
				"\u230A": 'lfloor',
				"\u230B": 'rfloor',
				"\u2985": 'lopar',
				"\u2986": 'ropar',
				"\u298B": 'lbrke',
				"\u298C": 'rbrke',
				"\u298D": 'lbrkslu',
				"\u298E": 'rbrksld',
				"\u298F": 'lbrksld',
				"\u2990": 'rbrkslu',
				"\u2991": 'langd',
				"\u2992": 'rangd',
				"\u2993": 'lparlt',
				"\u2994": 'rpargt',
				"\u2995": 'gtlPar',
				"\u2996": 'ltrPar',
				"\u27E6": 'lobrk',
				"\u27E7": 'robrk',
				"\u27E8": 'lang',
				"\u27E9": 'rang',
				"\u27EA": 'Lang',
				"\u27EB": 'Rang',
				"\u27EC": 'loang',
				"\u27ED": 'roang',
				"\u2772": 'lbbrk',
				"\u2773": 'rbbrk',
				"\u2016": 'Vert',
				'\xA7': 'sect',
				'\xB6': 'para',
				'@': 'commat',
				'*': 'ast',
				'/': 'sol',
				'undefined': null,
				'&': 'amp',
				'#': 'num',
				'%': 'percnt',
				"\u2030": 'permil',
				"\u2031": 'pertenk',
				"\u2020": 'dagger',
				"\u2021": 'Dagger',
				"\u2022": 'bull',
				"\u2043": 'hybull',
				"\u2032": 'prime',
				"\u2033": 'Prime',
				"\u2034": 'tprime',
				"\u2057": 'qprime',
				"\u2035": 'bprime',
				"\u2041": 'caret',
				'`': 'grave',
				'\xB4': 'acute',
				"\u02DC": 'tilde',
				'^': 'Hat',
				'\xAF': 'macr',
				"\u02D8": 'breve',
				"\u02D9": 'dot',
				'\xA8': 'die',
				"\u02DA": 'ring',
				"\u02DD": 'dblac',
				'\xB8': 'cedil',
				"\u02DB": 'ogon',
				"\u02C6": 'circ',
				"\u02C7": 'caron',
				'\xB0': 'deg',
				'\xA9': 'copy',
				'\xAE': 'reg',
				"\u2117": 'copysr',
				"\u2118": 'wp',
				"\u211E": 'rx',
				"\u2127": 'mho',
				"\u2129": 'iiota',
				"\u2190": 'larr',
				"\u219A": 'nlarr',
				"\u2192": 'rarr',
				"\u219B": 'nrarr',
				"\u2191": 'uarr',
				"\u2193": 'darr',
				"\u2194": 'harr',
				"\u21AE": 'nharr',
				"\u2195": 'varr',
				"\u2196": 'nwarr',
				"\u2197": 'nearr',
				"\u2198": 'searr',
				"\u2199": 'swarr',
				"\u219D": 'rarrw',
				"\u219D\u0338": 'nrarrw',
				"\u219E": 'Larr',
				"\u219F": 'Uarr',
				"\u21A0": 'Rarr',
				"\u21A1": 'Darr',
				"\u21A2": 'larrtl',
				"\u21A3": 'rarrtl',
				"\u21A4": 'mapstoleft',
				"\u21A5": 'mapstoup',
				"\u21A6": 'map',
				"\u21A7": 'mapstodown',
				"\u21A9": 'larrhk',
				"\u21AA": 'rarrhk',
				"\u21AB": 'larrlp',
				"\u21AC": 'rarrlp',
				"\u21AD": 'harrw',
				"\u21B0": 'lsh',
				"\u21B1": 'rsh',
				"\u21B2": 'ldsh',
				"\u21B3": 'rdsh',
				"\u21B5": 'crarr',
				"\u21B6": 'cularr',
				"\u21B7": 'curarr',
				"\u21BA": 'olarr',
				"\u21BB": 'orarr',
				"\u21BC": 'lharu',
				"\u21BD": 'lhard',
				"\u21BE": 'uharr',
				"\u21BF": 'uharl',
				"\u21C0": 'rharu',
				"\u21C1": 'rhard',
				"\u21C2": 'dharr',
				"\u21C3": 'dharl',
				"\u21C4": 'rlarr',
				"\u21C5": 'udarr',
				"\u21C6": 'lrarr',
				"\u21C7": 'llarr',
				"\u21C8": 'uuarr',
				"\u21C9": 'rrarr',
				"\u21CA": 'ddarr',
				"\u21CB": 'lrhar',
				"\u21CC": 'rlhar',
				"\u21D0": 'lArr',
				"\u21CD": 'nlArr',
				"\u21D1": 'uArr',
				"\u21D2": 'rArr',
				"\u21CF": 'nrArr',
				"\u21D3": 'dArr',
				"\u21D4": 'iff',
				"\u21CE": 'nhArr',
				"\u21D5": 'vArr',
				"\u21D6": 'nwArr',
				"\u21D7": 'neArr',
				"\u21D8": 'seArr',
				"\u21D9": 'swArr',
				"\u21DA": 'lAarr',
				"\u21DB": 'rAarr',
				"\u21DD": 'zigrarr',
				"\u21E4": 'larrb',
				"\u21E5": 'rarrb',
				"\u21F5": 'duarr',
				"\u21FD": 'loarr',
				"\u21FE": 'roarr',
				"\u21FF": 'hoarr',
				"\u2200": 'forall',
				"\u2201": 'comp',
				"\u2202": 'part',
				"\u2202\u0338": 'npart',
				"\u2203": 'exist',
				"\u2204": 'nexist',
				"\u2205": 'empty',
				"\u2207": 'Del',
				"\u2208": 'in',
				"\u2209": 'notin',
				"\u220B": 'ni',
				"\u220C": 'notni',
				"\u03F6": 'bepsi',
				"\u220F": 'prod',
				"\u2210": 'coprod',
				"\u2211": 'sum',
				'+': 'plus',
				'\xB1': 'pm',
				'\xF7': 'div',
				'\xD7': 'times',
				'<': 'lt',
				"\u226E": 'nlt',
				"<\u20D2": 'nvlt',
				'=': 'equals',
				"\u2260": 'ne',
				"=\u20E5": 'bne',
				"\u2A75": 'Equal',
				'>': 'gt',
				"\u226F": 'ngt',
				">\u20D2": 'nvgt',
				'\xAC': 'not',
				'|': 'vert',
				'\xA6': 'brvbar',
				"\u2212": 'minus',
				"\u2213": 'mp',
				"\u2214": 'plusdo',
				"\u2044": 'frasl',
				"\u2216": 'setmn',
				"\u2217": 'lowast',
				"\u2218": 'compfn',
				"\u221A": 'Sqrt',
				"\u221D": 'prop',
				"\u221E": 'infin',
				"\u221F": 'angrt',
				"\u2220": 'ang',
				"\u2220\u20D2": 'nang',
				"\u2221": 'angmsd',
				"\u2222": 'angsph',
				"\u2223": 'mid',
				"\u2224": 'nmid',
				"\u2225": 'par',
				"\u2226": 'npar',
				"\u2227": 'and',
				"\u2228": 'or',
				"\u2229": 'cap',
				"\u2229\uFE00": 'caps',
				"\u222A": 'cup',
				"\u222A\uFE00": 'cups',
				"\u222B": 'int',
				"\u222C": 'Int',
				"\u222D": 'tint',
				"\u2A0C": 'qint',
				"\u222E": 'oint',
				"\u222F": 'Conint',
				"\u2230": 'Cconint',
				"\u2231": 'cwint',
				"\u2232": 'cwconint',
				"\u2233": 'awconint',
				"\u2234": 'there4',
				"\u2235": 'becaus',
				"\u2236": 'ratio',
				"\u2237": 'Colon',
				"\u2238": 'minusd',
				"\u223A": 'mDDot',
				"\u223B": 'homtht',
				"\u223C": 'sim',
				"\u2241": 'nsim',
				"\u223C\u20D2": 'nvsim',
				"\u223D": 'bsim',
				"\u223D\u0331": 'race',
				"\u223E": 'ac',
				"\u223E\u0333": 'acE',
				"\u223F": 'acd',
				"\u2240": 'wr',
				"\u2242": 'esim',
				"\u2242\u0338": 'nesim',
				"\u2243": 'sime',
				"\u2244": 'nsime',
				"\u2245": 'cong',
				"\u2247": 'ncong',
				"\u2246": 'simne',
				"\u2248": 'ap',
				"\u2249": 'nap',
				"\u224A": 'ape',
				"\u224B": 'apid',
				"\u224B\u0338": 'napid',
				"\u224C": 'bcong',
				"\u224D": 'CupCap',
				"\u226D": 'NotCupCap',
				"\u224D\u20D2": 'nvap',
				"\u224E": 'bump',
				"\u224E\u0338": 'nbump',
				"\u224F": 'bumpe',
				"\u224F\u0338": 'nbumpe',
				"\u2250": 'doteq',
				"\u2250\u0338": 'nedot',
				"\u2251": 'eDot',
				"\u2252": 'efDot',
				"\u2253": 'erDot',
				"\u2254": 'colone',
				"\u2255": 'ecolon',
				"\u2256": 'ecir',
				"\u2257": 'cire',
				"\u2259": 'wedgeq',
				"\u225A": 'veeeq',
				"\u225C": 'trie',
				"\u225F": 'equest',
				"\u2261": 'equiv',
				"\u2262": 'nequiv',
				"\u2261\u20E5": 'bnequiv',
				"\u2264": 'le',
				"\u2270": 'nle',
				"\u2264\u20D2": 'nvle',
				"\u2265": 'ge',
				"\u2271": 'nge',
				"\u2265\u20D2": 'nvge',
				"\u2266": 'lE',
				"\u2266\u0338": 'nlE',
				"\u2267": 'gE',
				"\u2267\u0338": 'ngE',
				"\u2268\uFE00": 'lvnE',
				"\u2268": 'lnE',
				"\u2269": 'gnE',
				"\u2269\uFE00": 'gvnE',
				"\u226A": 'll',
				"\u226A\u0338": 'nLtv',
				"\u226A\u20D2": 'nLt',
				"\u226B": 'gg',
				"\u226B\u0338": 'nGtv',
				"\u226B\u20D2": 'nGt',
				"\u226C": 'twixt',
				"\u2272": 'lsim',
				"\u2274": 'nlsim',
				"\u2273": 'gsim',
				"\u2275": 'ngsim',
				"\u2276": 'lg',
				"\u2278": 'ntlg',
				"\u2277": 'gl',
				"\u2279": 'ntgl',
				"\u227A": 'pr',
				"\u2280": 'npr',
				"\u227B": 'sc',
				"\u2281": 'nsc',
				"\u227C": 'prcue',
				"\u22E0": 'nprcue',
				"\u227D": 'sccue',
				"\u22E1": 'nsccue',
				"\u227E": 'prsim',
				"\u227F": 'scsim',
				"\u227F\u0338": 'NotSucceedsTilde',
				"\u2282": 'sub',
				"\u2284": 'nsub',
				"\u2282\u20D2": 'vnsub',
				"\u2283": 'sup',
				"\u2285": 'nsup',
				"\u2283\u20D2": 'vnsup',
				"\u2286": 'sube',
				"\u2288": 'nsube',
				"\u2287": 'supe',
				"\u2289": 'nsupe',
				"\u228A\uFE00": 'vsubne',
				"\u228A": 'subne',
				"\u228B\uFE00": 'vsupne',
				"\u228B": 'supne',
				"\u228D": 'cupdot',
				"\u228E": 'uplus',
				"\u228F": 'sqsub',
				"\u228F\u0338": 'NotSquareSubset',
				"\u2290": 'sqsup',
				"\u2290\u0338": 'NotSquareSuperset',
				"\u2291": 'sqsube',
				"\u22E2": 'nsqsube',
				"\u2292": 'sqsupe',
				"\u22E3": 'nsqsupe',
				"\u2293": 'sqcap',
				"\u2293\uFE00": 'sqcaps',
				"\u2294": 'sqcup',
				"\u2294\uFE00": 'sqcups',
				"\u2295": 'oplus',
				"\u2296": 'ominus',
				"\u2297": 'otimes',
				"\u2298": 'osol',
				"\u2299": 'odot',
				"\u229A": 'ocir',
				"\u229B": 'oast',
				"\u229D": 'odash',
				"\u229E": 'plusb',
				"\u229F": 'minusb',
				"\u22A0": 'timesb',
				"\u22A1": 'sdotb',
				"\u22A2": 'vdash',
				"\u22AC": 'nvdash',
				"\u22A3": 'dashv',
				"\u22A4": 'top',
				"\u22A5": 'bot',
				"\u22A7": 'models',
				"\u22A8": 'vDash',
				"\u22AD": 'nvDash',
				"\u22A9": 'Vdash',
				"\u22AE": 'nVdash',
				"\u22AA": 'Vvdash',
				"\u22AB": 'VDash',
				"\u22AF": 'nVDash',
				"\u22B0": 'prurel',
				"\u22B2": 'vltri',
				"\u22EA": 'nltri',
				"\u22B3": 'vrtri',
				"\u22EB": 'nrtri',
				"\u22B4": 'ltrie',
				"\u22EC": 'nltrie',
				"\u22B4\u20D2": 'nvltrie',
				"\u22B5": 'rtrie',
				"\u22ED": 'nrtrie',
				"\u22B5\u20D2": 'nvrtrie',
				"\u22B6": 'origof',
				"\u22B7": 'imof',
				"\u22B8": 'mumap',
				"\u22B9": 'hercon',
				"\u22BA": 'intcal',
				"\u22BB": 'veebar',
				"\u22BD": 'barvee',
				"\u22BE": 'angrtvb',
				"\u22BF": 'lrtri',
				"\u22C0": 'Wedge',
				"\u22C1": 'Vee',
				"\u22C2": 'xcap',
				"\u22C3": 'xcup',
				"\u22C4": 'diam',
				"\u22C5": 'sdot',
				"\u22C6": 'Star',
				"\u22C7": 'divonx',
				"\u22C8": 'bowtie',
				"\u22C9": 'ltimes',
				"\u22CA": 'rtimes',
				"\u22CB": 'lthree',
				"\u22CC": 'rthree',
				"\u22CD": 'bsime',
				"\u22CE": 'cuvee',
				"\u22CF": 'cuwed',
				"\u22D0": 'Sub',
				"\u22D1": 'Sup',
				"\u22D2": 'Cap',
				"\u22D3": 'Cup',
				"\u22D4": 'fork',
				"\u22D5": 'epar',
				"\u22D6": 'ltdot',
				"\u22D7": 'gtdot',
				"\u22D8": 'Ll',
				"\u22D8\u0338": 'nLl',
				"\u22D9": 'Gg',
				"\u22D9\u0338": 'nGg',
				"\u22DA\uFE00": 'lesg',
				"\u22DA": 'leg',
				"\u22DB": 'gel',
				"\u22DB\uFE00": 'gesl',
				"\u22DE": 'cuepr',
				"\u22DF": 'cuesc',
				"\u22E6": 'lnsim',
				"\u22E7": 'gnsim',
				"\u22E8": 'prnsim',
				"\u22E9": 'scnsim',
				"\u22EE": 'vellip',
				"\u22EF": 'ctdot',
				"\u22F0": 'utdot',
				"\u22F1": 'dtdot',
				"\u22F2": 'disin',
				"\u22F3": 'isinsv',
				"\u22F4": 'isins',
				"\u22F5": 'isindot',
				"\u22F5\u0338": 'notindot',
				"\u22F6": 'notinvc',
				"\u22F7": 'notinvb',
				"\u22F9": 'isinE',
				"\u22F9\u0338": 'notinE',
				"\u22FA": 'nisd',
				"\u22FB": 'xnis',
				"\u22FC": 'nis',
				"\u22FD": 'notnivc',
				"\u22FE": 'notnivb',
				"\u2305": 'barwed',
				"\u2306": 'Barwed',
				"\u230C": 'drcrop',
				"\u230D": 'dlcrop',
				"\u230E": 'urcrop',
				"\u230F": 'ulcrop',
				"\u2310": 'bnot',
				"\u2312": 'profline',
				"\u2313": 'profsurf',
				"\u2315": 'telrec',
				"\u2316": 'target',
				"\u231C": 'ulcorn',
				"\u231D": 'urcorn',
				"\u231E": 'dlcorn',
				"\u231F": 'drcorn',
				"\u2322": 'frown',
				"\u2323": 'smile',
				"\u232D": 'cylcty',
				"\u232E": 'profalar',
				"\u2336": 'topbot',
				"\u233D": 'ovbar',
				"\u233F": 'solbar',
				"\u237C": 'angzarr',
				"\u23B0": 'lmoust',
				"\u23B1": 'rmoust',
				"\u23B4": 'tbrk',
				"\u23B5": 'bbrk',
				"\u23B6": 'bbrktbrk',
				"\u23DC": 'OverParenthesis',
				"\u23DD": 'UnderParenthesis',
				"\u23DE": 'OverBrace',
				"\u23DF": 'UnderBrace',
				"\u23E2": 'trpezium',
				"\u23E7": 'elinters',
				"\u2423": 'blank',
				"\u2500": 'boxh',
				"\u2502": 'boxv',
				"\u250C": 'boxdr',
				"\u2510": 'boxdl',
				"\u2514": 'boxur',
				"\u2518": 'boxul',
				"\u251C": 'boxvr',
				"\u2524": 'boxvl',
				"\u252C": 'boxhd',
				"\u2534": 'boxhu',
				"\u253C": 'boxvh',
				"\u2550": 'boxH',
				"\u2551": 'boxV',
				"\u2552": 'boxdR',
				"\u2553": 'boxDr',
				"\u2554": 'boxDR',
				"\u2555": 'boxdL',
				"\u2556": 'boxDl',
				"\u2557": 'boxDL',
				"\u2558": 'boxuR',
				"\u2559": 'boxUr',
				"\u255A": 'boxUR',
				"\u255B": 'boxuL',
				"\u255C": 'boxUl',
				"\u255D": 'boxUL',
				"\u255E": 'boxvR',
				"\u255F": 'boxVr',
				"\u2560": 'boxVR',
				"\u2561": 'boxvL',
				"\u2562": 'boxVl',
				"\u2563": 'boxVL',
				"\u2564": 'boxHd',
				"\u2565": 'boxhD',
				"\u2566": 'boxHD',
				"\u2567": 'boxHu',
				"\u2568": 'boxhU',
				"\u2569": 'boxHU',
				"\u256A": 'boxvH',
				"\u256B": 'boxVh',
				"\u256C": 'boxVH',
				"\u2580": 'uhblk',
				"\u2584": 'lhblk',
				"\u2588": 'block',
				"\u2591": 'blk14',
				"\u2592": 'blk12',
				"\u2593": 'blk34',
				"\u25A1": 'squ',
				"\u25AA": 'squf',
				"\u25AB": 'EmptyVerySmallSquare',
				"\u25AD": 'rect',
				"\u25AE": 'marker',
				"\u25B1": 'fltns',
				"\u25B3": 'xutri',
				"\u25B4": 'utrif',
				"\u25B5": 'utri',
				"\u25B8": 'rtrif',
				"\u25B9": 'rtri',
				"\u25BD": 'xdtri',
				"\u25BE": 'dtrif',
				"\u25BF": 'dtri',
				"\u25C2": 'ltrif',
				"\u25C3": 'ltri',
				"\u25CA": 'loz',
				"\u25CB": 'cir',
				"\u25EC": 'tridot',
				"\u25EF": 'xcirc',
				"\u25F8": 'ultri',
				"\u25F9": 'urtri',
				"\u25FA": 'lltri',
				"\u25FB": 'EmptySmallSquare',
				"\u25FC": 'FilledSmallSquare',
				"\u2605": 'starf',
				"\u2606": 'star',
				"\u260E": 'phone',
				"\u2640": 'female',
				"\u2642": 'male',
				"\u2660": 'spades',
				"\u2663": 'clubs',
				"\u2665": 'hearts',
				"\u2666": 'diams',
				"\u266A": 'sung',
				"\u2713": 'check',
				"\u2717": 'cross',
				"\u2720": 'malt',
				"\u2736": 'sext',
				"\u2758": 'VerticalSeparator',
				"\u27C8": 'bsolhsub',
				"\u27C9": 'suphsol',
				"\u27F5": 'xlarr',
				"\u27F6": 'xrarr',
				"\u27F7": 'xharr',
				"\u27F8": 'xlArr',
				"\u27F9": 'xrArr',
				"\u27FA": 'xhArr',
				"\u27FC": 'xmap',
				"\u27FF": 'dzigrarr',
				"\u2902": 'nvlArr',
				"\u2903": 'nvrArr',
				"\u2904": 'nvHarr',
				"\u2905": 'Map',
				"\u290C": 'lbarr',
				"\u290D": 'rbarr',
				"\u290E": 'lBarr',
				"\u290F": 'rBarr',
				"\u2910": 'RBarr',
				"\u2911": 'DDotrahd',
				"\u2912": 'UpArrowBar',
				"\u2913": 'DownArrowBar',
				"\u2916": 'Rarrtl',
				"\u2919": 'latail',
				"\u291A": 'ratail',
				"\u291B": 'lAtail',
				"\u291C": 'rAtail',
				"\u291D": 'larrfs',
				"\u291E": 'rarrfs',
				"\u291F": 'larrbfs',
				"\u2920": 'rarrbfs',
				"\u2923": 'nwarhk',
				"\u2924": 'nearhk',
				"\u2925": 'searhk',
				"\u2926": 'swarhk',
				"\u2927": 'nwnear',
				"\u2928": 'toea',
				"\u2929": 'tosa',
				"\u292A": 'swnwar',
				"\u2933": 'rarrc',
				"\u2933\u0338": 'nrarrc',
				"\u2935": 'cudarrr',
				"\u2936": 'ldca',
				"\u2937": 'rdca',
				"\u2938": 'cudarrl',
				"\u2939": 'larrpl',
				"\u293C": 'curarrm',
				"\u293D": 'cularrp',
				"\u2945": 'rarrpl',
				"\u2948": 'harrcir',
				"\u2949": 'Uarrocir',
				"\u294A": 'lurdshar',
				"\u294B": 'ldrushar',
				"\u294E": 'LeftRightVector',
				"\u294F": 'RightUpDownVector',
				"\u2950": 'DownLeftRightVector',
				"\u2951": 'LeftUpDownVector',
				"\u2952": 'LeftVectorBar',
				"\u2953": 'RightVectorBar',
				"\u2954": 'RightUpVectorBar',
				"\u2955": 'RightDownVectorBar',
				"\u2956": 'DownLeftVectorBar',
				"\u2957": 'DownRightVectorBar',
				"\u2958": 'LeftUpVectorBar',
				"\u2959": 'LeftDownVectorBar',
				"\u295A": 'LeftTeeVector',
				"\u295B": 'RightTeeVector',
				"\u295C": 'RightUpTeeVector',
				"\u295D": 'RightDownTeeVector',
				"\u295E": 'DownLeftTeeVector',
				"\u295F": 'DownRightTeeVector',
				"\u2960": 'LeftUpTeeVector',
				"\u2961": 'LeftDownTeeVector',
				"\u2962": 'lHar',
				"\u2963": 'uHar',
				"\u2964": 'rHar',
				"\u2965": 'dHar',
				"\u2966": 'luruhar',
				"\u2967": 'ldrdhar',
				"\u2968": 'ruluhar',
				"\u2969": 'rdldhar',
				"\u296A": 'lharul',
				"\u296B": 'llhard',
				"\u296C": 'rharul',
				"\u296D": 'lrhard',
				"\u296E": 'udhar',
				"\u296F": 'duhar',
				"\u2970": 'RoundImplies',
				"\u2971": 'erarr',
				"\u2972": 'simrarr',
				"\u2973": 'larrsim',
				"\u2974": 'rarrsim',
				"\u2975": 'rarrap',
				"\u2976": 'ltlarr',
				"\u2978": 'gtrarr',
				"\u2979": 'subrarr',
				"\u297B": 'suplarr',
				"\u297C": 'lfisht',
				"\u297D": 'rfisht',
				"\u297E": 'ufisht',
				"\u297F": 'dfisht',
				"\u299A": 'vzigzag',
				"\u299C": 'vangrt',
				"\u299D": 'angrtvbd',
				"\u29A4": 'ange',
				"\u29A5": 'range',
				"\u29A6": 'dwangle',
				"\u29A7": 'uwangle',
				"\u29A8": 'angmsdaa',
				"\u29A9": 'angmsdab',
				"\u29AA": 'angmsdac',
				"\u29AB": 'angmsdad',
				"\u29AC": 'angmsdae',
				"\u29AD": 'angmsdaf',
				"\u29AE": 'angmsdag',
				"\u29AF": 'angmsdah',
				"\u29B0": 'bemptyv',
				"\u29B1": 'demptyv',
				"\u29B2": 'cemptyv',
				"\u29B3": 'raemptyv',
				"\u29B4": 'laemptyv',
				"\u29B5": 'ohbar',
				"\u29B6": 'omid',
				"\u29B7": 'opar',
				"\u29B9": 'operp',
				"\u29BB": 'olcross',
				"\u29BC": 'odsold',
				"\u29BE": 'olcir',
				"\u29BF": 'ofcir',
				"\u29C0": 'olt',
				"\u29C1": 'ogt',
				"\u29C2": 'cirscir',
				"\u29C3": 'cirE',
				"\u29C4": 'solb',
				"\u29C5": 'bsolb',
				"\u29C9": 'boxbox',
				"\u29CD": 'trisb',
				"\u29CE": 'rtriltri',
				"\u29CF": 'LeftTriangleBar',
				"\u29CF\u0338": 'NotLeftTriangleBar',
				"\u29D0": 'RightTriangleBar',
				"\u29D0\u0338": 'NotRightTriangleBar',
				"\u29DC": 'iinfin',
				"\u29DD": 'infintie',
				"\u29DE": 'nvinfin',
				"\u29E3": 'eparsl',
				"\u29E4": 'smeparsl',
				"\u29E5": 'eqvparsl',
				"\u29EB": 'lozf',
				"\u29F4": 'RuleDelayed',
				"\u29F6": 'dsol',
				"\u2A00": 'xodot',
				"\u2A01": 'xoplus',
				"\u2A02": 'xotime',
				"\u2A04": 'xuplus',
				"\u2A06": 'xsqcup',
				"\u2A0D": 'fpartint',
				"\u2A10": 'cirfnint',
				"\u2A11": 'awint',
				"\u2A12": 'rppolint',
				"\u2A13": 'scpolint',
				"\u2A14": 'npolint',
				"\u2A15": 'pointint',
				"\u2A16": 'quatint',
				"\u2A17": 'intlarhk',
				"\u2A22": 'pluscir',
				"\u2A23": 'plusacir',
				"\u2A24": 'simplus',
				"\u2A25": 'plusdu',
				"\u2A26": 'plussim',
				"\u2A27": 'plustwo',
				"\u2A29": 'mcomma',
				"\u2A2A": 'minusdu',
				"\u2A2D": 'loplus',
				"\u2A2E": 'roplus',
				"\u2A2F": 'Cross',
				"\u2A30": 'timesd',
				"\u2A31": 'timesbar',
				"\u2A33": 'smashp',
				"\u2A34": 'lotimes',
				"\u2A35": 'rotimes',
				"\u2A36": 'otimesas',
				"\u2A37": 'Otimes',
				"\u2A38": 'odiv',
				"\u2A39": 'triplus',
				"\u2A3A": 'triminus',
				"\u2A3B": 'tritime',
				"\u2A3C": 'iprod',
				"\u2A3F": 'amalg',
				"\u2A40": 'capdot',
				"\u2A42": 'ncup',
				"\u2A43": 'ncap',
				"\u2A44": 'capand',
				"\u2A45": 'cupor',
				"\u2A46": 'cupcap',
				"\u2A47": 'capcup',
				"\u2A48": 'cupbrcap',
				"\u2A49": 'capbrcup',
				"\u2A4A": 'cupcup',
				"\u2A4B": 'capcap',
				"\u2A4C": 'ccups',
				"\u2A4D": 'ccaps',
				"\u2A50": 'ccupssm',
				"\u2A53": 'And',
				"\u2A54": 'Or',
				"\u2A55": 'andand',
				"\u2A56": 'oror',
				"\u2A57": 'orslope',
				"\u2A58": 'andslope',
				"\u2A5A": 'andv',
				"\u2A5B": 'orv',
				"\u2A5C": 'andd',
				"\u2A5D": 'ord',
				"\u2A5F": 'wedbar',
				"\u2A66": 'sdote',
				"\u2A6A": 'simdot',
				"\u2A6D": 'congdot',
				"\u2A6D\u0338": 'ncongdot',
				"\u2A6E": 'easter',
				"\u2A6F": 'apacir',
				"\u2A70": 'apE',
				"\u2A70\u0338": 'napE',
				"\u2A71": 'eplus',
				"\u2A72": 'pluse',
				"\u2A73": 'Esim',
				"\u2A77": 'eDDot',
				"\u2A78": 'equivDD',
				"\u2A79": 'ltcir',
				"\u2A7A": 'gtcir',
				"\u2A7B": 'ltquest',
				"\u2A7C": 'gtquest',
				"\u2A7D": 'les',
				"\u2A7D\u0338": 'nles',
				"\u2A7E": 'ges',
				"\u2A7E\u0338": 'nges',
				"\u2A7F": 'lesdot',
				"\u2A80": 'gesdot',
				"\u2A81": 'lesdoto',
				"\u2A82": 'gesdoto',
				"\u2A83": 'lesdotor',
				"\u2A84": 'gesdotol',
				"\u2A85": 'lap',
				"\u2A86": 'gap',
				"\u2A87": 'lne',
				"\u2A88": 'gne',
				"\u2A89": 'lnap',
				"\u2A8A": 'gnap',
				"\u2A8B": 'lEg',
				"\u2A8C": 'gEl',
				"\u2A8D": 'lsime',
				"\u2A8E": 'gsime',
				"\u2A8F": 'lsimg',
				"\u2A90": 'gsiml',
				"\u2A91": 'lgE',
				"\u2A92": 'glE',
				"\u2A93": 'lesges',
				"\u2A94": 'gesles',
				"\u2A95": 'els',
				"\u2A96": 'egs',
				"\u2A97": 'elsdot',
				"\u2A98": 'egsdot',
				"\u2A99": 'el',
				"\u2A9A": 'eg',
				"\u2A9D": 'siml',
				"\u2A9E": 'simg',
				"\u2A9F": 'simlE',
				"\u2AA0": 'simgE',
				"\u2AA1": 'LessLess',
				"\u2AA1\u0338": 'NotNestedLessLess',
				"\u2AA2": 'GreaterGreater',
				"\u2AA2\u0338": 'NotNestedGreaterGreater',
				"\u2AA4": 'glj',
				"\u2AA5": 'gla',
				"\u2AA6": 'ltcc',
				"\u2AA7": 'gtcc',
				"\u2AA8": 'lescc',
				"\u2AA9": 'gescc',
				"\u2AAA": 'smt',
				"\u2AAB": 'lat',
				"\u2AAC": 'smte',
				"\u2AAC\uFE00": 'smtes',
				"\u2AAD": 'late',
				"\u2AAD\uFE00": 'lates',
				"\u2AAE": 'bumpE',
				"\u2AAF": 'pre',
				"\u2AAF\u0338": 'npre',
				"\u2AB0": 'sce',
				"\u2AB0\u0338": 'nsce',
				"\u2AB3": 'prE',
				"\u2AB4": 'scE',
				"\u2AB5": 'prnE',
				"\u2AB6": 'scnE',
				"\u2AB7": 'prap',
				"\u2AB8": 'scap',
				"\u2AB9": 'prnap',
				"\u2ABA": 'scnap',
				"\u2ABB": 'Pr',
				"\u2ABC": 'Sc',
				"\u2ABD": 'subdot',
				"\u2ABE": 'supdot',
				"\u2ABF": 'subplus',
				"\u2AC0": 'supplus',
				"\u2AC1": 'submult',
				"\u2AC2": 'supmult',
				"\u2AC3": 'subedot',
				"\u2AC4": 'supedot',
				"\u2AC5": 'subE',
				"\u2AC5\u0338": 'nsubE',
				"\u2AC6": 'supE',
				"\u2AC6\u0338": 'nsupE',
				"\u2AC7": 'subsim',
				"\u2AC8": 'supsim',
				"\u2ACB\uFE00": 'vsubnE',
				"\u2ACB": 'subnE',
				"\u2ACC\uFE00": 'vsupnE',
				"\u2ACC": 'supnE',
				"\u2ACF": 'csub',
				"\u2AD0": 'csup',
				"\u2AD1": 'csube',
				"\u2AD2": 'csupe',
				"\u2AD3": 'subsup',
				"\u2AD4": 'supsub',
				"\u2AD5": 'subsub',
				"\u2AD6": 'supsup',
				"\u2AD7": 'suphsub',
				"\u2AD8": 'supdsub',
				"\u2AD9": 'forkv',
				"\u2ADA": 'topfork',
				"\u2ADB": 'mlcp',
				"\u2AE4": 'Dashv',
				"\u2AE6": 'Vdashl',
				"\u2AE7": 'Barv',
				"\u2AE8": 'vBar',
				"\u2AE9": 'vBarv',
				"\u2AEB": 'Vbar',
				"\u2AEC": 'Not',
				"\u2AED": 'bNot',
				"\u2AEE": 'rnmid',
				"\u2AEF": 'cirmid',
				"\u2AF0": 'midcir',
				"\u2AF1": 'topcir',
				"\u2AF2": 'nhpar',
				"\u2AF3": 'parsim',
				"\u2AFD": 'parsl',
				"\u2AFD\u20E5": 'nparsl',
				"\u266D": 'flat',
				"\u266E": 'natur',
				"\u266F": 'sharp',
				'\xA4': 'curren',
				'\xA2': 'cent',
				'$': 'dollar',
				'\xA3': 'pound',
				'\xA5': 'yen',
				"\u20AC": 'euro',
				'\xB9': 'sup1',
				'\xBD': 'half',
				"\u2153": 'frac13',
				'\xBC': 'frac14',
				"\u2155": 'frac15',
				"\u2159": 'frac16',
				"\u215B": 'frac18',
				'\xB2': 'sup2',
				"\u2154": 'frac23',
				"\u2156": 'frac25',
				'\xB3': 'sup3',
				'\xBE': 'frac34',
				"\u2157": 'frac35',
				"\u215C": 'frac38',
				"\u2158": 'frac45',
				"\u215A": 'frac56',
				"\u215D": 'frac58',
				"\u215E": 'frac78',
				"\uD835\uDCB6": 'ascr',
				"\uD835\uDD52": 'aopf',
				"\uD835\uDD1E": 'afr',
				"\uD835\uDD38": 'Aopf',
				"\uD835\uDD04": 'Afr',
				"\uD835\uDC9C": 'Ascr',
				'\xAA': 'ordf',
				'\xE1': 'aacute',
				'\xC1': 'Aacute',
				'\xE0': 'agrave',
				'\xC0': 'Agrave',
				"\u0103": 'abreve',
				"\u0102": 'Abreve',
				'\xE2': 'acirc',
				'\xC2': 'Acirc',
				'\xE5': 'aring',
				'\xC5': 'angst',
				'\xE4': 'auml',
				'\xC4': 'Auml',
				'\xE3': 'atilde',
				'\xC3': 'Atilde',
				"\u0105": 'aogon',
				"\u0104": 'Aogon',
				"\u0101": 'amacr',
				"\u0100": 'Amacr',
				'\xE6': 'aelig',
				'\xC6': 'AElig',
				"\uD835\uDCB7": 'bscr',
				"\uD835\uDD53": 'bopf',
				"\uD835\uDD1F": 'bfr',
				"\uD835\uDD39": 'Bopf',
				"\u212C": 'Bscr',
				"\uD835\uDD05": 'Bfr',
				"\uD835\uDD20": 'cfr',
				"\uD835\uDCB8": 'cscr',
				"\uD835\uDD54": 'copf',
				"\u212D": 'Cfr',
				"\uD835\uDC9E": 'Cscr',
				"\u2102": 'Copf',
				"\u0107": 'cacute',
				"\u0106": 'Cacute',
				"\u0109": 'ccirc',
				"\u0108": 'Ccirc',
				"\u010D": 'ccaron',
				"\u010C": 'Ccaron',
				"\u010B": 'cdot',
				"\u010A": 'Cdot',
				'\xE7': 'ccedil',
				'\xC7': 'Ccedil',
				"\u2105": 'incare',
				"\uD835\uDD21": 'dfr',
				"\u2146": 'dd',
				"\uD835\uDD55": 'dopf',
				"\uD835\uDCB9": 'dscr',
				"\uD835\uDC9F": 'Dscr',
				"\uD835\uDD07": 'Dfr',
				"\u2145": 'DD',
				"\uD835\uDD3B": 'Dopf',
				"\u010F": 'dcaron',
				"\u010E": 'Dcaron',
				"\u0111": 'dstrok',
				"\u0110": 'Dstrok',
				'\xF0': 'eth',
				'\xD0': 'ETH',
				"\u2147": 'ee',
				"\u212F": 'escr',
				"\uD835\uDD22": 'efr',
				"\uD835\uDD56": 'eopf',
				"\u2130": 'Escr',
				"\uD835\uDD08": 'Efr',
				"\uD835\uDD3C": 'Eopf',
				'\xE9': 'eacute',
				'\xC9': 'Eacute',
				'\xE8': 'egrave',
				'\xC8': 'Egrave',
				'\xEA': 'ecirc',
				'\xCA': 'Ecirc',
				"\u011B": 'ecaron',
				"\u011A": 'Ecaron',
				'\xEB': 'euml',
				'\xCB': 'Euml',
				"\u0117": 'edot',
				"\u0116": 'Edot',
				"\u0119": 'eogon',
				"\u0118": 'Eogon',
				"\u0113": 'emacr',
				"\u0112": 'Emacr',
				"\uD835\uDD23": 'ffr',
				"\uD835\uDD57": 'fopf',
				"\uD835\uDCBB": 'fscr',
				"\uD835\uDD09": 'Ffr',
				"\uD835\uDD3D": 'Fopf',
				"\u2131": 'Fscr',
				"\uFB00": 'fflig',
				"\uFB03": 'ffilig',
				"\uFB04": 'ffllig',
				"\uFB01": 'filig',
				'fj': 'fjlig',
				"\uFB02": 'fllig',
				"\u0192": 'fnof',
				"\u210A": 'gscr',
				"\uD835\uDD58": 'gopf',
				"\uD835\uDD24": 'gfr',
				"\uD835\uDCA2": 'Gscr',
				"\uD835\uDD3E": 'Gopf',
				"\uD835\uDD0A": 'Gfr',
				"\u01F5": 'gacute',
				"\u011F": 'gbreve',
				"\u011E": 'Gbreve',
				"\u011D": 'gcirc',
				"\u011C": 'Gcirc',
				"\u0121": 'gdot',
				"\u0120": 'Gdot',
				"\u0122": 'Gcedil',
				"\uD835\uDD25": 'hfr',
				"\u210E": 'planckh',
				"\uD835\uDCBD": 'hscr',
				"\uD835\uDD59": 'hopf',
				"\u210B": 'Hscr',
				"\u210C": 'Hfr',
				"\u210D": 'Hopf',
				"\u0125": 'hcirc',
				"\u0124": 'Hcirc',
				"\u210F": 'hbar',
				"\u0127": 'hstrok',
				"\u0126": 'Hstrok',
				"\uD835\uDD5A": 'iopf',
				"\uD835\uDD26": 'ifr',
				"\uD835\uDCBE": 'iscr',
				"\u2148": 'ii',
				"\uD835\uDD40": 'Iopf',
				"\u2110": 'Iscr',
				"\u2111": 'Im',
				'\xED': 'iacute',
				'\xCD': 'Iacute',
				'\xEC': 'igrave',
				'\xCC': 'Igrave',
				'\xEE': 'icirc',
				'\xCE': 'Icirc',
				'\xEF': 'iuml',
				'\xCF': 'Iuml',
				"\u0129": 'itilde',
				"\u0128": 'Itilde',
				"\u0130": 'Idot',
				"\u012F": 'iogon',
				"\u012E": 'Iogon',
				"\u012B": 'imacr',
				"\u012A": 'Imacr',
				"\u0133": 'ijlig',
				"\u0132": 'IJlig',
				"\u0131": 'imath',
				"\uD835\uDCBF": 'jscr',
				"\uD835\uDD5B": 'jopf',
				"\uD835\uDD27": 'jfr',
				"\uD835\uDCA5": 'Jscr',
				"\uD835\uDD0D": 'Jfr',
				"\uD835\uDD41": 'Jopf',
				"\u0135": 'jcirc',
				"\u0134": 'Jcirc',
				"\u0237": 'jmath',
				"\uD835\uDD5C": 'kopf',
				"\uD835\uDCC0": 'kscr',
				"\uD835\uDD28": 'kfr',
				"\uD835\uDCA6": 'Kscr',
				"\uD835\uDD42": 'Kopf',
				"\uD835\uDD0E": 'Kfr',
				"\u0137": 'kcedil',
				"\u0136": 'Kcedil',
				"\uD835\uDD29": 'lfr',
				"\uD835\uDCC1": 'lscr',
				"\u2113": 'ell',
				"\uD835\uDD5D": 'lopf',
				"\u2112": 'Lscr',
				"\uD835\uDD0F": 'Lfr',
				"\uD835\uDD43": 'Lopf',
				"\u013A": 'lacute',
				"\u0139": 'Lacute',
				"\u013E": 'lcaron',
				"\u013D": 'Lcaron',
				"\u013C": 'lcedil',
				"\u013B": 'Lcedil',
				"\u0142": 'lstrok',
				"\u0141": 'Lstrok',
				"\u0140": 'lmidot',
				"\u013F": 'Lmidot',
				"\uD835\uDD2A": 'mfr',
				"\uD835\uDD5E": 'mopf',
				"\uD835\uDCC2": 'mscr',
				"\uD835\uDD10": 'Mfr',
				"\uD835\uDD44": 'Mopf',
				"\u2133": 'Mscr',
				"\uD835\uDD2B": 'nfr',
				"\uD835\uDD5F": 'nopf',
				"\uD835\uDCC3": 'nscr',
				"\u2115": 'Nopf',
				"\uD835\uDCA9": 'Nscr',
				"\uD835\uDD11": 'Nfr',
				"\u0144": 'nacute',
				"\u0143": 'Nacute',
				"\u0148": 'ncaron',
				"\u0147": 'Ncaron',
				'\xF1': 'ntilde',
				'\xD1': 'Ntilde',
				"\u0146": 'ncedil',
				"\u0145": 'Ncedil',
				"\u2116": 'numero',
				"\u014B": 'eng',
				"\u014A": 'ENG',
				"\uD835\uDD60": 'oopf',
				"\uD835\uDD2C": 'ofr',
				"\u2134": 'oscr',
				"\uD835\uDCAA": 'Oscr',
				"\uD835\uDD12": 'Ofr',
				"\uD835\uDD46": 'Oopf',
				'\xBA': 'ordm',
				'\xF3': 'oacute',
				'\xD3': 'Oacute',
				'\xF2': 'ograve',
				'\xD2': 'Ograve',
				'\xF4': 'ocirc',
				'\xD4': 'Ocirc',
				'\xF6': 'ouml',
				'\xD6': 'Ouml',
				"\u0151": 'odblac',
				"\u0150": 'Odblac',
				'\xF5': 'otilde',
				'\xD5': 'Otilde',
				'\xF8': 'oslash',
				'\xD8': 'Oslash',
				"\u014D": 'omacr',
				"\u014C": 'Omacr',
				"\u0153": 'oelig',
				"\u0152": 'OElig',
				"\uD835\uDD2D": 'pfr',
				"\uD835\uDCC5": 'pscr',
				"\uD835\uDD61": 'popf',
				"\u2119": 'Popf',
				"\uD835\uDD13": 'Pfr',
				"\uD835\uDCAB": 'Pscr',
				"\uD835\uDD62": 'qopf',
				"\uD835\uDD2E": 'qfr',
				"\uD835\uDCC6": 'qscr',
				"\uD835\uDCAC": 'Qscr',
				"\uD835\uDD14": 'Qfr',
				"\u211A": 'Qopf',
				"\u0138": 'kgreen',
				"\uD835\uDD2F": 'rfr',
				"\uD835\uDD63": 'ropf',
				"\uD835\uDCC7": 'rscr',
				"\u211B": 'Rscr',
				"\u211C": 'Re',
				"\u211D": 'Ropf',
				"\u0155": 'racute',
				"\u0154": 'Racute',
				"\u0159": 'rcaron',
				"\u0158": 'Rcaron',
				"\u0157": 'rcedil',
				"\u0156": 'Rcedil',
				"\uD835\uDD64": 'sopf',
				"\uD835\uDCC8": 'sscr',
				"\uD835\uDD30": 'sfr',
				"\uD835\uDD4A": 'Sopf',
				"\uD835\uDD16": 'Sfr',
				"\uD835\uDCAE": 'Sscr',
				"\u24C8": 'oS',
				"\u015B": 'sacute',
				"\u015A": 'Sacute',
				"\u015D": 'scirc',
				"\u015C": 'Scirc',
				"\u0161": 'scaron',
				"\u0160": 'Scaron',
				"\u015F": 'scedil',
				"\u015E": 'Scedil',
				'\xDF': 'szlig',
				"\uD835\uDD31": 'tfr',
				"\uD835\uDCC9": 'tscr',
				"\uD835\uDD65": 'topf',
				"\uD835\uDCAF": 'Tscr',
				"\uD835\uDD17": 'Tfr',
				"\uD835\uDD4B": 'Topf',
				"\u0165": 'tcaron',
				"\u0164": 'Tcaron',
				"\u0163": 'tcedil',
				"\u0162": 'Tcedil',
				"\u2122": 'trade',
				"\u0167": 'tstrok',
				"\u0166": 'Tstrok',
				"\uD835\uDCCA": 'uscr',
				"\uD835\uDD66": 'uopf',
				"\uD835\uDD32": 'ufr',
				"\uD835\uDD4C": 'Uopf',
				"\uD835\uDD18": 'Ufr',
				"\uD835\uDCB0": 'Uscr',
				'\xFA': 'uacute',
				'\xDA': 'Uacute',
				'\xF9': 'ugrave',
				'\xD9': 'Ugrave',
				"\u016D": 'ubreve',
				"\u016C": 'Ubreve',
				'\xFB': 'ucirc',
				'\xDB': 'Ucirc',
				"\u016F": 'uring',
				"\u016E": 'Uring',
				'\xFC': 'uuml',
				'\xDC': 'Uuml',
				"\u0171": 'udblac',
				"\u0170": 'Udblac',
				"\u0169": 'utilde',
				"\u0168": 'Utilde',
				"\u0173": 'uogon',
				"\u0172": 'Uogon',
				"\u016B": 'umacr',
				"\u016A": 'Umacr',
				"\uD835\uDD33": 'vfr',
				"\uD835\uDD67": 'vopf',
				"\uD835\uDCCB": 'vscr',
				"\uD835\uDD19": 'Vfr',
				"\uD835\uDD4D": 'Vopf',
				"\uD835\uDCB1": 'Vscr',
				"\uD835\uDD68": 'wopf',
				"\uD835\uDCCC": 'wscr',
				"\uD835\uDD34": 'wfr',
				"\uD835\uDCB2": 'Wscr',
				"\uD835\uDD4E": 'Wopf',
				"\uD835\uDD1A": 'Wfr',
				"\u0175": 'wcirc',
				"\u0174": 'Wcirc',
				"\uD835\uDD35": 'xfr',
				"\uD835\uDCCD": 'xscr',
				"\uD835\uDD69": 'xopf',
				"\uD835\uDD4F": 'Xopf',
				"\uD835\uDD1B": 'Xfr',
				"\uD835\uDCB3": 'Xscr',
				"\uD835\uDD36": 'yfr',
				"\uD835\uDCCE": 'yscr',
				"\uD835\uDD6A": 'yopf',
				"\uD835\uDCB4": 'Yscr',
				"\uD835\uDD1C": 'Yfr',
				"\uD835\uDD50": 'Yopf',
				'\xFD': 'yacute',
				'\xDD': 'Yacute',
				"\u0177": 'ycirc',
				"\u0176": 'Ycirc',
				'\xFF': 'yuml',
				"\u0178": 'Yuml',
				"\uD835\uDCCF": 'zscr',
				"\uD835\uDD37": 'zfr',
				"\uD835\uDD6B": 'zopf',
				"\u2128": 'Zfr',
				"\u2124": 'Zopf',
				"\uD835\uDCB5": 'Zscr',
				"\u017A": 'zacute',
				"\u0179": 'Zacute',
				"\u017E": 'zcaron',
				"\u017D": 'Zcaron',
				"\u017C": 'zdot',
				"\u017B": 'Zdot',
				"\u01B5": 'imped',
				'\xFE': 'thorn',
				'\xDE': 'THORN',
				"\u0149": 'napos',
				"\u03B1": 'alpha',
				"\u0391": 'Alpha',
				"\u03B2": 'beta',
				"\u0392": 'Beta',
				"\u03B3": 'gamma',
				"\u0393": 'Gamma',
				"\u03B4": 'delta',
				"\u0394": 'Delta',
				"\u03B5": 'epsi',
				"\u03F5": 'epsiv',
				"\u0395": 'Epsilon',
				"\u03DD": 'gammad',
				"\u03DC": 'Gammad',
				"\u03B6": 'zeta',
				"\u0396": 'Zeta',
				"\u03B7": 'eta',
				"\u0397": 'Eta',
				"\u03B8": 'theta',
				"\u03D1": 'thetav',
				"\u0398": 'Theta',
				"\u03B9": 'iota',
				"\u0399": 'Iota',
				"\u03BA": 'kappa',
				"\u03F0": 'kappav',
				"\u039A": 'Kappa',
				"\u03BB": 'lambda',
				"\u039B": 'Lambda',
				"\u03BC": 'mu',
				'\xB5': 'micro',
				"\u039C": 'Mu',
				"\u03BD": 'nu',
				"\u039D": 'Nu',
				"\u03BE": 'xi',
				"\u039E": 'Xi',
				"\u03BF": 'omicron',
				"\u039F": 'Omicron',
				"\u03C0": 'pi',
				"\u03D6": 'piv',
				"\u03A0": 'Pi',
				"\u03C1": 'rho',
				"\u03F1": 'rhov',
				"\u03A1": 'Rho',
				"\u03C3": 'sigma',
				"\u03A3": 'Sigma',
				"\u03C2": 'sigmaf',
				"\u03C4": 'tau',
				"\u03A4": 'Tau',
				"\u03C5": 'upsi',
				"\u03A5": 'Upsilon',
				"\u03D2": 'Upsi',
				"\u03C6": 'phi',
				"\u03D5": 'phiv',
				"\u03A6": 'Phi',
				"\u03C7": 'chi',
				"\u03A7": 'Chi',
				"\u03C8": 'psi',
				"\u03A8": 'Psi',
				"\u03C9": 'omega',
				"\u03A9": 'ohm',
				"\u0430": 'acy',
				"\u0410": 'Acy',
				"\u0431": 'bcy',
				"\u0411": 'Bcy',
				"\u0432": 'vcy',
				"\u0412": 'Vcy',
				"\u0433": 'gcy',
				"\u0413": 'Gcy',
				"\u0453": 'gjcy',
				"\u0403": 'GJcy',
				"\u0434": 'dcy',
				"\u0414": 'Dcy',
				"\u0452": 'djcy',
				"\u0402": 'DJcy',
				"\u0435": 'iecy',
				"\u0415": 'IEcy',
				"\u0451": 'iocy',
				"\u0401": 'IOcy',
				"\u0454": 'jukcy',
				"\u0404": 'Jukcy',
				"\u0436": 'zhcy',
				"\u0416": 'ZHcy',
				"\u0437": 'zcy',
				"\u0417": 'Zcy',
				"\u0455": 'dscy',
				"\u0405": 'DScy',
				"\u0438": 'icy',
				"\u0418": 'Icy',
				"\u0456": 'iukcy',
				"\u0406": 'Iukcy',
				"\u0457": 'yicy',
				"\u0407": 'YIcy',
				"\u0439": 'jcy',
				"\u0419": 'Jcy',
				"\u0458": 'jsercy',
				"\u0408": 'Jsercy',
				"\u043A": 'kcy',
				"\u041A": 'Kcy',
				"\u045C": 'kjcy',
				"\u040C": 'KJcy',
				"\u043B": 'lcy',
				"\u041B": 'Lcy',
				"\u0459": 'ljcy',
				"\u0409": 'LJcy',
				"\u043C": 'mcy',
				"\u041C": 'Mcy',
				"\u043D": 'ncy',
				"\u041D": 'Ncy',
				"\u045A": 'njcy',
				"\u040A": 'NJcy',
				"\u043E": 'ocy',
				"\u041E": 'Ocy',
				"\u043F": 'pcy',
				"\u041F": 'Pcy',
				"\u0440": 'rcy',
				"\u0420": 'Rcy',
				"\u0441": 'scy',
				"\u0421": 'Scy',
				"\u0442": 'tcy',
				"\u0422": 'Tcy',
				"\u045B": 'tshcy',
				"\u040B": 'TSHcy',
				"\u0443": 'ucy',
				"\u0423": 'Ucy',
				"\u045E": 'ubrcy',
				"\u040E": 'Ubrcy',
				"\u0444": 'fcy',
				"\u0424": 'Fcy',
				"\u0445": 'khcy',
				"\u0425": 'KHcy',
				"\u0446": 'tscy',
				"\u0426": 'TScy',
				"\u0447": 'chcy',
				"\u0427": 'CHcy',
				"\u045F": 'dzcy',
				"\u040F": 'DZcy',
				"\u0448": 'shcy',
				"\u0428": 'SHcy',
				"\u0449": 'shchcy',
				"\u0429": 'SHCHcy',
				"\u044A": 'hardcy',
				"\u042A": 'HARDcy',
				"\u044B": 'ycy',
				"\u042B": 'Ycy',
				"\u044C": 'softcy',
				"\u042C": 'SOFTcy',
				"\u044D": 'ecy',
				"\u042D": 'Ecy',
				"\u044E": 'yucy',
				"\u042E": 'YUcy',
				"\u044F": 'yacy',
				"\u042F": 'YAcy',
				"\u2135": 'aleph',
				"\u2136": 'beth',
				"\u2137": 'gimel',
				"\u2138": 'daleth'
			};
			var regexEscape = /["&'<>`]/g;
			var escapeMap = {
				'"': '&quot;',
				'&': '&amp;',
				'\'': '&#x27;',
				'<': '&lt;',
				// See https://mathiasbynens.be/notes/ambiguous-ampersands: in HTML, the
				// following is not strictly necessary unless it’s part of a tag or an
				// unquoted attribute value. We’re only escaping it to support those
				// situations, and for XML support.
				'>': '&gt;',
				// In Internet Explorer ≤ 8, the backtick character can be used
				// to break out of (un)quoted attribute values or HTML comments.
				// See http://html5sec.org/#102, http://html5sec.org/#108, and
				// http://html5sec.org/#133.
				'`': '&#x60;'
			};
			var regexInvalidEntity = /&#(?:[xX][^a-fA-F0-9]|[^0-9xX])/;
			var regexInvalidRawCodePoint = /[\0-\x08\x0B\x0E-\x1F\x7F-\x9F\uFDD0-\uFDEF\uFFFE\uFFFF]|[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDFFE\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
			var regexDecode = /&(CounterClockwiseContourIntegral|DoubleLongLeftRightArrow|ClockwiseContourIntegral|NotNestedGreaterGreater|NotSquareSupersetEqual|DiacriticalDoubleAcute|NotRightTriangleEqual|NotSucceedsSlantEqual|NotPrecedesSlantEqual|CloseCurlyDoubleQuote|NegativeVeryThinSpace|DoubleContourIntegral|FilledVerySmallSquare|CapitalDifferentialD|OpenCurlyDoubleQuote|EmptyVerySmallSquare|NestedGreaterGreater|DoubleLongRightArrow|NotLeftTriangleEqual|NotGreaterSlantEqual|ReverseUpEquilibrium|DoubleLeftRightArrow|NotSquareSubsetEqual|NotDoubleVerticalBar|RightArrowLeftArrow|NotGreaterFullEqual|NotRightTriangleBar|SquareSupersetEqual|DownLeftRightVector|DoubleLongLeftArrow|leftrightsquigarrow|LeftArrowRightArrow|NegativeMediumSpace|blacktriangleright|RightDownVectorBar|PrecedesSlantEqual|RightDoubleBracket|SucceedsSlantEqual|NotLeftTriangleBar|RightTriangleEqual|SquareIntersection|RightDownTeeVector|ReverseEquilibrium|NegativeThickSpace|longleftrightarrow|Longleftrightarrow|LongLeftRightArrow|DownRightTeeVector|DownRightVectorBar|GreaterSlantEqual|SquareSubsetEqual|LeftDownVectorBar|LeftDoubleBracket|VerticalSeparator|rightleftharpoons|NotGreaterGreater|NotSquareSuperset|blacktriangleleft|blacktriangledown|NegativeThinSpace|LeftDownTeeVector|NotLessSlantEqual|leftrightharpoons|DoubleUpDownArrow|DoubleVerticalBar|LeftTriangleEqual|FilledSmallSquare|twoheadrightarrow|NotNestedLessLess|DownLeftTeeVector|DownLeftVectorBar|RightAngleBracket|NotTildeFullEqual|NotReverseElement|RightUpDownVector|DiacriticalTilde|NotSucceedsTilde|circlearrowright|NotPrecedesEqual|rightharpoondown|DoubleRightArrow|NotSucceedsEqual|NonBreakingSpace|NotRightTriangle|LessEqualGreater|RightUpTeeVector|LeftAngleBracket|GreaterFullEqual|DownArrowUpArrow|RightUpVectorBar|twoheadleftarrow|GreaterEqualLess|downharpoonright|RightTriangleBar|ntrianglerighteq|NotSupersetEqual|LeftUpDownVector|DiacriticalAcute|rightrightarrows|vartriangleright|UpArrowDownArrow|DiacriticalGrave|UnderParenthesis|EmptySmallSquare|LeftUpVectorBar|leftrightarrows|DownRightVector|downharpoonleft|trianglerighteq|ShortRightArrow|OverParenthesis|DoubleLeftArrow|DoubleDownArrow|NotSquareSubset|bigtriangledown|ntrianglelefteq|UpperRightArrow|curvearrowright|vartriangleleft|NotLeftTriangle|nleftrightarrow|LowerRightArrow|NotHumpDownHump|NotGreaterTilde|rightthreetimes|LeftUpTeeVector|NotGreaterEqual|straightepsilon|LeftTriangleBar|rightsquigarrow|ContourIntegral|rightleftarrows|CloseCurlyQuote|RightDownVector|LeftRightVector|nLeftrightarrow|leftharpoondown|circlearrowleft|SquareSuperset|OpenCurlyQuote|hookrightarrow|HorizontalLine|DiacriticalDot|NotLessGreater|ntriangleright|DoubleRightTee|InvisibleComma|InvisibleTimes|LowerLeftArrow|DownLeftVector|NotSubsetEqual|curvearrowleft|trianglelefteq|NotVerticalBar|TildeFullEqual|downdownarrows|NotGreaterLess|RightTeeVector|ZeroWidthSpace|looparrowright|LongRightArrow|doublebarwedge|ShortLeftArrow|ShortDownArrow|RightVectorBar|GreaterGreater|ReverseElement|rightharpoonup|LessSlantEqual|leftthreetimes|upharpoonright|rightarrowtail|LeftDownVector|Longrightarrow|NestedLessLess|UpperLeftArrow|nshortparallel|leftleftarrows|leftrightarrow|Leftrightarrow|LeftRightArrow|longrightarrow|upharpoonleft|RightArrowBar|ApplyFunction|LeftTeeVector|leftarrowtail|NotEqualTilde|varsubsetneqq|varsupsetneqq|RightTeeArrow|SucceedsEqual|SucceedsTilde|LeftVectorBar|SupersetEqual|hookleftarrow|DifferentialD|VerticalTilde|VeryThinSpace|blacktriangle|bigtriangleup|LessFullEqual|divideontimes|leftharpoonup|UpEquilibrium|ntriangleleft|RightTriangle|measuredangle|shortparallel|longleftarrow|Longleftarrow|LongLeftArrow|DoubleLeftTee|Poincareplane|PrecedesEqual|triangleright|DoubleUpArrow|RightUpVector|fallingdotseq|looparrowleft|PrecedesTilde|NotTildeEqual|NotTildeTilde|smallsetminus|Proportional|triangleleft|triangledown|UnderBracket|NotHumpEqual|exponentiale|ExponentialE|NotLessTilde|HilbertSpace|RightCeiling|blacklozenge|varsupsetneq|HumpDownHump|GreaterEqual|VerticalLine|LeftTeeArrow|NotLessEqual|DownTeeArrow|LeftTriangle|varsubsetneq|Intersection|NotCongruent|DownArrowBar|LeftUpVector|LeftArrowBar|risingdotseq|GreaterTilde|RoundImplies|SquareSubset|ShortUpArrow|NotSuperset|quaternions|precnapprox|backepsilon|preccurlyeq|OverBracket|blacksquare|MediumSpace|VerticalBar|circledcirc|circleddash|CircleMinus|CircleTimes|LessGreater|curlyeqprec|curlyeqsucc|diamondsuit|UpDownArrow|Updownarrow|RuleDelayed|Rrightarrow|updownarrow|RightVector|nRightarrow|nrightarrow|eqslantless|LeftCeiling|Equilibrium|SmallCircle|expectation|NotSucceeds|thickapprox|GreaterLess|SquareUnion|NotPrecedes|NotLessLess|straightphi|succnapprox|succcurlyeq|SubsetEqual|sqsupseteq|Proportion|Laplacetrf|ImaginaryI|supsetneqq|NotGreater|gtreqqless|NotElement|ThickSpace|TildeEqual|TildeTilde|Fouriertrf|rmoustache|EqualTilde|eqslantgtr|UnderBrace|LeftVector|UpArrowBar|nLeftarrow|nsubseteqq|subsetneqq|nsupseteqq|nleftarrow|succapprox|lessapprox|UpTeeArrow|upuparrows|curlywedge|lesseqqgtr|varepsilon|varnothing|RightFloor|complement|CirclePlus|sqsubseteq|Lleftarrow|circledast|RightArrow|Rightarrow|rightarrow|lmoustache|Bernoullis|precapprox|mapstoleft|mapstodown|longmapsto|dotsquare|downarrow|DoubleDot|nsubseteq|supsetneq|leftarrow|nsupseteq|subsetneq|ThinSpace|ngeqslant|subseteqq|HumpEqual|NotSubset|triangleq|NotCupCap|lesseqgtr|heartsuit|TripleDot|Leftarrow|Coproduct|Congruent|varpropto|complexes|gvertneqq|LeftArrow|LessTilde|supseteqq|MinusPlus|CircleDot|nleqslant|NotExists|gtreqless|nparallel|UnionPlus|LeftFloor|checkmark|CenterDot|centerdot|Mellintrf|gtrapprox|bigotimes|OverBrace|spadesuit|therefore|pitchfork|rationals|PlusMinus|Backslash|Therefore|DownBreve|backsimeq|backprime|DownArrow|nshortmid|Downarrow|lvertneqq|eqvparsl|imagline|imagpart|infintie|integers|Integral|intercal|LessLess|Uarrocir|intlarhk|sqsupset|angmsdaf|sqsubset|llcorner|vartheta|cupbrcap|lnapprox|Superset|SuchThat|succnsim|succneqq|angmsdag|biguplus|curlyvee|trpezium|Succeeds|NotTilde|bigwedge|angmsdah|angrtvbd|triminus|cwconint|fpartint|lrcorner|smeparsl|subseteq|urcorner|lurdshar|laemptyv|DDotrahd|approxeq|ldrushar|awconint|mapstoup|backcong|shortmid|triangle|geqslant|gesdotol|timesbar|circledR|circledS|setminus|multimap|naturals|scpolint|ncongdot|RightTee|boxminus|gnapprox|boxtimes|andslope|thicksim|angmsdaa|varsigma|cirfnint|rtriltri|angmsdab|rppolint|angmsdac|barwedge|drbkarow|clubsuit|thetasym|bsolhsub|capbrcup|dzigrarr|doteqdot|DotEqual|dotminus|UnderBar|NotEqual|realpart|otimesas|ulcorner|hksearow|hkswarow|parallel|PartialD|elinters|emptyset|plusacir|bbrktbrk|angmsdad|pointint|bigoplus|angmsdae|Precedes|bigsqcup|varkappa|notindot|supseteq|precneqq|precnsim|profalar|profline|profsurf|leqslant|lesdotor|raemptyv|subplus|notnivb|notnivc|subrarr|zigrarr|vzigzag|submult|subedot|Element|between|cirscir|larrbfs|larrsim|lotimes|lbrksld|lbrkslu|lozenge|ldrdhar|dbkarow|bigcirc|epsilon|simrarr|simplus|ltquest|Epsilon|luruhar|gtquest|maltese|npolint|eqcolon|npreceq|bigodot|ddagger|gtrless|bnequiv|harrcir|ddotseq|equivDD|backsim|demptyv|nsqsube|nsqsupe|Upsilon|nsubset|upsilon|minusdu|nsucceq|swarrow|nsupset|coloneq|searrow|boxplus|napprox|natural|asympeq|alefsym|congdot|nearrow|bigstar|diamond|supplus|tritime|LeftTee|nvinfin|triplus|NewLine|nvltrie|nvrtrie|nwarrow|nexists|Diamond|ruluhar|Implies|supmult|angzarr|suplarr|suphsub|questeq|because|digamma|Because|olcross|bemptyv|omicron|Omicron|rotimes|NoBreak|intprod|angrtvb|orderof|uwangle|suphsol|lesdoto|orslope|DownTee|realine|cudarrl|rdldhar|OverBar|supedot|lessdot|supdsub|topfork|succsim|rbrkslu|rbrksld|pertenk|cudarrr|isindot|planckh|lessgtr|pluscir|gesdoto|plussim|plustwo|lesssim|cularrp|rarrsim|Cayleys|notinva|notinvb|notinvc|UpArrow|Uparrow|uparrow|NotLess|dwangle|precsim|Product|curarrm|Cconint|dotplus|rarrbfs|ccupssm|Cedilla|cemptyv|notniva|quatint|frac35|frac38|frac45|frac56|frac58|frac78|tridot|xoplus|gacute|gammad|Gammad|lfisht|lfloor|bigcup|sqsupe|gbreve|Gbreve|lharul|sqsube|sqcups|Gcedil|apacir|llhard|lmidot|Lmidot|lmoust|andand|sqcaps|approx|Abreve|spades|circeq|tprime|divide|topcir|Assign|topbot|gesdot|divonx|xuplus|timesd|gesles|atilde|solbar|SOFTcy|loplus|timesb|lowast|lowbar|dlcorn|dlcrop|softcy|dollar|lparlt|thksim|lrhard|Atilde|lsaquo|smashp|bigvee|thinsp|wreath|bkarow|lsquor|lstrok|Lstrok|lthree|ltimes|ltlarr|DotDot|simdot|ltrPar|weierp|xsqcup|angmsd|sigmav|sigmaf|zeetrf|Zcaron|zcaron|mapsto|vsupne|thetav|cirmid|marker|mcomma|Zacute|vsubnE|there4|gtlPar|vsubne|bottom|gtrarr|SHCHcy|shchcy|midast|midcir|middot|minusb|minusd|gtrdot|bowtie|sfrown|mnplus|models|colone|seswar|Colone|mstpos|searhk|gtrsim|nacute|Nacute|boxbox|telrec|hairsp|Tcedil|nbumpe|scnsim|ncaron|Ncaron|ncedil|Ncedil|hamilt|Scedil|nearhk|hardcy|HARDcy|tcedil|Tcaron|commat|nequiv|nesear|tcaron|target|hearts|nexist|varrho|scedil|Scaron|scaron|hellip|Sacute|sacute|hercon|swnwar|compfn|rtimes|rthree|rsquor|rsaquo|zacute|wedgeq|homtht|barvee|barwed|Barwed|rpargt|horbar|conint|swarhk|roplus|nltrie|hslash|hstrok|Hstrok|rmoust|Conint|bprime|hybull|hyphen|iacute|Iacute|supsup|supsub|supsim|varphi|coprod|brvbar|agrave|Supset|supset|igrave|Igrave|notinE|Agrave|iiiint|iinfin|copysr|wedbar|Verbar|vangrt|becaus|incare|verbar|inodot|bullet|drcorn|intcal|drcrop|cularr|vellip|Utilde|bumpeq|cupcap|dstrok|Dstrok|CupCap|cupcup|cupdot|eacute|Eacute|supdot|iquest|easter|ecaron|Ecaron|ecolon|isinsv|utilde|itilde|Itilde|curarr|succeq|Bumpeq|cacute|ulcrop|nparsl|Cacute|nprcue|egrave|Egrave|nrarrc|nrarrw|subsup|subsub|nrtrie|jsercy|nsccue|Jsercy|kappav|kcedil|Kcedil|subsim|ulcorn|nsimeq|egsdot|veebar|kgreen|capand|elsdot|Subset|subset|curren|aacute|lacute|Lacute|emptyv|ntilde|Ntilde|lagran|lambda|Lambda|capcap|Ugrave|langle|subdot|emsp13|numero|emsp14|nvdash|nvDash|nVdash|nVDash|ugrave|ufisht|nvHarr|larrfs|nvlArr|larrhk|larrlp|larrpl|nvrArr|Udblac|nwarhk|larrtl|nwnear|oacute|Oacute|latail|lAtail|sstarf|lbrace|odblac|Odblac|lbrack|udblac|odsold|eparsl|lcaron|Lcaron|ograve|Ograve|lcedil|Lcedil|Aacute|ssmile|ssetmn|squarf|ldquor|capcup|ominus|cylcty|rharul|eqcirc|dagger|rfloor|rfisht|Dagger|daleth|equals|origof|capdot|equest|dcaron|Dcaron|rdquor|oslash|Oslash|otilde|Otilde|otimes|Otimes|urcrop|Ubreve|ubreve|Yacute|Uacute|uacute|Rcedil|rcedil|urcorn|parsim|Rcaron|Vdashl|rcaron|Tstrok|percnt|period|permil|Exists|yacute|rbrack|rbrace|phmmat|ccaron|Ccaron|planck|ccedil|plankv|tstrok|female|plusdo|plusdu|ffilig|plusmn|ffllig|Ccedil|rAtail|dfisht|bernou|ratail|Rarrtl|rarrtl|angsph|rarrpl|rarrlp|rarrhk|xwedge|xotime|forall|ForAll|Vvdash|vsupnE|preceq|bigcap|frac12|frac13|frac14|primes|rarrfs|prnsim|frac15|Square|frac16|square|lesdot|frac18|frac23|propto|prurel|rarrap|rangle|puncsp|frac25|Racute|qprime|racute|lesges|frac34|abreve|AElig|eqsim|utdot|setmn|urtri|Equal|Uring|seArr|uring|searr|dashv|Dashv|mumap|nabla|iogon|Iogon|sdote|sdotb|scsim|napid|napos|equiv|natur|Acirc|dblac|erarr|nbump|iprod|erDot|ucirc|awint|esdot|angrt|ncong|isinE|scnap|Scirc|scirc|ndash|isins|Ubrcy|nearr|neArr|isinv|nedot|ubrcy|acute|Ycirc|iukcy|Iukcy|xutri|nesim|caret|jcirc|Jcirc|caron|twixt|ddarr|sccue|exist|jmath|sbquo|ngeqq|angst|ccaps|lceil|ngsim|UpTee|delta|Delta|rtrif|nharr|nhArr|nhpar|rtrie|jukcy|Jukcy|kappa|rsquo|Kappa|nlarr|nlArr|TSHcy|rrarr|aogon|Aogon|fflig|xrarr|tshcy|ccirc|nleqq|filig|upsih|nless|dharl|nlsim|fjlig|ropar|nltri|dharr|robrk|roarr|fllig|fltns|roang|rnmid|subnE|subne|lAarr|trisb|Ccirc|acirc|ccups|blank|VDash|forkv|Vdash|langd|cedil|blk12|blk14|laquo|strns|diams|notin|vDash|larrb|blk34|block|disin|uplus|vdash|vBarv|aelig|starf|Wedge|check|xrArr|lates|lbarr|lBarr|notni|lbbrk|bcong|frasl|lbrke|frown|vrtri|vprop|vnsup|gamma|Gamma|wedge|xodot|bdquo|srarr|doteq|ldquo|boxdl|boxdL|gcirc|Gcirc|boxDl|boxDL|boxdr|boxdR|boxDr|TRADE|trade|rlhar|boxDR|vnsub|npart|vltri|rlarr|boxhd|boxhD|nprec|gescc|nrarr|nrArr|boxHd|boxHD|boxhu|boxhU|nrtri|boxHu|clubs|boxHU|times|colon|Colon|gimel|xlArr|Tilde|nsime|tilde|nsmid|nspar|THORN|thorn|xlarr|nsube|nsubE|thkap|xhArr|comma|nsucc|boxul|boxuL|nsupe|nsupE|gneqq|gnsim|boxUl|boxUL|grave|boxur|boxuR|boxUr|boxUR|lescc|angle|bepsi|boxvh|varpi|boxvH|numsp|Theta|gsime|gsiml|theta|boxVh|boxVH|boxvl|gtcir|gtdot|boxvL|boxVl|boxVL|crarr|cross|Cross|nvsim|boxvr|nwarr|nwArr|sqsup|dtdot|Uogon|lhard|lharu|dtrif|ocirc|Ocirc|lhblk|duarr|odash|sqsub|Hacek|sqcup|llarr|duhar|oelig|OElig|ofcir|boxvR|uogon|lltri|boxVr|csube|uuarr|ohbar|csupe|ctdot|olarr|olcir|harrw|oline|sqcap|omacr|Omacr|omega|Omega|boxVR|aleph|lneqq|lnsim|loang|loarr|rharu|lobrk|hcirc|operp|oplus|rhard|Hcirc|orarr|Union|order|ecirc|Ecirc|cuepr|szlig|cuesc|breve|reals|eDDot|Breve|hoarr|lopar|utrif|rdquo|Umacr|umacr|efDot|swArr|ultri|alpha|rceil|ovbar|swarr|Wcirc|wcirc|smtes|smile|bsemi|lrarr|aring|parsl|lrhar|bsime|uhblk|lrtri|cupor|Aring|uharr|uharl|slarr|rbrke|bsolb|lsime|rbbrk|RBarr|lsimg|phone|rBarr|rbarr|icirc|lsquo|Icirc|emacr|Emacr|ratio|simne|plusb|simlE|simgE|simeq|pluse|ltcir|ltdot|empty|xharr|xdtri|iexcl|Alpha|ltrie|rarrw|pound|ltrif|xcirc|bumpe|prcue|bumpE|asymp|amacr|cuvee|Sigma|sigma|iiint|udhar|iiota|ijlig|IJlig|supnE|imacr|Imacr|prime|Prime|image|prnap|eogon|Eogon|rarrc|mdash|mDDot|cuwed|imath|supne|imped|Amacr|udarr|prsim|micro|rarrb|cwint|raquo|infin|eplus|range|rangd|Ucirc|radic|minus|amalg|veeeq|rAarr|epsiv|ycirc|quest|sharp|quot|zwnj|Qscr|race|qscr|Qopf|qopf|qint|rang|Rang|Zscr|zscr|Zopf|zopf|rarr|rArr|Rarr|Pscr|pscr|prop|prod|prnE|prec|ZHcy|zhcy|prap|Zeta|zeta|Popf|popf|Zdot|plus|zdot|Yuml|yuml|phiv|YUcy|yucy|Yscr|yscr|perp|Yopf|yopf|part|para|YIcy|Ouml|rcub|yicy|YAcy|rdca|ouml|osol|Oscr|rdsh|yacy|real|oscr|xvee|andd|rect|andv|Xscr|oror|ordm|ordf|xscr|ange|aopf|Aopf|rHar|Xopf|opar|Oopf|xopf|xnis|rhov|oopf|omid|xmap|oint|apid|apos|ogon|ascr|Ascr|odot|odiv|xcup|xcap|ocir|oast|nvlt|nvle|nvgt|nvge|nvap|Wscr|wscr|auml|ntlg|ntgl|nsup|nsub|nsim|Nscr|nscr|nsce|Wopf|ring|npre|wopf|npar|Auml|Barv|bbrk|Nopf|nopf|nmid|nLtv|beta|ropf|Ropf|Beta|beth|nles|rpar|nleq|bnot|bNot|nldr|NJcy|rscr|Rscr|Vscr|vscr|rsqb|njcy|bopf|nisd|Bopf|rtri|Vopf|nGtv|ngtr|vopf|boxh|boxH|boxv|nges|ngeq|boxV|bscr|scap|Bscr|bsim|Vert|vert|bsol|bull|bump|caps|cdot|ncup|scnE|ncap|nbsp|napE|Cdot|cent|sdot|Vbar|nang|vBar|chcy|Mscr|mscr|sect|semi|CHcy|Mopf|mopf|sext|circ|cire|mldr|mlcp|cirE|comp|shcy|SHcy|vArr|varr|cong|copf|Copf|copy|COPY|malt|male|macr|lvnE|cscr|ltri|sime|ltcc|simg|Cscr|siml|csub|Uuml|lsqb|lsim|uuml|csup|Lscr|lscr|utri|smid|lpar|cups|smte|lozf|darr|Lopf|Uscr|solb|lopf|sopf|Sopf|lneq|uscr|spar|dArr|lnap|Darr|dash|Sqrt|LJcy|ljcy|lHar|dHar|Upsi|upsi|diam|lesg|djcy|DJcy|leqq|dopf|Dopf|dscr|Dscr|dscy|ldsh|ldca|squf|DScy|sscr|Sscr|dsol|lcub|late|star|Star|Uopf|Larr|lArr|larr|uopf|dtri|dzcy|sube|subE|Lang|lang|Kscr|kscr|Kopf|kopf|KJcy|kjcy|KHcy|khcy|DZcy|ecir|edot|eDot|Jscr|jscr|succ|Jopf|jopf|Edot|uHar|emsp|ensp|Iuml|iuml|eopf|isin|Iscr|iscr|Eopf|epar|sung|epsi|escr|sup1|sup2|sup3|Iota|iota|supe|supE|Iopf|iopf|IOcy|iocy|Escr|esim|Esim|imof|Uarr|QUOT|uArr|uarr|euml|IEcy|iecy|Idot|Euml|euro|excl|Hscr|hscr|Hopf|hopf|TScy|tscy|Tscr|hbar|tscr|flat|tbrk|fnof|hArr|harr|half|fopf|Fopf|tdot|gvnE|fork|trie|gtcc|fscr|Fscr|gdot|gsim|Gscr|gscr|Gopf|gopf|gneq|Gdot|tosa|gnap|Topf|topf|geqq|toea|GJcy|gjcy|tint|gesl|mid|Sfr|ggg|top|ges|gla|glE|glj|geq|gne|gEl|gel|gnE|Gcy|gcy|gap|Tfr|tfr|Tcy|tcy|Hat|Tau|Ffr|tau|Tab|hfr|Hfr|ffr|Fcy|fcy|icy|Icy|iff|ETH|eth|ifr|Ifr|Eta|eta|int|Int|Sup|sup|ucy|Ucy|Sum|sum|jcy|ENG|ufr|Ufr|eng|Jcy|jfr|els|ell|egs|Efr|efr|Jfr|uml|kcy|Kcy|Ecy|ecy|kfr|Kfr|lap|Sub|sub|lat|lcy|Lcy|leg|Dot|dot|lEg|leq|les|squ|div|die|lfr|Lfr|lgE|Dfr|dfr|Del|deg|Dcy|dcy|lne|lnE|sol|loz|smt|Cup|lrm|cup|lsh|Lsh|sim|shy|map|Map|mcy|Mcy|mfr|Mfr|mho|gfr|Gfr|sfr|cir|Chi|chi|nap|Cfr|vcy|Vcy|cfr|Scy|scy|ncy|Ncy|vee|Vee|Cap|cap|nfr|scE|sce|Nfr|nge|ngE|nGg|vfr|Vfr|ngt|bot|nGt|nis|niv|Rsh|rsh|nle|nlE|bne|Bfr|bfr|nLl|nlt|nLt|Bcy|bcy|not|Not|rlm|wfr|Wfr|npr|nsc|num|ocy|ast|Ocy|ofr|xfr|Xfr|Ofr|ogt|ohm|apE|olt|Rho|ape|rho|Rfr|rfr|ord|REG|ang|reg|orv|And|and|AMP|Rcy|amp|Afr|ycy|Ycy|yen|yfr|Yfr|rcy|par|pcy|Pcy|pfr|Pfr|phi|Phi|afr|Acy|acy|zcy|Zcy|piv|acE|acd|zfr|Zfr|pre|prE|psi|Psi|qfr|Qfr|zwj|Or|ge|Gg|gt|gg|el|oS|lt|Lt|LT|Re|lg|gl|eg|ne|Im|it|le|DD|wp|wr|nu|Nu|dd|lE|Sc|sc|pi|Pi|ee|af|ll|Ll|rx|gE|xi|pm|Xi|ic|pr|Pr|in|ni|mp|mu|ac|Mu|or|ap|Gt|GT|ii);|&(Aacute|Agrave|Atilde|Ccedil|Eacute|Egrave|Iacute|Igrave|Ntilde|Oacute|Ograve|Oslash|Otilde|Uacute|Ugrave|Yacute|aacute|agrave|atilde|brvbar|ccedil|curren|divide|eacute|egrave|frac12|frac14|frac34|iacute|igrave|iquest|middot|ntilde|oacute|ograve|oslash|otilde|plusmn|uacute|ugrave|yacute|AElig|Acirc|Aring|Ecirc|Icirc|Ocirc|THORN|Ucirc|acirc|acute|aelig|aring|cedil|ecirc|icirc|iexcl|laquo|micro|ocirc|pound|raquo|szlig|thorn|times|ucirc|Auml|COPY|Euml|Iuml|Ouml|QUOT|Uuml|auml|cent|copy|euml|iuml|macr|nbsp|ordf|ordm|ouml|para|quot|sect|sup1|sup2|sup3|uuml|yuml|AMP|ETH|REG|amp|deg|eth|not|reg|shy|uml|yen|GT|LT|gt|lt)(?!;)([=a-zA-Z0-9]?)|&#([0-9]+)(;?)|&#[xX]([a-fA-F0-9]+)(;?)|&([0-9a-zA-Z]+)/g;
			var decodeMap = {
				'aacute': '\xE1',
				'Aacute': '\xC1',
				'abreve': "\u0103",
				'Abreve': "\u0102",
				'ac': "\u223E",
				'acd': "\u223F",
				'acE': "\u223E\u0333",
				'acirc': '\xE2',
				'Acirc': '\xC2',
				'acute': '\xB4',
				'acy': "\u0430",
				'Acy': "\u0410",
				'aelig': '\xE6',
				'AElig': '\xC6',
				'af': "\u2061",
				'afr': "\uD835\uDD1E",
				'Afr': "\uD835\uDD04",
				'agrave': '\xE0',
				'Agrave': '\xC0',
				'alefsym': "\u2135",
				'aleph': "\u2135",
				'alpha': "\u03B1",
				'Alpha': "\u0391",
				'amacr': "\u0101",
				'Amacr': "\u0100",
				'amalg': "\u2A3F",
				'amp': '&',
				'AMP': '&',
				'and': "\u2227",
				'And': "\u2A53",
				'andand': "\u2A55",
				'andd': "\u2A5C",
				'andslope': "\u2A58",
				'andv': "\u2A5A",
				'ang': "\u2220",
				'ange': "\u29A4",
				'angle': "\u2220",
				'angmsd': "\u2221",
				'angmsdaa': "\u29A8",
				'angmsdab': "\u29A9",
				'angmsdac': "\u29AA",
				'angmsdad': "\u29AB",
				'angmsdae': "\u29AC",
				'angmsdaf': "\u29AD",
				'angmsdag': "\u29AE",
				'angmsdah': "\u29AF",
				'angrt': "\u221F",
				'angrtvb': "\u22BE",
				'angrtvbd': "\u299D",
				'angsph': "\u2222",
				'angst': '\xC5',
				'angzarr': "\u237C",
				'aogon': "\u0105",
				'Aogon': "\u0104",
				'aopf': "\uD835\uDD52",
				'Aopf': "\uD835\uDD38",
				'ap': "\u2248",
				'apacir': "\u2A6F",
				'ape': "\u224A",
				'apE': "\u2A70",
				'apid': "\u224B",
				'apos': '\'',
				'ApplyFunction': "\u2061",
				'approx': "\u2248",
				'approxeq': "\u224A",
				'aring': '\xE5',
				'Aring': '\xC5',
				'ascr': "\uD835\uDCB6",
				'Ascr': "\uD835\uDC9C",
				'Assign': "\u2254",
				'ast': '*',
				'asymp': "\u2248",
				'asympeq': "\u224D",
				'atilde': '\xE3',
				'Atilde': '\xC3',
				'auml': '\xE4',
				'Auml': '\xC4',
				'awconint': "\u2233",
				'awint': "\u2A11",
				'backcong': "\u224C",
				'backepsilon': "\u03F6",
				'backprime': "\u2035",
				'backsim': "\u223D",
				'backsimeq': "\u22CD",
				'Backslash': "\u2216",
				'Barv': "\u2AE7",
				'barvee': "\u22BD",
				'barwed': "\u2305",
				'Barwed': "\u2306",
				'barwedge': "\u2305",
				'bbrk': "\u23B5",
				'bbrktbrk': "\u23B6",
				'bcong': "\u224C",
				'bcy': "\u0431",
				'Bcy': "\u0411",
				'bdquo': "\u201E",
				'becaus': "\u2235",
				'because': "\u2235",
				'Because': "\u2235",
				'bemptyv': "\u29B0",
				'bepsi': "\u03F6",
				'bernou': "\u212C",
				'Bernoullis': "\u212C",
				'beta': "\u03B2",
				'Beta': "\u0392",
				'beth': "\u2136",
				'between': "\u226C",
				'bfr': "\uD835\uDD1F",
				'Bfr': "\uD835\uDD05",
				'bigcap': "\u22C2",
				'bigcirc': "\u25EF",
				'bigcup': "\u22C3",
				'bigodot': "\u2A00",
				'bigoplus': "\u2A01",
				'bigotimes': "\u2A02",
				'bigsqcup': "\u2A06",
				'bigstar': "\u2605",
				'bigtriangledown': "\u25BD",
				'bigtriangleup': "\u25B3",
				'biguplus': "\u2A04",
				'bigvee': "\u22C1",
				'bigwedge': "\u22C0",
				'bkarow': "\u290D",
				'blacklozenge': "\u29EB",
				'blacksquare': "\u25AA",
				'blacktriangle': "\u25B4",
				'blacktriangledown': "\u25BE",
				'blacktriangleleft': "\u25C2",
				'blacktriangleright': "\u25B8",
				'blank': "\u2423",
				'blk12': "\u2592",
				'blk14': "\u2591",
				'blk34': "\u2593",
				'block': "\u2588",
				'bne': "=\u20E5",
				'bnequiv': "\u2261\u20E5",
				'bnot': "\u2310",
				'bNot': "\u2AED",
				'bopf': "\uD835\uDD53",
				'Bopf': "\uD835\uDD39",
				'bot': "\u22A5",
				'bottom': "\u22A5",
				'bowtie': "\u22C8",
				'boxbox': "\u29C9",
				'boxdl': "\u2510",
				'boxdL': "\u2555",
				'boxDl': "\u2556",
				'boxDL': "\u2557",
				'boxdr': "\u250C",
				'boxdR': "\u2552",
				'boxDr': "\u2553",
				'boxDR': "\u2554",
				'boxh': "\u2500",
				'boxH': "\u2550",
				'boxhd': "\u252C",
				'boxhD': "\u2565",
				'boxHd': "\u2564",
				'boxHD': "\u2566",
				'boxhu': "\u2534",
				'boxhU': "\u2568",
				'boxHu': "\u2567",
				'boxHU': "\u2569",
				'boxminus': "\u229F",
				'boxplus': "\u229E",
				'boxtimes': "\u22A0",
				'boxul': "\u2518",
				'boxuL': "\u255B",
				'boxUl': "\u255C",
				'boxUL': "\u255D",
				'boxur': "\u2514",
				'boxuR': "\u2558",
				'boxUr': "\u2559",
				'boxUR': "\u255A",
				'boxv': "\u2502",
				'boxV': "\u2551",
				'boxvh': "\u253C",
				'boxvH': "\u256A",
				'boxVh': "\u256B",
				'boxVH': "\u256C",
				'boxvl': "\u2524",
				'boxvL': "\u2561",
				'boxVl': "\u2562",
				'boxVL': "\u2563",
				'boxvr': "\u251C",
				'boxvR': "\u255E",
				'boxVr': "\u255F",
				'boxVR': "\u2560",
				'bprime': "\u2035",
				'breve': "\u02D8",
				'Breve': "\u02D8",
				'brvbar': '\xA6',
				'bscr': "\uD835\uDCB7",
				'Bscr': "\u212C",
				'bsemi': "\u204F",
				'bsim': "\u223D",
				'bsime': "\u22CD",
				'bsol': '\\',
				'bsolb': "\u29C5",
				'bsolhsub': "\u27C8",
				'bull': "\u2022",
				'bullet': "\u2022",
				'bump': "\u224E",
				'bumpe': "\u224F",
				'bumpE': "\u2AAE",
				'bumpeq': "\u224F",
				'Bumpeq': "\u224E",
				'cacute': "\u0107",
				'Cacute': "\u0106",
				'cap': "\u2229",
				'Cap': "\u22D2",
				'capand': "\u2A44",
				'capbrcup': "\u2A49",
				'capcap': "\u2A4B",
				'capcup': "\u2A47",
				'capdot': "\u2A40",
				'CapitalDifferentialD': "\u2145",
				'caps': "\u2229\uFE00",
				'caret': "\u2041",
				'caron': "\u02C7",
				'Cayleys': "\u212D",
				'ccaps': "\u2A4D",
				'ccaron': "\u010D",
				'Ccaron': "\u010C",
				'ccedil': '\xE7',
				'Ccedil': '\xC7',
				'ccirc': "\u0109",
				'Ccirc': "\u0108",
				'Cconint': "\u2230",
				'ccups': "\u2A4C",
				'ccupssm': "\u2A50",
				'cdot': "\u010B",
				'Cdot': "\u010A",
				'cedil': '\xB8',
				'Cedilla': '\xB8',
				'cemptyv': "\u29B2",
				'cent': '\xA2',
				'centerdot': '\xB7',
				'CenterDot': '\xB7',
				'cfr': "\uD835\uDD20",
				'Cfr': "\u212D",
				'chcy': "\u0447",
				'CHcy': "\u0427",
				'check': "\u2713",
				'checkmark': "\u2713",
				'chi': "\u03C7",
				'Chi': "\u03A7",
				'cir': "\u25CB",
				'circ': "\u02C6",
				'circeq': "\u2257",
				'circlearrowleft': "\u21BA",
				'circlearrowright': "\u21BB",
				'circledast': "\u229B",
				'circledcirc': "\u229A",
				'circleddash': "\u229D",
				'CircleDot': "\u2299",
				'circledR': '\xAE',
				'circledS': "\u24C8",
				'CircleMinus': "\u2296",
				'CirclePlus': "\u2295",
				'CircleTimes': "\u2297",
				'cire': "\u2257",
				'cirE': "\u29C3",
				'cirfnint': "\u2A10",
				'cirmid': "\u2AEF",
				'cirscir': "\u29C2",
				'ClockwiseContourIntegral': "\u2232",
				'CloseCurlyDoubleQuote': "\u201D",
				'CloseCurlyQuote': "\u2019",
				'clubs': "\u2663",
				'clubsuit': "\u2663",
				'colon': ':',
				'Colon': "\u2237",
				'colone': "\u2254",
				'Colone': "\u2A74",
				'coloneq': "\u2254",
				'comma': ',',
				'commat': '@',
				'comp': "\u2201",
				'compfn': "\u2218",
				'complement': "\u2201",
				'complexes': "\u2102",
				'cong': "\u2245",
				'congdot': "\u2A6D",
				'Congruent': "\u2261",
				'conint': "\u222E",
				'Conint': "\u222F",
				'ContourIntegral': "\u222E",
				'copf': "\uD835\uDD54",
				'Copf': "\u2102",
				'coprod': "\u2210",
				'Coproduct': "\u2210",
				'copy': '\xA9',
				'COPY': '\xA9',
				'copysr': "\u2117",
				'CounterClockwiseContourIntegral': "\u2233",
				'crarr': "\u21B5",
				'cross': "\u2717",
				'Cross': "\u2A2F",
				'cscr': "\uD835\uDCB8",
				'Cscr': "\uD835\uDC9E",
				'csub': "\u2ACF",
				'csube': "\u2AD1",
				'csup': "\u2AD0",
				'csupe': "\u2AD2",
				'ctdot': "\u22EF",
				'cudarrl': "\u2938",
				'cudarrr': "\u2935",
				'cuepr': "\u22DE",
				'cuesc': "\u22DF",
				'cularr': "\u21B6",
				'cularrp': "\u293D",
				'cup': "\u222A",
				'Cup': "\u22D3",
				'cupbrcap': "\u2A48",
				'cupcap': "\u2A46",
				'CupCap': "\u224D",
				'cupcup': "\u2A4A",
				'cupdot': "\u228D",
				'cupor': "\u2A45",
				'cups': "\u222A\uFE00",
				'curarr': "\u21B7",
				'curarrm': "\u293C",
				'curlyeqprec': "\u22DE",
				'curlyeqsucc': "\u22DF",
				'curlyvee': "\u22CE",
				'curlywedge': "\u22CF",
				'curren': '\xA4',
				'curvearrowleft': "\u21B6",
				'curvearrowright': "\u21B7",
				'cuvee': "\u22CE",
				'cuwed': "\u22CF",
				'cwconint': "\u2232",
				'cwint': "\u2231",
				'cylcty': "\u232D",
				'dagger': "\u2020",
				'Dagger': "\u2021",
				'daleth': "\u2138",
				'darr': "\u2193",
				'dArr': "\u21D3",
				'Darr': "\u21A1",
				'dash': "\u2010",
				'dashv': "\u22A3",
				'Dashv': "\u2AE4",
				'dbkarow': "\u290F",
				'dblac': "\u02DD",
				'dcaron': "\u010F",
				'Dcaron': "\u010E",
				'dcy': "\u0434",
				'Dcy': "\u0414",
				'dd': "\u2146",
				'DD': "\u2145",
				'ddagger': "\u2021",
				'ddarr': "\u21CA",
				'DDotrahd': "\u2911",
				'ddotseq': "\u2A77",
				'deg': '\xB0',
				'Del': "\u2207",
				'delta': "\u03B4",
				'Delta': "\u0394",
				'demptyv': "\u29B1",
				'dfisht': "\u297F",
				'dfr': "\uD835\uDD21",
				'Dfr': "\uD835\uDD07",
				'dHar': "\u2965",
				'dharl': "\u21C3",
				'dharr': "\u21C2",
				'DiacriticalAcute': '\xB4',
				'DiacriticalDot': "\u02D9",
				'DiacriticalDoubleAcute': "\u02DD",
				'DiacriticalGrave': '`',
				'DiacriticalTilde': "\u02DC",
				'diam': "\u22C4",
				'diamond': "\u22C4",
				'Diamond': "\u22C4",
				'diamondsuit': "\u2666",
				'diams': "\u2666",
				'die': '\xA8',
				'DifferentialD': "\u2146",
				'digamma': "\u03DD",
				'disin': "\u22F2",
				'div': '\xF7',
				'divide': '\xF7',
				'divideontimes': "\u22C7",
				'divonx': "\u22C7",
				'djcy': "\u0452",
				'DJcy': "\u0402",
				'dlcorn': "\u231E",
				'dlcrop': "\u230D",
				'dollar': '$',
				'dopf': "\uD835\uDD55",
				'Dopf': "\uD835\uDD3B",
				'dot': "\u02D9",
				'Dot': '\xA8',
				'DotDot': "\u20DC",
				'doteq': "\u2250",
				'doteqdot': "\u2251",
				'DotEqual': "\u2250",
				'dotminus': "\u2238",
				'dotplus': "\u2214",
				'dotsquare': "\u22A1",
				'doublebarwedge': "\u2306",
				'DoubleContourIntegral': "\u222F",
				'DoubleDot': '\xA8',
				'DoubleDownArrow': "\u21D3",
				'DoubleLeftArrow': "\u21D0",
				'DoubleLeftRightArrow': "\u21D4",
				'DoubleLeftTee': "\u2AE4",
				'DoubleLongLeftArrow': "\u27F8",
				'DoubleLongLeftRightArrow': "\u27FA",
				'DoubleLongRightArrow': "\u27F9",
				'DoubleRightArrow': "\u21D2",
				'DoubleRightTee': "\u22A8",
				'DoubleUpArrow': "\u21D1",
				'DoubleUpDownArrow': "\u21D5",
				'DoubleVerticalBar': "\u2225",
				'downarrow': "\u2193",
				'Downarrow': "\u21D3",
				'DownArrow': "\u2193",
				'DownArrowBar': "\u2913",
				'DownArrowUpArrow': "\u21F5",
				'DownBreve': "\u0311",
				'downdownarrows': "\u21CA",
				'downharpoonleft': "\u21C3",
				'downharpoonright': "\u21C2",
				'DownLeftRightVector': "\u2950",
				'DownLeftTeeVector': "\u295E",
				'DownLeftVector': "\u21BD",
				'DownLeftVectorBar': "\u2956",
				'DownRightTeeVector': "\u295F",
				'DownRightVector': "\u21C1",
				'DownRightVectorBar': "\u2957",
				'DownTee': "\u22A4",
				'DownTeeArrow': "\u21A7",
				'drbkarow': "\u2910",
				'drcorn': "\u231F",
				'drcrop': "\u230C",
				'dscr': "\uD835\uDCB9",
				'Dscr': "\uD835\uDC9F",
				'dscy': "\u0455",
				'DScy': "\u0405",
				'dsol': "\u29F6",
				'dstrok': "\u0111",
				'Dstrok': "\u0110",
				'dtdot': "\u22F1",
				'dtri': "\u25BF",
				'dtrif': "\u25BE",
				'duarr': "\u21F5",
				'duhar': "\u296F",
				'dwangle': "\u29A6",
				'dzcy': "\u045F",
				'DZcy': "\u040F",
				'dzigrarr': "\u27FF",
				'eacute': '\xE9',
				'Eacute': '\xC9',
				'easter': "\u2A6E",
				'ecaron': "\u011B",
				'Ecaron': "\u011A",
				'ecir': "\u2256",
				'ecirc': '\xEA',
				'Ecirc': '\xCA',
				'ecolon': "\u2255",
				'ecy': "\u044D",
				'Ecy': "\u042D",
				'eDDot': "\u2A77",
				'edot': "\u0117",
				'eDot': "\u2251",
				'Edot': "\u0116",
				'ee': "\u2147",
				'efDot': "\u2252",
				'efr': "\uD835\uDD22",
				'Efr': "\uD835\uDD08",
				'eg': "\u2A9A",
				'egrave': '\xE8',
				'Egrave': '\xC8',
				'egs': "\u2A96",
				'egsdot': "\u2A98",
				'el': "\u2A99",
				'Element': "\u2208",
				'elinters': "\u23E7",
				'ell': "\u2113",
				'els': "\u2A95",
				'elsdot': "\u2A97",
				'emacr': "\u0113",
				'Emacr': "\u0112",
				'empty': "\u2205",
				'emptyset': "\u2205",
				'EmptySmallSquare': "\u25FB",
				'emptyv': "\u2205",
				'EmptyVerySmallSquare': "\u25AB",
				'emsp': "\u2003",
				'emsp13': "\u2004",
				'emsp14': "\u2005",
				'eng': "\u014B",
				'ENG': "\u014A",
				'ensp': "\u2002",
				'eogon': "\u0119",
				'Eogon': "\u0118",
				'eopf': "\uD835\uDD56",
				'Eopf': "\uD835\uDD3C",
				'epar': "\u22D5",
				'eparsl': "\u29E3",
				'eplus': "\u2A71",
				'epsi': "\u03B5",
				'epsilon': "\u03B5",
				'Epsilon': "\u0395",
				'epsiv': "\u03F5",
				'eqcirc': "\u2256",
				'eqcolon': "\u2255",
				'eqsim': "\u2242",
				'eqslantgtr': "\u2A96",
				'eqslantless': "\u2A95",
				'Equal': "\u2A75",
				'equals': '=',
				'EqualTilde': "\u2242",
				'equest': "\u225F",
				'Equilibrium': "\u21CC",
				'equiv': "\u2261",
				'equivDD': "\u2A78",
				'eqvparsl': "\u29E5",
				'erarr': "\u2971",
				'erDot': "\u2253",
				'escr': "\u212F",
				'Escr': "\u2130",
				'esdot': "\u2250",
				'esim': "\u2242",
				'Esim': "\u2A73",
				'eta': "\u03B7",
				'Eta': "\u0397",
				'eth': '\xF0',
				'ETH': '\xD0',
				'euml': '\xEB',
				'Euml': '\xCB',
				'euro': "\u20AC",
				'excl': '!',
				'exist': "\u2203",
				'Exists': "\u2203",
				'expectation': "\u2130",
				'exponentiale': "\u2147",
				'ExponentialE': "\u2147",
				'fallingdotseq': "\u2252",
				'fcy': "\u0444",
				'Fcy': "\u0424",
				'female': "\u2640",
				'ffilig': "\uFB03",
				'fflig': "\uFB00",
				'ffllig': "\uFB04",
				'ffr': "\uD835\uDD23",
				'Ffr': "\uD835\uDD09",
				'filig': "\uFB01",
				'FilledSmallSquare': "\u25FC",
				'FilledVerySmallSquare': "\u25AA",
				'fjlig': 'fj',
				'flat': "\u266D",
				'fllig': "\uFB02",
				'fltns': "\u25B1",
				'fnof': "\u0192",
				'fopf': "\uD835\uDD57",
				'Fopf': "\uD835\uDD3D",
				'forall': "\u2200",
				'ForAll': "\u2200",
				'fork': "\u22D4",
				'forkv': "\u2AD9",
				'Fouriertrf': "\u2131",
				'fpartint': "\u2A0D",
				'frac12': '\xBD',
				'frac13': "\u2153",
				'frac14': '\xBC',
				'frac15': "\u2155",
				'frac16': "\u2159",
				'frac18': "\u215B",
				'frac23': "\u2154",
				'frac25': "\u2156",
				'frac34': '\xBE',
				'frac35': "\u2157",
				'frac38': "\u215C",
				'frac45': "\u2158",
				'frac56': "\u215A",
				'frac58': "\u215D",
				'frac78': "\u215E",
				'frasl': "\u2044",
				'frown': "\u2322",
				'fscr': "\uD835\uDCBB",
				'Fscr': "\u2131",
				'gacute': "\u01F5",
				'gamma': "\u03B3",
				'Gamma': "\u0393",
				'gammad': "\u03DD",
				'Gammad': "\u03DC",
				'gap': "\u2A86",
				'gbreve': "\u011F",
				'Gbreve': "\u011E",
				'Gcedil': "\u0122",
				'gcirc': "\u011D",
				'Gcirc': "\u011C",
				'gcy': "\u0433",
				'Gcy': "\u0413",
				'gdot': "\u0121",
				'Gdot': "\u0120",
				'ge': "\u2265",
				'gE': "\u2267",
				'gel': "\u22DB",
				'gEl': "\u2A8C",
				'geq': "\u2265",
				'geqq': "\u2267",
				'geqslant': "\u2A7E",
				'ges': "\u2A7E",
				'gescc': "\u2AA9",
				'gesdot': "\u2A80",
				'gesdoto': "\u2A82",
				'gesdotol': "\u2A84",
				'gesl': "\u22DB\uFE00",
				'gesles': "\u2A94",
				'gfr': "\uD835\uDD24",
				'Gfr': "\uD835\uDD0A",
				'gg': "\u226B",
				'Gg': "\u22D9",
				'ggg': "\u22D9",
				'gimel': "\u2137",
				'gjcy': "\u0453",
				'GJcy': "\u0403",
				'gl': "\u2277",
				'gla': "\u2AA5",
				'glE': "\u2A92",
				'glj': "\u2AA4",
				'gnap': "\u2A8A",
				'gnapprox': "\u2A8A",
				'gne': "\u2A88",
				'gnE': "\u2269",
				'gneq': "\u2A88",
				'gneqq': "\u2269",
				'gnsim': "\u22E7",
				'gopf': "\uD835\uDD58",
				'Gopf': "\uD835\uDD3E",
				'grave': '`',
				'GreaterEqual': "\u2265",
				'GreaterEqualLess': "\u22DB",
				'GreaterFullEqual': "\u2267",
				'GreaterGreater': "\u2AA2",
				'GreaterLess': "\u2277",
				'GreaterSlantEqual': "\u2A7E",
				'GreaterTilde': "\u2273",
				'gscr': "\u210A",
				'Gscr': "\uD835\uDCA2",
				'gsim': "\u2273",
				'gsime': "\u2A8E",
				'gsiml': "\u2A90",
				'gt': '>',
				'Gt': "\u226B",
				'GT': '>',
				'gtcc': "\u2AA7",
				'gtcir': "\u2A7A",
				'gtdot': "\u22D7",
				'gtlPar': "\u2995",
				'gtquest': "\u2A7C",
				'gtrapprox': "\u2A86",
				'gtrarr': "\u2978",
				'gtrdot': "\u22D7",
				'gtreqless': "\u22DB",
				'gtreqqless': "\u2A8C",
				'gtrless': "\u2277",
				'gtrsim': "\u2273",
				'gvertneqq': "\u2269\uFE00",
				'gvnE': "\u2269\uFE00",
				'Hacek': "\u02C7",
				'hairsp': "\u200A",
				'half': '\xBD',
				'hamilt': "\u210B",
				'hardcy': "\u044A",
				'HARDcy': "\u042A",
				'harr': "\u2194",
				'hArr': "\u21D4",
				'harrcir': "\u2948",
				'harrw': "\u21AD",
				'Hat': '^',
				'hbar': "\u210F",
				'hcirc': "\u0125",
				'Hcirc': "\u0124",
				'hearts': "\u2665",
				'heartsuit': "\u2665",
				'hellip': "\u2026",
				'hercon': "\u22B9",
				'hfr': "\uD835\uDD25",
				'Hfr': "\u210C",
				'HilbertSpace': "\u210B",
				'hksearow': "\u2925",
				'hkswarow': "\u2926",
				'hoarr': "\u21FF",
				'homtht': "\u223B",
				'hookleftarrow': "\u21A9",
				'hookrightarrow': "\u21AA",
				'hopf': "\uD835\uDD59",
				'Hopf': "\u210D",
				'horbar': "\u2015",
				'HorizontalLine': "\u2500",
				'hscr': "\uD835\uDCBD",
				'Hscr': "\u210B",
				'hslash': "\u210F",
				'hstrok': "\u0127",
				'Hstrok': "\u0126",
				'HumpDownHump': "\u224E",
				'HumpEqual': "\u224F",
				'hybull': "\u2043",
				'hyphen': "\u2010",
				'iacute': '\xED',
				'Iacute': '\xCD',
				'ic': "\u2063",
				'icirc': '\xEE',
				'Icirc': '\xCE',
				'icy': "\u0438",
				'Icy': "\u0418",
				'Idot': "\u0130",
				'iecy': "\u0435",
				'IEcy': "\u0415",
				'iexcl': '\xA1',
				'iff': "\u21D4",
				'ifr': "\uD835\uDD26",
				'Ifr': "\u2111",
				'igrave': '\xEC',
				'Igrave': '\xCC',
				'ii': "\u2148",
				'iiiint': "\u2A0C",
				'iiint': "\u222D",
				'iinfin': "\u29DC",
				'iiota': "\u2129",
				'ijlig': "\u0133",
				'IJlig': "\u0132",
				'Im': "\u2111",
				'imacr': "\u012B",
				'Imacr': "\u012A",
				'image': "\u2111",
				'ImaginaryI': "\u2148",
				'imagline': "\u2110",
				'imagpart': "\u2111",
				'imath': "\u0131",
				'imof': "\u22B7",
				'imped': "\u01B5",
				'Implies': "\u21D2",
				'in': "\u2208",
				'incare': "\u2105",
				'infin': "\u221E",
				'infintie': "\u29DD",
				'inodot': "\u0131",
				'int': "\u222B",
				'Int': "\u222C",
				'intcal': "\u22BA",
				'integers': "\u2124",
				'Integral': "\u222B",
				'intercal': "\u22BA",
				'Intersection': "\u22C2",
				'intlarhk': "\u2A17",
				'intprod': "\u2A3C",
				'InvisibleComma': "\u2063",
				'InvisibleTimes': "\u2062",
				'iocy': "\u0451",
				'IOcy': "\u0401",
				'iogon': "\u012F",
				'Iogon': "\u012E",
				'iopf': "\uD835\uDD5A",
				'Iopf': "\uD835\uDD40",
				'iota': "\u03B9",
				'Iota': "\u0399",
				'iprod': "\u2A3C",
				'iquest': '\xBF',
				'iscr': "\uD835\uDCBE",
				'Iscr': "\u2110",
				'isin': "\u2208",
				'isindot': "\u22F5",
				'isinE': "\u22F9",
				'isins': "\u22F4",
				'isinsv': "\u22F3",
				'isinv': "\u2208",
				'it': "\u2062",
				'itilde': "\u0129",
				'Itilde': "\u0128",
				'iukcy': "\u0456",
				'Iukcy': "\u0406",
				'iuml': '\xEF',
				'Iuml': '\xCF',
				'jcirc': "\u0135",
				'Jcirc': "\u0134",
				'jcy': "\u0439",
				'Jcy': "\u0419",
				'jfr': "\uD835\uDD27",
				'Jfr': "\uD835\uDD0D",
				'jmath': "\u0237",
				'jopf': "\uD835\uDD5B",
				'Jopf': "\uD835\uDD41",
				'jscr': "\uD835\uDCBF",
				'Jscr': "\uD835\uDCA5",
				'jsercy': "\u0458",
				'Jsercy': "\u0408",
				'jukcy': "\u0454",
				'Jukcy': "\u0404",
				'kappa': "\u03BA",
				'Kappa': "\u039A",
				'kappav': "\u03F0",
				'kcedil': "\u0137",
				'Kcedil': "\u0136",
				'kcy': "\u043A",
				'Kcy': "\u041A",
				'kfr': "\uD835\uDD28",
				'Kfr': "\uD835\uDD0E",
				'kgreen': "\u0138",
				'khcy': "\u0445",
				'KHcy': "\u0425",
				'kjcy': "\u045C",
				'KJcy': "\u040C",
				'kopf': "\uD835\uDD5C",
				'Kopf': "\uD835\uDD42",
				'kscr': "\uD835\uDCC0",
				'Kscr': "\uD835\uDCA6",
				'lAarr': "\u21DA",
				'lacute': "\u013A",
				'Lacute': "\u0139",
				'laemptyv': "\u29B4",
				'lagran': "\u2112",
				'lambda': "\u03BB",
				'Lambda': "\u039B",
				'lang': "\u27E8",
				'Lang': "\u27EA",
				'langd': "\u2991",
				'langle': "\u27E8",
				'lap': "\u2A85",
				'Laplacetrf': "\u2112",
				'laquo': '\xAB',
				'larr': "\u2190",
				'lArr': "\u21D0",
				'Larr': "\u219E",
				'larrb': "\u21E4",
				'larrbfs': "\u291F",
				'larrfs': "\u291D",
				'larrhk': "\u21A9",
				'larrlp': "\u21AB",
				'larrpl': "\u2939",
				'larrsim': "\u2973",
				'larrtl': "\u21A2",
				'lat': "\u2AAB",
				'latail': "\u2919",
				'lAtail': "\u291B",
				'late': "\u2AAD",
				'lates': "\u2AAD\uFE00",
				'lbarr': "\u290C",
				'lBarr': "\u290E",
				'lbbrk': "\u2772",
				'lbrace': '{',
				'lbrack': '[',
				'lbrke': "\u298B",
				'lbrksld': "\u298F",
				'lbrkslu': "\u298D",
				'lcaron': "\u013E",
				'Lcaron': "\u013D",
				'lcedil': "\u013C",
				'Lcedil': "\u013B",
				'lceil': "\u2308",
				'lcub': '{',
				'lcy': "\u043B",
				'Lcy': "\u041B",
				'ldca': "\u2936",
				'ldquo': "\u201C",
				'ldquor': "\u201E",
				'ldrdhar': "\u2967",
				'ldrushar': "\u294B",
				'ldsh': "\u21B2",
				'le': "\u2264",
				'lE': "\u2266",
				'LeftAngleBracket': "\u27E8",
				'leftarrow': "\u2190",
				'Leftarrow': "\u21D0",
				'LeftArrow': "\u2190",
				'LeftArrowBar': "\u21E4",
				'LeftArrowRightArrow': "\u21C6",
				'leftarrowtail': "\u21A2",
				'LeftCeiling': "\u2308",
				'LeftDoubleBracket': "\u27E6",
				'LeftDownTeeVector': "\u2961",
				'LeftDownVector': "\u21C3",
				'LeftDownVectorBar': "\u2959",
				'LeftFloor': "\u230A",
				'leftharpoondown': "\u21BD",
				'leftharpoonup': "\u21BC",
				'leftleftarrows': "\u21C7",
				'leftrightarrow': "\u2194",
				'Leftrightarrow': "\u21D4",
				'LeftRightArrow': "\u2194",
				'leftrightarrows': "\u21C6",
				'leftrightharpoons': "\u21CB",
				'leftrightsquigarrow': "\u21AD",
				'LeftRightVector': "\u294E",
				'LeftTee': "\u22A3",
				'LeftTeeArrow': "\u21A4",
				'LeftTeeVector': "\u295A",
				'leftthreetimes': "\u22CB",
				'LeftTriangle': "\u22B2",
				'LeftTriangleBar': "\u29CF",
				'LeftTriangleEqual': "\u22B4",
				'LeftUpDownVector': "\u2951",
				'LeftUpTeeVector': "\u2960",
				'LeftUpVector': "\u21BF",
				'LeftUpVectorBar': "\u2958",
				'LeftVector': "\u21BC",
				'LeftVectorBar': "\u2952",
				'leg': "\u22DA",
				'lEg': "\u2A8B",
				'leq': "\u2264",
				'leqq': "\u2266",
				'leqslant': "\u2A7D",
				'les': "\u2A7D",
				'lescc': "\u2AA8",
				'lesdot': "\u2A7F",
				'lesdoto': "\u2A81",
				'lesdotor': "\u2A83",
				'lesg': "\u22DA\uFE00",
				'lesges': "\u2A93",
				'lessapprox': "\u2A85",
				'lessdot': "\u22D6",
				'lesseqgtr': "\u22DA",
				'lesseqqgtr': "\u2A8B",
				'LessEqualGreater': "\u22DA",
				'LessFullEqual': "\u2266",
				'LessGreater': "\u2276",
				'lessgtr': "\u2276",
				'LessLess': "\u2AA1",
				'lesssim': "\u2272",
				'LessSlantEqual': "\u2A7D",
				'LessTilde': "\u2272",
				'lfisht': "\u297C",
				'lfloor': "\u230A",
				'lfr': "\uD835\uDD29",
				'Lfr': "\uD835\uDD0F",
				'lg': "\u2276",
				'lgE': "\u2A91",
				'lHar': "\u2962",
				'lhard': "\u21BD",
				'lharu': "\u21BC",
				'lharul': "\u296A",
				'lhblk': "\u2584",
				'ljcy': "\u0459",
				'LJcy': "\u0409",
				'll': "\u226A",
				'Ll': "\u22D8",
				'llarr': "\u21C7",
				'llcorner': "\u231E",
				'Lleftarrow': "\u21DA",
				'llhard': "\u296B",
				'lltri': "\u25FA",
				'lmidot': "\u0140",
				'Lmidot': "\u013F",
				'lmoust': "\u23B0",
				'lmoustache': "\u23B0",
				'lnap': "\u2A89",
				'lnapprox': "\u2A89",
				'lne': "\u2A87",
				'lnE': "\u2268",
				'lneq': "\u2A87",
				'lneqq': "\u2268",
				'lnsim': "\u22E6",
				'loang': "\u27EC",
				'loarr': "\u21FD",
				'lobrk': "\u27E6",
				'longleftarrow': "\u27F5",
				'Longleftarrow': "\u27F8",
				'LongLeftArrow': "\u27F5",
				'longleftrightarrow': "\u27F7",
				'Longleftrightarrow': "\u27FA",
				'LongLeftRightArrow': "\u27F7",
				'longmapsto': "\u27FC",
				'longrightarrow': "\u27F6",
				'Longrightarrow': "\u27F9",
				'LongRightArrow': "\u27F6",
				'looparrowleft': "\u21AB",
				'looparrowright': "\u21AC",
				'lopar': "\u2985",
				'lopf': "\uD835\uDD5D",
				'Lopf': "\uD835\uDD43",
				'loplus': "\u2A2D",
				'lotimes': "\u2A34",
				'lowast': "\u2217",
				'lowbar': '_',
				'LowerLeftArrow': "\u2199",
				'LowerRightArrow': "\u2198",
				'loz': "\u25CA",
				'lozenge': "\u25CA",
				'lozf': "\u29EB",
				'lpar': '(',
				'lparlt': "\u2993",
				'lrarr': "\u21C6",
				'lrcorner': "\u231F",
				'lrhar': "\u21CB",
				'lrhard': "\u296D",
				'lrm': "\u200E",
				'lrtri': "\u22BF",
				'lsaquo': "\u2039",
				'lscr': "\uD835\uDCC1",
				'Lscr': "\u2112",
				'lsh': "\u21B0",
				'Lsh': "\u21B0",
				'lsim': "\u2272",
				'lsime': "\u2A8D",
				'lsimg': "\u2A8F",
				'lsqb': '[',
				'lsquo': "\u2018",
				'lsquor': "\u201A",
				'lstrok': "\u0142",
				'Lstrok': "\u0141",
				'lt': '<',
				'Lt': "\u226A",
				'LT': '<',
				'ltcc': "\u2AA6",
				'ltcir': "\u2A79",
				'ltdot': "\u22D6",
				'lthree': "\u22CB",
				'ltimes': "\u22C9",
				'ltlarr': "\u2976",
				'ltquest': "\u2A7B",
				'ltri': "\u25C3",
				'ltrie': "\u22B4",
				'ltrif': "\u25C2",
				'ltrPar': "\u2996",
				'lurdshar': "\u294A",
				'luruhar': "\u2966",
				'lvertneqq': "\u2268\uFE00",
				'lvnE': "\u2268\uFE00",
				'macr': '\xAF',
				'male': "\u2642",
				'malt': "\u2720",
				'maltese': "\u2720",
				'map': "\u21A6",
				'Map': "\u2905",
				'mapsto': "\u21A6",
				'mapstodown': "\u21A7",
				'mapstoleft': "\u21A4",
				'mapstoup': "\u21A5",
				'marker': "\u25AE",
				'mcomma': "\u2A29",
				'mcy': "\u043C",
				'Mcy': "\u041C",
				'mdash': "\u2014",
				'mDDot': "\u223A",
				'measuredangle': "\u2221",
				'MediumSpace': "\u205F",
				'Mellintrf': "\u2133",
				'mfr': "\uD835\uDD2A",
				'Mfr': "\uD835\uDD10",
				'mho': "\u2127",
				'micro': '\xB5',
				'mid': "\u2223",
				'midast': '*',
				'midcir': "\u2AF0",
				'middot': '\xB7',
				'minus': "\u2212",
				'minusb': "\u229F",
				'minusd': "\u2238",
				'minusdu': "\u2A2A",
				'MinusPlus': "\u2213",
				'mlcp': "\u2ADB",
				'mldr': "\u2026",
				'mnplus': "\u2213",
				'models': "\u22A7",
				'mopf': "\uD835\uDD5E",
				'Mopf': "\uD835\uDD44",
				'mp': "\u2213",
				'mscr': "\uD835\uDCC2",
				'Mscr': "\u2133",
				'mstpos': "\u223E",
				'mu': "\u03BC",
				'Mu': "\u039C",
				'multimap': "\u22B8",
				'mumap': "\u22B8",
				'nabla': "\u2207",
				'nacute': "\u0144",
				'Nacute': "\u0143",
				'nang': "\u2220\u20D2",
				'nap': "\u2249",
				'napE': "\u2A70\u0338",
				'napid': "\u224B\u0338",
				'napos': "\u0149",
				'napprox': "\u2249",
				'natur': "\u266E",
				'natural': "\u266E",
				'naturals': "\u2115",
				'nbsp': '\xA0',
				'nbump': "\u224E\u0338",
				'nbumpe': "\u224F\u0338",
				'ncap': "\u2A43",
				'ncaron': "\u0148",
				'Ncaron': "\u0147",
				'ncedil': "\u0146",
				'Ncedil': "\u0145",
				'ncong': "\u2247",
				'ncongdot': "\u2A6D\u0338",
				'ncup': "\u2A42",
				'ncy': "\u043D",
				'Ncy': "\u041D",
				'ndash': "\u2013",
				'ne': "\u2260",
				'nearhk': "\u2924",
				'nearr': "\u2197",
				'neArr': "\u21D7",
				'nearrow': "\u2197",
				'nedot': "\u2250\u0338",
				'NegativeMediumSpace': "\u200B",
				'NegativeThickSpace': "\u200B",
				'NegativeThinSpace': "\u200B",
				'NegativeVeryThinSpace': "\u200B",
				'nequiv': "\u2262",
				'nesear': "\u2928",
				'nesim': "\u2242\u0338",
				'NestedGreaterGreater': "\u226B",
				'NestedLessLess': "\u226A",
				'NewLine': '\n',
				'nexist': "\u2204",
				'nexists': "\u2204",
				'nfr': "\uD835\uDD2B",
				'Nfr': "\uD835\uDD11",
				'nge': "\u2271",
				'ngE': "\u2267\u0338",
				'ngeq': "\u2271",
				'ngeqq': "\u2267\u0338",
				'ngeqslant': "\u2A7E\u0338",
				'nges': "\u2A7E\u0338",
				'nGg': "\u22D9\u0338",
				'ngsim': "\u2275",
				'ngt': "\u226F",
				'nGt': "\u226B\u20D2",
				'ngtr': "\u226F",
				'nGtv': "\u226B\u0338",
				'nharr': "\u21AE",
				'nhArr': "\u21CE",
				'nhpar': "\u2AF2",
				'ni': "\u220B",
				'nis': "\u22FC",
				'nisd': "\u22FA",
				'niv': "\u220B",
				'njcy': "\u045A",
				'NJcy': "\u040A",
				'nlarr': "\u219A",
				'nlArr': "\u21CD",
				'nldr': "\u2025",
				'nle': "\u2270",
				'nlE': "\u2266\u0338",
				'nleftarrow': "\u219A",
				'nLeftarrow': "\u21CD",
				'nleftrightarrow': "\u21AE",
				'nLeftrightarrow': "\u21CE",
				'nleq': "\u2270",
				'nleqq': "\u2266\u0338",
				'nleqslant': "\u2A7D\u0338",
				'nles': "\u2A7D\u0338",
				'nless': "\u226E",
				'nLl': "\u22D8\u0338",
				'nlsim': "\u2274",
				'nlt': "\u226E",
				'nLt': "\u226A\u20D2",
				'nltri': "\u22EA",
				'nltrie': "\u22EC",
				'nLtv': "\u226A\u0338",
				'nmid': "\u2224",
				'NoBreak': "\u2060",
				'NonBreakingSpace': '\xA0',
				'nopf': "\uD835\uDD5F",
				'Nopf': "\u2115",
				'not': '\xAC',
				'Not': "\u2AEC",
				'NotCongruent': "\u2262",
				'NotCupCap': "\u226D",
				'NotDoubleVerticalBar': "\u2226",
				'NotElement': "\u2209",
				'NotEqual': "\u2260",
				'NotEqualTilde': "\u2242\u0338",
				'NotExists': "\u2204",
				'NotGreater': "\u226F",
				'NotGreaterEqual': "\u2271",
				'NotGreaterFullEqual': "\u2267\u0338",
				'NotGreaterGreater': "\u226B\u0338",
				'NotGreaterLess': "\u2279",
				'NotGreaterSlantEqual': "\u2A7E\u0338",
				'NotGreaterTilde': "\u2275",
				'NotHumpDownHump': "\u224E\u0338",
				'NotHumpEqual': "\u224F\u0338",
				'notin': "\u2209",
				'notindot': "\u22F5\u0338",
				'notinE': "\u22F9\u0338",
				'notinva': "\u2209",
				'notinvb': "\u22F7",
				'notinvc': "\u22F6",
				'NotLeftTriangle': "\u22EA",
				'NotLeftTriangleBar': "\u29CF\u0338",
				'NotLeftTriangleEqual': "\u22EC",
				'NotLess': "\u226E",
				'NotLessEqual': "\u2270",
				'NotLessGreater': "\u2278",
				'NotLessLess': "\u226A\u0338",
				'NotLessSlantEqual': "\u2A7D\u0338",
				'NotLessTilde': "\u2274",
				'NotNestedGreaterGreater': "\u2AA2\u0338",
				'NotNestedLessLess': "\u2AA1\u0338",
				'notni': "\u220C",
				'notniva': "\u220C",
				'notnivb': "\u22FE",
				'notnivc': "\u22FD",
				'NotPrecedes': "\u2280",
				'NotPrecedesEqual': "\u2AAF\u0338",
				'NotPrecedesSlantEqual': "\u22E0",
				'NotReverseElement': "\u220C",
				'NotRightTriangle': "\u22EB",
				'NotRightTriangleBar': "\u29D0\u0338",
				'NotRightTriangleEqual': "\u22ED",
				'NotSquareSubset': "\u228F\u0338",
				'NotSquareSubsetEqual': "\u22E2",
				'NotSquareSuperset': "\u2290\u0338",
				'NotSquareSupersetEqual': "\u22E3",
				'NotSubset': "\u2282\u20D2",
				'NotSubsetEqual': "\u2288",
				'NotSucceeds': "\u2281",
				'NotSucceedsEqual': "\u2AB0\u0338",
				'NotSucceedsSlantEqual': "\u22E1",
				'NotSucceedsTilde': "\u227F\u0338",
				'NotSuperset': "\u2283\u20D2",
				'NotSupersetEqual': "\u2289",
				'NotTilde': "\u2241",
				'NotTildeEqual': "\u2244",
				'NotTildeFullEqual': "\u2247",
				'NotTildeTilde': "\u2249",
				'NotVerticalBar': "\u2224",
				'npar': "\u2226",
				'nparallel': "\u2226",
				'nparsl': "\u2AFD\u20E5",
				'npart': "\u2202\u0338",
				'npolint': "\u2A14",
				'npr': "\u2280",
				'nprcue': "\u22E0",
				'npre': "\u2AAF\u0338",
				'nprec': "\u2280",
				'npreceq': "\u2AAF\u0338",
				'nrarr': "\u219B",
				'nrArr': "\u21CF",
				'nrarrc': "\u2933\u0338",
				'nrarrw': "\u219D\u0338",
				'nrightarrow': "\u219B",
				'nRightarrow': "\u21CF",
				'nrtri': "\u22EB",
				'nrtrie': "\u22ED",
				'nsc': "\u2281",
				'nsccue': "\u22E1",
				'nsce': "\u2AB0\u0338",
				'nscr': "\uD835\uDCC3",
				'Nscr': "\uD835\uDCA9",
				'nshortmid': "\u2224",
				'nshortparallel': "\u2226",
				'nsim': "\u2241",
				'nsime': "\u2244",
				'nsimeq': "\u2244",
				'nsmid': "\u2224",
				'nspar': "\u2226",
				'nsqsube': "\u22E2",
				'nsqsupe': "\u22E3",
				'nsub': "\u2284",
				'nsube': "\u2288",
				'nsubE': "\u2AC5\u0338",
				'nsubset': "\u2282\u20D2",
				'nsubseteq': "\u2288",
				'nsubseteqq': "\u2AC5\u0338",
				'nsucc': "\u2281",
				'nsucceq': "\u2AB0\u0338",
				'nsup': "\u2285",
				'nsupe': "\u2289",
				'nsupE': "\u2AC6\u0338",
				'nsupset': "\u2283\u20D2",
				'nsupseteq': "\u2289",
				'nsupseteqq': "\u2AC6\u0338",
				'ntgl': "\u2279",
				'ntilde': '\xF1',
				'Ntilde': '\xD1',
				'ntlg': "\u2278",
				'ntriangleleft': "\u22EA",
				'ntrianglelefteq': "\u22EC",
				'ntriangleright': "\u22EB",
				'ntrianglerighteq': "\u22ED",
				'nu': "\u03BD",
				'Nu': "\u039D",
				'num': '#',
				'numero': "\u2116",
				'numsp': "\u2007",
				'nvap': "\u224D\u20D2",
				'nvdash': "\u22AC",
				'nvDash': "\u22AD",
				'nVdash': "\u22AE",
				'nVDash': "\u22AF",
				'nvge': "\u2265\u20D2",
				'nvgt': ">\u20D2",
				'nvHarr': "\u2904",
				'nvinfin': "\u29DE",
				'nvlArr': "\u2902",
				'nvle': "\u2264\u20D2",
				'nvlt': "<\u20D2",
				'nvltrie': "\u22B4\u20D2",
				'nvrArr': "\u2903",
				'nvrtrie': "\u22B5\u20D2",
				'nvsim': "\u223C\u20D2",
				'nwarhk': "\u2923",
				'nwarr': "\u2196",
				'nwArr': "\u21D6",
				'nwarrow': "\u2196",
				'nwnear': "\u2927",
				'oacute': '\xF3',
				'Oacute': '\xD3',
				'oast': "\u229B",
				'ocir': "\u229A",
				'ocirc': '\xF4',
				'Ocirc': '\xD4',
				'ocy': "\u043E",
				'Ocy': "\u041E",
				'odash': "\u229D",
				'odblac': "\u0151",
				'Odblac': "\u0150",
				'odiv': "\u2A38",
				'odot': "\u2299",
				'odsold': "\u29BC",
				'oelig': "\u0153",
				'OElig': "\u0152",
				'ofcir': "\u29BF",
				'ofr': "\uD835\uDD2C",
				'Ofr': "\uD835\uDD12",
				'ogon': "\u02DB",
				'ograve': '\xF2',
				'Ograve': '\xD2',
				'ogt': "\u29C1",
				'ohbar': "\u29B5",
				'ohm': "\u03A9",
				'oint': "\u222E",
				'olarr': "\u21BA",
				'olcir': "\u29BE",
				'olcross': "\u29BB",
				'oline': "\u203E",
				'olt': "\u29C0",
				'omacr': "\u014D",
				'Omacr': "\u014C",
				'omega': "\u03C9",
				'Omega': "\u03A9",
				'omicron': "\u03BF",
				'Omicron': "\u039F",
				'omid': "\u29B6",
				'ominus': "\u2296",
				'oopf': "\uD835\uDD60",
				'Oopf': "\uD835\uDD46",
				'opar': "\u29B7",
				'OpenCurlyDoubleQuote': "\u201C",
				'OpenCurlyQuote': "\u2018",
				'operp': "\u29B9",
				'oplus': "\u2295",
				'or': "\u2228",
				'Or': "\u2A54",
				'orarr': "\u21BB",
				'ord': "\u2A5D",
				'order': "\u2134",
				'orderof': "\u2134",
				'ordf': '\xAA',
				'ordm': '\xBA',
				'origof': "\u22B6",
				'oror': "\u2A56",
				'orslope': "\u2A57",
				'orv': "\u2A5B",
				'oS': "\u24C8",
				'oscr': "\u2134",
				'Oscr': "\uD835\uDCAA",
				'oslash': '\xF8',
				'Oslash': '\xD8',
				'osol': "\u2298",
				'otilde': '\xF5',
				'Otilde': '\xD5',
				'otimes': "\u2297",
				'Otimes': "\u2A37",
				'otimesas': "\u2A36",
				'ouml': '\xF6',
				'Ouml': '\xD6',
				'ovbar': "\u233D",
				'OverBar': "\u203E",
				'OverBrace': "\u23DE",
				'OverBracket': "\u23B4",
				'OverParenthesis': "\u23DC",
				'par': "\u2225",
				'para': '\xB6',
				'parallel': "\u2225",
				'parsim': "\u2AF3",
				'parsl': "\u2AFD",
				'part': "\u2202",
				'PartialD': "\u2202",
				'pcy': "\u043F",
				'Pcy': "\u041F",
				'percnt': '%',
				'period': '.',
				'permil': "\u2030",
				'perp': "\u22A5",
				'pertenk': "\u2031",
				'pfr': "\uD835\uDD2D",
				'Pfr': "\uD835\uDD13",
				'phi': "\u03C6",
				'Phi': "\u03A6",
				'phiv': "\u03D5",
				'phmmat': "\u2133",
				'phone': "\u260E",
				'pi': "\u03C0",
				'Pi': "\u03A0",
				'pitchfork': "\u22D4",
				'piv': "\u03D6",
				'planck': "\u210F",
				'planckh': "\u210E",
				'plankv': "\u210F",
				'plus': '+',
				'plusacir': "\u2A23",
				'plusb': "\u229E",
				'pluscir': "\u2A22",
				'plusdo': "\u2214",
				'plusdu': "\u2A25",
				'pluse': "\u2A72",
				'PlusMinus': '\xB1',
				'plusmn': '\xB1',
				'plussim': "\u2A26",
				'plustwo': "\u2A27",
				'pm': '\xB1',
				'Poincareplane': "\u210C",
				'pointint': "\u2A15",
				'popf': "\uD835\uDD61",
				'Popf': "\u2119",
				'pound': '\xA3',
				'pr': "\u227A",
				'Pr': "\u2ABB",
				'prap': "\u2AB7",
				'prcue': "\u227C",
				'pre': "\u2AAF",
				'prE': "\u2AB3",
				'prec': "\u227A",
				'precapprox': "\u2AB7",
				'preccurlyeq': "\u227C",
				'Precedes': "\u227A",
				'PrecedesEqual': "\u2AAF",
				'PrecedesSlantEqual': "\u227C",
				'PrecedesTilde': "\u227E",
				'preceq': "\u2AAF",
				'precnapprox': "\u2AB9",
				'precneqq': "\u2AB5",
				'precnsim': "\u22E8",
				'precsim': "\u227E",
				'prime': "\u2032",
				'Prime': "\u2033",
				'primes': "\u2119",
				'prnap': "\u2AB9",
				'prnE': "\u2AB5",
				'prnsim': "\u22E8",
				'prod': "\u220F",
				'Product': "\u220F",
				'profalar': "\u232E",
				'profline': "\u2312",
				'profsurf': "\u2313",
				'prop': "\u221D",
				'Proportion': "\u2237",
				'Proportional': "\u221D",
				'propto': "\u221D",
				'prsim': "\u227E",
				'prurel': "\u22B0",
				'pscr': "\uD835\uDCC5",
				'Pscr': "\uD835\uDCAB",
				'psi': "\u03C8",
				'Psi': "\u03A8",
				'puncsp': "\u2008",
				'qfr': "\uD835\uDD2E",
				'Qfr': "\uD835\uDD14",
				'qint': "\u2A0C",
				'qopf': "\uD835\uDD62",
				'Qopf': "\u211A",
				'qprime': "\u2057",
				'qscr': "\uD835\uDCC6",
				'Qscr': "\uD835\uDCAC",
				'quaternions': "\u210D",
				'quatint': "\u2A16",
				'quest': '?',
				'questeq': "\u225F",
				'quot': '"',
				'QUOT': '"',
				'rAarr': "\u21DB",
				'race': "\u223D\u0331",
				'racute': "\u0155",
				'Racute': "\u0154",
				'radic': "\u221A",
				'raemptyv': "\u29B3",
				'rang': "\u27E9",
				'Rang': "\u27EB",
				'rangd': "\u2992",
				'range': "\u29A5",
				'rangle': "\u27E9",
				'raquo': '\xBB',
				'rarr': "\u2192",
				'rArr': "\u21D2",
				'Rarr': "\u21A0",
				'rarrap': "\u2975",
				'rarrb': "\u21E5",
				'rarrbfs': "\u2920",
				'rarrc': "\u2933",
				'rarrfs': "\u291E",
				'rarrhk': "\u21AA",
				'rarrlp': "\u21AC",
				'rarrpl': "\u2945",
				'rarrsim': "\u2974",
				'rarrtl': "\u21A3",
				'Rarrtl': "\u2916",
				'rarrw': "\u219D",
				'ratail': "\u291A",
				'rAtail': "\u291C",
				'ratio': "\u2236",
				'rationals': "\u211A",
				'rbarr': "\u290D",
				'rBarr': "\u290F",
				'RBarr': "\u2910",
				'rbbrk': "\u2773",
				'rbrace': '}',
				'rbrack': ']',
				'rbrke': "\u298C",
				'rbrksld': "\u298E",
				'rbrkslu': "\u2990",
				'rcaron': "\u0159",
				'Rcaron': "\u0158",
				'rcedil': "\u0157",
				'Rcedil': "\u0156",
				'rceil': "\u2309",
				'rcub': '}',
				'rcy': "\u0440",
				'Rcy': "\u0420",
				'rdca': "\u2937",
				'rdldhar': "\u2969",
				'rdquo': "\u201D",
				'rdquor': "\u201D",
				'rdsh': "\u21B3",
				'Re': "\u211C",
				'real': "\u211C",
				'realine': "\u211B",
				'realpart': "\u211C",
				'reals': "\u211D",
				'rect': "\u25AD",
				'reg': '\xAE',
				'REG': '\xAE',
				'ReverseElement': "\u220B",
				'ReverseEquilibrium': "\u21CB",
				'ReverseUpEquilibrium': "\u296F",
				'rfisht': "\u297D",
				'rfloor': "\u230B",
				'rfr': "\uD835\uDD2F",
				'Rfr': "\u211C",
				'rHar': "\u2964",
				'rhard': "\u21C1",
				'rharu': "\u21C0",
				'rharul': "\u296C",
				'rho': "\u03C1",
				'Rho': "\u03A1",
				'rhov': "\u03F1",
				'RightAngleBracket': "\u27E9",
				'rightarrow': "\u2192",
				'Rightarrow': "\u21D2",
				'RightArrow': "\u2192",
				'RightArrowBar': "\u21E5",
				'RightArrowLeftArrow': "\u21C4",
				'rightarrowtail': "\u21A3",
				'RightCeiling': "\u2309",
				'RightDoubleBracket': "\u27E7",
				'RightDownTeeVector': "\u295D",
				'RightDownVector': "\u21C2",
				'RightDownVectorBar': "\u2955",
				'RightFloor': "\u230B",
				'rightharpoondown': "\u21C1",
				'rightharpoonup': "\u21C0",
				'rightleftarrows': "\u21C4",
				'rightleftharpoons': "\u21CC",
				'rightrightarrows': "\u21C9",
				'rightsquigarrow': "\u219D",
				'RightTee': "\u22A2",
				'RightTeeArrow': "\u21A6",
				'RightTeeVector': "\u295B",
				'rightthreetimes': "\u22CC",
				'RightTriangle': "\u22B3",
				'RightTriangleBar': "\u29D0",
				'RightTriangleEqual': "\u22B5",
				'RightUpDownVector': "\u294F",
				'RightUpTeeVector': "\u295C",
				'RightUpVector': "\u21BE",
				'RightUpVectorBar': "\u2954",
				'RightVector': "\u21C0",
				'RightVectorBar': "\u2953",
				'ring': "\u02DA",
				'risingdotseq': "\u2253",
				'rlarr': "\u21C4",
				'rlhar': "\u21CC",
				'rlm': "\u200F",
				'rmoust': "\u23B1",
				'rmoustache': "\u23B1",
				'rnmid': "\u2AEE",
				'roang': "\u27ED",
				'roarr': "\u21FE",
				'robrk': "\u27E7",
				'ropar': "\u2986",
				'ropf': "\uD835\uDD63",
				'Ropf': "\u211D",
				'roplus': "\u2A2E",
				'rotimes': "\u2A35",
				'RoundImplies': "\u2970",
				'rpar': ')',
				'rpargt': "\u2994",
				'rppolint': "\u2A12",
				'rrarr': "\u21C9",
				'Rrightarrow': "\u21DB",
				'rsaquo': "\u203A",
				'rscr': "\uD835\uDCC7",
				'Rscr': "\u211B",
				'rsh': "\u21B1",
				'Rsh': "\u21B1",
				'rsqb': ']',
				'rsquo': "\u2019",
				'rsquor': "\u2019",
				'rthree': "\u22CC",
				'rtimes': "\u22CA",
				'rtri': "\u25B9",
				'rtrie': "\u22B5",
				'rtrif': "\u25B8",
				'rtriltri': "\u29CE",
				'RuleDelayed': "\u29F4",
				'ruluhar': "\u2968",
				'rx': "\u211E",
				'sacute': "\u015B",
				'Sacute': "\u015A",
				'sbquo': "\u201A",
				'sc': "\u227B",
				'Sc': "\u2ABC",
				'scap': "\u2AB8",
				'scaron': "\u0161",
				'Scaron': "\u0160",
				'sccue': "\u227D",
				'sce': "\u2AB0",
				'scE': "\u2AB4",
				'scedil': "\u015F",
				'Scedil': "\u015E",
				'scirc': "\u015D",
				'Scirc': "\u015C",
				'scnap': "\u2ABA",
				'scnE': "\u2AB6",
				'scnsim': "\u22E9",
				'scpolint': "\u2A13",
				'scsim': "\u227F",
				'scy': "\u0441",
				'Scy': "\u0421",
				'sdot': "\u22C5",
				'sdotb': "\u22A1",
				'sdote': "\u2A66",
				'searhk': "\u2925",
				'searr': "\u2198",
				'seArr': "\u21D8",
				'searrow': "\u2198",
				'sect': '\xA7',
				'semi': ';',
				'seswar': "\u2929",
				'setminus': "\u2216",
				'setmn': "\u2216",
				'sext': "\u2736",
				'sfr': "\uD835\uDD30",
				'Sfr': "\uD835\uDD16",
				'sfrown': "\u2322",
				'sharp': "\u266F",
				'shchcy': "\u0449",
				'SHCHcy': "\u0429",
				'shcy': "\u0448",
				'SHcy': "\u0428",
				'ShortDownArrow': "\u2193",
				'ShortLeftArrow': "\u2190",
				'shortmid': "\u2223",
				'shortparallel': "\u2225",
				'ShortRightArrow': "\u2192",
				'ShortUpArrow': "\u2191",
				'shy': '\xAD',
				'sigma': "\u03C3",
				'Sigma': "\u03A3",
				'sigmaf': "\u03C2",
				'sigmav': "\u03C2",
				'sim': "\u223C",
				'simdot': "\u2A6A",
				'sime': "\u2243",
				'simeq': "\u2243",
				'simg': "\u2A9E",
				'simgE': "\u2AA0",
				'siml': "\u2A9D",
				'simlE': "\u2A9F",
				'simne': "\u2246",
				'simplus': "\u2A24",
				'simrarr': "\u2972",
				'slarr': "\u2190",
				'SmallCircle': "\u2218",
				'smallsetminus': "\u2216",
				'smashp': "\u2A33",
				'smeparsl': "\u29E4",
				'smid': "\u2223",
				'smile': "\u2323",
				'smt': "\u2AAA",
				'smte': "\u2AAC",
				'smtes': "\u2AAC\uFE00",
				'softcy': "\u044C",
				'SOFTcy': "\u042C",
				'sol': '/',
				'solb': "\u29C4",
				'solbar': "\u233F",
				'sopf': "\uD835\uDD64",
				'Sopf': "\uD835\uDD4A",
				'spades': "\u2660",
				'spadesuit': "\u2660",
				'spar': "\u2225",
				'sqcap': "\u2293",
				'sqcaps': "\u2293\uFE00",
				'sqcup': "\u2294",
				'sqcups': "\u2294\uFE00",
				'Sqrt': "\u221A",
				'sqsub': "\u228F",
				'sqsube': "\u2291",
				'sqsubset': "\u228F",
				'sqsubseteq': "\u2291",
				'sqsup': "\u2290",
				'sqsupe': "\u2292",
				'sqsupset': "\u2290",
				'sqsupseteq': "\u2292",
				'squ': "\u25A1",
				'square': "\u25A1",
				'Square': "\u25A1",
				'SquareIntersection': "\u2293",
				'SquareSubset': "\u228F",
				'SquareSubsetEqual': "\u2291",
				'SquareSuperset': "\u2290",
				'SquareSupersetEqual': "\u2292",
				'SquareUnion': "\u2294",
				'squarf': "\u25AA",
				'squf': "\u25AA",
				'srarr': "\u2192",
				'sscr': "\uD835\uDCC8",
				'Sscr': "\uD835\uDCAE",
				'ssetmn': "\u2216",
				'ssmile': "\u2323",
				'sstarf': "\u22C6",
				'star': "\u2606",
				'Star': "\u22C6",
				'starf': "\u2605",
				'straightepsilon': "\u03F5",
				'straightphi': "\u03D5",
				'strns': '\xAF',
				'sub': "\u2282",
				'Sub': "\u22D0",
				'subdot': "\u2ABD",
				'sube': "\u2286",
				'subE': "\u2AC5",
				'subedot': "\u2AC3",
				'submult': "\u2AC1",
				'subne': "\u228A",
				'subnE': "\u2ACB",
				'subplus': "\u2ABF",
				'subrarr': "\u2979",
				'subset': "\u2282",
				'Subset': "\u22D0",
				'subseteq': "\u2286",
				'subseteqq': "\u2AC5",
				'SubsetEqual': "\u2286",
				'subsetneq': "\u228A",
				'subsetneqq': "\u2ACB",
				'subsim': "\u2AC7",
				'subsub': "\u2AD5",
				'subsup': "\u2AD3",
				'succ': "\u227B",
				'succapprox': "\u2AB8",
				'succcurlyeq': "\u227D",
				'Succeeds': "\u227B",
				'SucceedsEqual': "\u2AB0",
				'SucceedsSlantEqual': "\u227D",
				'SucceedsTilde': "\u227F",
				'succeq': "\u2AB0",
				'succnapprox': "\u2ABA",
				'succneqq': "\u2AB6",
				'succnsim': "\u22E9",
				'succsim': "\u227F",
				'SuchThat': "\u220B",
				'sum': "\u2211",
				'Sum': "\u2211",
				'sung': "\u266A",
				'sup': "\u2283",
				'Sup': "\u22D1",
				'sup1': '\xB9',
				'sup2': '\xB2',
				'sup3': '\xB3',
				'supdot': "\u2ABE",
				'supdsub': "\u2AD8",
				'supe': "\u2287",
				'supE': "\u2AC6",
				'supedot': "\u2AC4",
				'Superset': "\u2283",
				'SupersetEqual': "\u2287",
				'suphsol': "\u27C9",
				'suphsub': "\u2AD7",
				'suplarr': "\u297B",
				'supmult': "\u2AC2",
				'supne': "\u228B",
				'supnE': "\u2ACC",
				'supplus': "\u2AC0",
				'supset': "\u2283",
				'Supset': "\u22D1",
				'supseteq': "\u2287",
				'supseteqq': "\u2AC6",
				'supsetneq': "\u228B",
				'supsetneqq': "\u2ACC",
				'supsim': "\u2AC8",
				'supsub': "\u2AD4",
				'supsup': "\u2AD6",
				'swarhk': "\u2926",
				'swarr': "\u2199",
				'swArr': "\u21D9",
				'swarrow': "\u2199",
				'swnwar': "\u292A",
				'szlig': '\xDF',
				'Tab': '\t',
				'target': "\u2316",
				'tau': "\u03C4",
				'Tau': "\u03A4",
				'tbrk': "\u23B4",
				'tcaron': "\u0165",
				'Tcaron': "\u0164",
				'tcedil': "\u0163",
				'Tcedil': "\u0162",
				'tcy': "\u0442",
				'Tcy': "\u0422",
				'tdot': "\u20DB",
				'telrec': "\u2315",
				'tfr': "\uD835\uDD31",
				'Tfr': "\uD835\uDD17",
				'there4': "\u2234",
				'therefore': "\u2234",
				'Therefore': "\u2234",
				'theta': "\u03B8",
				'Theta': "\u0398",
				'thetasym': "\u03D1",
				'thetav': "\u03D1",
				'thickapprox': "\u2248",
				'thicksim': "\u223C",
				'ThickSpace': "\u205F\u200A",
				'thinsp': "\u2009",
				'ThinSpace': "\u2009",
				'thkap': "\u2248",
				'thksim': "\u223C",
				'thorn': '\xFE',
				'THORN': '\xDE',
				'tilde': "\u02DC",
				'Tilde': "\u223C",
				'TildeEqual': "\u2243",
				'TildeFullEqual': "\u2245",
				'TildeTilde': "\u2248",
				'times': '\xD7',
				'timesb': "\u22A0",
				'timesbar': "\u2A31",
				'timesd': "\u2A30",
				'tint': "\u222D",
				'toea': "\u2928",
				'top': "\u22A4",
				'topbot': "\u2336",
				'topcir': "\u2AF1",
				'topf': "\uD835\uDD65",
				'Topf': "\uD835\uDD4B",
				'topfork': "\u2ADA",
				'tosa': "\u2929",
				'tprime': "\u2034",
				'trade': "\u2122",
				'TRADE': "\u2122",
				'triangle': "\u25B5",
				'triangledown': "\u25BF",
				'triangleleft': "\u25C3",
				'trianglelefteq': "\u22B4",
				'triangleq': "\u225C",
				'triangleright': "\u25B9",
				'trianglerighteq': "\u22B5",
				'tridot': "\u25EC",
				'trie': "\u225C",
				'triminus': "\u2A3A",
				'TripleDot': "\u20DB",
				'triplus': "\u2A39",
				'trisb': "\u29CD",
				'tritime': "\u2A3B",
				'trpezium': "\u23E2",
				'tscr': "\uD835\uDCC9",
				'Tscr': "\uD835\uDCAF",
				'tscy': "\u0446",
				'TScy': "\u0426",
				'tshcy': "\u045B",
				'TSHcy': "\u040B",
				'tstrok': "\u0167",
				'Tstrok': "\u0166",
				'twixt': "\u226C",
				'twoheadleftarrow': "\u219E",
				'twoheadrightarrow': "\u21A0",
				'uacute': '\xFA',
				'Uacute': '\xDA',
				'uarr': "\u2191",
				'uArr': "\u21D1",
				'Uarr': "\u219F",
				'Uarrocir': "\u2949",
				'ubrcy': "\u045E",
				'Ubrcy': "\u040E",
				'ubreve': "\u016D",
				'Ubreve': "\u016C",
				'ucirc': '\xFB',
				'Ucirc': '\xDB',
				'ucy': "\u0443",
				'Ucy': "\u0423",
				'udarr': "\u21C5",
				'udblac': "\u0171",
				'Udblac': "\u0170",
				'udhar': "\u296E",
				'ufisht': "\u297E",
				'ufr': "\uD835\uDD32",
				'Ufr': "\uD835\uDD18",
				'ugrave': '\xF9',
				'Ugrave': '\xD9',
				'uHar': "\u2963",
				'uharl': "\u21BF",
				'uharr': "\u21BE",
				'uhblk': "\u2580",
				'ulcorn': "\u231C",
				'ulcorner': "\u231C",
				'ulcrop': "\u230F",
				'ultri': "\u25F8",
				'umacr': "\u016B",
				'Umacr': "\u016A",
				'uml': '\xA8',
				'UnderBar': '_',
				'UnderBrace': "\u23DF",
				'UnderBracket': "\u23B5",
				'UnderParenthesis': "\u23DD",
				'Union': "\u22C3",
				'UnionPlus': "\u228E",
				'uogon': "\u0173",
				'Uogon': "\u0172",
				'uopf': "\uD835\uDD66",
				'Uopf': "\uD835\uDD4C",
				'uparrow': "\u2191",
				'Uparrow': "\u21D1",
				'UpArrow': "\u2191",
				'UpArrowBar': "\u2912",
				'UpArrowDownArrow': "\u21C5",
				'updownarrow': "\u2195",
				'Updownarrow': "\u21D5",
				'UpDownArrow': "\u2195",
				'UpEquilibrium': "\u296E",
				'upharpoonleft': "\u21BF",
				'upharpoonright': "\u21BE",
				'uplus': "\u228E",
				'UpperLeftArrow': "\u2196",
				'UpperRightArrow': "\u2197",
				'upsi': "\u03C5",
				'Upsi': "\u03D2",
				'upsih': "\u03D2",
				'upsilon': "\u03C5",
				'Upsilon': "\u03A5",
				'UpTee': "\u22A5",
				'UpTeeArrow': "\u21A5",
				'upuparrows': "\u21C8",
				'urcorn': "\u231D",
				'urcorner': "\u231D",
				'urcrop': "\u230E",
				'uring': "\u016F",
				'Uring': "\u016E",
				'urtri': "\u25F9",
				'uscr': "\uD835\uDCCA",
				'Uscr': "\uD835\uDCB0",
				'utdot': "\u22F0",
				'utilde': "\u0169",
				'Utilde': "\u0168",
				'utri': "\u25B5",
				'utrif': "\u25B4",
				'uuarr': "\u21C8",
				'uuml': '\xFC',
				'Uuml': '\xDC',
				'uwangle': "\u29A7",
				'vangrt': "\u299C",
				'varepsilon': "\u03F5",
				'varkappa': "\u03F0",
				'varnothing': "\u2205",
				'varphi': "\u03D5",
				'varpi': "\u03D6",
				'varpropto': "\u221D",
				'varr': "\u2195",
				'vArr': "\u21D5",
				'varrho': "\u03F1",
				'varsigma': "\u03C2",
				'varsubsetneq': "\u228A\uFE00",
				'varsubsetneqq': "\u2ACB\uFE00",
				'varsupsetneq': "\u228B\uFE00",
				'varsupsetneqq': "\u2ACC\uFE00",
				'vartheta': "\u03D1",
				'vartriangleleft': "\u22B2",
				'vartriangleright': "\u22B3",
				'vBar': "\u2AE8",
				'Vbar': "\u2AEB",
				'vBarv': "\u2AE9",
				'vcy': "\u0432",
				'Vcy': "\u0412",
				'vdash': "\u22A2",
				'vDash': "\u22A8",
				'Vdash': "\u22A9",
				'VDash': "\u22AB",
				'Vdashl': "\u2AE6",
				'vee': "\u2228",
				'Vee': "\u22C1",
				'veebar': "\u22BB",
				'veeeq': "\u225A",
				'vellip': "\u22EE",
				'verbar': '|',
				'Verbar': "\u2016",
				'vert': '|',
				'Vert': "\u2016",
				'VerticalBar': "\u2223",
				'VerticalLine': '|',
				'VerticalSeparator': "\u2758",
				'VerticalTilde': "\u2240",
				'VeryThinSpace': "\u200A",
				'vfr': "\uD835\uDD33",
				'Vfr': "\uD835\uDD19",
				'vltri': "\u22B2",
				'vnsub': "\u2282\u20D2",
				'vnsup': "\u2283\u20D2",
				'vopf': "\uD835\uDD67",
				'Vopf': "\uD835\uDD4D",
				'vprop': "\u221D",
				'vrtri': "\u22B3",
				'vscr': "\uD835\uDCCB",
				'Vscr': "\uD835\uDCB1",
				'vsubne': "\u228A\uFE00",
				'vsubnE': "\u2ACB\uFE00",
				'vsupne': "\u228B\uFE00",
				'vsupnE': "\u2ACC\uFE00",
				'Vvdash': "\u22AA",
				'vzigzag': "\u299A",
				'wcirc': "\u0175",
				'Wcirc': "\u0174",
				'wedbar': "\u2A5F",
				'wedge': "\u2227",
				'Wedge': "\u22C0",
				'wedgeq': "\u2259",
				'weierp': "\u2118",
				'wfr': "\uD835\uDD34",
				'Wfr': "\uD835\uDD1A",
				'wopf': "\uD835\uDD68",
				'Wopf': "\uD835\uDD4E",
				'wp': "\u2118",
				'wr': "\u2240",
				'wreath': "\u2240",
				'wscr': "\uD835\uDCCC",
				'Wscr': "\uD835\uDCB2",
				'xcap': "\u22C2",
				'xcirc': "\u25EF",
				'xcup': "\u22C3",
				'xdtri': "\u25BD",
				'xfr': "\uD835\uDD35",
				'Xfr': "\uD835\uDD1B",
				'xharr': "\u27F7",
				'xhArr': "\u27FA",
				'xi': "\u03BE",
				'Xi': "\u039E",
				'xlarr': "\u27F5",
				'xlArr': "\u27F8",
				'xmap': "\u27FC",
				'xnis': "\u22FB",
				'xodot': "\u2A00",
				'xopf': "\uD835\uDD69",
				'Xopf': "\uD835\uDD4F",
				'xoplus': "\u2A01",
				'xotime': "\u2A02",
				'xrarr': "\u27F6",
				'xrArr': "\u27F9",
				'xscr': "\uD835\uDCCD",
				'Xscr': "\uD835\uDCB3",
				'xsqcup': "\u2A06",
				'xuplus': "\u2A04",
				'xutri': "\u25B3",
				'xvee': "\u22C1",
				'xwedge': "\u22C0",
				'yacute': '\xFD',
				'Yacute': '\xDD',
				'yacy': "\u044F",
				'YAcy': "\u042F",
				'ycirc': "\u0177",
				'Ycirc': "\u0176",
				'ycy': "\u044B",
				'Ycy': "\u042B",
				'yen': '\xA5',
				'yfr': "\uD835\uDD36",
				'Yfr': "\uD835\uDD1C",
				'yicy': "\u0457",
				'YIcy': "\u0407",
				'yopf': "\uD835\uDD6A",
				'Yopf': "\uD835\uDD50",
				'yscr': "\uD835\uDCCE",
				'Yscr': "\uD835\uDCB4",
				'yucy': "\u044E",
				'YUcy': "\u042E",
				'yuml': '\xFF',
				'Yuml': "\u0178",
				'zacute': "\u017A",
				'Zacute': "\u0179",
				'zcaron': "\u017E",
				'Zcaron': "\u017D",
				'zcy': "\u0437",
				'Zcy': "\u0417",
				'zdot': "\u017C",
				'Zdot': "\u017B",
				'zeetrf': "\u2128",
				'ZeroWidthSpace': "\u200B",
				'zeta': "\u03B6",
				'Zeta': "\u0396",
				'zfr': "\uD835\uDD37",
				'Zfr': "\u2128",
				'zhcy': "\u0436",
				'ZHcy': "\u0416",
				'zigrarr': "\u21DD",
				'zopf': "\uD835\uDD6B",
				'Zopf': "\u2124",
				'zscr': "\uD835\uDCCF",
				'Zscr': "\uD835\uDCB5",
				'zwj': "\u200D",
				'zwnj': "\u200C"
			};
			var decodeMapLegacy = {
				'aacute': '\xE1',
				'Aacute': '\xC1',
				'acirc': '\xE2',
				'Acirc': '\xC2',
				'acute': '\xB4',
				'aelig': '\xE6',
				'AElig': '\xC6',
				'agrave': '\xE0',
				'Agrave': '\xC0',
				'amp': '&',
				'AMP': '&',
				'aring': '\xE5',
				'Aring': '\xC5',
				'atilde': '\xE3',
				'Atilde': '\xC3',
				'auml': '\xE4',
				'Auml': '\xC4',
				'brvbar': '\xA6',
				'ccedil': '\xE7',
				'Ccedil': '\xC7',
				'cedil': '\xB8',
				'cent': '\xA2',
				'copy': '\xA9',
				'COPY': '\xA9',
				'curren': '\xA4',
				'deg': '\xB0',
				'divide': '\xF7',
				'eacute': '\xE9',
				'Eacute': '\xC9',
				'ecirc': '\xEA',
				'Ecirc': '\xCA',
				'egrave': '\xE8',
				'Egrave': '\xC8',
				'eth': '\xF0',
				'ETH': '\xD0',
				'euml': '\xEB',
				'Euml': '\xCB',
				'frac12': '\xBD',
				'frac14': '\xBC',
				'frac34': '\xBE',
				'gt': '>',
				'GT': '>',
				'iacute': '\xED',
				'Iacute': '\xCD',
				'icirc': '\xEE',
				'Icirc': '\xCE',
				'iexcl': '\xA1',
				'igrave': '\xEC',
				'Igrave': '\xCC',
				'iquest': '\xBF',
				'iuml': '\xEF',
				'Iuml': '\xCF',
				'laquo': '\xAB',
				'lt': '<',
				'LT': '<',
				'macr': '\xAF',
				'micro': '\xB5',
				'middot': '\xB7',
				'nbsp': '\xA0',
				'not': '\xAC',
				'ntilde': '\xF1',
				'Ntilde': '\xD1',
				'oacute': '\xF3',
				'Oacute': '\xD3',
				'ocirc': '\xF4',
				'Ocirc': '\xD4',
				'ograve': '\xF2',
				'Ograve': '\xD2',
				'ordf': '\xAA',
				'ordm': '\xBA',
				'oslash': '\xF8',
				'Oslash': '\xD8',
				'otilde': '\xF5',
				'Otilde': '\xD5',
				'ouml': '\xF6',
				'Ouml': '\xD6',
				'para': '\xB6',
				'plusmn': '\xB1',
				'pound': '\xA3',
				'quot': '"',
				'QUOT': '"',
				'raquo': '\xBB',
				'reg': '\xAE',
				'REG': '\xAE',
				'sect': '\xA7',
				'shy': '\xAD',
				'sup1': '\xB9',
				'sup2': '\xB2',
				'sup3': '\xB3',
				'szlig': '\xDF',
				'thorn': '\xFE',
				'THORN': '\xDE',
				'times': '\xD7',
				'uacute': '\xFA',
				'Uacute': '\xDA',
				'ucirc': '\xFB',
				'Ucirc': '\xDB',
				'ugrave': '\xF9',
				'Ugrave': '\xD9',
				'uml': '\xA8',
				'uuml': '\xFC',
				'Uuml': '\xDC',
				'yacute': '\xFD',
				'Yacute': '\xDD',
				'yen': '\xA5',
				'yuml': '\xFF'
			};
			var decodeMapNumeric = {
				'0': "\uFFFD",
				'128': "\u20AC",
				'130': "\u201A",
				'131': "\u0192",
				'132': "\u201E",
				'133': "\u2026",
				'134': "\u2020",
				'135': "\u2021",
				'136': "\u02C6",
				'137': "\u2030",
				'138': "\u0160",
				'139': "\u2039",
				'140': "\u0152",
				'142': "\u017D",
				'145': "\u2018",
				'146': "\u2019",
				'147': "\u201C",
				'148': "\u201D",
				'149': "\u2022",
				'150': "\u2013",
				'151': "\u2014",
				'152': "\u02DC",
				'153': "\u2122",
				'154': "\u0161",
				'155': "\u203A",
				'156': "\u0153",
				'158': "\u017E",
				'159': "\u0178"
			};
			var invalidReferenceCodePoints = [1, 2, 3, 4, 5, 6, 7, 8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 64976, 64977, 64978, 64979, 64980, 64981, 64982, 64983, 64984, 64985, 64986, 64987, 64988, 64989, 64990, 64991, 64992, 64993, 64994, 64995, 64996, 64997, 64998, 64999, 65000, 65001, 65002, 65003, 65004, 65005, 65006, 65007, 65534, 65535, 131070, 131071, 196606, 196607, 262142, 262143, 327678, 327679, 393214, 393215, 458750, 458751, 524286, 524287, 589822, 589823, 655358, 655359, 720894, 720895, 786430, 786431, 851966, 851967, 917502, 917503, 983038, 983039, 1048574, 1048575, 1114110, 1114111];
			/*--------------------------------------------------------------------------*/

			var stringFromCharCode = String.fromCharCode;
			var object = {};
			var hasOwnProperty = object.hasOwnProperty;

			var has = function has(object, propertyName) {
				return hasOwnProperty.call(object, propertyName);
			};

			var contains = function contains(array, value) {
				var index = -1;
				var length = array.length;

				while (++index < length) {
					if (array[index] == value) {
						return true;
					}
				}

				return false;
			};

			var merge = function merge(options, defaults) {
				if (!options) {
					return defaults;
				}

				var result = {};
				var key;

				for (key in defaults) {
					// A `hasOwnProperty` check is not needed here, since only recognized
					// option names are used anyway. Any others are ignored.
					result[key] = has(options, key) ? options[key] : defaults[key];
				}

				return result;
			}; // Modified version of `ucs2encode`; see https://mths.be/punycode.


			var codePointToSymbol = function codePointToSymbol(codePoint, strict) {
				var output = '';

				if (codePoint >= 0xD800 && codePoint <= 0xDFFF || codePoint > 0x10FFFF) {
					// See issue #4:
					// “Otherwise, if the number is in the range 0xD800 to 0xDFFF or is
					// greater than 0x10FFFF, then this is a parse error. Return a U+FFFD
					// REPLACEMENT CHARACTER.”
					if (strict) {
						parseError('character reference outside the permissible Unicode range');
					}

					return "\uFFFD";
				}

				if (has(decodeMapNumeric, codePoint)) {
					if (strict) {
						parseError('disallowed character reference');
					}

					return decodeMapNumeric[codePoint];
				}

				if (strict && contains(invalidReferenceCodePoints, codePoint)) {
					parseError('disallowed character reference');
				}

				if (codePoint > 0xFFFF) {
					codePoint -= 0x10000;
					output += stringFromCharCode(codePoint >>> 10 & 0x3FF | 0xD800);
					codePoint = 0xDC00 | codePoint & 0x3FF;
				}

				output += stringFromCharCode(codePoint);
				return output;
			};

			var hexEscape = function hexEscape(codePoint) {
				return '&#x' + codePoint.toString(16).toUpperCase() + ';';
			};

			var decEscape = function decEscape(codePoint) {
				return '&#' + codePoint + ';';
			};

			var parseError = function parseError(message) {
				throw Error('Parse error: ' + message);
			};
			/*--------------------------------------------------------------------------*/


			var encode = function encode(string, options) {
				options = merge(options, encode.options);
				var strict = options.strict;

				if (strict && regexInvalidRawCodePoint.test(string)) {
					parseError('forbidden code point');
				}

				var encodeEverything = options.encodeEverything;
				var useNamedReferences = options.useNamedReferences;
				var allowUnsafeSymbols = options.allowUnsafeSymbols;
				var escapeCodePoint = options.decimal ? decEscape : hexEscape;

				var escapeBmpSymbol = function escapeBmpSymbol(symbol) {
					return escapeCodePoint(symbol.charCodeAt(0));
				};

				if (encodeEverything) {
					// Encode ASCII symbols.
					string = string.replace(regexAsciiWhitelist, function (symbol) {
						// Use named references if requested & possible.
						if (useNamedReferences && has(encodeMap, symbol)) {
							return '&' + encodeMap[symbol] + ';';
						}

						return escapeBmpSymbol(symbol);
					}); // Shorten a few escapes that represent two symbols, of which at least one
					// is within the ASCII range.

					if (useNamedReferences) {
						string = string.replace(/&gt;\u20D2/g, '&nvgt;').replace(/&lt;\u20D2/g, '&nvlt;').replace(/&#x66;&#x6A;/g, '&fjlig;');
					} // Encode non-ASCII symbols.


					if (useNamedReferences) {
						// Encode non-ASCII symbols that can be replaced with a named reference.
						string = string.replace(regexEncodeNonAscii, function (string) {
							// Note: there is no need to check `has(encodeMap, string)` here.
							return '&' + encodeMap[string] + ';';
						});
					} // Note: any remaining non-ASCII symbols are handled outside of the `if`.

				} else if (useNamedReferences) {
					// Apply named character references.
					// Encode `<>"'&` using named character references.
					if (!allowUnsafeSymbols) {
						string = string.replace(regexEscape, function (string) {
							return '&' + encodeMap[string] + ';'; // no need to check `has()` here
						});
					} // Shorten escapes that represent two symbols, of which at least one is
					// `<>"'&`.


					string = string.replace(/&gt;\u20D2/g, '&nvgt;').replace(/&lt;\u20D2/g, '&nvlt;'); // Encode non-ASCII symbols that can be replaced with a named reference.

					string = string.replace(regexEncodeNonAscii, function (string) {
						// Note: there is no need to check `has(encodeMap, string)` here.
						return '&' + encodeMap[string] + ';';
					});
				} else if (!allowUnsafeSymbols) {
					// Encode `<>"'&` using hexadecimal escapes, now that they’re not handled
					// using named character references.
					string = string.replace(regexEscape, escapeBmpSymbol);
				}

				return string // Encode astral symbols.
					.replace(regexAstralSymbols, function ($0) {
						// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
						var high = $0.charCodeAt(0);
						var low = $0.charCodeAt(1);
						var codePoint = (high - 0xD800) * 0x400 + low - 0xDC00 + 0x10000;
						return escapeCodePoint(codePoint);
					}) // Encode any remaining BMP symbols that are not printable ASCII symbols
					// using a hexadecimal escape.
					.replace(regexBmpWhitelist, escapeBmpSymbol);
			}; // Expose default options (so they can be overridden globally).


			encode.options = {
				'allowUnsafeSymbols': false,
				'encodeEverything': false,
				'strict': false,
				'useNamedReferences': false,
				'decimal': false
			};

			var decode = function decode(html, options) {
				options = merge(options, decode.options);
				var strict = options.strict;

				if (strict && regexInvalidEntity.test(html)) {
					parseError('malformed character reference');
				}

				return html.replace(regexDecode, function ($0, $1, $2, $3, $4, $5, $6, $7, $8) {
					var codePoint;
					var semicolon;
					var decDigits;
					var hexDigits;
					var reference;
					var next;

					if ($1) {
						reference = $1; // Note: there is no need to check `has(decodeMap, reference)`.

						return decodeMap[reference];
					}

					if ($2) {
						// Decode named character references without trailing `;`, e.g. `&amp`.
						// This is only a parse error if it gets converted to `&`, or if it is
						// followed by `=` in an attribute context.
						reference = $2;
						next = $3;

						if (next && options.isAttributeValue) {
							if (strict && next == '=') {
								parseError('`&` did not start a character reference');
							}

							return $0;
						} else {
							if (strict) {
								parseError('named character reference was not terminated by a semicolon');
							} // Note: there is no need to check `has(decodeMapLegacy, reference)`.


							return decodeMapLegacy[reference] + (next || '');
						}
					}

					if ($4) {
						// Decode decimal escapes, e.g. `&#119558;`.
						decDigits = $4;
						semicolon = $5;

						if (strict && !semicolon) {
							parseError('character reference was not terminated by a semicolon');
						}

						codePoint = parseInt(decDigits, 10);
						return codePointToSymbol(codePoint, strict);
					}

					if ($6) {
						// Decode hexadecimal escapes, e.g. `&#x1D306;`.
						hexDigits = $6;
						semicolon = $7;

						if (strict && !semicolon) {
							parseError('character reference was not terminated by a semicolon');
						}

						codePoint = parseInt(hexDigits, 16);
						return codePointToSymbol(codePoint, strict);
					} // If we’re still here, `if ($7)` is implied; it’s an ambiguous
					// ampersand for sure. https://mths.be/notes/ambiguous-ampersands


					if (strict) {
						parseError('named character reference was not terminated by a semicolon');
					}

					return $0;
				});
			}; // Expose default options (so they can be overridden globally).


			decode.options = {
				'isAttributeValue': false,
				'strict': false
			};

			var escape = function escape(string) {
				return string.replace(regexEscape, function ($0) {
					// Note: there is no need to check `has(escapeMap, $0)` here.
					return escapeMap[$0];
				});
			};
			/*--------------------------------------------------------------------------*/


			var he = {
				'version': '1.2.0',
				'encode': encode,
				'decode': decode,
				'escape': escape,
				'unescape': decode
			}; // Some AMD build optimizers, like r.js, check for specific condition patterns
			// like the following:

			if (freeExports && !freeExports.nodeType) {
				if (freeModule) {
					// in Node.js, io.js, or RingoJS v0.8.0+
					freeModule.exports = he;
				} else {
					// in Narwhal or RingoJS v0.7.0-
					for (var key in he) {
						has(he, key) && (freeExports[key] = he[key]);
					}
				}
			} else {
				// in Rhino or a web browser
				root.he = he;
			}
		})(commonjsGlobal);
	});

	var propertyIsEnumerable = objectPropertyIsEnumerable.f;

	// `Object.{ entries, values }` methods implementation
	var createMethod$5 = function (TO_ENTRIES) {
		return function (it) {
			var O = toIndexedObject(it);
			var keys = objectKeys(O);
			var length = keys.length;
			var i = 0;
			var result = [];
			var key;
			while (length > i) {
				key = keys[i++];
				if (!descriptors || propertyIsEnumerable.call(O, key)) {
					result.push(TO_ENTRIES ? [key, O[key]] : O[key]);
				}
			}
			return result;
		};
	};

	var objectToArray = {
		// `Object.entries` method
		// https://tc39.github.io/ecma262/#sec-object.entries
		entries: createMethod$5(true),
		// `Object.values` method
		// https://tc39.github.io/ecma262/#sec-object.values
		values: createMethod$5(false)
	};

	var $values = objectToArray.values;

	// `Object.values` method
	// https://tc39.github.io/ecma262/#sec-object.values
	_export({ target: 'Object', stat: true }, {
		values: function values(O) {
			return $values(O);
		}
	});

	var format$1 = util.format;
	/**
		* Contains error codes, factory functions to create throwable error objects,
		* and warning/deprecation functions.
		* @module
		*/

	/**
		* process.emitWarning or a polyfill
		* @see https://nodejs.org/api/process.html#process_process_emitwarning_warning_options
		* @ignore
		*/

	var emitWarning$1 = function emitWarning(msg, type) {
		if (process$1.emitWarning) {
			process$1.emitWarning(msg, type);
		} else {
			nextTick(function () {
				console.warn(type + ': ' + msg);
			});
		}
	};
	/**
		* Show a deprecation warning. Each distinct message is only displayed once.
		* Ignores empty messages.
		*
		* @param {string} [msg] - Warning to print
		* @private
		*/


	var deprecate$1 = function deprecate(msg) {
		msg = String(msg);

		if (msg && !deprecate.cache[msg]) {
			deprecate.cache[msg] = true;
			emitWarning$1(msg, 'DeprecationWarning');
		}
	};

	deprecate$1.cache = {};
	/**
		* Show a generic warning.
		* Ignores empty messages.
		*
		* @param {string} [msg] - Warning to print
		* @private
		*/

	var warn = function warn(msg) {
		if (msg) {
			emitWarning$1(msg);
		}
	};
	/**
		* When Mocha throw exceptions (or otherwise errors), it attempts to assign a
		* `code` property to the `Error` object, for easier handling.  These are the
		* potential values of `code`.
		*/


	var constants = {
		/**
			* An unrecoverable error.
			*/
		FATAL: 'ERR_MOCHA_FATAL',

		/**
			* The type of an argument to a function call is invalid
			*/
		INVALID_ARG_TYPE: 'ERR_MOCHA_INVALID_ARG_TYPE',

		/**
			* The value of an argument to a function call is invalid
			*/
		INVALID_ARG_VALUE: 'ERR_MOCHA_INVALID_ARG_VALUE',

		/**
			* Something was thrown, but it wasn't an `Error`
			*/
		INVALID_EXCEPTION: 'ERR_MOCHA_INVALID_EXCEPTION',

		/**
			* An interface (e.g., `Mocha.interfaces`) is unknown or invalid
			*/
		INVALID_INTERFACE: 'ERR_MOCHA_INVALID_INTERFACE',

		/**
			* A reporter (.e.g, `Mocha.reporters`) is unknown or invalid
			*/
		INVALID_REPORTER: 'ERR_MOCHA_INVALID_REPORTER',

		/**
			* `done()` was called twice in a `Test` or `Hook` callback
			*/
		MULTIPLE_DONE: 'ERR_MOCHA_MULTIPLE_DONE',

		/**
			* No files matched the pattern provided by the user
			*/
		NO_FILES_MATCH_PATTERN: 'ERR_MOCHA_NO_FILES_MATCH_PATTERN',

		/**
			* Known, but unsupported behavior of some kind
			*/
		UNSUPPORTED: 'ERR_MOCHA_UNSUPPORTED',

		/**
			* Invalid state transition occurring in `Mocha` instance
			*/
		INSTANCE_ALREADY_RUNNING: 'ERR_MOCHA_INSTANCE_ALREADY_RUNNING',

		/**
			* Invalid state transition occurring in `Mocha` instance
			*/
		INSTANCE_ALREADY_DISPOSED: 'ERR_MOCHA_INSTANCE_ALREADY_DISPOSED',

		/**
			* Use of `only()` w/ `--forbid-only` results in this error.
			*/
		FORBIDDEN_EXCLUSIVITY: 'ERR_MOCHA_FORBIDDEN_EXCLUSIVITY',

		/**
			* To be thrown when a user-defined plugin implementation (e.g., `mochaHooks`) is invalid
			*/
		INVALID_PLUGIN_IMPLEMENTATION: 'ERR_MOCHA_INVALID_PLUGIN_IMPLEMENTATION',

		/**
			* To be thrown when a builtin or third-party plugin definition (the _definition_ of `mochaHooks`) is invalid
			*/
		INVALID_PLUGIN_DEFINITION: 'ERR_MOCHA_INVALID_PLUGIN_DEFINITION'
	};
	var MOCHA_ERRORS = new Set(Object.values(constants));
	/**
		* Creates an error object to be thrown when no files to be tested could be found using specified pattern.
		*
		* @public
		* @param {string} message - Error message to be displayed.
		* @param {string} pattern - User-specified argument value.
		* @returns {Error} instance detailing the error condition
		*/

	function createNoFilesMatchPatternError(message, pattern) {
		var err = new Error(message);
		err.code = constants.NO_FILES_MATCH_PATTERN;
		err.pattern = pattern;
		return err;
	}
	/**
		* Creates an error object to be thrown when the reporter specified in the options was not found.
		*
		* @public
		* @param {string} message - Error message to be displayed.
		* @param {string} reporter - User-specified reporter value.
		* @returns {Error} instance detailing the error condition
		*/


	function createInvalidReporterError(message, reporter) {
		var err = new TypeError(message);
		err.code = constants.INVALID_REPORTER;
		err.reporter = reporter;
		return err;
	}
	/**
		* Creates an error object to be thrown when the interface specified in the options was not found.
		*
		* @public
		* @param {string} message - Error message to be displayed.
		* @param {string} ui - User-specified interface value.
		* @returns {Error} instance detailing the error condition
		*/


	function createInvalidInterfaceError(message, ui) {
		var err = new Error(message);
		err.code = constants.INVALID_INTERFACE;
		err["interface"] = ui;
		return err;
	}
	/**
		* Creates an error object to be thrown when a behavior, option, or parameter is unsupported.
		*
		* @public
		* @param {string} message - Error message to be displayed.
		* @returns {Error} instance detailing the error condition
		*/


	function createUnsupportedError(message) {
		var err = new Error(message);
		err.code = constants.UNSUPPORTED;
		return err;
	}
	/**
		* Creates an error object to be thrown when an argument is missing.
		*
		* @public
		* @param {string} message - Error message to be displayed.
		* @param {string} argument - Argument name.
		* @param {string} expected - Expected argument datatype.
		* @returns {Error} instance detailing the error condition
		*/


	function createMissingArgumentError(message, argument, expected) {
		return createInvalidArgumentTypeError(message, argument, expected);
	}
	/**
		* Creates an error object to be thrown when an argument did not use the supported type
		*
		* @public
		* @param {string} message - Error message to be displayed.
		* @param {string} argument - Argument name.
		* @param {string} expected - Expected argument datatype.
		* @returns {Error} instance detailing the error condition
		*/


	function createInvalidArgumentTypeError(message, argument, expected) {
		var err = new TypeError(message);
		err.code = constants.INVALID_ARG_TYPE;
		err.argument = argument;
		err.expected = expected;
		err.actual = _typeof(argument);
		return err;
	}
	/**
		* Creates an error object to be thrown when an argument did not use the supported value
		*
		* @public
		* @param {string} message - Error message to be displayed.
		* @param {string} argument - Argument name.
		* @param {string} value - Argument value.
		* @param {string} [reason] - Why value is invalid.
		* @returns {Error} instance detailing the error condition
		*/


	function createInvalidArgumentValueError(message, argument, value, reason) {
		var err = new TypeError(message);
		err.code = constants.INVALID_ARG_VALUE;
		err.argument = argument;
		err.value = value;
		err.reason = typeof reason !== 'undefined' ? reason : 'is invalid';
		return err;
	}
	/**
		* Creates an error object to be thrown when an exception was caught, but the `Error` is falsy or undefined.
		*
		* @public
		* @param {string} message - Error message to be displayed.
		* @returns {Error} instance detailing the error condition
		*/


	function createInvalidExceptionError(message, value) {
		var err = new Error(message);
		err.code = constants.INVALID_EXCEPTION;
		err.valueType = _typeof(value);
		err.value = value;
		return err;
	}
	/**
		* Creates an error object to be thrown when an unrecoverable error occurs.
		*
		* @public
		* @param {string} message - Error message to be displayed.
		* @returns {Error} instance detailing the error condition
		*/


	function createFatalError(message, value) {
		var err = new Error(message);
		err.code = constants.FATAL;
		err.valueType = _typeof(value);
		err.value = value;
		return err;
	}
	/**
		* Dynamically creates a plugin-type-specific error based on plugin type
		* @param {string} message - Error message
		* @param {"reporter"|"interface"} pluginType - Plugin type. Future: expand as needed
		* @param {string} [pluginId] - Name/path of plugin, if any
		* @throws When `pluginType` is not known
		* @public
		* @returns {Error}
		*/


	function createInvalidLegacyPluginError(message, pluginType, pluginId) {
		switch (pluginType) {
			case 'reporter':
				return createInvalidReporterError(message, pluginId);

			case 'interface':
				return createInvalidInterfaceError(message, pluginId);

			default:
				throw new Error('unknown pluginType "' + pluginType + '"');
		}
	}
	/**
		* **DEPRECATED**.  Use {@link createInvalidLegacyPluginError} instead  Dynamically creates a plugin-type-specific error based on plugin type
		* @deprecated
		* @param {string} message - Error message
		* @param {"reporter"|"interface"} pluginType - Plugin type. Future: expand as needed
		* @param {string} [pluginId] - Name/path of plugin, if any
		* @throws When `pluginType` is not known
		* @public
		* @returns {Error}
		*/


	function createInvalidPluginError() {
		deprecate$1('Use createInvalidLegacyPluginError() instead');
		return createInvalidLegacyPluginError.apply(void 0, arguments);
	}
	/**
		* Creates an error object to be thrown when a mocha object's `run` method is executed while it is already disposed.
		* @param {string} message The error message to be displayed.
		* @param {boolean} cleanReferencesAfterRun the value of `cleanReferencesAfterRun`
		* @param {Mocha} instance the mocha instance that throw this error
		*/


	function createMochaInstanceAlreadyDisposedError(message, cleanReferencesAfterRun, instance) {
		var err = new Error(message);
		err.code = constants.INSTANCE_ALREADY_DISPOSED;
		err.cleanReferencesAfterRun = cleanReferencesAfterRun;
		err.instance = instance;
		return err;
	}
	/**
		* Creates an error object to be thrown when a mocha object's `run` method is called while a test run is in progress.
		* @param {string} message The error message to be displayed.
		*/


	function createMochaInstanceAlreadyRunningError(message, instance) {
		var err = new Error(message);
		err.code = constants.INSTANCE_ALREADY_RUNNING;
		err.instance = instance;
		return err;
	}
	/*
		* Creates an error object to be thrown when done() is called multiple times in a test
		*
		* @public
		* @param {Runnable} runnable - Original runnable
		* @param {Error} [originalErr] - Original error, if any
		* @returns {Error} instance detailing the error condition
		*/


	function createMultipleDoneError(runnable, originalErr) {
		var title;

		try {
			title = format$1('<%s>', runnable.fullTitle());

			if (runnable.parent.root) {
				title += ' (of root suite)';
			}
		} catch (ignored) {
			title = format$1('<%s> (of unknown suite)', runnable.title);
		}

		var message = format$1('done() called multiple times in %s %s', runnable.type ? runnable.type : 'unknown runnable', title);

		if (runnable.file) {
			message += format$1(' of file %s', runnable.file);
		}

		if (originalErr) {
			message += format$1('; in addition, done() received error: %s', originalErr);
		}

		var err = new Error(message);
		err.code = constants.MULTIPLE_DONE;
		err.valueType = _typeof(originalErr);
		err.value = originalErr;
		return err;
	}
	/**
		* Creates an error object to be thrown when `.only()` is used with
		* `--forbid-only`.
		* @public
		* @param {Mocha} mocha - Mocha instance
		* @returns {Error} Error with code {@link constants.FORBIDDEN_EXCLUSIVITY}
		*/


	function createForbiddenExclusivityError(mocha) {
		var err = new Error(mocha.isWorker ? '`.only` is not supported in parallel mode' : '`.only` forbidden by --forbid-only');
		err.code = constants.FORBIDDEN_EXCLUSIVITY;
		return err;
	}
	/**
		* Creates an error object to be thrown when a plugin definition is invalid
		* @param {string} msg - Error message
		* @param {PluginDefinition} [pluginDef] - Problematic plugin definition
		* @public
		* @returns {Error} Error with code {@link constants.INVALID_PLUGIN_DEFINITION}
		*/


	function createInvalidPluginDefinitionError(msg, pluginDef) {
		var err = new Error(msg);
		err.code = constants.INVALID_PLUGIN_DEFINITION;
		err.pluginDef = pluginDef;
		return err;
	}
	/**
		* Creates an error object to be thrown when a plugin implementation (user code) is invalid
		* @param {string} msg - Error message
		* @param {Object} [opts] - Plugin definition and user-supplied implementation
		* @param {PluginDefinition} [opts.pluginDef] - Plugin Definition
		* @param {*} [opts.pluginImpl] - Plugin Implementation (user-supplied)
		* @public
		* @returns {Error} Error with code {@link constants.INVALID_PLUGIN_DEFINITION}
		*/


	function createInvalidPluginImplementationError(msg) {
		var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
			pluginDef = _ref.pluginDef,
			pluginImpl = _ref.pluginImpl;

		var err = new Error(msg);
		err.code = constants.INVALID_PLUGIN_IMPLEMENTATION;
		err.pluginDef = pluginDef;
		err.pluginImpl = pluginImpl;
		return err;
	}
	/**
		* Returns `true` if an error came out of Mocha.
		* _Can suffer from false negatives, but not false positives._
		* @public
		* @param {*} err - Error, or anything
		* @returns {boolean}
		*/


	var isMochaError = function isMochaError(err) {
		return Boolean(err && _typeof(err) === 'object' && MOCHA_ERRORS.has(err.code));
	};

	var errors = {
		constants: constants,
		createFatalError: createFatalError,
		createForbiddenExclusivityError: createForbiddenExclusivityError,
		createInvalidArgumentTypeError: createInvalidArgumentTypeError,
		createInvalidArgumentValueError: createInvalidArgumentValueError,
		createInvalidExceptionError: createInvalidExceptionError,
		createInvalidInterfaceError: createInvalidInterfaceError,
		createInvalidLegacyPluginError: createInvalidLegacyPluginError,
		createInvalidPluginDefinitionError: createInvalidPluginDefinitionError,
		createInvalidPluginError: createInvalidPluginError,
		createInvalidPluginImplementationError: createInvalidPluginImplementationError,
		createInvalidReporterError: createInvalidReporterError,
		createMissingArgumentError: createMissingArgumentError,
		createMochaInstanceAlreadyDisposedError: createMochaInstanceAlreadyDisposedError,
		createMochaInstanceAlreadyRunningError: createMochaInstanceAlreadyRunningError,
		createMultipleDoneError: createMultipleDoneError,
		createNoFilesMatchPatternError: createNoFilesMatchPatternError,
		createUnsupportedError: createUnsupportedError,
		deprecate: deprecate$1,
		isMochaError: isMochaError,
		warn: warn
	};

	var _nodeResolve_empty = {};

	var _nodeResolve_empty$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		'default': _nodeResolve_empty
	});

	var require$$11 = getCjsExportFromNamespace(_nodeResolve_empty$1);

	var utils = createCommonjsModule(function (module, exports) {
		/**
			* Various utility functions used throughout Mocha's codebase.
			* @module utils
			*/

		/**
			* Module dependencies.
			*/

		var nanoid = nonSecure.nanoid;
		var MOCHA_ID_PROP_NAME = '__mocha_id__';
		/**
			* Inherit the prototype methods from one constructor into another.
			*
			* @param {function} ctor - Constructor function which needs to inherit the
			*     prototype.
			* @param {function} superCtor - Constructor function to inherit prototype from.
			* @throws {TypeError} if either constructor is null, or if super constructor
			*     lacks a prototype.
			*/

		exports.inherits = util.inherits;
		/**
			* Escape special characters in the given string of html.
			*
			* @private
			* @param  {string} html
			* @return {string}
			*/

		exports.escape = function (html) {
			return he.encode(String(html), {
				useNamedReferences: false
			});
		};
		/**
			* Test if the given obj is type of string.
			*
			* @private
			* @param {Object} obj
			* @return {boolean}
			*/


		exports.isString = function (obj) {
			return typeof obj === 'string';
		};
		/**
			* Compute a slug from the given `str`.
			*
			* @private
			* @param {string} str
			* @return {string}
			*/


		exports.slug = function (str) {
			return str.toLowerCase().replace(/\s+/g, '-').replace(/[^-\w]/g, '').replace(/-{2,}/g, '-');
		};
		/**
			* Strip the function definition from `str`, and re-indent for pre whitespace.
			*
			* @param {string} str
			* @return {string}
			*/


		exports.clean = function (str) {
			str = str.replace(/\r\n?|[\n\u2028\u2029]/g, '\n').replace(/^\uFEFF/, '') // (traditional)->  space/name     parameters    body     (lambda)-> parameters       body   multi-statement/single          keep body content
				.replace(/^function(?:\s*|\s+[^(]*)\([^)]*\)\s*\{((?:.|\n)*?)\s*\}$|^\([^)]*\)\s*=>\s*(?:\{((?:.|\n)*?)\s*\}|((?:.|\n)*))$/, '$1$2$3');
			var spaces = str.match(/^\n?( *)/)[1].length;
			var tabs = str.match(/^\n?(\t*)/)[1].length;
			var re = new RegExp('^\n?' + (tabs ? '\t' : ' ') + '{' + (tabs || spaces) + '}', 'gm');
			str = str.replace(re, '');
			return str.trim();
		};
		/**
			* If a value could have properties, and has none, this function is called,
			* which returns a string representation of the empty value.
			*
			* Functions w/ no properties return `'[Function]'`
			* Arrays w/ length === 0 return `'[]'`
			* Objects w/ no properties return `'{}'`
			* All else: return result of `value.toString()`
			*
			* @private
			* @param {*} value The value to inspect.
			* @param {string} typeHint The type of the value
			* @returns {string}
			*/


		function emptyRepresentation(value, typeHint) {
			switch (typeHint) {
				case 'function':
					return '[Function]';

				case 'object':
					return '{}';

				case 'array':
					return '[]';

				default:
					return value.toString();
			}
		}
		/**
			* Takes some variable and asks `Object.prototype.toString()` what it thinks it
			* is.
			*
			* @private
			* @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString
			* @param {*} value The value to test.
			* @returns {string} Computed type
			* @example
			* canonicalType({}) // 'object'
			* canonicalType([]) // 'array'
			* canonicalType(1) // 'number'
			* canonicalType(false) // 'boolean'
			* canonicalType(Infinity) // 'number'
			* canonicalType(null) // 'null'
			* canonicalType(new Date()) // 'date'
			* canonicalType(/foo/) // 'regexp'
			* canonicalType('type') // 'string'
			* canonicalType(global) // 'global'
			* canonicalType(new String('foo') // 'object'
			* canonicalType(async function() {}) // 'asyncfunction'
			* canonicalType(await import(name)) // 'module'
			*/


		var canonicalType = exports.canonicalType = function canonicalType(value) {
			if (value === undefined) {
				return 'undefined';
			} else if (value === null) {
				return 'null';
			} else if (isBuffer(value)) {
				return 'buffer';
			}

			return Object.prototype.toString.call(value).replace(/^\[.+\s(.+?)]$/, '$1').toLowerCase();
		};
		/**
			*
			* Returns a general type or data structure of a variable
			* @private
			* @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures
			* @param {*} value The value to test.
			* @returns {string} One of undefined, boolean, number, string, bigint, symbol, object
			* @example
			* type({}) // 'object'
			* type([]) // 'array'
			* type(1) // 'number'
			* type(false) // 'boolean'
			* type(Infinity) // 'number'
			* type(null) // 'null'
			* type(new Date()) // 'object'
			* type(/foo/) // 'object'
			* type('type') // 'string'
			* type(global) // 'object'
			* type(new String('foo') // 'string'
			*/


		exports.type = function type(value) {
			// Null is special
			if (value === null) return 'null';
			var primitives = new Set(['undefined', 'boolean', 'number', 'string', 'bigint', 'symbol']);

			var _type = _typeof(value);

			if (_type === 'function') return _type;
			if (primitives.has(_type)) return _type;
			if (value instanceof String) return 'string';
			if (value instanceof Error) return 'error';
			if (Array.isArray(value)) return 'array';
			return _type;
		};
		/**
			* Stringify `value`. Different behavior depending on type of value:
			*
			* - If `value` is undefined or null, return `'[undefined]'` or `'[null]'`, respectively.
			* - If `value` is not an object, function or array, return result of `value.toString()` wrapped in double-quotes.
			* - If `value` is an *empty* object, function, or array, return result of function
			*   {@link emptyRepresentation}.
			* - If `value` has properties, call {@link exports.canonicalize} on it, then return result of
			*   JSON.stringify().
			*
			* @private
			* @see exports.type
			* @param {*} value
			* @return {string}
			*/


		exports.stringify = function (value) {
			var typeHint = canonicalType(value);

			if (!~['object', 'array', 'function'].indexOf(typeHint)) {
				if (typeHint === 'buffer') {
					var json = Buffer.prototype.toJSON.call(value); // Based on the toJSON result

					return jsonStringify(json.data && json.type ? json.data : json, 2).replace(/,(\n|$)/g, '$1');
				} // IE7/IE8 has a bizarre String constructor; needs to be coerced
				// into an array and back to obj.


				if (typeHint === 'string' && _typeof(value) === 'object') {
					value = value.split('').reduce(function (acc, _char, idx) {
						acc[idx] = _char;
						return acc;
					}, {});
					typeHint = 'object';
				} else {
					return jsonStringify(value);
				}
			}

			for (var prop in value) {
				if (Object.prototype.hasOwnProperty.call(value, prop)) {
					return jsonStringify(exports.canonicalize(value, null, typeHint), 2).replace(/,(\n|$)/g, '$1');
				}
			}

			return emptyRepresentation(value, typeHint);
		};
		/**
			* like JSON.stringify but more sense.
			*
			* @private
			* @param {Object}  object
			* @param {number=} spaces
			* @param {number=} depth
			* @returns {*}
			*/


		function jsonStringify(object, spaces, depth) {
			if (typeof spaces === 'undefined') {
				// primitive types
				return _stringify(object);
			}

			depth = depth || 1;
			var space = spaces * depth;
			var str = Array.isArray(object) ? '[' : '{';
			var end = Array.isArray(object) ? ']' : '}';
			var length = typeof object.length === 'number' ? object.length : Object.keys(object).length; // `.repeat()` polyfill

			function repeat(s, n) {
				return new Array(n).join(s);
			}

			function _stringify(val) {
				switch (canonicalType(val)) {
					case 'null':
					case 'undefined':
						val = '[' + val + ']';
						break;

					case 'array':
					case 'object':
						val = jsonStringify(val, spaces, depth + 1);
						break;

					case 'boolean':
					case 'regexp':
					case 'symbol':
					case 'number':
						val = val === 0 && 1 / val === -Infinity // `-0`
							? '-0' : val.toString();
						break;

					case 'date':
						var sDate = isNaN(val.getTime()) ? val.toString() : val.toISOString();
						val = '[Date: ' + sDate + ']';
						break;

					case 'buffer':
						var json = val.toJSON(); // Based on the toJSON result

						json = json.data && json.type ? json.data : json;
						val = '[Buffer: ' + jsonStringify(json, 2, depth + 1) + ']';
						break;

					default:
						val = val === '[Function]' || val === '[Circular]' ? val : JSON.stringify(val);
					// string
				}

				return val;
			}

			for (var i in object) {
				if (!Object.prototype.hasOwnProperty.call(object, i)) {
					continue; // not my business
				}

				--length;
				str += '\n ' + repeat(' ', space) + (Array.isArray(object) ? '' : '"' + i + '": ') + // key
					_stringify(object[i]) + ( // value
						length ? ',' : ''); // comma
			}

			return str + ( // [], {}
				str.length !== 1 ? '\n' + repeat(' ', --space) + end : end);
		}
		/**
			* Return a new Thing that has the keys in sorted order. Recursive.
			*
			* If the Thing...
			* - has already been seen, return string `'[Circular]'`
			* - is `undefined`, return string `'[undefined]'`
			* - is `null`, return value `null`
			* - is some other primitive, return the value
			* - is not a primitive or an `Array`, `Object`, or `Function`, return the value of the Thing's `toString()` method
			* - is a non-empty `Array`, `Object`, or `Function`, return the result of calling this function again.
			* - is an empty `Array`, `Object`, or `Function`, return the result of calling `emptyRepresentation()`
			*
			* @private
			* @see {@link exports.stringify}
			* @param {*} value Thing to inspect.  May or may not have properties.
			* @param {Array} [stack=[]] Stack of seen values
			* @param {string} [typeHint] Type hint
			* @return {(Object|Array|Function|string|undefined)}
			*/


		exports.canonicalize = function canonicalize(value, stack, typeHint) {
			var canonicalizedObj;
			/* eslint-disable no-unused-vars */

			var prop;
			/* eslint-enable no-unused-vars */

			typeHint = typeHint || canonicalType(value);

			function withStack(value, fn) {
				stack.push(value);
				fn();
				stack.pop();
			}

			stack = stack || [];

			if (stack.indexOf(value) !== -1) {
				return '[Circular]';
			}

			switch (typeHint) {
				case 'undefined':
				case 'buffer':
				case 'null':
					canonicalizedObj = value;
					break;

				case 'array':
					withStack(value, function () {
						canonicalizedObj = value.map(function (item) {
							return exports.canonicalize(item, stack);
						});
					});
					break;

				case 'function':
					/* eslint-disable-next-line no-unused-vars */
					for (prop in value) {
						canonicalizedObj = {};
						break;
					}
					/* eslint-enable guard-for-in */


					if (!canonicalizedObj) {
						canonicalizedObj = emptyRepresentation(value, typeHint);
						break;
					}

				/* falls through */

				case 'object':
					canonicalizedObj = canonicalizedObj || {};
					withStack(value, function () {
						Object.keys(value).sort().forEach(function (key) {
							canonicalizedObj[key] = exports.canonicalize(value[key], stack);
						});
					});
					break;

				case 'date':
				case 'number':
				case 'regexp':
				case 'boolean':
				case 'symbol':
					canonicalizedObj = value;
					break;

				default:
					canonicalizedObj = value + '';
			}

			return canonicalizedObj;
		};
		/**
			* @summary
			* This Filter based on `mocha-clean` module.(see: `github.com/rstacruz/mocha-clean`)
			* @description
			* When invoking this function you get a filter function that get the Error.stack as an input,
			* and return a prettify output.
			* (i.e: strip Mocha and internal node functions from stack trace).
			* @returns {Function}
			*/


		exports.stackTraceFilter = function () {
			// TODO: Replace with `process.browser`
			var is = typeof document === 'undefined' ? {
				node: true
			} : {
					browser: true
				};
			var slash = path$1.sep;
			var cwd;

			if (is.node) {
				cwd = exports.cwd() + slash;
			} else {
				cwd = (typeof location === 'undefined' ? window.location : location).href.replace(/\/[^/]*$/, '/');
				slash = '/';
			}

			function isMochaInternal(line) {
				return ~line.indexOf('node_modules' + slash + 'mocha' + slash) || ~line.indexOf(slash + 'mocha.js') || ~line.indexOf(slash + 'mocha.min.js');
			}

			function isNodeInternal(line) {
				return ~line.indexOf('(timers.js:') || ~line.indexOf('(events.js:') || ~line.indexOf('(node.js:') || ~line.indexOf('(module.js:') || ~line.indexOf('GeneratorFunctionPrototype.next (native)') || false;
			}

			return function (stack) {
				stack = stack.split('\n');
				stack = stack.reduce(function (list, line) {
					if (isMochaInternal(line)) {
						return list;
					}

					if (is.node && isNodeInternal(line)) {
						return list;
					} // Clean up cwd(absolute)


					if (/:\d+:\d+\)?$/.test(line)) {
						line = line.replace('(' + cwd, '(');
					}

					list.push(line);
					return list;
				}, []);
				return stack.join('\n');
			};
		};
		/**
			* Crude, but effective.
			* @public
			* @param {*} value
			* @returns {boolean} Whether or not `value` is a Promise
			*/


		exports.isPromise = function isPromise(value) {
			return _typeof(value) === 'object' && value !== null && typeof value.then === 'function';
		};
		/**
			* Clamps a numeric value to an inclusive range.
			*
			* @param {number} value - Value to be clamped.
			* @param {number[]} range - Two element array specifying [min, max] range.
			* @returns {number} clamped value
			*/


		exports.clamp = function clamp(value, range) {
			return Math.min(Math.max(value, range[0]), range[1]);
		};
		/**
			* Single quote text by combining with undirectional ASCII quotation marks.
			*
			* @description
			* Provides a simple means of markup for quoting text to be used in output.
			* Use this to quote names of variables, methods, and packages.
			*
			* <samp>package 'foo' cannot be found</samp>
			*
			* @private
			* @param {string} str - Value to be quoted.
			* @returns {string} quoted value
			* @example
			* sQuote('n') // => 'n'
			*/


		exports.sQuote = function (str) {
			return "'" + str + "'";
		};
		/**
			* Double quote text by combining with undirectional ASCII quotation marks.
			*
			* @description
			* Provides a simple means of markup for quoting text to be used in output.
			* Use this to quote names of datatypes, classes, pathnames, and strings.
			*
			* <samp>argument 'value' must be "string" or "number"</samp>
			*
			* @private
			* @param {string} str - Value to be quoted.
			* @returns {string} quoted value
			* @example
			* dQuote('number') // => "number"
			*/


		exports.dQuote = function (str) {
			return '"' + str + '"';
		};
		/**
			* It's a noop.
			* @public
			*/


		exports.noop = function () { };
		/**
			* Creates a map-like object.
			*
			* @description
			* A "map" is an object with no prototype, for our purposes. In some cases
			* this would be more appropriate than a `Map`, especially if your environment
			* doesn't support it. Recommended for use in Mocha's public APIs.
			*
			* @public
			* @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Custom_and_Null_objects|MDN:Map}
			* @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create#Custom_and_Null_objects|MDN:Object.create - Custom objects}
			* @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Custom_and_Null_objects|MDN:Object.assign}
			* @param {...*} [obj] - Arguments to `Object.assign()`.
			* @returns {Object} An object with no prototype, having `...obj` properties
			*/


		exports.createMap = function (obj) {
			return Object.assign.apply(null, [Object.create(null)].concat(Array.prototype.slice.call(arguments)));
		};
		/**
			* Creates a read-only map-like object.
			*
			* @description
			* This differs from {@link module:utils.createMap createMap} only in that
			* the argument must be non-empty, because the result is frozen.
			*
			* @see {@link module:utils.createMap createMap}
			* @param {...*} [obj] - Arguments to `Object.assign()`.
			* @returns {Object} A frozen object with no prototype, having `...obj` properties
			* @throws {TypeError} if argument is not a non-empty object.
			*/


		exports.defineConstants = function (obj) {
			if (canonicalType(obj) !== 'object' || !Object.keys(obj).length) {
				throw new TypeError('Invalid argument; expected a non-empty object');
			}

			return Object.freeze(exports.createMap(obj));
		};
		/**
			* Whether current version of Node support ES modules
			*
			* @description
			* Versions prior to 10 did not support ES Modules, and version 10 has an old incompatible version of ESM.
			* This function returns whether Node.JS has ES Module supports that is compatible with Mocha's needs,
			* which is version >=12.11.
			*
			* @param {partialSupport} whether the full Node.js ESM support is available (>= 12) or just something that supports the runtime (>= 10)
			*
			* @returns {Boolean} whether the current version of Node.JS supports ES Modules in a way that is compatible with Mocha
			*/


		exports.supportsEsModules = function (partialSupport) {
			if (!exports.isBrowser() && process$1.versions && process$1.versions.node) {
				var versionFields = process$1.versions.node.split('.');
				var major = +versionFields[0];
				var minor = +versionFields[1];

				if (!partialSupport) {
					return major >= 13 || major === 12 && minor >= 11;
				} else {
					return major >= 10;
				}
			}
		};
		/**
			* Returns current working directory
			*
			* Wrapper around `process.cwd()` for isolation
			* @private
			*/


		exports.cwd = function cwd() {
			return process$1.cwd();
		};
		/**
			* Returns `true` if Mocha is running in a browser.
			* Checks for `process.browser`.
			* @returns {boolean}
			* @private
			*/


		exports.isBrowser = function isBrowser() {
			return Boolean(browser$1);
		};
		/**
			* Lookup file names at the given `path`.
			*
			* @description
			* Filenames are returned in _traversal_ order by the OS/filesystem.
			* **Make no assumption that the names will be sorted in any fashion.**
			*
			* @public
			* @alias module:lib/cli.lookupFiles
			* @param {string} filepath - Base path to start searching from.
			* @param {string[]} [extensions=[]] - File extensions to look for.
			* @param {boolean} [recursive=false] - Whether to recurse into subdirectories.
			* @return {string[]} An array of paths.
			* @throws {Error} if no files match pattern.
			* @throws {TypeError} if `filepath` is directory and `extensions` not provided.
			* @deprecated Moved to {@link module:lib/cli.lookupFiles}
			*/


		exports.lookupFiles = function () {
			if (exports.isBrowser()) {
				throw errors.createUnsupportedError('lookupFiles() is only supported in Node.js!');
			}

			errors.deprecate('`lookupFiles()` in module `mocha/lib/utils` has moved to module `mocha/lib/cli` and will be removed in the next major revision of Mocha');
			return require$$11.lookupFiles.apply(require$$11, arguments);
		};
		/*
			* Casts `value` to an array; useful for optionally accepting array parameters
			*
			* It follows these rules, depending on `value`.  If `value` is...
			* 1. `undefined`: return an empty Array
			* 2. `null`: return an array with a single `null` element
			* 3. Any other object: return the value of `Array.from()` _if_ the object is iterable
			* 4. otherwise: return an array with a single element, `value`
			* @param {*} value - Something to cast to an Array
			* @returns {Array<*>}
			*/


		exports.castArray = function castArray(value) {
			if (value === undefined) {
				return [];
			}

			if (value === null) {
				return [null];
			}

			if (_typeof(value) === 'object' && (typeof value[Symbol.iterator] === 'function' || value.length !== undefined)) {
				return Array.from(value);
			}

			return [value];
		};

		exports.constants = exports.defineConstants({
			MOCHA_ID_PROP_NAME: MOCHA_ID_PROP_NAME
		});
		/**
			* Creates a new unique identifier
			* @returns {string} Unique identifier
			*/

		exports.uniqueID = function () {
			return nanoid();
		};

		exports.assignNewMochaID = function (obj) {
			var id = exports.uniqueID();
			Object.defineProperty(obj, MOCHA_ID_PROP_NAME, {
				get: function get() {
					return id;
				}
			});
			return obj;
		};
		/**
			* Retrieves a Mocha ID from an object, if present.
			* @param {*} [obj] - Object
			* @returns {string|void}
			*/


		exports.getMochaID = function (obj) {
			return obj && _typeof(obj) === 'object' ? obj[MOCHA_ID_PROP_NAME] : undefined;
		};
	});

	// `Map` constructor
	// https://tc39.github.io/ecma262/#sec-map-objects
	var es_map = collection('Map', function (init) {
		return function Map() { return init(this, arguments.length ? arguments[0] : undefined); };
	}, collectionStrong);

	/**
		@module Pending
	*/

	var pending = Pending;
	/**
		* Initialize a new `Pending` error with the given message.
		*
		* @param {string} message
		*/

	function Pending(message) {
		this.message = message;
	}

	/**
		* This is the common logic for both the Node.js and web browser
		* implementations of `debug()`.
		*/

	function setup(env) {
		createDebug.debug = createDebug;
		createDebug["default"] = createDebug;
		createDebug.coerce = coerce;
		createDebug.disable = disable;
		createDebug.enable = enable;
		createDebug.enabled = enabled;
		createDebug.humanize = ms;
		Object.keys(env).forEach(function (key) {
			createDebug[key] = env[key];
		});
		/**
		* Active `debug` instances.
		*/

		createDebug.instances = [];
		/**
		* The currently active debug mode names, and names to skip.
		*/

		createDebug.names = [];
		createDebug.skips = [];
		/**
		* Map of special "%n" handling functions, for the debug "format" argument.
		*
		* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
		*/

		createDebug.formatters = {};
		/**
		* Selects a color for a debug namespace
		* @param {String} namespace The namespace string for the for the debug instance to be colored
		* @return {Number|String} An ANSI color code for the given namespace
		* @api private
		*/

		function selectColor(namespace) {
			var hash = 0;

			for (var i = 0; i < namespace.length; i++) {
				hash = (hash << 5) - hash + namespace.charCodeAt(i);
				hash |= 0; // Convert to 32bit integer
			}

			return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
		}

		createDebug.selectColor = selectColor;
		/**
		* Create a debugger with the given `namespace`.
		*
		* @param {String} namespace
		* @return {Function}
		* @api public
		*/

		function createDebug(namespace) {
			var prevTime;

			function debug() {
				for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
					args[_key] = arguments[_key];
				}

				// Disabled?
				if (!debug.enabled) {
					return;
				}

				var self = debug; // Set `diff` timestamp

				var curr = Number(new Date());
				var ms = curr - (prevTime || curr);
				self.diff = ms;
				self.prev = prevTime;
				self.curr = curr;
				prevTime = curr;
				args[0] = createDebug.coerce(args[0]);

				if (typeof args[0] !== 'string') {
					// Anything else let's inspect with %O
					args.unshift('%O');
				} // Apply any `formatters` transformations


				var index = 0;
				args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
					// If we encounter an escaped % then don't increase the array index
					if (match === '%%') {
						return match;
					}

					index++;
					var formatter = createDebug.formatters[format];

					if (typeof formatter === 'function') {
						var val = args[index];
						match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`

						args.splice(index, 1);
						index--;
					}

					return match;
				}); // Apply env-specific formatting (colors, etc.)

				createDebug.formatArgs.call(self, args);
				var logFn = self.log || createDebug.log;
				logFn.apply(self, args);
			}

			debug.namespace = namespace;
			debug.enabled = createDebug.enabled(namespace);
			debug.useColors = createDebug.useColors();
			debug.color = createDebug.selectColor(namespace);
			debug.destroy = destroy;
			debug.extend = extend; // Env-specific initialization logic for debug instances

			if (typeof createDebug.init === 'function') {
				createDebug.init(debug);
			}

			createDebug.instances.push(debug);
			return debug;
		}

		function destroy() {
			var index = createDebug.instances.indexOf(this);

			if (index !== -1) {
				createDebug.instances.splice(index, 1);
				return true;
			}

			return false;
		}

		function extend(namespace, delimiter) {
			var newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
			newDebug.log = this.log;
			return newDebug;
		}
		/**
		* Enables a debug mode by namespaces. This can include modes
		* separated by a colon and wildcards.
		*
		* @param {String} namespaces
		* @api public
		*/


		function enable(namespaces) {
			createDebug.save(namespaces);
			createDebug.names = [];
			createDebug.skips = [];
			var i;
			var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
			var len = split.length;

			for (i = 0; i < len; i++) {
				if (!split[i]) {
					// ignore empty strings
					continue;
				}

				namespaces = split[i].replace(/\*/g, '.*?');

				if (namespaces[0] === '-') {
					createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
				} else {
					createDebug.names.push(new RegExp('^' + namespaces + '$'));
				}
			}

			for (i = 0; i < createDebug.instances.length; i++) {
				var instance = createDebug.instances[i];
				instance.enabled = createDebug.enabled(instance.namespace);
			}
		}
		/**
		* Disable debug output.
		*
		* @return {String} namespaces
		* @api public
		*/


		function disable() {
			var namespaces = [].concat(_toConsumableArray(createDebug.names.map(toNamespace)), _toConsumableArray(createDebug.skips.map(toNamespace).map(function (namespace) {
				return '-' + namespace;
			}))).join(',');
			createDebug.enable('');
			return namespaces;
		}
		/**
		* Returns true if the given mode name is enabled, false otherwise.
		*
		* @param {String} name
		* @return {Boolean}
		* @api public
		*/


		function enabled(name) {
			if (name[name.length - 1] === '*') {
				return true;
			}

			var i;
			var len;

			for (i = 0, len = createDebug.skips.length; i < len; i++) {
				if (createDebug.skips[i].test(name)) {
					return false;
				}
			}

			for (i = 0, len = createDebug.names.length; i < len; i++) {
				if (createDebug.names[i].test(name)) {
					return true;
				}
			}

			return false;
		}
		/**
		* Convert regexp to namespace
		*
		* @param {RegExp} regxep
		* @return {String} namespace
		* @api private
		*/


		function toNamespace(regexp) {
			return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, '*');
		}
		/**
		* Coerce `val`.
		*
		* @param {Mixed} val
		* @return {Mixed}
		* @api private
		*/


		function coerce(val) {
			if (val instanceof Error) {
				return val.stack || val.message;
			}

			return val;
		}

		createDebug.enable(createDebug.load());
		return createDebug;
	}

	var common = setup;

	var browser$2 = createCommonjsModule(function (module, exports) {
		/* eslint-env browser */

		/**
			* This is the web browser implementation of `debug()`.
			*/
		exports.formatArgs = formatArgs;
		exports.save = save;
		exports.load = load;
		exports.useColors = useColors;
		exports.storage = localstorage();
		/**
			* Colors.
			*/

		exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];
		/**
			* Currently only WebKit-based Web Inspectors, Firefox >= v31,
			* and the Firebug extension (any Firefox version) are known
			* to support "%c" CSS customizations.
			*
			* TODO: add a `localStorage` variable to explicitly enable/disable colors
			*/
		// eslint-disable-next-line complexity

		function useColors() {
			// NB: In an Electron preload script, document will be defined but not fully
			// initialized. Since we know we're in Chrome, we'll just detect this case
			// explicitly
			if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
				return true;
			} // Internet Explorer and Edge do not support colors.


			if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
				return false;
			} // Is webkit? http://stackoverflow.com/a/16459606/376773
			// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632


			return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
				typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
				// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
				typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
				typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
		}
		/**
			* Colorize log arguments if enabled.
			*
			* @api public
			*/


		function formatArgs(args) {
			args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);

			if (!this.useColors) {
				return;
			}

			var c = 'color: ' + this.color;
			args.splice(1, 0, c, 'color: inherit'); // The final "%c" is somewhat tricky, because there could be other
			// arguments passed either before or after the %c, so we need to
			// figure out the correct index to insert the CSS into

			var index = 0;
			var lastC = 0;
			args[0].replace(/%[a-zA-Z%]/g, function (match) {
				if (match === '%%') {
					return;
				}

				index++;

				if (match === '%c') {
					// We only are interested in the *last* %c
					// (the user may have provided their own)
					lastC = index;
				}
			});
			args.splice(lastC, 0, c);
		}
		/**
			* Invokes `console.debug()` when available.
			* No-op when `console.debug` is not a "function".
			* If `console.debug` is not available, falls back
			* to `console.log`.
			*
			* @api public
			*/


		exports.log = console.debug || console.log || function () { };
		/**
			* Save `namespaces`.
			*
			* @param {String} namespaces
			* @api private
			*/


		function save(namespaces) {
			try {
				if (namespaces) {
					exports.storage.setItem('debug', namespaces);
				} else {
					exports.storage.removeItem('debug');
				}
			} catch (error) {// Swallow
				// XXX (@Qix-) should we be logging these?
			}
		}
		/**
			* Load `namespaces`.
			*
			* @return {String} returns the previously persisted debug modes
			* @api private
			*/


		function load() {
			var r;

			try {
				r = exports.storage.getItem('debug');
			} catch (error) {// Swallow
				// XXX (@Qix-) should we be logging these?
			} // If debug isn't set in LS, and we're in Electron, try to load $DEBUG


			if (!r && typeof process$1 !== 'undefined' && 'env' in process$1) {
				r = process$1.env.DEBUG;
			}

			return r;
		}
		/**
			* Localstorage attempts to return the localstorage.
			*
			* This is necessary because safari throws
			* when a user disables cookies/localstorage
			* and you attempt to access it.
			*
			* @return {LocalStorage}
			* @api private
			*/


		function localstorage() {
			try {
				// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
				// The Browser also has localStorage in the global context.
				return localStorage;
			} catch (error) {// Swallow
				// XXX (@Qix-) should we be logging these?
			}
		}

		module.exports = common(exports);
		var formatters = module.exports.formatters;
		/**
			* Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
			*/

		formatters.j = function (v) {
			try {
				return JSON.stringify(v);
			} catch (error) {
				return '[UnexpectedJSONParseError]: ' + error.message;
			}
		};
	});

	var EventEmitter$1 = EventEmitter.EventEmitter;
	var debug$1 = browser$2('mocha:runnable');
	var createInvalidExceptionError$1 = errors.createInvalidExceptionError;
	var createMultipleDoneError$1 = errors.createMultipleDoneError;
	/**
		* Save timer references to avoid Sinon interfering (see GH-237).
		* @private
		*/

	var Date$1 = commonjsGlobal.Date;
	var setTimeout$1 = commonjsGlobal.setTimeout;
	var clearTimeout$1 = commonjsGlobal.clearTimeout;
	var toString$4 = Object.prototype.toString;
	var runnable = Runnable;
	/**
		* Initialize a new `Runnable` with the given `title` and callback `fn`.
		*
		* @class
		* @extends external:EventEmitter
		* @public
		* @param {String} title
		* @param {Function} fn
		*/

	function Runnable(title, fn) {
		this.title = title;
		this.fn = fn;
		this.body = (fn || '').toString();
		this.async = fn && fn.length;
		this.sync = !this.async;
		this._timeout = 2000;
		this._slow = 75;
		this._retries = -1;
		utils.assignNewMochaID(this);
		Object.defineProperty(this, 'id', {
			get: function get() {
				return utils.getMochaID(this);
			}
		});
		this.reset();
	}
	/**
		* Inherit from `EventEmitter.prototype`.
		*/


	utils.inherits(Runnable, EventEmitter$1);
	/**
		* Resets the state initially or for a next run.
		*/

	Runnable.prototype.reset = function () {
		this.timedOut = false;
		this._currentRetry = 0;
		this.pending = false;
		delete this.state;
		delete this.err;
	};
	/**
		* Get current timeout value in msecs.
		*
		* @private
		* @returns {number} current timeout threshold value
		*/

	/**
		* @summary
		* Set timeout threshold value (msecs).
		*
		* @description
		* A string argument can use shorthand (e.g., "2s") and will be converted.
		* The value will be clamped to range [<code>0</code>, <code>2^<sup>31</sup>-1</code>].
		* If clamped value matches either range endpoint, timeouts will be disabled.
		*
		* @private
		* @see {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Maximum_delay_value}
		* @param {number|string} ms - Timeout threshold value.
		* @returns {Runnable} this
		* @chainable
		*/


	Runnable.prototype.timeout = function (ms$1) {
		if (!arguments.length) {
			return this._timeout;
		}

		if (typeof ms$1 === 'string') {
			ms$1 = ms(ms$1);
		} // Clamp to range


		var INT_MAX = Math.pow(2, 31) - 1;
		var range = [0, INT_MAX];
		ms$1 = utils.clamp(ms$1, range); // see #1652 for reasoning

		if (ms$1 === range[0] || ms$1 === range[1]) {
			this._timeout = 0;
		} else {
			this._timeout = ms$1;
		}

		debug$1('timeout %d', this._timeout);

		if (this.timer) {
			this.resetTimeout();
		}

		return this;
	};
	/**
		* Set or get slow `ms`.
		*
		* @private
		* @param {number|string} ms
		* @return {Runnable|number} ms or Runnable instance.
		*/


	Runnable.prototype.slow = function (ms$1) {
		if (!arguments.length || typeof ms$1 === 'undefined') {
			return this._slow;
		}

		if (typeof ms$1 === 'string') {
			ms$1 = ms(ms$1);
		}

		debug$1('slow %d', ms$1);
		this._slow = ms$1;
		return this;
	};
	/**
		* Halt and mark as pending.
		*
		* @memberof Mocha.Runnable
		* @public
		*/


	Runnable.prototype.skip = function () {
		this.pending = true;
		throw new pending('sync skip; aborting execution');
	};
	/**
		* Check if this runnable or its parent suite is marked as pending.
		*
		* @private
		*/


	Runnable.prototype.isPending = function () {
		return this.pending || this.parent && this.parent.isPending();
	};
	/**
		* Return `true` if this Runnable has failed.
		* @return {boolean}
		* @private
		*/


	Runnable.prototype.isFailed = function () {
		return !this.isPending() && this.state === constants$1.STATE_FAILED;
	};
	/**
		* Return `true` if this Runnable has passed.
		* @return {boolean}
		* @private
		*/


	Runnable.prototype.isPassed = function () {
		return !this.isPending() && this.state === constants$1.STATE_PASSED;
	};
	/**
		* Set or get number of retries.
		*
		* @private
		*/


	Runnable.prototype.retries = function (n) {
		if (!arguments.length) {
			return this._retries;
		}

		this._retries = n;
	};
	/**
		* Set or get current retry
		*
		* @private
		*/


	Runnable.prototype.currentRetry = function (n) {
		if (!arguments.length) {
			return this._currentRetry;
		}

		this._currentRetry = n;
	};
	/**
		* Return the full title generated by recursively concatenating the parent's
		* full title.
		*
		* @memberof Mocha.Runnable
		* @public
		* @return {string}
		*/


	Runnable.prototype.fullTitle = function () {
		return this.titlePath().join(' ');
	};
	/**
		* Return the title path generated by concatenating the parent's title path with the title.
		*
		* @memberof Mocha.Runnable
		* @public
		* @return {string}
		*/


	Runnable.prototype.titlePath = function () {
		return this.parent.titlePath().concat([this.title]);
	};
	/**
		* Clear the timeout.
		*
		* @private
		*/


	Runnable.prototype.clearTimeout = function () {
		clearTimeout$1(this.timer);
	};
	/**
		* Reset the timeout.
		*
		* @private
		*/


	Runnable.prototype.resetTimeout = function () {
		var self = this;
		var ms = this.timeout();

		if (ms === 0) {
			return;
		}

		this.clearTimeout();
		this.timer = setTimeout$1(function () {
			if (self.timeout() === 0) {
				return;
			}

			self.callback(self._timeoutError(ms));
			self.timedOut = true;
		}, ms);
	};
	/**
		* Set or get a list of whitelisted globals for this test run.
		*
		* @private
		* @param {string[]} globals
		*/


	Runnable.prototype.globals = function (globals) {
		if (!arguments.length) {
			return this._allowedGlobals;
		}

		this._allowedGlobals = globals;
	};
	/**
		* Run the test and invoke `fn(err)`.
		*
		* @param {Function} fn
		* @private
		*/


	Runnable.prototype.run = function (fn) {
		var self = this;
		var start = new Date$1();
		var ctx = this.ctx;
		var finished;
		var errorWasHandled = false;
		if (this.isPending()) return fn(); // Sometimes the ctx exists, but it is not runnable

		if (ctx && ctx.runnable) {
			ctx.runnable(this);
		} // called multiple times


		function multiple(err) {
			if (errorWasHandled) {
				return;
			}

			errorWasHandled = true;
			self.emit('error', createMultipleDoneError$1(self, err));
		} // finished


		function done(err) {
			var ms = self.timeout();

			if (self.timedOut) {
				return;
			}

			if (finished) {
				return multiple(err);
			}

			self.clearTimeout();
			self.duration = new Date$1() - start;
			finished = true;

			if (!err && self.duration > ms && ms > 0) {
				err = self._timeoutError(ms);
			}

			fn(err);
		} // for .resetTimeout() and Runner#uncaught()


		this.callback = done;

		if (this.fn && typeof this.fn.call !== 'function') {
			done(new TypeError('A runnable must be passed a function as its second argument.'));
			return;
		} // explicit async with `done` argument


		if (this.async) {
			this.resetTimeout(); // allows skip() to be used in an explicit async context

			this.skip = function asyncSkip() {
				this.pending = true;
				done(); // halt execution, the uncaught handler will ignore the failure.

				throw new pending('async skip; aborting execution');
			};

			try {
				callFnAsync(this.fn);
			} catch (err) {
				// handles async runnables which actually run synchronously
				errorWasHandled = true;

				if (err instanceof pending) {
					return; // done() is already called in this.skip()
				} else if (this.allowUncaught) {
					throw err;
				}

				done(Runnable.toValueOrError(err));
			}

			return;
		} // sync or promise-returning


		try {
			callFn(this.fn);
		} catch (err) {
			errorWasHandled = true;

			if (err instanceof pending) {
				return done();
			} else if (this.allowUncaught) {
				throw err;
			}

			done(Runnable.toValueOrError(err));
		}

		function callFn(fn) {
			var result = fn.call(ctx);

			if (result && typeof result.then === 'function') {
				self.resetTimeout();
				result.then(function () {
					done(); // Return null so libraries like bluebird do not warn about
					// subsequently constructed Promises.

					return null;
				}, function (reason) {
					done(reason || new Error('Promise rejected with no or falsy reason'));
				});
			} else {
				if (self.asyncOnly) {
					return done(new Error('--async-only option in use without declaring `done()` or returning a promise'));
				}

				done();
			}
		}

		function callFnAsync(fn) {
			var result = fn.call(ctx, function (err) {
				if (err instanceof Error || toString$4.call(err) === '[object Error]') {
					return done(err);
				}

				if (err) {
					if (Object.prototype.toString.call(err) === '[object Object]') {
						return done(new Error('done() invoked with non-Error: ' + JSON.stringify(err)));
					}

					return done(new Error('done() invoked with non-Error: ' + err));
				}

				if (result && utils.isPromise(result)) {
					return done(new Error('Resolution method is overspecified. Specify a callback *or* return a Promise; not both.'));
				}

				done();
			});
		}
	};
	/**
		* Instantiates a "timeout" error
		*
		* @param {number} ms - Timeout (in milliseconds)
		* @returns {Error} a "timeout" error
		* @private
		*/


	Runnable.prototype._timeoutError = function (ms) {
		var msg = 'Timeout of ' + ms + 'ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves.';

		if (this.file) {
			msg += ' (' + this.file + ')';
		}

		return new Error(msg);
	};

	var constants$1 = utils.defineConstants(
		/**
			* {@link Runnable}-related constants.
			* @public
			* @memberof Runnable
			* @readonly
			* @static
			* @alias constants
			* @enum {string}
			*/
		{
			/**
				* Value of `state` prop when a `Runnable` has failed
				*/
			STATE_FAILED: 'failed',

			/**
				* Value of `state` prop when a `Runnable` has passed
				*/
			STATE_PASSED: 'passed',

			/**
				* Value of `state` prop when a `Runnable` has been skipped by user
				*/
			STATE_PENDING: 'pending'
		});
	/**
		* Given `value`, return identity if truthy, otherwise create an "invalid exception" error and return that.
		* @param {*} [value] - Value to return, if present
		* @returns {*|Error} `value`, otherwise an `Error`
		* @private
		*/

	Runnable.toValueOrError = function (value) {
		return value || createInvalidExceptionError$1('Runnable failed with falsy or undefined exception. Please throw an Error instead.', value);
	};

	Runnable.constants = constants$1;

	var $some$1 = arrayIteration.some;



	var STRICT_METHOD$5 = arrayMethodIsStrict('some');
	var USES_TO_LENGTH$9 = arrayMethodUsesToLength('some');

	// `Array.prototype.some` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.some
	_export({ target: 'Array', proto: true, forced: !STRICT_METHOD$5 || !USES_TO_LENGTH$9 }, {
		some: function some(callbackfn /* , thisArg */) {
			return $some$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
		}
	});

	var inherits$3 = utils.inherits,
		constants$2 = utils.constants;
	var MOCHA_ID_PROP_NAME = constants$2.MOCHA_ID_PROP_NAME;
	/**
		* Expose `Hook`.
		*/

	var hook = Hook;
	/**
		* Initialize a new `Hook` with the given `title` and callback `fn`
		*
		* @class
		* @extends Runnable
		* @param {String} title
		* @param {Function} fn
		*/

	function Hook(title, fn) {
		runnable.call(this, title, fn);
		this.type = 'hook';
	}
	/**
		* Inherit from `Runnable.prototype`.
		*/


	inherits$3(Hook, runnable);
	/**
		* Resets the state for a next run.
		*/

	Hook.prototype.reset = function () {
		runnable.prototype.reset.call(this);
		delete this._error;
	};
	/**
		* Get or set the test `err`.
		*
		* @memberof Hook
		* @public
		* @param {Error} err
		* @return {Error}
		*/


	Hook.prototype.error = function (err) {
		if (!arguments.length) {
			err = this._error;
			this._error = null;
			return err;
		}

		this._error = err;
	};
	/**
		* Returns an object suitable for IPC.
		* Functions are represented by keys beginning with `$$`.
		* @private
		* @returns {Object}
		*/


	Hook.prototype.serialize = function serialize() {
		return _defineProperty({
			$$isPending: this.isPending(),
			$$titlePath: this.titlePath(),
			ctx: this.ctx && this.ctx.currentTest ? {
				currentTest: _defineProperty({
					title: this.ctx.currentTest.title
				}, MOCHA_ID_PROP_NAME, this.ctx.currentTest.id)
			} : {},
			parent: _defineProperty({}, MOCHA_ID_PROP_NAME, this.parent.id),
			title: this.title,
			type: this.type
		}, MOCHA_ID_PROP_NAME, this.id);
	};

	var suite = createCommonjsModule(function (module, exports) {
		/**
			* Module dependencies.
			* @private
			*/

		var EventEmitter$1 = EventEmitter.EventEmitter;
		var assignNewMochaID = utils.assignNewMochaID,
			clamp = utils.clamp,
			utilsConstants = utils.constants,
			createMap = utils.createMap,
			defineConstants = utils.defineConstants,
			getMochaID = utils.getMochaID,
			inherits = utils.inherits,
			isString = utils.isString;
		var debug = browser$2('mocha:suite');
		var MOCHA_ID_PROP_NAME = utilsConstants.MOCHA_ID_PROP_NAME;
		/**
			* Expose `Suite`.
			*/

		exports = module.exports = Suite;
		/**
			* Create a new `Suite` with the given `title` and parent `Suite`.
			*
			* @public
			* @param {Suite} parent - Parent suite (required!)
			* @param {string} title - Title
			* @return {Suite}
			*/

		Suite.create = function (parent, title) {
			var suite = new Suite(title, parent.ctx);
			suite.parent = parent;
			title = suite.fullTitle();
			parent.addSuite(suite);
			return suite;
		};
		/**
			* Constructs a new `Suite` instance with the given `title`, `ctx`, and `isRoot`.
			*
			* @public
			* @class
			* @extends EventEmitter
			* @see {@link https://nodejs.org/api/events.html#events_class_eventemitter|EventEmitter}
			* @param {string} title - Suite title.
			* @param {Context} parentContext - Parent context instance.
			* @param {boolean} [isRoot=false] - Whether this is the root suite.
			*/


		function Suite(title, parentContext, isRoot) {
			if (!isString(title)) {
				throw errors.createInvalidArgumentTypeError('Suite argument "title" must be a string. Received type "' + _typeof(title) + '"', 'title', 'string');
			}

			this.title = title;

			function Context() { }

			Context.prototype = parentContext;
			this.ctx = new Context();
			this.suites = [];
			this.tests = [];
			this.root = isRoot === true;
			this.pending = false;
			this._retries = -1;
			this._beforeEach = [];
			this._beforeAll = [];
			this._afterEach = [];
			this._afterAll = [];
			this._timeout = 2000;
			this._slow = 75;
			this._bail = false;
			this._onlyTests = [];
			this._onlySuites = [];
			assignNewMochaID(this);
			Object.defineProperty(this, 'id', {
				get: function get() {
					return getMochaID(this);
				}
			});
			this.reset();
			this.on('newListener', function (event) {
				if (deprecatedEvents[event]) {
					errors.deprecate('Event "' + event + '" is deprecated.  Please let the Mocha team know about your use case: https://git.io/v6Lwm');
				}
			});
		}
		/**
			* Inherit from `EventEmitter.prototype`.
			*/


		inherits(Suite, EventEmitter$1);
		/**
			* Resets the state initially or for a next run.
			*/

		Suite.prototype.reset = function () {
			this.delayed = false;

			function doReset(thingToReset) {
				thingToReset.reset();
			}

			this.suites.forEach(doReset);
			this.tests.forEach(doReset);

			this._beforeEach.forEach(doReset);

			this._afterEach.forEach(doReset);

			this._beforeAll.forEach(doReset);

			this._afterAll.forEach(doReset);
		};
		/**
			* Return a clone of this `Suite`.
			*
			* @private
			* @return {Suite}
			*/


		Suite.prototype.clone = function () {
			var suite = new Suite(this.title);
			debug('clone');
			suite.ctx = this.ctx;
			suite.root = this.root;
			suite.timeout(this.timeout());
			suite.retries(this.retries());
			suite.slow(this.slow());
			suite.bail(this.bail());
			return suite;
		};
		/**
			* Set or get timeout `ms` or short-hand such as "2s".
			*
			* @private
			* @todo Do not attempt to set value if `ms` is undefined
			* @param {number|string} ms
			* @return {Suite|number} for chaining
			*/


		Suite.prototype.timeout = function (ms$1) {
			if (!arguments.length) {
				return this._timeout;
			}

			if (typeof ms$1 === 'string') {
				ms$1 = ms(ms$1);
			} // Clamp to range


			var INT_MAX = Math.pow(2, 31) - 1;
			var range = [0, INT_MAX];
			ms$1 = clamp(ms$1, range);
			debug('timeout %d', ms$1);
			this._timeout = parseInt(ms$1, 10);
			return this;
		};
		/**
			* Set or get number of times to retry a failed test.
			*
			* @private
			* @param {number|string} n
			* @return {Suite|number} for chaining
			*/


		Suite.prototype.retries = function (n) {
			if (!arguments.length) {
				return this._retries;
			}

			debug('retries %d', n);
			this._retries = parseInt(n, 10) || 0;
			return this;
		};
		/**
			* Set or get slow `ms` or short-hand such as "2s".
			*
			* @private
			* @param {number|string} ms
			* @return {Suite|number} for chaining
			*/


		Suite.prototype.slow = function (ms$1) {
			if (!arguments.length) {
				return this._slow;
			}

			if (typeof ms$1 === 'string') {
				ms$1 = ms(ms$1);
			}

			debug('slow %d', ms$1);
			this._slow = ms$1;
			return this;
		};
		/**
			* Set or get whether to bail after first error.
			*
			* @private
			* @param {boolean} bail
			* @return {Suite|number} for chaining
			*/


		Suite.prototype.bail = function (bail) {
			if (!arguments.length) {
				return this._bail;
			}

			debug('bail %s', bail);
			this._bail = bail;
			return this;
		};
		/**
			* Check if this suite or its parent suite is marked as pending.
			*
			* @private
			*/


		Suite.prototype.isPending = function () {
			return this.pending || this.parent && this.parent.isPending();
		};
		/**
			* Generic hook-creator.
			* @private
			* @param {string} title - Title of hook
			* @param {Function} fn - Hook callback
			* @returns {Hook} A new hook
			*/


		Suite.prototype._createHook = function (title, fn) {
			var hook$1 = new hook(title, fn);
			hook$1.parent = this;
			hook$1.timeout(this.timeout());
			hook$1.retries(this.retries());
			hook$1.slow(this.slow());
			hook$1.ctx = this.ctx;
			hook$1.file = this.file;
			return hook$1;
		};
		/**
			* Run `fn(test[, done])` before running tests.
			*
			* @private
			* @param {string} title
			* @param {Function} fn
			* @return {Suite} for chaining
			*/


		Suite.prototype.beforeAll = function (title, fn) {
			if (this.isPending()) {
				return this;
			}

			if (typeof title === 'function') {
				fn = title;
				title = fn.name;
			}

			title = '"before all" hook' + (title ? ': ' + title : '');

			var hook = this._createHook(title, fn);

			this._beforeAll.push(hook);

			this.emit(constants.EVENT_SUITE_ADD_HOOK_BEFORE_ALL, hook);
			return this;
		};
		/**
			* Run `fn(test[, done])` after running tests.
			*
			* @private
			* @param {string} title
			* @param {Function} fn
			* @return {Suite} for chaining
			*/


		Suite.prototype.afterAll = function (title, fn) {
			if (this.isPending()) {
				return this;
			}

			if (typeof title === 'function') {
				fn = title;
				title = fn.name;
			}

			title = '"after all" hook' + (title ? ': ' + title : '');

			var hook = this._createHook(title, fn);

			this._afterAll.push(hook);

			this.emit(constants.EVENT_SUITE_ADD_HOOK_AFTER_ALL, hook);
			return this;
		};
		/**
			* Run `fn(test[, done])` before each test case.
			*
			* @private
			* @param {string} title
			* @param {Function} fn
			* @return {Suite} for chaining
			*/


		Suite.prototype.beforeEach = function (title, fn) {
			if (this.isPending()) {
				return this;
			}

			if (typeof title === 'function') {
				fn = title;
				title = fn.name;
			}

			title = '"before each" hook' + (title ? ': ' + title : '');

			var hook = this._createHook(title, fn);

			this._beforeEach.push(hook);

			this.emit(constants.EVENT_SUITE_ADD_HOOK_BEFORE_EACH, hook);
			return this;
		};
		/**
			* Run `fn(test[, done])` after each test case.
			*
			* @private
			* @param {string} title
			* @param {Function} fn
			* @return {Suite} for chaining
			*/


		Suite.prototype.afterEach = function (title, fn) {
			if (this.isPending()) {
				return this;
			}

			if (typeof title === 'function') {
				fn = title;
				title = fn.name;
			}

			title = '"after each" hook' + (title ? ': ' + title : '');

			var hook = this._createHook(title, fn);

			this._afterEach.push(hook);

			this.emit(constants.EVENT_SUITE_ADD_HOOK_AFTER_EACH, hook);
			return this;
		};
		/**
			* Add a test `suite`.
			*
			* @private
			* @param {Suite} suite
			* @return {Suite} for chaining
			*/


		Suite.prototype.addSuite = function (suite) {
			suite.parent = this;
			suite.root = false;
			suite.timeout(this.timeout());
			suite.retries(this.retries());
			suite.slow(this.slow());
			suite.bail(this.bail());
			this.suites.push(suite);
			this.emit(constants.EVENT_SUITE_ADD_SUITE, suite);
			return this;
		};
		/**
			* Add a `test` to this suite.
			*
			* @private
			* @param {Test} test
			* @return {Suite} for chaining
			*/


		Suite.prototype.addTest = function (test) {
			test.parent = this;
			test.timeout(this.timeout());
			test.retries(this.retries());
			test.slow(this.slow());
			test.ctx = this.ctx;
			this.tests.push(test);
			this.emit(constants.EVENT_SUITE_ADD_TEST, test);
			return this;
		};
		/**
			* Return the full title generated by recursively concatenating the parent's
			* full title.
			*
			* @memberof Suite
			* @public
			* @return {string}
			*/


		Suite.prototype.fullTitle = function () {
			return this.titlePath().join(' ');
		};
		/**
			* Return the title path generated by recursively concatenating the parent's
			* title path.
			*
			* @memberof Suite
			* @public
			* @return {string}
			*/


		Suite.prototype.titlePath = function () {
			var result = [];

			if (this.parent) {
				result = result.concat(this.parent.titlePath());
			}

			if (!this.root) {
				result.push(this.title);
			}

			return result;
		};
		/**
			* Return the total number of tests.
			*
			* @memberof Suite
			* @public
			* @return {number}
			*/


		Suite.prototype.total = function () {
			return this.suites.reduce(function (sum, suite) {
				return sum + suite.total();
			}, 0) + this.tests.length;
		};
		/**
			* Iterates through each suite recursively to find all tests. Applies a
			* function in the format `fn(test)`.
			*
			* @private
			* @param {Function} fn
			* @return {Suite}
			*/


		Suite.prototype.eachTest = function (fn) {
			this.tests.forEach(fn);
			this.suites.forEach(function (suite) {
				suite.eachTest(fn);
			});
			return this;
		};
		/**
			* This will run the root suite if we happen to be running in delayed mode.
			* @private
			*/


		Suite.prototype.run = function run() {
			if (this.root) {
				this.emit(constants.EVENT_ROOT_SUITE_RUN);
			}
		};
		/**
			* Determines whether a suite has an `only` test or suite as a descendant.
			*
			* @private
			* @returns {Boolean}
			*/


		Suite.prototype.hasOnly = function hasOnly() {
			return this._onlyTests.length > 0 || this._onlySuites.length > 0 || this.suites.some(function (suite) {
				return suite.hasOnly();
			});
		};
		/**
			* Filter suites based on `isOnly` logic.
			*
			* @private
			* @returns {Boolean}
			*/


		Suite.prototype.filterOnly = function filterOnly() {
			if (this._onlyTests.length) {
				// If the suite contains `only` tests, run those and ignore any nested suites.
				this.tests = this._onlyTests;
				this.suites = [];
			} else {
				// Otherwise, do not run any of the tests in this suite.
				this.tests = [];

				this._onlySuites.forEach(function (onlySuite) {
					// If there are other `only` tests/suites nested in the current `only` suite, then filter that `only` suite.
					// Otherwise, all of the tests on this `only` suite should be run, so don't filter it.
					if (onlySuite.hasOnly()) {
						onlySuite.filterOnly();
					}
				}); // Run the `only` suites, as well as any other suites that have `only` tests/suites as descendants.


				var onlySuites = this._onlySuites;
				this.suites = this.suites.filter(function (childSuite) {
					return onlySuites.indexOf(childSuite) !== -1 || childSuite.filterOnly();
				});
			} // Keep the suite only if there is something to run


			return this.tests.length > 0 || this.suites.length > 0;
		};
		/**
			* Adds a suite to the list of subsuites marked `only`.
			*
			* @private
			* @param {Suite} suite
			*/


		Suite.prototype.appendOnlySuite = function (suite) {
			this._onlySuites.push(suite);
		};
		/**
			* Marks a suite to be `only`.
			*
			* @private
			*/


		Suite.prototype.markOnly = function () {
			this.parent && this.parent.appendOnlySuite(this);
		};
		/**
			* Adds a test to the list of tests marked `only`.
			*
			* @private
			* @param {Test} test
			*/


		Suite.prototype.appendOnlyTest = function (test) {
			this._onlyTests.push(test);
		};
		/**
			* Returns the array of hooks by hook name; see `HOOK_TYPE_*` constants.
			* @private
			*/


		Suite.prototype.getHooks = function getHooks(name) {
			return this['_' + name];
		};
		/**
			* cleans all references from this suite and all child suites.
			*/


		Suite.prototype.dispose = function () {
			this.suites.forEach(function (suite) {
				suite.dispose();
			});
			this.cleanReferences();
		};
		/**
			* Cleans up the references to all the deferred functions
			* (before/after/beforeEach/afterEach) and tests of a Suite.
			* These must be deleted otherwise a memory leak can happen,
			* as those functions may reference variables from closures,
			* thus those variables can never be garbage collected as long
			* as the deferred functions exist.
			*
			* @private
			*/


		Suite.prototype.cleanReferences = function cleanReferences() {
			function cleanArrReferences(arr) {
				for (var i = 0; i < arr.length; i++) {
					delete arr[i].fn;
				}
			}

			if (Array.isArray(this._beforeAll)) {
				cleanArrReferences(this._beforeAll);
			}

			if (Array.isArray(this._beforeEach)) {
				cleanArrReferences(this._beforeEach);
			}

			if (Array.isArray(this._afterAll)) {
				cleanArrReferences(this._afterAll);
			}

			if (Array.isArray(this._afterEach)) {
				cleanArrReferences(this._afterEach);
			}

			for (var i = 0; i < this.tests.length; i++) {
				delete this.tests[i].fn;
			}
		};
		/**
			* Returns an object suitable for IPC.
			* Functions are represented by keys beginning with `$$`.
			* @private
			* @returns {Object}
			*/


		Suite.prototype.serialize = function serialize() {
			return {
				_bail: this._bail,
				$$fullTitle: this.fullTitle(),
				$$isPending: this.isPending(),
				root: this.root,
				title: this.title,
				id: this.id,
				parent: this.parent ? _defineProperty({}, MOCHA_ID_PROP_NAME, this.parent.id) : null
			};
		};

		var constants = defineConstants(
			/**
				* {@link Suite}-related constants.
				* @public
				* @memberof Suite
				* @alias constants
				* @readonly
				* @static
				* @enum {string}
				*/
			{
				/**
					* Event emitted after a test file has been loaded Not emitted in browser.
					*/
				EVENT_FILE_POST_REQUIRE: 'post-require',

				/**
					* Event emitted before a test file has been loaded. In browser, this is emitted once an interface has been selected.
					*/
				EVENT_FILE_PRE_REQUIRE: 'pre-require',

				/**
					* Event emitted immediately after a test file has been loaded. Not emitted in browser.
					*/
				EVENT_FILE_REQUIRE: 'require',

				/**
					* Event emitted when `global.run()` is called (use with `delay` option)
					*/
				EVENT_ROOT_SUITE_RUN: 'run',

				/**
					* Namespace for collection of a `Suite`'s "after all" hooks
					*/
				HOOK_TYPE_AFTER_ALL: 'afterAll',

				/**
					* Namespace for collection of a `Suite`'s "after each" hooks
					*/
				HOOK_TYPE_AFTER_EACH: 'afterEach',

				/**
					* Namespace for collection of a `Suite`'s "before all" hooks
					*/
				HOOK_TYPE_BEFORE_ALL: 'beforeAll',

				/**
					* Namespace for collection of a `Suite`'s "before all" hooks
					*/
				HOOK_TYPE_BEFORE_EACH: 'beforeEach',
				// the following events are all deprecated

				/**
					* Emitted after an "after all" `Hook` has been added to a `Suite`. Deprecated
					*/
				EVENT_SUITE_ADD_HOOK_AFTER_ALL: 'afterAll',

				/**
					* Emitted after an "after each" `Hook` has been added to a `Suite` Deprecated
					*/
				EVENT_SUITE_ADD_HOOK_AFTER_EACH: 'afterEach',

				/**
					* Emitted after an "before all" `Hook` has been added to a `Suite` Deprecated
					*/
				EVENT_SUITE_ADD_HOOK_BEFORE_ALL: 'beforeAll',

				/**
					* Emitted after an "before each" `Hook` has been added to a `Suite` Deprecated
					*/
				EVENT_SUITE_ADD_HOOK_BEFORE_EACH: 'beforeEach',

				/**
					* Emitted after a child `Suite` has been added to a `Suite`. Deprecated
					*/
				EVENT_SUITE_ADD_SUITE: 'suite',

				/**
					* Emitted after a `Test` has been added to a `Suite`. Deprecated
					*/
				EVENT_SUITE_ADD_TEST: 'test'
			});
		/**
			* @summary There are no known use cases for these events.
			* @desc This is a `Set`-like object having all keys being the constant's string value and the value being `true`.
			* @todo Remove eventually
			* @type {Object<string,boolean>}
			* @ignore
			*/

		var deprecatedEvents = Object.keys(constants).filter(function (constant) {
			return constant.substring(0, 15) === 'EVENT_SUITE_ADD';
		}).reduce(function (acc, constant) {
			acc[constants[constant]] = true;
			return acc;
		}, createMap());
		Suite.constants = constants;
	});

	/**
		* Module dependencies.
		* @private
		*/


	var EventEmitter$2 = EventEmitter.EventEmitter;
	var debug$2 = browser$2('mocha:runner');
	var HOOK_TYPE_BEFORE_EACH = suite.constants.HOOK_TYPE_BEFORE_EACH;
	var HOOK_TYPE_AFTER_EACH = suite.constants.HOOK_TYPE_AFTER_EACH;
	var HOOK_TYPE_AFTER_ALL = suite.constants.HOOK_TYPE_AFTER_ALL;
	var HOOK_TYPE_BEFORE_ALL = suite.constants.HOOK_TYPE_BEFORE_ALL;
	var EVENT_ROOT_SUITE_RUN = suite.constants.EVENT_ROOT_SUITE_RUN;
	var STATE_FAILED = runnable.constants.STATE_FAILED;
	var STATE_PASSED = runnable.constants.STATE_PASSED;
	var STATE_PENDING = runnable.constants.STATE_PENDING;
	var dQuote = utils.dQuote;
	var sQuote = utils.sQuote;
	var stackFilter = utils.stackTraceFilter();
	var stringify = utils.stringify;
	var createInvalidExceptionError$2 = errors.createInvalidExceptionError,
		createUnsupportedError$1 = errors.createUnsupportedError,
		createFatalError$1 = errors.createFatalError,
		isMochaError$1 = errors.isMochaError,
		errorConstants = errors.constants;
	/**
		* Non-enumerable globals.
		* @private
		* @readonly
		*/

	var globals = ['setTimeout', 'clearTimeout', 'setInterval', 'clearInterval', 'XMLHttpRequest', 'Date', 'setImmediate', 'clearImmediate'];
	var constants$3 = utils.defineConstants(
		/**
			* {@link Runner}-related constants.
			* @public
			* @memberof Runner
			* @readonly
			* @alias constants
			* @static
			* @enum {string}
			*/
		{
			/**
				* Emitted when {@link Hook} execution begins
				*/
			EVENT_HOOK_BEGIN: 'hook',

			/**
				* Emitted when {@link Hook} execution ends
				*/
			EVENT_HOOK_END: 'hook end',

			/**
				* Emitted when Root {@link Suite} execution begins (all files have been parsed and hooks/tests are ready for execution)
				*/
			EVENT_RUN_BEGIN: 'start',

			/**
				* Emitted when Root {@link Suite} execution has been delayed via `delay` option
				*/
			EVENT_DELAY_BEGIN: 'waiting',

			/**
				* Emitted when delayed Root {@link Suite} execution is triggered by user via `global.run()`
				*/
			EVENT_DELAY_END: 'ready',

			/**
				* Emitted when Root {@link Suite} execution ends
				*/
			EVENT_RUN_END: 'end',

			/**
				* Emitted when {@link Suite} execution begins
				*/
			EVENT_SUITE_BEGIN: 'suite',

			/**
				* Emitted when {@link Suite} execution ends
				*/
			EVENT_SUITE_END: 'suite end',

			/**
				* Emitted when {@link Test} execution begins
				*/
			EVENT_TEST_BEGIN: 'test',

			/**
				* Emitted when {@link Test} execution ends
				*/
			EVENT_TEST_END: 'test end',

			/**
				* Emitted when {@link Test} execution fails
				*/
			EVENT_TEST_FAIL: 'fail',

			/**
				* Emitted when {@link Test} execution succeeds
				*/
			EVENT_TEST_PASS: 'pass',

			/**
				* Emitted when {@link Test} becomes pending
				*/
			EVENT_TEST_PENDING: 'pending',

			/**
				* Emitted when {@link Test} execution has failed, but will retry
				*/
			EVENT_TEST_RETRY: 'retry',

			/**
				* Initial state of Runner
				*/
			STATE_IDLE: 'idle',

			/**
				* State set to this value when the Runner has started running
				*/
			STATE_RUNNING: 'running',

			/**
				* State set to this value when the Runner has stopped
				*/
			STATE_STOPPED: 'stopped'
		});

	var Runner = /*#__PURE__*/function (_EventEmitter) {
		_inherits(Runner, _EventEmitter);

		var _super = _createSuper(Runner);

		/**
			* Initialize a `Runner` at the Root {@link Suite}, which represents a hierarchy of {@link Suite|Suites} and {@link Test|Tests}.
			*
			* @extends external:EventEmitter
			* @public
			* @class
			* @param {Suite} suite - Root suite
			* @param {Object|boolean} [opts] - Options. If `boolean`, whether or not to delay execution of root suite until ready (for backwards compatibility).
			* @param {boolean} [opts.delay] - Whether to delay execution of root suite until ready.
			* @param {boolean} [opts.cleanReferencesAfterRun] - Whether to clean references to test fns and hooks when a suite is done.
			*/
		function Runner(suite, opts) {
			var _this;

			_classCallCheck(this, Runner);

			_this = _super.call(this);

			if (opts === undefined) {
				opts = {};
			}

			if (typeof opts === 'boolean') {
				// TODO: deprecate this
				_this._delay = opts;
				opts = {};
			} else {
				_this._delay = opts.delay;
			}

			var self = _assertThisInitialized(_this);

			_this._globals = [];
			_this._abort = false;
			_this.suite = suite;
			_this._opts = opts;
			_this.state = constants$3.STATE_IDLE;
			_this.total = suite.total();
			_this.failures = 0;
			/**
				* @type {Map<EventEmitter,Map<string,Set<EventListener>>>}
				*/

			_this._eventListeners = new Map();

			_this.on(constants$3.EVENT_TEST_END, function (test) {
				if (test.type === 'test' && test.retriedTest() && test.parent) {
					var idx = test.parent.tests && test.parent.tests.indexOf(test.retriedTest());
					if (idx > -1) test.parent.tests[idx] = test;
				}

				self.checkGlobals(test);
			});

			_this.on(constants$3.EVENT_HOOK_END, function (hook) {
				self.checkGlobals(hook);
			});

			_this._defaultGrep = /.*/;

			_this.grep(_this._defaultGrep);

			_this.globals(_this.globalProps());

			_this.uncaught = _this._uncaught.bind(_assertThisInitialized(_this));

			_this.unhandled = function (reason, promise) {
				if (isMochaError$1(reason)) {
					debug$2('trapped unhandled rejection coming out of Mocha; forwarding to uncaught handler:', reason);

					_this.uncaught(reason);
				} else {
					debug$2('trapped unhandled rejection from (probably) user code; re-emitting on process');

					_this._removeEventListener(process$1, 'unhandledRejection', _this.unhandled);

					try {
						process$1.emit('unhandledRejection', reason, promise);
					} finally {
						_this._addEventListener(process$1, 'unhandledRejection', _this.unhandled);
					}
				}
			};

			return _this;
		}

		return Runner;
	}(EventEmitter$2);
	/**
		* Wrapper for setImmediate, process.nextTick, or browser polyfill.
		*
		* @param {Function} fn
		* @private
		*/


	Runner.immediately = commonjsGlobal.setImmediate || nextTick;
	/**
		* Replacement for `target.on(eventName, listener)` that does bookkeeping to remove them when this runner instance is disposed.
		* @param {EventEmitter} target - The `EventEmitter`
		* @param {string} eventName - The event name
		* @param {string} fn - Listener function
		* @private
		*/

	Runner.prototype._addEventListener = function (target, eventName, listener) {
		debug$2('_addEventListener(): adding for event %s; %d current listeners', eventName, target.listenerCount(eventName));
		/* istanbul ignore next */

		if (this._eventListeners.has(target) && this._eventListeners.get(target).has(eventName) && this._eventListeners.get(target).get(eventName).has(listener)) {
			debug$2('warning: tried to attach duplicate event listener for %s', eventName);
			return;
		}

		target.on(eventName, listener);
		var targetListeners = this._eventListeners.has(target) ? this._eventListeners.get(target) : new Map();
		var targetEventListeners = targetListeners.has(eventName) ? targetListeners.get(eventName) : new Set();
		targetEventListeners.add(listener);
		targetListeners.set(eventName, targetEventListeners);

		this._eventListeners.set(target, targetListeners);
	};
	/**
		* Replacement for `target.removeListener(eventName, listener)` that also updates the bookkeeping.
		* @param {EventEmitter} target - The `EventEmitter`
		* @param {string} eventName - The event name
		* @param {function} listener - Listener function
		* @private
		*/


	Runner.prototype._removeEventListener = function (target, eventName, listener) {
		target.removeListener(eventName, listener);

		if (this._eventListeners.has(target)) {
			var targetListeners = this._eventListeners.get(target);

			if (targetListeners.has(eventName)) {
				var targetEventListeners = targetListeners.get(eventName);
				targetEventListeners["delete"](listener);

				if (!targetEventListeners.size) {
					targetListeners["delete"](eventName);
				}
			}

			if (!targetListeners.size) {
				this._eventListeners["delete"](target);
			}
		} else {
			debug$2('trying to remove listener for untracked object %s', target);
		}
	};
	/**
		* Removes all event handlers set during a run on this instance.
		* Remark: this does _not_ clean/dispose the tests or suites themselves.
		*/


	Runner.prototype.dispose = function () {
		this.removeAllListeners();

		this._eventListeners.forEach(function (targetListeners, target) {
			targetListeners.forEach(function (targetEventListeners, eventName) {
				targetEventListeners.forEach(function (listener) {
					target.removeListener(eventName, listener);
				});
			});
		});

		this._eventListeners.clear();
	};
	/**
		* Run tests with full titles matching `re`. Updates runner.total
		* with number of tests matched.
		*
		* @public
		* @memberof Runner
		* @param {RegExp} re
		* @param {boolean} invert
		* @return {Runner} Runner instance.
		*/


	Runner.prototype.grep = function (re, invert) {
		debug$2('grep(): setting to %s', re);
		this._grep = re;
		this._invert = invert;
		this.total = this.grepTotal(this.suite);
		return this;
	};
	/**
		* Returns the number of tests matching the grep search for the
		* given suite.
		*
		* @memberof Runner
		* @public
		* @param {Suite} suite
		* @return {number}
		*/


	Runner.prototype.grepTotal = function (suite) {
		var self = this;
		var total = 0;
		suite.eachTest(function (test) {
			var match = self._grep.test(test.fullTitle());

			if (self._invert) {
				match = !match;
			}

			if (match) {
				total++;
			}
		});
		return total;
	};
	/**
		* Return a list of global properties.
		*
		* @return {Array}
		* @private
		*/


	Runner.prototype.globalProps = function () {
		var props = Object.keys(commonjsGlobal); // non-enumerables

		for (var i = 0; i < globals.length; ++i) {
			if (~props.indexOf(globals[i])) {
				continue;
			}

			props.push(globals[i]);
		}

		return props;
	};
	/**
		* Allow the given `arr` of globals.
		*
		* @public
		* @memberof Runner
		* @param {Array} arr
		* @return {Runner} Runner instance.
		*/


	Runner.prototype.globals = function (arr) {
		if (!arguments.length) {
			return this._globals;
		}

		debug$2('globals(): setting to %O', arr);
		this._globals = this._globals.concat(arr);
		return this;
	};
	/**
		* Check for global variable leaks.
		*
		* @private
		*/


	Runner.prototype.checkGlobals = function (test) {
		if (!this.checkLeaks) {
			return;
		}

		var ok = this._globals;
		var globals = this.globalProps();
		var leaks;

		if (test) {
			ok = ok.concat(test._allowedGlobals || []);
		}

		if (this.prevGlobalsLength === globals.length) {
			return;
		}

		this.prevGlobalsLength = globals.length;
		leaks = filterLeaks(ok, globals);
		this._globals = this._globals.concat(leaks);

		if (leaks.length) {
			var msg = 'global leak(s) detected: %s';
			var error = new Error(util.format(msg, leaks.map(sQuote).join(', ')));
			this.fail(test, error);
		}
	};
	/**
		* Fail the given `test`.
		*
		* If `test` is a hook, failures work in the following pattern:
		* - If bail, run corresponding `after each` and `after` hooks,
		*   then exit
		* - Failed `before` hook skips all tests in a suite and subsuites,
		*   but jumps to corresponding `after` hook
		* - Failed `before each` hook skips remaining tests in a
		*   suite and jumps to corresponding `after each` hook,
		*   which is run only once
		* - Failed `after` hook does not alter execution order
		* - Failed `after each` hook skips remaining tests in a
		*   suite and subsuites, but executes other `after each`
		*   hooks
		*
		* @private
		* @param {Runnable} test
		* @param {Error} err
		* @param {boolean} [force=false] - Whether to fail a pending test.
		*/


	Runner.prototype.fail = function (test, err, force) {
		force = force === true;

		if (test.isPending() && !force) {
			return;
		}

		if (this.state === constants$3.STATE_STOPPED) {
			if (err.code === errorConstants.MULTIPLE_DONE) {
				throw err;
			}

			throw createFatalError$1('Test failed after root suite execution completed!', err);
		}

		++this.failures;
		debug$2('total number of failures: %d', this.failures);
		test.state = STATE_FAILED;

		if (!isError$1(err)) {
			err = thrown2Error(err);
		}

		try {
			err.stack = this.fullStackTrace || !err.stack ? err.stack : stackFilter(err.stack);
		} catch (ignore) {// some environments do not take kindly to monkeying with the stack
		}

		this.emit(constants$3.EVENT_TEST_FAIL, test, err);
	};
	/**
		* Run hook `name` callbacks and then invoke `fn()`.
		*
		* @private
		* @param {string} name
		* @param {Function} fn
		*/


	Runner.prototype.hook = function (name, fn) {
		var suite = this.suite;
		var hooks = suite.getHooks(name);
		var self = this;

		function next(i) {
			var hook = hooks[i];

			if (!hook) {
				return fn();
			}

			self.currentRunnable = hook;

			if (name === HOOK_TYPE_BEFORE_ALL) {
				hook.ctx.currentTest = hook.parent.tests[0];
			} else if (name === HOOK_TYPE_AFTER_ALL) {
				hook.ctx.currentTest = hook.parent.tests[hook.parent.tests.length - 1];
			} else {
				hook.ctx.currentTest = self.test;
			}

			setHookTitle(hook);
			hook.allowUncaught = self.allowUncaught;
			self.emit(constants$3.EVENT_HOOK_BEGIN, hook);

			if (!hook.listeners('error').length) {
				self._addEventListener(hook, 'error', function (err) {
					self.fail(hook, err);
				});
			}

			hook.run(function cbHookRun(err) {
				var testError = hook.error();

				if (testError) {
					self.fail(self.test, testError);
				} // conditional skip


				if (hook.pending) {
					if (name === HOOK_TYPE_AFTER_EACH) {
						// TODO define and implement use case
						if (self.test) {
							self.test.pending = true;
						}
					} else if (name === HOOK_TYPE_BEFORE_EACH) {
						if (self.test) {
							self.test.pending = true;
						}

						self.emit(constants$3.EVENT_HOOK_END, hook);
						hook.pending = false; // activates hook for next test

						return fn(new Error('abort hookDown'));
					} else if (name === HOOK_TYPE_BEFORE_ALL) {
						suite.tests.forEach(function (test) {
							test.pending = true;
						});
						suite.suites.forEach(function (suite) {
							suite.pending = true;
						});
						hooks = [];
					} else {
						hook.pending = false;
						var errForbid = createUnsupportedError$1('`this.skip` forbidden');
						self.fail(hook, errForbid);
						return fn(errForbid);
					}
				} else if (err) {
					self.fail(hook, err); // stop executing hooks, notify callee of hook err

					return fn(err);
				}

				self.emit(constants$3.EVENT_HOOK_END, hook);
				delete hook.ctx.currentTest;
				setHookTitle(hook);
				next(++i);
			});

			function setHookTitle(hook) {
				hook.originalTitle = hook.originalTitle || hook.title;

				if (hook.ctx && hook.ctx.currentTest) {
					hook.title = hook.originalTitle + ' for ' + dQuote(hook.ctx.currentTest.title);
				} else {
					var parentTitle;

					if (hook.parent.title) {
						parentTitle = hook.parent.title;
					} else {
						parentTitle = hook.parent.root ? '{root}' : '';
					}

					hook.title = hook.originalTitle + ' in ' + dQuote(parentTitle);
				}
			}
		}

		Runner.immediately(function () {
			next(0);
		});
	};
	/**
		* Run hook `name` for the given array of `suites`
		* in order, and callback `fn(err, errSuite)`.
		*
		* @private
		* @param {string} name
		* @param {Array} suites
		* @param {Function} fn
		*/


	Runner.prototype.hooks = function (name, suites, fn) {
		var self = this;
		var orig = this.suite;

		function next(suite) {
			self.suite = suite;

			if (!suite) {
				self.suite = orig;
				return fn();
			}

			self.hook(name, function (err) {
				if (err) {
					var errSuite = self.suite;
					self.suite = orig;
					return fn(err, errSuite);
				}

				next(suites.pop());
			});
		}

		next(suites.pop());
	};
	/**
		* Run hooks from the top level down.
		*
		* @param {String} name
		* @param {Function} fn
		* @private
		*/


	Runner.prototype.hookUp = function (name, fn) {
		var suites = [this.suite].concat(this.parents()).reverse();
		this.hooks(name, suites, fn);
	};
	/**
		* Run hooks from the bottom up.
		*
		* @param {String} name
		* @param {Function} fn
		* @private
		*/


	Runner.prototype.hookDown = function (name, fn) {
		var suites = [this.suite].concat(this.parents());
		this.hooks(name, suites, fn);
	};
	/**
		* Return an array of parent Suites from
		* closest to furthest.
		*
		* @return {Array}
		* @private
		*/


	Runner.prototype.parents = function () {
		var suite = this.suite;
		var suites = [];

		while (suite.parent) {
			suite = suite.parent;
			suites.push(suite);
		}

		return suites;
	};
	/**
		* Run the current test and callback `fn(err)`.
		*
		* @param {Function} fn
		* @private
		*/


	Runner.prototype.runTest = function (fn) {
		var self = this;
		var test = this.test;

		if (!test) {
			return;
		}

		if (this.asyncOnly) {
			test.asyncOnly = true;
		}

		this._addEventListener(test, 'error', function (err) {
			self.fail(test, err);
		});

		if (this.allowUncaught) {
			test.allowUncaught = true;
			return test.run(fn);
		}

		try {
			test.run(fn);
		} catch (err) {
			fn(err);
		}
	};
	/**
		* Run tests in the given `suite` and invoke the callback `fn()` when complete.
		*
		* @private
		* @param {Suite} suite
		* @param {Function} fn
		*/


	Runner.prototype.runTests = function (suite, fn) {
		var self = this;
		var tests = suite.tests.slice();
		var test;

		function hookErr(_, errSuite, after) {
			// before/after Each hook for errSuite failed:
			var orig = self.suite; // for failed 'after each' hook start from errSuite parent,
			// otherwise start from errSuite itself

			self.suite = after ? errSuite.parent : errSuite;

			if (self.suite) {
				// call hookUp afterEach
				self.hookUp(HOOK_TYPE_AFTER_EACH, function (err2, errSuite2) {
					self.suite = orig; // some hooks may fail even now

					if (err2) {
						return hookErr(err2, errSuite2, true);
					} // report error suite


					fn(errSuite);
				});
			} else {
				// there is no need calling other 'after each' hooks
				self.suite = orig;
				fn(errSuite);
			}
		}

		function next(err, errSuite) {
			// if we bail after first err
			if (self.failures && suite._bail) {
				tests = [];
			}

			if (self._abort) {
				return fn();
			}

			if (err) {
				return hookErr(err, errSuite, true);
			} // next test


			test = tests.shift(); // all done

			if (!test) {
				return fn();
			} // grep


			var match = self._grep.test(test.fullTitle());

			if (self._invert) {
				match = !match;
			}

			if (!match) {
				// Run immediately only if we have defined a grep. When we
				// define a grep — It can cause maximum callstack error if
				// the grep is doing a large recursive loop by neglecting
				// all tests. The run immediately function also comes with
				// a performance cost. So we don't want to run immediately
				// if we run the whole test suite, because running the whole
				// test suite don't do any immediate recursive loops. Thus,
				// allowing a JS runtime to breathe.
				if (self._grep !== self._defaultGrep) {
					Runner.immediately(next);
				} else {
					next();
				}

				return;
			} // static skip, no hooks are executed


			if (test.isPending()) {
				if (self.forbidPending) {
					self.fail(test, new Error('Pending test forbidden'), true);
				} else {
					test.state = STATE_PENDING;
					self.emit(constants$3.EVENT_TEST_PENDING, test);
				}

				self.emit(constants$3.EVENT_TEST_END, test);
				return next();
			} // execute test and hook(s)


			self.emit(constants$3.EVENT_TEST_BEGIN, self.test = test);
			self.hookDown(HOOK_TYPE_BEFORE_EACH, function (err, errSuite) {
				// conditional skip within beforeEach
				if (test.isPending()) {
					if (self.forbidPending) {
						self.fail(test, new Error('Pending test forbidden'), true);
					} else {
						test.state = STATE_PENDING;
						self.emit(constants$3.EVENT_TEST_PENDING, test);
					}

					self.emit(constants$3.EVENT_TEST_END, test); // skip inner afterEach hooks below errSuite level

					var origSuite = self.suite;
					self.suite = errSuite || self.suite;
					return self.hookUp(HOOK_TYPE_AFTER_EACH, function (e, eSuite) {
						self.suite = origSuite;
						next(e, eSuite);
					});
				}

				if (err) {
					return hookErr(err, errSuite, false);
				}

				self.currentRunnable = self.test;
				self.runTest(function (err) {
					test = self.test; // conditional skip within it

					if (test.pending) {
						if (self.forbidPending) {
							self.fail(test, new Error('Pending test forbidden'), true);
						} else {
							test.state = STATE_PENDING;
							self.emit(constants$3.EVENT_TEST_PENDING, test);
						}

						self.emit(constants$3.EVENT_TEST_END, test);
						return self.hookUp(HOOK_TYPE_AFTER_EACH, next);
					} else if (err) {
						var retry = test.currentRetry();

						if (retry < test.retries()) {
							var clonedTest = test.clone();
							clonedTest.currentRetry(retry + 1);
							tests.unshift(clonedTest);
							self.emit(constants$3.EVENT_TEST_RETRY, test, err); // Early return + hook trigger so that it doesn't
							// increment the count wrong

							return self.hookUp(HOOK_TYPE_AFTER_EACH, next);
						} else {
							self.fail(test, err);
						}

						self.emit(constants$3.EVENT_TEST_END, test);
						return self.hookUp(HOOK_TYPE_AFTER_EACH, next);
					}

					test.state = STATE_PASSED;
					self.emit(constants$3.EVENT_TEST_PASS, test);
					self.emit(constants$3.EVENT_TEST_END, test);
					self.hookUp(HOOK_TYPE_AFTER_EACH, next);
				});
			});
		}

		this.next = next;
		this.hookErr = hookErr;
		next();
	};
	/**
		* Run the given `suite` and invoke the callback `fn()` when complete.
		*
		* @private
		* @param {Suite} suite
		* @param {Function} fn
		*/


	Runner.prototype.runSuite = function (suite, fn) {
		var i = 0;
		var self = this;
		var total = this.grepTotal(suite);
		debug$2('runSuite(): running %s', suite.fullTitle());

		if (!total || self.failures && suite._bail) {
			debug$2('runSuite(): bailing');
			return fn();
		}

		this.emit(constants$3.EVENT_SUITE_BEGIN, this.suite = suite);

		function next(errSuite) {
			if (errSuite) {
				// current suite failed on a hook from errSuite
				if (errSuite === suite) {
					// if errSuite is current suite
					// continue to the next sibling suite
					return done();
				} // errSuite is among the parents of current suite
				// stop execution of errSuite and all sub-suites


				return done(errSuite);
			}

			if (self._abort) {
				return done();
			}

			var curr = suite.suites[i++];

			if (!curr) {
				return done();
			} // Avoid grep neglecting large number of tests causing a
			// huge recursive loop and thus a maximum call stack error.
			// See comment in `this.runTests()` for more information.


			if (self._grep !== self._defaultGrep) {
				Runner.immediately(function () {
					self.runSuite(curr, next);
				});
			} else {
				self.runSuite(curr, next);
			}
		}

		function done(errSuite) {
			self.suite = suite;
			self.nextSuite = next; // remove reference to test

			delete self.test;
			self.hook(HOOK_TYPE_AFTER_ALL, function () {
				self.emit(constants$3.EVENT_SUITE_END, suite);
				fn(errSuite);
			});
		}

		this.nextSuite = next;
		this.hook(HOOK_TYPE_BEFORE_ALL, function (err) {
			if (err) {
				return done();
			}

			self.runTests(suite, next);
		});
	};
	/**
		* Handle uncaught exceptions within runner.
		*
		* This function is bound to the instance as `Runner#uncaught` at instantiation
		* time. It's intended to be listening on the `Process.uncaughtException` event.
		* In order to not leak EE listeners, we need to ensure no more than a single
		* `uncaughtException` listener exists per `Runner`.  The only way to do
		* this--because this function needs the context (and we don't have lambdas)--is
		* to use `Function.prototype.bind`. We need strict equality to unregister and
		* _only_ unregister the _one_ listener we set from the
		* `Process.uncaughtException` event; would be poor form to just remove
		* everything. See {@link Runner#run} for where the event listener is registered
		* and unregistered.
		* @param {Error} err - Some uncaught error
		* @private
		*/


	Runner.prototype._uncaught = function (err) {
		// this is defensive to prevent future developers from mis-calling this function.
		// it's more likely that it'd be called with the incorrect context--say, the global
		// `process` object--than it would to be called with a context that is not a "subclass"
		// of `Runner`.
		if (!(this instanceof Runner)) {
			throw createFatalError$1('Runner#uncaught() called with invalid context', this);
		}

		if (err instanceof pending) {
			debug$2('uncaught(): caught a Pending');
			return;
		} // browser does not exit script when throwing in global.onerror()


		if (this.allowUncaught && !utils.isBrowser()) {
			debug$2('uncaught(): bubbling exception due to --allow-uncaught');
			throw err;
		}

		if (this.state === constants$3.STATE_STOPPED) {
			debug$2('uncaught(): throwing after run has completed!');
			throw err;
		}

		if (err) {
			debug$2('uncaught(): got truthy exception %O', err);
		} else {
			debug$2('uncaught(): undefined/falsy exception');
			err = createInvalidExceptionError$2('Caught falsy/undefined exception which would otherwise be uncaught. No stack trace found; try a debugger', err);
		}

		if (!isError$1(err)) {
			err = thrown2Error(err);
			debug$2('uncaught(): converted "error" %o to Error', err);
		}

		err.uncaught = true;
		var runnable$1 = this.currentRunnable;

		if (!runnable$1) {
			runnable$1 = new runnable('Uncaught error outside test suite');
			debug$2('uncaught(): no current Runnable; created a phony one');
			runnable$1.parent = this.suite;

			if (this.state === constants$3.STATE_RUNNING) {
				debug$2('uncaught(): failing gracefully');
				this.fail(runnable$1, err);
			} else {
				// Can't recover from this failure
				debug$2('uncaught(): test run has not yet started; unrecoverable');
				this.emit(constants$3.EVENT_RUN_BEGIN);
				this.fail(runnable$1, err);
				this.emit(constants$3.EVENT_RUN_END);
			}

			return;
		}

		runnable$1.clearTimeout();

		if (runnable$1.isFailed()) {
			debug$2('uncaught(): Runnable has already failed'); // Ignore error if already failed

			return;
		} else if (runnable$1.isPending()) {
			debug$2('uncaught(): pending Runnable wound up failing!'); // report 'pending test' retrospectively as failed

			this.fail(runnable$1, err, true);
			return;
		} // we cannot recover gracefully if a Runnable has already passed
		// then fails asynchronously


		if (runnable$1.isPassed()) {
			debug$2('uncaught(): Runnable has already passed; bailing gracefully');
			this.fail(runnable$1, err);
			this.abort();
		} else {
			debug$2('uncaught(): forcing Runnable to complete with Error');
			return runnable$1.callback(err);
		}
	};
	/**
		* Run the root suite and invoke `fn(failures)`
		* on completion.
		*
		* @public
		* @memberof Runner
		* @param {Function} fn - Callback when finished
		* @param {{files: string[], options: Options}} [opts] - For subclasses
		* @returns {Runner} Runner instance.
		*/


	Runner.prototype.run = function (fn) {
		var _this2 = this;

		var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
		var rootSuite = this.suite;
		var options = opts.options || {};
		debug$2('run(): got options: %O', options);

		fn = fn || function () { };

		var end = function end() {
			debug$2('run(): root suite completed; emitting %s', constants$3.EVENT_RUN_END);

			_this2.emit(constants$3.EVENT_RUN_END);
		};

		var begin = function begin() {
			debug$2('run(): emitting %s', constants$3.EVENT_RUN_BEGIN);

			_this2.emit(constants$3.EVENT_RUN_BEGIN);

			debug$2('run(): emitted %s', constants$3.EVENT_RUN_BEGIN);

			_this2.runSuite(rootSuite, end);
		};

		var prepare = function prepare() {
			debug$2('run(): starting'); // If there is an `only` filter

			if (rootSuite.hasOnly()) {
				rootSuite.filterOnly();
				debug$2('run(): filtered exclusive Runnables');
			}

			_this2.state = constants$3.STATE_RUNNING;

			if (_this2._delay) {
				_this2.emit(constants$3.EVENT_DELAY_END);

				debug$2('run(): "delay" ended');
			}

			return begin();
		}; // references cleanup to avoid memory leaks


		if (this._opts.cleanReferencesAfterRun) {
			this.on(constants$3.EVENT_SUITE_END, function (suite) {
				suite.cleanReferences();
			});
		} // callback


		this.on(constants$3.EVENT_RUN_END, function () {
			this.state = constants$3.STATE_STOPPED;
			debug$2('run(): emitted %s', constants$3.EVENT_RUN_END);
			fn(this.failures);
		});

		this._removeEventListener(process$1, 'uncaughtException', this.uncaught);

		this._removeEventListener(process$1, 'unhandledRejection', this.unhandled);

		this._addEventListener(process$1, 'uncaughtException', this.uncaught);

		this._addEventListener(process$1, 'unhandledRejection', this.unhandled);

		if (this._delay) {
			// for reporters, I guess.
			// might be nice to debounce some dots while we wait.
			this.emit(constants$3.EVENT_DELAY_BEGIN, rootSuite);
			rootSuite.once(EVENT_ROOT_SUITE_RUN, prepare);
			debug$2('run(): waiting for green light due to --delay');
		} else {
			Runner.immediately(prepare);
		}

		return this;
	};
	/**
		* Toggle partial object linking behavior; used for building object references from
		* unique ID's. Does nothing in serial mode, because the object references already exist.
		* Subclasses can implement this (e.g., `ParallelBufferedRunner`)
		* @abstract
		* @param {boolean} [value] - If `true`, enable partial object linking, otherwise disable
		* @returns {Runner}
		* @chainable
		* @public
		* @example
		* // this reporter needs proper object references when run in parallel mode
		* class MyReporter() {
		*   constructor(runner) {
		*     this.runner.linkPartialObjects(true)
		*       .on(EVENT_SUITE_BEGIN, suite => {
												// this Suite may be the same object...
		*       })
		*       .on(EVENT_TEST_BEGIN, test => {
		*         // ...as the `test.parent` property
		*       });
		*   }
		* }
		*/


	Runner.prototype.linkPartialObjects = function (value) {
		return this;
	};
	/*
		* Like {@link Runner#run}, but does not accept a callback and returns a `Promise` instead of a `Runner`.
		* This function cannot reject; an `unhandledRejection` event will bubble up to the `process` object instead.
		* @public
		* @memberof Runner
		* @param {Object} [opts] - Options for {@link Runner#run}
		* @returns {Promise<number>} Failure count
		*/


	Runner.prototype.runAsync = /*#__PURE__*/function () {
		var _runAsync = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
			var _this3 = this;

			var opts,
				_args = arguments;
			return regeneratorRuntime.wrap(function _callee$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							opts = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
							return _context.abrupt("return", new Promise(function (resolve) {
								_this3.run(resolve, opts);
							}));

						case 2:
						case "end":
							return _context.stop();
					}
				}
			}, _callee);
		}));

		function runAsync() {
			return _runAsync.apply(this, arguments);
		}

		return runAsync;
	}();
	/**
		* Cleanly abort execution.
		*
		* @memberof Runner
		* @public
		* @return {Runner} Runner instance.
		*/


	Runner.prototype.abort = function () {
		debug$2('abort(): aborting');
		this._abort = true;
		return this;
	};
	/**
		* Returns `true` if Mocha is running in parallel mode.  For reporters.
		*
		* Subclasses should return an appropriate value.
		* @public
		* @returns {false}
		*/


	Runner.prototype.isParallelMode = function isParallelMode() {
		return false;
	};
	/**
		* Configures an alternate reporter for worker processes to use. Subclasses
		* using worker processes should implement this.
		* @public
		* @param {string} path - Absolute path to alternate reporter for worker processes to use
		* @returns {Runner}
		* @throws When in serial mode
		* @chainable
		* @abstract
		*/


	Runner.prototype.workerReporter = function () {
		throw createUnsupportedError$1('workerReporter() not supported in serial mode');
	};
	/**
		* Filter leaks with the given globals flagged as `ok`.
		*
		* @private
		* @param {Array} ok
		* @param {Array} globals
		* @return {Array}
		*/


	function filterLeaks(ok, globals) {
		return globals.filter(function (key) {
			// Firefox and Chrome exposes iframes as index inside the window object
			if (/^\d+/.test(key)) {
				return false;
			} // in firefox
			// if runner runs in an iframe, this iframe's window.getInterface method
			// not init at first it is assigned in some seconds


			if (commonjsGlobal.navigator && /^getInterface/.test(key)) {
				return false;
			} // an iframe could be approached by window[iframeIndex]
			// in ie6,7,8 and opera, iframeIndex is enumerable, this could cause leak


			if (commonjsGlobal.navigator && /^\d+/.test(key)) {
				return false;
			} // Opera and IE expose global variables for HTML element IDs (issue #243)


			if (/^mocha-/.test(key)) {
				return false;
			}

			var matched = ok.filter(function (ok) {
				if (~ok.indexOf('*')) {
					return key.indexOf(ok.split('*')[0]) === 0;
				}

				return key === ok;
			});
			return !matched.length && (!commonjsGlobal.navigator || key !== 'onerror');
		});
	}
	/**
		* Check if argument is an instance of Error object or a duck-typed equivalent.
		*
		* @private
		* @param {Object} err - object to check
		* @param {string} err.message - error message
		* @returns {boolean}
		*/


	function isError$1(err) {
		return err instanceof Error || err && typeof err.message === 'string';
	}
	/**
		*
		* Converts thrown non-extensible type into proper Error.
		*
		* @private
		* @param {*} thrown - Non-extensible type thrown by code
		* @return {Error}
		*/


	function thrown2Error(err) {
		return new Error("the ".concat(utils.canonicalType(err), " ").concat(stringify(err), " was thrown, throw an Error :)"));
	}

	Runner.constants = constants$3;
	/**
		* Node.js' `EventEmitter`
		* @external EventEmitter
		* @see {@link https://nodejs.org/api/events.html#events_class_eventemitter}
		*/

	var runner$1 = Runner;

	var base = createCommonjsModule(function (module, exports) {
		/**
			* @module Base
			*/

		/**
			* Module dependencies.
			*/

		var constants = runner$1.constants;
		var EVENT_TEST_PASS = constants.EVENT_TEST_PASS;
		var EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;
		var isBrowser = utils.isBrowser();

		function getBrowserWindowSize() {
			if ('innerHeight' in commonjsGlobal) {
				return [commonjsGlobal.innerHeight, commonjsGlobal.innerWidth];
			} // In a Web Worker, the DOM Window is not available.


			return [640, 480];
		}
		/**
			* Expose `Base`.
			*/


		exports = module.exports = Base;
		/**
			* Check if both stdio streams are associated with a tty.
			*/

		var isatty = isBrowser || process$1.stdout.isTTY && process$1.stderr.isTTY;
		/**
			* Save log references to avoid tests interfering (see GH-3604).
			*/

		var consoleLog = console.log;
		/**
			* Enable coloring by default, except in the browser interface.
			*/

		exports.useColors = !isBrowser && (require$$11.stdout || process$1.env.MOCHA_COLORS !== undefined);
		/**
			* Inline diffs instead of +/-
			*/

		exports.inlineDiffs = false;
		/**
			* Default color map.
			*/

		exports.colors = {
			pass: 90,
			fail: 31,
			'bright pass': 92,
			'bright fail': 91,
			'bright yellow': 93,
			pending: 36,
			suite: 0,
			'error title': 0,
			'error message': 31,
			'error stack': 90,
			checkmark: 32,
			fast: 90,
			medium: 33,
			slow: 31,
			green: 32,
			light: 90,
			'diff gutter': 90,
			'diff added': 32,
			'diff removed': 31,
			'diff added inline': '30;42',
			'diff removed inline': '30;41'
		};
		/**
			* Default symbol map.
			*/

		exports.symbols = {
			ok: '✓',
			err: '✖',
			dot: '․',
			comma: ',',
			bang: '!'
		}; // With node.js on Windows: use symbols available in terminal default fonts

		if (process$1.platform === 'win32') {
			exports.symbols.ok = "\u221A";
			exports.symbols.err = "\xD7";
			exports.symbols.dot = '.';
		}
		/**
			* Color `str` with the given `type`,
			* allowing colors to be disabled,
			* as well as user-defined color
			* schemes.
			*
			* @private
			* @param {string} type
			* @param {string} str
			* @return {string}
			*/


		var color = exports.color = function (type, str) {
			if (!exports.useColors) {
				return String(str);
			}

			return "\x1B[" + exports.colors[type] + 'm' + str + "\x1B[0m";
		};
		/**
			* Expose term window size, with some defaults for when stderr is not a tty.
			*/


		exports.window = {
			width: 75
		};

		if (isatty) {
			if (isBrowser) {
				exports.window.width = getBrowserWindowSize()[1];
			} else {
				exports.window.width = process$1.stdout.getWindowSize(1)[0];
			}
		}
		/**
			* Expose some basic cursor interactions that are common among reporters.
			*/


		exports.cursor = {
			hide: function hide() {
				isatty && process$1.stdout.write("\x1B[?25l");
			},
			show: function show() {
				isatty && process$1.stdout.write("\x1B[?25h");
			},
			deleteLine: function deleteLine() {
				isatty && process$1.stdout.write("\x1B[2K");
			},
			beginningOfLine: function beginningOfLine() {
				isatty && process$1.stdout.write("\x1B[0G");
			},
			CR: function CR() {
				if (isatty) {
					exports.cursor.deleteLine();
					exports.cursor.beginningOfLine();
				} else {
					process$1.stdout.write('\r');
				}
			}
		};

		var showDiff = exports.showDiff = function (err) {
			return err && err.showDiff !== false && sameType(err.actual, err.expected) && err.expected !== undefined;
		};

		function stringifyDiffObjs(err) {
			if (!utils.isString(err.actual) || !utils.isString(err.expected)) {
				err.actual = utils.stringify(err.actual);
				err.expected = utils.stringify(err.expected);
			}
		}
		/**
			* Returns a diff between 2 strings with coloured ANSI output.
			*
			* @description
			* The diff will be either inline or unified dependent on the value
			* of `Base.inlineDiff`.
			*
			* @param {string} actual
			* @param {string} expected
			* @return {string} Diff
			*/


		var generateDiff = exports.generateDiff = function (actual, expected) {
			try {
				return exports.inlineDiffs ? inlineDiff(actual, expected) : unifiedDiff(actual, expected);
			} catch (err) {
				var msg = '\n      ' + color('diff added', '+ expected') + ' ' + color('diff removed', '- actual:  failed to generate Mocha diff') + '\n';
				return msg;
			}
		};
		/**
			* Outputs the given `failures` as a list.
			*
			* @public
			* @memberof Mocha.reporters.Base
			* @variation 1
			* @param {Object[]} failures - Each is Test instance with corresponding
			*     Error property
			*/


		exports.list = function (failures) {
			var multipleErr, multipleTest;
			Base.consoleLog();
			failures.forEach(function (test, i) {
				// format
				var fmt = color('error title', '  %s) %s:\n') + color('error message', '     %s') + color('error stack', '\n%s\n'); // msg

				var msg;
				var err;

				if (test.err && test.err.multiple) {
					if (multipleTest !== test) {
						multipleTest = test;
						multipleErr = [test.err].concat(test.err.multiple);
					}

					err = multipleErr.shift();
				} else {
					err = test.err;
				}

				var message;

				if (err.message && typeof err.message.toString === 'function') {
					message = err.message + '';
				} else if (typeof err.inspect === 'function') {
					message = err.inspect() + '';
				} else {
					message = '';
				}

				var stack = err.stack || message;
				var index = message ? stack.indexOf(message) : -1;

				if (index === -1) {
					msg = message;
				} else {
					index += message.length;
					msg = stack.slice(0, index); // remove msg from stack

					stack = stack.slice(index + 1);
				} // uncaught


				if (err.uncaught) {
					msg = 'Uncaught ' + msg;
				} // explicitly show diff


				if (!exports.hideDiff && showDiff(err)) {
					stringifyDiffObjs(err);
					fmt = color('error title', '  %s) %s:\n%s') + color('error stack', '\n%s\n');
					var match = message.match(/^([^:]+): expected/);
					msg = '\n      ' + color('error message', match ? match[1] : msg);
					msg += generateDiff(err.actual, err.expected);
				} // indent stack trace


				stack = stack.replace(/^/gm, '  '); // indented test title

				var testTitle = '';
				test.titlePath().forEach(function (str, index) {
					if (index !== 0) {
						testTitle += '\n     ';
					}

					for (var i = 0; i < index; i++) {
						testTitle += '  ';
					}

					testTitle += str;
				});
				Base.consoleLog(fmt, i + 1, testTitle, msg, stack);
			});
		};
		/**
			* Constructs a new `Base` reporter instance.
			*
			* @description
			* All other reporters generally inherit from this reporter.
			*
			* @public
			* @class
			* @memberof Mocha.reporters
			* @param {Runner} runner - Instance triggers reporter actions.
			* @param {Object} [options] - runner options
			*/


		function Base(runner, options) {
			var failures = this.failures = [];

			if (!runner) {
				throw new TypeError('Missing runner argument');
			}

			this.options = options || {};
			this.runner = runner;
			this.stats = runner.stats; // assigned so Reporters keep a closer reference

			runner.on(EVENT_TEST_PASS, function (test) {
				if (test.duration > test.slow()) {
					test.speed = 'slow';
				} else if (test.duration > test.slow() / 2) {
					test.speed = 'medium';
				} else {
					test.speed = 'fast';
				}
			});
			runner.on(EVENT_TEST_FAIL, function (test, err) {
				if (showDiff(err)) {
					stringifyDiffObjs(err);
				} // more than one error per test


				if (test.err && err instanceof Error) {
					test.err.multiple = (test.err.multiple || []).concat(err);
				} else {
					test.err = err;
				}

				failures.push(test);
			});
		}
		/**
			* Outputs common epilogue used by many of the bundled reporters.
			*
			* @public
			* @memberof Mocha.reporters
			*/


		Base.prototype.epilogue = function () {
			var stats = this.stats;
			var fmt;
			Base.consoleLog(); // passes

			fmt = color('bright pass', ' ') + color('green', ' %d passing') + color('light', ' (%s)');
			Base.consoleLog(fmt, stats.passes || 0, ms(stats.duration)); // pending

			if (stats.pending) {
				fmt = color('pending', ' ') + color('pending', ' %d pending');
				Base.consoleLog(fmt, stats.pending);
			} // failures


			if (stats.failures) {
				fmt = color('fail', '  %d failing');
				Base.consoleLog(fmt, stats.failures);
				Base.list(this.failures);
				Base.consoleLog();
			}

			Base.consoleLog();
		};
		/**
			* Pads the given `str` to `len`.
			*
			* @private
			* @param {string} str
			* @param {string} len
			* @return {string}
			*/


		function pad(str, len) {
			str = String(str);
			return Array(len - str.length + 1).join(' ') + str;
		}
		/**
			* Returns inline diff between 2 strings with coloured ANSI output.
			*
			* @private
			* @param {String} actual
			* @param {String} expected
			* @return {string} Diff
			*/


		function inlineDiff(actual, expected) {
			var msg = errorDiff(actual, expected); // linenos

			var lines = msg.split('\n');

			if (lines.length > 4) {
				var width = String(lines.length).length;
				msg = lines.map(function (str, i) {
					return pad(++i, width) + ' |' + ' ' + str;
				}).join('\n');
			} // legend


			msg = '\n' + color('diff removed inline', 'actual') + ' ' + color('diff added inline', 'expected') + '\n\n' + msg + '\n'; // indent

			msg = msg.replace(/^/gm, '      ');
			return msg;
		}
		/**
			* Returns unified diff between two strings with coloured ANSI output.
			*
			* @private
			* @param {String} actual
			* @param {String} expected
			* @return {string} The diff.
			*/


		function unifiedDiff(actual, expected) {
			var indent = '      ';

			function cleanUp(line) {
				if (line[0] === '+') {
					return indent + colorLines('diff added', line);
				}

				if (line[0] === '-') {
					return indent + colorLines('diff removed', line);
				}

				if (line.match(/@@/)) {
					return '--';
				}

				if (line.match(/\\ No newline/)) {
					return null;
				}

				return indent + line;
			}

			function notBlank(line) {
				return typeof line !== 'undefined' && line !== null;
			}

			var msg = diff.createPatch('string', actual, expected);
			var lines = msg.split('\n').splice(5);
			return '\n      ' + colorLines('diff added', '+ expected') + ' ' + colorLines('diff removed', '- actual') + '\n\n' + lines.map(cleanUp).filter(notBlank).join('\n');
		}
		/**
			* Returns character diff for `err`.
			*
			* @private
			* @param {String} actual
			* @param {String} expected
			* @return {string} the diff
			*/


		function errorDiff(actual, expected) {
			return diff.diffWordsWithSpace(actual, expected).map(function (str) {
				if (str.added) {
					return colorLines('diff added inline', str.value);
				}

				if (str.removed) {
					return colorLines('diff removed inline', str.value);
				}

				return str.value;
			}).join('');
		}
		/**
			* Colors lines for `str`, using the color `name`.
			*
			* @private
			* @param {string} name
			* @param {string} str
			* @return {string}
			*/


		function colorLines(name, str) {
			return str.split('\n').map(function (str) {
				return color(name, str);
			}).join('\n');
		}
		/**
			* Object#toString reference.
			*/


		var objToString = Object.prototype.toString;
		/**
			* Checks that a / b have the same type.
			*
			* @private
			* @param {Object} a
			* @param {Object} b
			* @return {boolean}
			*/

		function sameType(a, b) {
			return objToString.call(a) === objToString.call(b);
		}

		Base.consoleLog = consoleLog;
		Base["abstract"] = true;
	});

	var dot = createCommonjsModule(function (module, exports) {
		/**
			* @module Dot
			*/

		/**
			* Module dependencies.
			*/

		var inherits = utils.inherits;
		var constants = runner$1.constants;
		var EVENT_TEST_PASS = constants.EVENT_TEST_PASS;
		var EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;
		var EVENT_RUN_BEGIN = constants.EVENT_RUN_BEGIN;
		var EVENT_TEST_PENDING = constants.EVENT_TEST_PENDING;
		var EVENT_RUN_END = constants.EVENT_RUN_END;
		/**
			* Expose `Dot`.
			*/

		exports = module.exports = Dot;
		/**
			* Constructs a new `Dot` reporter instance.
			*
			* @public
			* @class
			* @memberof Mocha.reporters
			* @extends Mocha.reporters.Base
			* @param {Runner} runner - Instance triggers reporter actions.
			* @param {Object} [options] - runner options
			*/

		function Dot(runner, options) {
			base.call(this, runner, options);
			var self = this;
			var width = base.window.width * 0.75 | 0;
			var n = -1;
			runner.on(EVENT_RUN_BEGIN, function () {
				process$1.stdout.write('\n');
			});
			runner.on(EVENT_TEST_PENDING, function () {
				if (++n % width === 0) {
					process$1.stdout.write('\n  ');
				}

				process$1.stdout.write(base.color('pending', base.symbols.comma));
			});
			runner.on(EVENT_TEST_PASS, function (test) {
				if (++n % width === 0) {
					process$1.stdout.write('\n  ');
				}

				if (test.speed === 'slow') {
					process$1.stdout.write(base.color('bright yellow', base.symbols.dot));
				} else {
					process$1.stdout.write(base.color(test.speed, base.symbols.dot));
				}
			});
			runner.on(EVENT_TEST_FAIL, function () {
				if (++n % width === 0) {
					process$1.stdout.write('\n  ');
				}

				process$1.stdout.write(base.color('fail', base.symbols.bang));
			});
			runner.once(EVENT_RUN_END, function () {
				process$1.stdout.write('\n');
				self.epilogue();
			});
		}
		/**
			* Inherit from `Base.prototype`.
			*/


		inherits(Dot, base);
		Dot.description = 'dot matrix representation';
	});

	var doc = createCommonjsModule(function (module, exports) {
		/**
			* @module Doc
			*/

		/**
			* Module dependencies.
			*/

		var constants = runner$1.constants;
		var EVENT_TEST_PASS = constants.EVENT_TEST_PASS;
		var EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;
		var EVENT_SUITE_BEGIN = constants.EVENT_SUITE_BEGIN;
		var EVENT_SUITE_END = constants.EVENT_SUITE_END;
		/**
			* Expose `Doc`.
			*/

		exports = module.exports = Doc;
		/**
			* Constructs a new `Doc` reporter instance.
			*
			* @public
			* @class
			* @memberof Mocha.reporters
			* @extends Mocha.reporters.Base
			* @param {Runner} runner - Instance triggers reporter actions.
			* @param {Object} [options] - runner options
			*/

		function Doc(runner, options) {
			base.call(this, runner, options);
			var indents = 2;

			function indent() {
				return Array(indents).join('  ');
			}

			runner.on(EVENT_SUITE_BEGIN, function (suite) {
				if (suite.root) {
					return;
				}

				++indents;
				base.consoleLog('%s<section class="suite">', indent());
				++indents;
				base.consoleLog('%s<h1>%s</h1>', indent(), utils.escape(suite.title));
				base.consoleLog('%s<dl>', indent());
			});
			runner.on(EVENT_SUITE_END, function (suite) {
				if (suite.root) {
					return;
				}

				base.consoleLog('%s</dl>', indent());
				--indents;
				base.consoleLog('%s</section>', indent());
				--indents;
			});
			runner.on(EVENT_TEST_PASS, function (test) {
				base.consoleLog('%s  <dt>%s</dt>', indent(), utils.escape(test.title));
				base.consoleLog('%s  <dt>%s</dt>', indent(), utils.escape(test.file));
				var code = utils.escape(utils.clean(test.body));
				base.consoleLog('%s  <dd><pre><code>%s</code></pre></dd>', indent(), code);
			});
			runner.on(EVENT_TEST_FAIL, function (test, err) {
				base.consoleLog('%s  <dt class="error">%s</dt>', indent(), utils.escape(test.title));
				base.consoleLog('%s  <dt class="error">%s</dt>', indent(), utils.escape(test.file));
				var code = utils.escape(utils.clean(test.body));
				base.consoleLog('%s  <dd class="error"><pre><code>%s</code></pre></dd>', indent(), code);
				base.consoleLog('%s  <dd class="error">%s</dd>', indent(), utils.escape(err));
			});
		}

		Doc.description = 'HTML documentation';
	});

	var tap = createCommonjsModule(function (module, exports) {
		/**
			* @module TAP
			*/

		/**
			* Module dependencies.
			*/

		var constants = runner$1.constants;
		var EVENT_TEST_PASS = constants.EVENT_TEST_PASS;
		var EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;
		var EVENT_RUN_BEGIN = constants.EVENT_RUN_BEGIN;
		var EVENT_RUN_END = constants.EVENT_RUN_END;
		var EVENT_TEST_PENDING = constants.EVENT_TEST_PENDING;
		var EVENT_TEST_END = constants.EVENT_TEST_END;
		var inherits = utils.inherits;
		var sprintf = util.format;
		/**
			* Expose `TAP`.
			*/

		exports = module.exports = TAP;
		/**
			* Constructs a new `TAP` reporter instance.
			*
			* @public
			* @class
			* @memberof Mocha.reporters
			* @extends Mocha.reporters.Base
			* @param {Runner} runner - Instance triggers reporter actions.
			* @param {Object} [options] - runner options
			*/

		function TAP(runner, options) {
			base.call(this, runner, options);
			var self = this;
			var n = 1;
			var tapVersion = '12';

			if (options && options.reporterOptions) {
				if (options.reporterOptions.tapVersion) {
					tapVersion = options.reporterOptions.tapVersion.toString();
				}
			}

			this._producer = createProducer(tapVersion);
			runner.once(EVENT_RUN_BEGIN, function () {
				self._producer.writeVersion();
			});
			runner.on(EVENT_TEST_END, function () {
				++n;
			});
			runner.on(EVENT_TEST_PENDING, function (test) {
				self._producer.writePending(n, test);
			});
			runner.on(EVENT_TEST_PASS, function (test) {
				self._producer.writePass(n, test);
			});
			runner.on(EVENT_TEST_FAIL, function (test, err) {
				self._producer.writeFail(n, test, err);
			});
			runner.once(EVENT_RUN_END, function () {
				self._producer.writeEpilogue(runner.stats);
			});
		}
		/**
			* Inherit from `Base.prototype`.
			*/


		inherits(TAP, base);
		/**
			* Returns a TAP-safe title of `test`.
			*
			* @private
			* @param {Test} test - Test instance.
			* @return {String} title with any hash character removed
			*/

		function title(test) {
			return test.fullTitle().replace(/#/g, '');
		}
		/**
			* Writes newline-terminated formatted string to reporter output stream.
			*
			* @private
			* @param {string} format - `printf`-like format string
			* @param {...*} [varArgs] - Format string arguments
			*/


		function println(format, varArgs) {
			var vargs = Array.from(arguments);
			vargs[0] += '\n';
			process$1.stdout.write(sprintf.apply(null, vargs));
		}
		/**
			* Returns a `tapVersion`-appropriate TAP producer instance, if possible.
			*
			* @private
			* @param {string} tapVersion - Version of TAP specification to produce.
			* @returns {TAPProducer} specification-appropriate instance
			* @throws {Error} if specification version has no associated producer.
			*/


		function createProducer(tapVersion) {
			var producers = {
				'12': new TAP12Producer(),
				'13': new TAP13Producer()
			};
			var producer = producers[tapVersion];

			if (!producer) {
				throw new Error('invalid or unsupported TAP version: ' + JSON.stringify(tapVersion));
			}

			return producer;
		}
		/**
			* @summary
			* Constructs a new TAPProducer.
			*
			* @description
			* <em>Only</em> to be used as an abstract base class.
			*
			* @private
			* @constructor
			*/


		function TAPProducer() { }
		/**
			* Writes the TAP version to reporter output stream.
			*
			* @abstract
			*/


		TAPProducer.prototype.writeVersion = function () { };
		/**
			* Writes the plan to reporter output stream.
			*
			* @abstract
			* @param {number} ntests - Number of tests that are planned to run.
			*/


		TAPProducer.prototype.writePlan = function (ntests) {
			println('%d..%d', 1, ntests);
		};
		/**
			* Writes that test passed to reporter output stream.
			*
			* @abstract
			* @param {number} n - Index of test that passed.
			* @param {Test} test - Instance containing test information.
			*/


		TAPProducer.prototype.writePass = function (n, test) {
			println('ok %d %s', n, title(test));
		};
		/**
			* Writes that test was skipped to reporter output stream.
			*
			* @abstract
			* @param {number} n - Index of test that was skipped.
			* @param {Test} test - Instance containing test information.
			*/


		TAPProducer.prototype.writePending = function (n, test) {
			println('ok %d %s # SKIP -', n, title(test));
		};
		/**
			* Writes that test failed to reporter output stream.
			*
			* @abstract
			* @param {number} n - Index of test that failed.
			* @param {Test} test - Instance containing test information.
			* @param {Error} err - Reason the test failed.
			*/


		TAPProducer.prototype.writeFail = function (n, test, err) {
			println('not ok %d %s', n, title(test));
		};
		/**
			* Writes the summary epilogue to reporter output stream.
			*
			* @abstract
			* @param {Object} stats - Object containing run statistics.
			*/


		TAPProducer.prototype.writeEpilogue = function (stats) {
			// :TBD: Why is this not counting pending tests?
			println('# tests ' + (stats.passes + stats.failures));
			println('# pass ' + stats.passes); // :TBD: Why are we not showing pending results?

			println('# fail ' + stats.failures);
			this.writePlan(stats.passes + stats.failures + stats.pending);
		};
		/**
			* @summary
			* Constructs a new TAP12Producer.
			*
			* @description
			* Produces output conforming to the TAP12 specification.
			*
			* @private
			* @constructor
			* @extends TAPProducer
			* @see {@link https://testanything.org/tap-specification.html|Specification}
			*/


		function TAP12Producer() {
			/**
				* Writes that test failed to reporter output stream, with error formatting.
				* @override
				*/
			this.writeFail = function (n, test, err) {
				TAPProducer.prototype.writeFail.call(this, n, test, err);

				if (err.message) {
					println(err.message.replace(/^/gm, '  '));
				}

				if (err.stack) {
					println(err.stack.replace(/^/gm, '  '));
				}
			};
		}
		/**
			* Inherit from `TAPProducer.prototype`.
			*/


		inherits(TAP12Producer, TAPProducer);
		/**
			* @summary
			* Constructs a new TAP13Producer.
			*
			* @description
			* Produces output conforming to the TAP13 specification.
			*
			* @private
			* @constructor
			* @extends TAPProducer
			* @see {@link https://testanything.org/tap-version-13-specification.html|Specification}
			*/

		function TAP13Producer() {
			/**
				* Writes the TAP version to reporter output stream.
				* @override
				*/
			this.writeVersion = function () {
				println('TAP version 13');
			};
			/**
				* Writes that test failed to reporter output stream, with error formatting.
				* @override
				*/


			this.writeFail = function (n, test, err) {
				TAPProducer.prototype.writeFail.call(this, n, test, err);
				var emitYamlBlock = err.message != null || err.stack != null;

				if (emitYamlBlock) {
					println(indent(1) + '---');

					if (err.message) {
						println(indent(2) + 'message: |-');
						println(err.message.replace(/^/gm, indent(3)));
					}

					if (err.stack) {
						println(indent(2) + 'stack: |-');
						println(err.stack.replace(/^/gm, indent(3)));
					}

					println(indent(1) + '...');
				}
			};

			function indent(level) {
				return Array(level + 1).join('  ');
			}
		}
		/**
			* Inherit from `TAPProducer.prototype`.
			*/


		inherits(TAP13Producer, TAPProducer);
		TAP.description = 'TAP-compatible output';
	});

	var json = createCommonjsModule(function (module, exports) {
		/**
			* @module JSON
			*/

		/**
			* Module dependencies.
			*/

		var constants = runner$1.constants;
		var EVENT_TEST_PASS = constants.EVENT_TEST_PASS;
		var EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;
		var EVENT_TEST_END = constants.EVENT_TEST_END;
		var EVENT_RUN_END = constants.EVENT_RUN_END;
		var EVENT_TEST_PENDING = constants.EVENT_TEST_PENDING;
		/**
			* Expose `JSON`.
			*/

		exports = module.exports = JSONReporter;
		/**
			* Constructs a new `JSON` reporter instance.
			*
			* @public
			* @class JSON
			* @memberof Mocha.reporters
			* @extends Mocha.reporters.Base
			* @param {Runner} runner - Instance triggers reporter actions.
			* @param {Object} [options] - runner options
			*/

		function JSONReporter(runner, options) {
			base.call(this, runner, options);
			var self = this;
			var tests = [];
			var pending = [];
			var failures = [];
			var passes = [];
			runner.on(EVENT_TEST_END, function (test) {
				tests.push(test);
			});
			runner.on(EVENT_TEST_PASS, function (test) {
				passes.push(test);
			});
			runner.on(EVENT_TEST_FAIL, function (test) {
				failures.push(test);
			});
			runner.on(EVENT_TEST_PENDING, function (test) {
				pending.push(test);
			});
			runner.once(EVENT_RUN_END, function () {
				var obj = {
					stats: self.stats,
					tests: tests.map(clean),
					pending: pending.map(clean),
					failures: failures.map(clean),
					passes: passes.map(clean)
				};
				runner.testResults = obj;
				process$1.stdout.write(JSON.stringify(obj, null, 2));
			});
		}
		/**
			* Return a plain-object representation of `test`
			* free of cyclic properties etc.
			*
			* @private
			* @param {Object} test
			* @return {Object}
			*/


		function clean(test) {
			var err = test.err || {};

			if (err instanceof Error) {
				err = errorJSON(err);
			}

			return {
				title: test.title,
				fullTitle: test.fullTitle(),
				file: test.file,
				duration: test.duration,
				currentRetry: test.currentRetry(),
				speed: test.speed,
				err: cleanCycles(err)
			};
		}
		/**
			* Replaces any circular references inside `obj` with '[object Object]'
			*
			* @private
			* @param {Object} obj
			* @return {Object}
			*/


		function cleanCycles(obj) {
			var cache = [];
			return JSON.parse(JSON.stringify(obj, function (key, value) {
				if (_typeof(value) === 'object' && value !== null) {
					if (cache.indexOf(value) !== -1) {
						// Instead of going in a circle, we'll print [object Object]
						return '' + value;
					}

					cache.push(value);
				}

				return value;
			}));
		}
		/**
			* Transform an Error object into a JSON object.
			*
			* @private
			* @param {Error} err
			* @return {Object}
			*/


		function errorJSON(err) {
			var res = {};
			Object.getOwnPropertyNames(err).forEach(function (key) {
				res[key] = err[key];
			}, err);
			return res;
		}

		JSONReporter.description = 'single JSON object';
	});

	// `thisNumberValue` abstract operation
	// https://tc39.github.io/ecma262/#sec-thisnumbervalue
	var thisNumberValue = function (value) {
		if (typeof value != 'number' && classofRaw(value) != 'Number') {
			throw TypeError('Incorrect invocation');
		}
		return +value;
	};

	// `String.prototype.repeat` method implementation
	// https://tc39.github.io/ecma262/#sec-string.prototype.repeat
	var stringRepeat = ''.repeat || function repeat(count) {
		var str = String(requireObjectCoercible(this));
		var result = '';
		var n = toInteger(count);
		if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');
		for (; n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;
		return result;
	};

	var nativeToFixed = 1.0.toFixed;
	var floor$4 = Math.floor;

	var pow$1 = function (x, n, acc) {
		return n === 0 ? acc : n % 2 === 1 ? pow$1(x, n - 1, acc * x) : pow$1(x * x, n / 2, acc);
	};

	var log$2 = function (x) {
		var n = 0;
		var x2 = x;
		while (x2 >= 4096) {
			n += 12;
			x2 /= 4096;
		}
		while (x2 >= 2) {
			n += 1;
			x2 /= 2;
		} return n;
	};

	var FORCED$8 = nativeToFixed && (
		0.00008.toFixed(3) !== '0.000' ||
		0.9.toFixed(0) !== '1' ||
		1.255.toFixed(2) !== '1.25' ||
		1000000000000000128.0.toFixed(0) !== '1000000000000000128'
	) || !fails(function () {
		// V8 ~ Android 4.3-
		nativeToFixed.call({});
	});

	// `Number.prototype.toFixed` method
	// https://tc39.github.io/ecma262/#sec-number.prototype.tofixed
	_export({ target: 'Number', proto: true, forced: FORCED$8 }, {
		// eslint-disable-next-line max-statements
		toFixed: function toFixed(fractionDigits) {
			var number = thisNumberValue(this);
			var fractDigits = toInteger(fractionDigits);
			var data = [0, 0, 0, 0, 0, 0];
			var sign = '';
			var result = '0';
			var e, z, j, k;

			var multiply = function (n, c) {
				var index = -1;
				var c2 = c;
				while (++index < 6) {
					c2 += n * data[index];
					data[index] = c2 % 1e7;
					c2 = floor$4(c2 / 1e7);
				}
			};

			var divide = function (n) {
				var index = 6;
				var c = 0;
				while (--index >= 0) {
					c += data[index];
					data[index] = floor$4(c / n);
					c = (c % n) * 1e7;
				}
			};

			var dataToString = function () {
				var index = 6;
				var s = '';
				while (--index >= 0) {
					if (s !== '' || index === 0 || data[index] !== 0) {
						var t = String(data[index]);
						s = s === '' ? t : s + stringRepeat.call('0', 7 - t.length) + t;
					}
				} return s;
			};

			if (fractDigits < 0 || fractDigits > 20) throw RangeError('Incorrect fraction digits');
			// eslint-disable-next-line no-self-compare
			if (number != number) return 'NaN';
			if (number <= -1e21 || number >= 1e21) return String(number);
			if (number < 0) {
				sign = '-';
				number = -number;
			}
			if (number > 1e-21) {
				e = log$2(number * pow$1(2, 69, 1)) - 69;
				z = e < 0 ? number * pow$1(2, -e, 1) : number / pow$1(2, e, 1);
				z *= 0x10000000000000;
				e = 52 - e;
				if (e > 0) {
					multiply(0, z);
					j = fractDigits;
					while (j >= 7) {
						multiply(1e7, 0);
						j -= 7;
					}
					multiply(pow$1(10, j, 1), 0);
					j = e - 1;
					while (j >= 23) {
						divide(1 << 23);
						j -= 23;
					}
					divide(1 << j);
					multiply(1, 1);
					divide(2);
					result = dataToString();
				} else {
					multiply(0, z);
					multiply(1 << -e, 0);
					result = dataToString() + stringRepeat.call('0', fractDigits);
				}
			}
			if (fractDigits > 0) {
				k = result.length;
				result = sign + (k <= fractDigits
					? '0.' + stringRepeat.call('0', fractDigits - k) + result
					: result.slice(0, k - fractDigits) + '.' + result.slice(k - fractDigits));
			} else {
				result = sign + result;
			} return result;
		}
	});

	/**
		@module browser/Progress
	*/

	/**
		* Expose `Progress`.
		*/

	var progress = Progress;
	/**
		* Initialize a new `Progress` indicator.
		*/

	function Progress() {
		this.percent = 0;
		this.size(0);
		this.fontSize(11);
		this.font('helvetica, arial, sans-serif');
	}
	/**
		* Set progress size to `size`.
		*
		* @public
		* @param {number} size
		* @return {Progress} Progress instance.
		*/


	Progress.prototype.size = function (size) {
		this._size = size;
		return this;
	};
	/**
		* Set text to `text`.
		*
		* @public
		* @param {string} text
		* @return {Progress} Progress instance.
		*/


	Progress.prototype.text = function (text) {
		this._text = text;
		return this;
	};
	/**
		* Set font size to `size`.
		*
		* @public
		* @param {number} size
		* @return {Progress} Progress instance.
		*/


	Progress.prototype.fontSize = function (size) {
		this._fontSize = size;
		return this;
	};
	/**
		* Set font to `family`.
		*
		* @param {string} family
		* @return {Progress} Progress instance.
		*/


	Progress.prototype.font = function (family) {
		this._font = family;
		return this;
	};
	/**
		* Update percentage to `n`.
		*
		* @param {number} n
		* @return {Progress} Progress instance.
		*/


	Progress.prototype.update = function (n) {
		this.percent = n;
		return this;
	};
	/**
		* Draw on `ctx`.
		*
		* @param {CanvasRenderingContext2d} ctx
		* @return {Progress} Progress instance.
		*/


	Progress.prototype.draw = function (ctx) {
		try {
			var percent = Math.min(this.percent, 100);
			var size = this._size;
			var half = size / 2;
			var x = half;
			var y = half;
			var rad = half - 1;
			var fontSize = this._fontSize;
			ctx.font = fontSize + 'px ' + this._font;
			var angle = Math.PI * 2 * (percent / 100);
			ctx.clearRect(0, 0, size, size); // outer circle

			ctx.strokeStyle = '#9f9f9f';
			ctx.beginPath();
			ctx.arc(x, y, rad, 0, angle, false);
			ctx.stroke(); // inner circle

			ctx.strokeStyle = '#eee';
			ctx.beginPath();
			ctx.arc(x, y, rad - 1, 0, angle, true);
			ctx.stroke(); // text

			var text = this._text || (percent | 0) + '%';
			var w = ctx.measureText(text).width;
			ctx.fillText(text, x - w / 2 + 1, y + fontSize / 2 - 1);
		} catch (ignore) {// don't fail if we can't render progress
		}

		return this;
	};

	var html$1 = createCommonjsModule(function (module, exports) {
		/* eslint-env browser */

		/**
			* @module HTML
			*/

		/**
			* Module dependencies.
			*/

		var constants = runner$1.constants;
		var EVENT_TEST_PASS = constants.EVENT_TEST_PASS;
		var EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;
		var EVENT_SUITE_BEGIN = constants.EVENT_SUITE_BEGIN;
		var EVENT_SUITE_END = constants.EVENT_SUITE_END;
		var EVENT_TEST_PENDING = constants.EVENT_TEST_PENDING;
		var escape = utils.escape;
		/**
			* Save timer references to avoid Sinon interfering (see GH-237).
			*/

		var Date = commonjsGlobal.Date;
		/**
			* Expose `HTML`.
			*/

		exports = module.exports = HTML;
		/**
			* Stats template.
			*/

		var statsTemplate = '<ul id="mocha-stats">' + '<li class="progress"><canvas width="40" height="40"></canvas></li>' + '<li class="passes"><a href="javascript:void(0);">passes:</a> <em>0</em></li>' + '<li class="failures"><a href="javascript:void(0);">failures:</a> <em>0</em></li>' + '<li class="duration">duration: <em>0</em>s</li>' + '</ul>';
		var playIcon = '&#x2023;';
		/**
			* Constructs a new `HTML` reporter instance.
			*
			* @public
			* @class
			* @memberof Mocha.reporters
			* @extends Mocha.reporters.Base
			* @param {Runner} runner - Instance triggers reporter actions.
			* @param {Object} [options] - runner options
			*/

		function HTML(runner, options) {
			base.call(this, runner, options);
			var self = this;
			var stats = this.stats;
			var stat = fragment(statsTemplate);
			var items = stat.getElementsByTagName('li');
			var passes = items[1].getElementsByTagName('em')[0];
			var passesLink = items[1].getElementsByTagName('a')[0];
			var failures = items[2].getElementsByTagName('em')[0];
			var failuresLink = items[2].getElementsByTagName('a')[0];
			var duration = items[3].getElementsByTagName('em')[0];
			var canvas = stat.getElementsByTagName('canvas')[0];
			var report = fragment('<ul id="mocha-report"></ul>');
			var stack = [report];
			var progress$1;
			var ctx;
			var root = document.getElementById('mocha');

			if (canvas.getContext) {
				var ratio = window.devicePixelRatio || 1;
				canvas.style.width = canvas.width;
				canvas.style.height = canvas.height;
				canvas.width *= ratio;
				canvas.height *= ratio;
				ctx = canvas.getContext('2d');
				ctx.scale(ratio, ratio);
				progress$1 = new progress();
			}

			if (!root) {
				return error('#mocha div missing, add it to your document');
			} // pass toggle


			on(passesLink, 'click', function (evt) {
				evt.preventDefault();
				unhide();
				var name = /pass/.test(report.className) ? '' : ' pass';
				report.className = report.className.replace(/fail|pass/g, '') + name;

				if (report.className.trim()) {
					hideSuitesWithout('test pass');
				}
			}); // failure toggle

			on(failuresLink, 'click', function (evt) {
				evt.preventDefault();
				unhide();
				var name = /fail/.test(report.className) ? '' : ' fail';
				report.className = report.className.replace(/fail|pass/g, '') + name;

				if (report.className.trim()) {
					hideSuitesWithout('test fail');
				}
			});
			root.appendChild(stat);
			root.appendChild(report);

			if (progress$1) {
				progress$1.size(40);
			}

			runner.on(EVENT_SUITE_BEGIN, function (suite) {
				if (suite.root) {
					return;
				} // suite


				var url = self.suiteURL(suite);
				var el = fragment('<li class="suite"><h1><a href="%s">%s</a></h1></li>', url, escape(suite.title)); // container

				stack[0].appendChild(el);
				stack.unshift(document.createElement('ul'));
				el.appendChild(stack[0]);
			});
			runner.on(EVENT_SUITE_END, function (suite) {
				if (suite.root) {
					updateStats();
					return;
				}

				stack.shift();
			});
			runner.on(EVENT_TEST_PASS, function (test) {
				var url = self.testURL(test);
				var markup = '<li class="test pass %e"><h2>%e<span class="duration">%ems</span> ' + '<a href="%s" class="replay">' + playIcon + '</a></h2></li>';
				var el = fragment(markup, test.speed, test.title, test.duration, url);
				self.addCodeToggle(el, test.body);
				appendToStack(el);
				updateStats();
			});
			runner.on(EVENT_TEST_FAIL, function (test) {
				var el = fragment('<li class="test fail"><h2>%e <a href="%e" class="replay">' + playIcon + '</a></h2></li>', test.title, self.testURL(test));
				var stackString; // Note: Includes leading newline

				var message = test.err.toString(); // <=IE7 stringifies to [Object Error]. Since it can be overloaded, we
				// check for the result of the stringifying.

				if (message === '[object Error]') {
					message = test.err.message;
				}

				if (test.err.stack) {
					var indexOfMessage = test.err.stack.indexOf(test.err.message);

					if (indexOfMessage === -1) {
						stackString = test.err.stack;
					} else {
						stackString = test.err.stack.substr(test.err.message.length + indexOfMessage);
					}
				} else if (test.err.sourceURL && test.err.line !== undefined) {
					// Safari doesn't give you a stack. Let's at least provide a source line.
					stackString = '\n(' + test.err.sourceURL + ':' + test.err.line + ')';
				}

				stackString = stackString || '';

				if (test.err.htmlMessage && stackString) {
					el.appendChild(fragment('<div class="html-error">%s\n<pre class="error">%e</pre></div>', test.err.htmlMessage, stackString));
				} else if (test.err.htmlMessage) {
					el.appendChild(fragment('<div class="html-error">%s</div>', test.err.htmlMessage));
				} else {
					el.appendChild(fragment('<pre class="error">%e%e</pre>', message, stackString));
				}

				self.addCodeToggle(el, test.body);
				appendToStack(el);
				updateStats();
			});
			runner.on(EVENT_TEST_PENDING, function (test) {
				var el = fragment('<li class="test pass pending"><h2>%e</h2></li>', test.title);
				appendToStack(el);
				updateStats();
			});

			function appendToStack(el) {
				// Don't call .appendChild if #mocha-report was already .shift()'ed off the stack.
				if (stack[0]) {
					stack[0].appendChild(el);
				}
			}

			function updateStats() {
				// TODO: add to stats
				var percent = stats.tests / runner.total * 100 | 0;

				if (progress$1) {
					progress$1.update(percent).draw(ctx);
				} // update stats


				var ms = new Date() - stats.start;
				text(passes, stats.passes);
				text(failures, stats.failures);
				text(duration, (ms / 1000).toFixed(2));
			}
		}
		/**
			* Makes a URL, preserving querystring ("search") parameters.
			*
			* @param {string} s
			* @return {string} A new URL.
			*/


		function makeUrl(s) {
			var search = window.location.search; // Remove previous grep query parameter if present

			if (search) {
				search = search.replace(/[?&]grep=[^&\s]*/g, '').replace(/^&/, '?');
			}

			return window.location.pathname + (search ? search + '&' : '?') + 'grep=' + encodeURIComponent(escapeStringRegexp(s));
		}
		/**
			* Provide suite URL.
			*
			* @param {Object} [suite]
			*/


		HTML.prototype.suiteURL = function (suite) {
			return makeUrl(suite.fullTitle());
		};
		/**
			* Provide test URL.
			*
			* @param {Object} [test]
			*/


		HTML.prototype.testURL = function (test) {
			return makeUrl(test.fullTitle());
		};
		/**
			* Adds code toggle functionality for the provided test's list element.
			*
			* @param {HTMLLIElement} el
			* @param {string} contents
			*/


		HTML.prototype.addCodeToggle = function (el, contents) {
			var h2 = el.getElementsByTagName('h2')[0];
			on(h2, 'click', function () {
				pre.style.display = pre.style.display === 'none' ? 'block' : 'none';
			});
			var pre = fragment('<pre><code>%e</code></pre>', utils.clean(contents));
			el.appendChild(pre);
			pre.style.display = 'none';
		};
		/**
			* Display error `msg`.
			*
			* @param {string} msg
			*/


		function error(msg) {
			document.body.appendChild(fragment('<div id="mocha-error">%s</div>', msg));
		}
		/**
			* Return a DOM fragment from `html`.
			*
			* @param {string} html
			*/


		function fragment(html) {
			var args = arguments;
			var div = document.createElement('div');
			var i = 1;
			div.innerHTML = html.replace(/%([se])/g, function (_, type) {
				switch (type) {
					case 's':
						return String(args[i++]);

					case 'e':
						return escape(args[i++]);
					// no default
				}
			});
			return div.firstChild;
		}
		/**
			* Check for suites that do not have elements
			* with `classname`, and hide them.
			*
			* @param {text} classname
			*/


		function hideSuitesWithout(classname) {
			var suites = document.getElementsByClassName('suite');

			for (var i = 0; i < suites.length; i++) {
				var els = suites[i].getElementsByClassName(classname);

				if (!els.length) {
					suites[i].className += ' hidden';
				}
			}
		}
		/**
			* Unhide .hidden suites.
			*/


		function unhide() {
			var els = document.getElementsByClassName('suite hidden');

			while (els.length > 0) {
				els[0].className = els[0].className.replace('suite hidden', 'suite');
			}
		}
		/**
			* Set an element's text contents.
			*
			* @param {HTMLElement} el
			* @param {string} contents
			*/


		function text(el, contents) {
			if (el.textContent) {
				el.textContent = contents;
			} else {
				el.innerText = contents;
			}
		}
		/**
			* Listen on `event` with callback `fn`.
			*/


		function on(el, event, fn) {
			if (el.addEventListener) {
				el.addEventListener(event, fn, false);
			} else {
				el.attachEvent('on' + event, fn);
			}
		}

		HTML.browserOnly = true;
	});

	var list = createCommonjsModule(function (module, exports) {
		/**
			* @module List
			*/

		/**
			* Module dependencies.
			*/

		var inherits = utils.inherits;
		var constants = runner$1.constants;
		var EVENT_RUN_BEGIN = constants.EVENT_RUN_BEGIN;
		var EVENT_RUN_END = constants.EVENT_RUN_END;
		var EVENT_TEST_BEGIN = constants.EVENT_TEST_BEGIN;
		var EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;
		var EVENT_TEST_PASS = constants.EVENT_TEST_PASS;
		var EVENT_TEST_PENDING = constants.EVENT_TEST_PENDING;
		var color = base.color;
		var cursor = base.cursor;
		/**
			* Expose `List`.
			*/

		exports = module.exports = List;
		/**
			* Constructs a new `List` reporter instance.
			*
			* @public
			* @class
			* @memberof Mocha.reporters
			* @extends Mocha.reporters.Base
			* @param {Runner} runner - Instance triggers reporter actions.
			* @param {Object} [options] - runner options
			*/

		function List(runner, options) {
			base.call(this, runner, options);
			var self = this;
			var n = 0;
			runner.on(EVENT_RUN_BEGIN, function () {
				base.consoleLog();
			});
			runner.on(EVENT_TEST_BEGIN, function (test) {
				process$1.stdout.write(color('pass', '    ' + test.fullTitle() + ': '));
			});
			runner.on(EVENT_TEST_PENDING, function (test) {
				var fmt = color('checkmark', '  -') + color('pending', ' %s');
				base.consoleLog(fmt, test.fullTitle());
			});
			runner.on(EVENT_TEST_PASS, function (test) {
				var fmt = color('checkmark', '  ' + base.symbols.ok) + color('pass', ' %s: ') + color(test.speed, '%dms');
				cursor.CR();
				base.consoleLog(fmt, test.fullTitle(), test.duration);
			});
			runner.on(EVENT_TEST_FAIL, function (test) {
				cursor.CR();
				base.consoleLog(color('fail', '  %d) %s'), ++n, test.fullTitle());
			});
			runner.once(EVENT_RUN_END, self.epilogue.bind(self));
		}
		/**
			* Inherit from `Base.prototype`.
			*/


		inherits(List, base);
		List.description = 'like "spec" reporter but flat';
	});

	var min$7 = createCommonjsModule(function (module, exports) {
		/**
			* @module Min
			*/

		/**
			* Module dependencies.
			*/

		var inherits = utils.inherits;
		var constants = runner$1.constants;
		var EVENT_RUN_END = constants.EVENT_RUN_END;
		var EVENT_RUN_BEGIN = constants.EVENT_RUN_BEGIN;
		/**
			* Expose `Min`.
			*/

		exports = module.exports = Min;
		/**
			* Constructs a new `Min` reporter instance.
			*
			* @description
			* This minimal test reporter is best used with '--watch'.
			*
			* @public
			* @class
			* @memberof Mocha.reporters
			* @extends Mocha.reporters.Base
			* @param {Runner} runner - Instance triggers reporter actions.
			* @param {Object} [options] - runner options
			*/

		function Min(runner, options) {
			base.call(this, runner, options);
			runner.on(EVENT_RUN_BEGIN, function () {
				// clear screen
				process$1.stdout.write("\x1B[2J"); // set cursor position

				process$1.stdout.write("\x1B[1;3H");
			});
			runner.once(EVENT_RUN_END, this.epilogue.bind(this));
		}
		/**
			* Inherit from `Base.prototype`.
			*/


		inherits(Min, base);
		Min.description = 'essentially just a summary';
	});

	var spec = createCommonjsModule(function (module, exports) {
		/**
			* @module Spec
			*/

		/**
			* Module dependencies.
			*/

		var constants = runner$1.constants;
		var EVENT_RUN_BEGIN = constants.EVENT_RUN_BEGIN;
		var EVENT_RUN_END = constants.EVENT_RUN_END;
		var EVENT_SUITE_BEGIN = constants.EVENT_SUITE_BEGIN;
		var EVENT_SUITE_END = constants.EVENT_SUITE_END;
		var EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;
		var EVENT_TEST_PASS = constants.EVENT_TEST_PASS;
		var EVENT_TEST_PENDING = constants.EVENT_TEST_PENDING;
		var inherits = utils.inherits;
		var color = base.color;
		/**
			* Expose `Spec`.
			*/

		exports = module.exports = Spec;
		/**
			* Constructs a new `Spec` reporter instance.
			*
			* @public
			* @class
			* @memberof Mocha.reporters
			* @extends Mocha.reporters.Base
			* @param {Runner} runner - Instance triggers reporter actions.
			* @param {Object} [options] - runner options
			*/

		function Spec(runner, options) {
			base.call(this, runner, options);
			var self = this;
			var indents = 0;
			var n = 0;

			function indent() {
				return Array(indents).join('  ');
			}

			runner.on(EVENT_RUN_BEGIN, function () {
				base.consoleLog();
			});
			runner.on(EVENT_SUITE_BEGIN, function (suite) {
				++indents;
				base.consoleLog(color('suite', '%s%s'), indent(), suite.title);
			});
			runner.on(EVENT_SUITE_END, function () {
				--indents;

				if (indents === 1) {
					base.consoleLog();
				}
			});
			runner.on(EVENT_TEST_PENDING, function (test) {
				var fmt = indent() + color('pending', '  - %s');
				base.consoleLog(fmt, test.title);
			});
			runner.on(EVENT_TEST_PASS, function (test) {
				var fmt;

				if (test.speed === 'fast') {
					fmt = indent() + color('checkmark', '  ' + base.symbols.ok) + color('pass', ' %s');
					base.consoleLog(fmt, test.title);
				} else {
					fmt = indent() + color('checkmark', '  ' + base.symbols.ok) + color('pass', ' %s') + color(test.speed, ' (%dms)');
					base.consoleLog(fmt, test.title, test.duration);
				}
			});
			runner.on(EVENT_TEST_FAIL, function (test) {
				base.consoleLog(indent() + color('fail', '  %d) %s'), ++n, test.title);
			});
			runner.once(EVENT_RUN_END, self.epilogue.bind(self));
		}
		/**
			* Inherit from `Base.prototype`.
			*/


		inherits(Spec, base);
		Spec.description = 'hierarchical & verbose [default]';
	});

	var nyan = createCommonjsModule(function (module, exports) {
		/**
			* @module Nyan
			*/

		/**
			* Module dependencies.
			*/

		var constants = runner$1.constants;
		var inherits = utils.inherits;
		var EVENT_RUN_BEGIN = constants.EVENT_RUN_BEGIN;
		var EVENT_TEST_PENDING = constants.EVENT_TEST_PENDING;
		var EVENT_TEST_PASS = constants.EVENT_TEST_PASS;
		var EVENT_RUN_END = constants.EVENT_RUN_END;
		var EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;
		/**
			* Expose `Dot`.
			*/

		exports = module.exports = NyanCat;
		/**
			* Constructs a new `Nyan` reporter instance.
			*
			* @public
			* @class Nyan
			* @memberof Mocha.reporters
			* @extends Mocha.reporters.Base
			* @param {Runner} runner - Instance triggers reporter actions.
			* @param {Object} [options] - runner options
			*/

		function NyanCat(runner, options) {
			base.call(this, runner, options);
			var self = this;
			var width = base.window.width * 0.75 | 0;
			var nyanCatWidth = this.nyanCatWidth = 11;
			this.colorIndex = 0;
			this.numberOfLines = 4;
			this.rainbowColors = self.generateColors();
			this.scoreboardWidth = 5;
			this.tick = 0;
			this.trajectories = [[], [], [], []];
			this.trajectoryWidthMax = width - nyanCatWidth;
			runner.on(EVENT_RUN_BEGIN, function () {
				base.cursor.hide();
				self.draw();
			});
			runner.on(EVENT_TEST_PENDING, function () {
				self.draw();
			});
			runner.on(EVENT_TEST_PASS, function () {
				self.draw();
			});
			runner.on(EVENT_TEST_FAIL, function () {
				self.draw();
			});
			runner.once(EVENT_RUN_END, function () {
				base.cursor.show();

				for (var i = 0; i < self.numberOfLines; i++) {
					write('\n');
				}

				self.epilogue();
			});
		}
		/**
			* Inherit from `Base.prototype`.
			*/


		inherits(NyanCat, base);
		/**
			* Draw the nyan cat
			*
			* @private
			*/

		NyanCat.prototype.draw = function () {
			this.appendRainbow();
			this.drawScoreboard();
			this.drawRainbow();
			this.drawNyanCat();
			this.tick = !this.tick;
		};
		/**
			* Draw the "scoreboard" showing the number
			* of passes, failures and pending tests.
			*
			* @private
			*/


		NyanCat.prototype.drawScoreboard = function () {
			var stats = this.stats;

			function draw(type, n) {
				write(' ');
				write(base.color(type, n));
				write('\n');
			}

			draw('green', stats.passes);
			draw('fail', stats.failures);
			draw('pending', stats.pending);
			write('\n');
			this.cursorUp(this.numberOfLines);
		};
		/**
			* Append the rainbow.
			*
			* @private
			*/


		NyanCat.prototype.appendRainbow = function () {
			var segment = this.tick ? '_' : '-';
			var rainbowified = this.rainbowify(segment);

			for (var index = 0; index < this.numberOfLines; index++) {
				var trajectory = this.trajectories[index];

				if (trajectory.length >= this.trajectoryWidthMax) {
					trajectory.shift();
				}

				trajectory.push(rainbowified);
			}
		};
		/**
			* Draw the rainbow.
			*
			* @private
			*/


		NyanCat.prototype.drawRainbow = function () {
			var self = this;
			this.trajectories.forEach(function (line) {
				write("\x1B[" + self.scoreboardWidth + 'C');
				write(line.join(''));
				write('\n');
			});
			this.cursorUp(this.numberOfLines);
		};
		/**
			* Draw the nyan cat
			*
			* @private
			*/


		NyanCat.prototype.drawNyanCat = function () {
			var self = this;
			var startWidth = this.scoreboardWidth + this.trajectories[0].length;
			var dist = "\x1B[" + startWidth + 'C';
			var padding = '';
			write(dist);
			write('_,------,');
			write('\n');
			write(dist);
			padding = self.tick ? '  ' : '   ';
			write('_|' + padding + '/\\_/\\ ');
			write('\n');
			write(dist);
			padding = self.tick ? '_' : '__';
			var tail = self.tick ? '~' : '^';
			write(tail + '|' + padding + this.face() + ' ');
			write('\n');
			write(dist);
			padding = self.tick ? ' ' : '  ';
			write(padding + '""  "" ');
			write('\n');
			this.cursorUp(this.numberOfLines);
		};
		/**
			* Draw nyan cat face.
			*
			* @private
			* @return {string}
			*/


		NyanCat.prototype.face = function () {
			var stats = this.stats;

			if (stats.failures) {
				return '( x .x)';
			} else if (stats.pending) {
				return '( o .o)';
			} else if (stats.passes) {
				return '( ^ .^)';
			}

			return '( - .-)';
		};
		/**
			* Move cursor up `n`.
			*
			* @private
			* @param {number} n
			*/


		NyanCat.prototype.cursorUp = function (n) {
			write("\x1B[" + n + 'A');
		};
		/**
			* Move cursor down `n`.
			*
			* @private
			* @param {number} n
			*/


		NyanCat.prototype.cursorDown = function (n) {
			write("\x1B[" + n + 'B');
		};
		/**
			* Generate rainbow colors.
			*
			* @private
			* @return {Array}
			*/


		NyanCat.prototype.generateColors = function () {
			var colors = [];

			for (var i = 0; i < 6 * 7; i++) {
				var pi3 = Math.floor(Math.PI / 3);
				var n = i * (1.0 / 6);
				var r = Math.floor(3 * Math.sin(n) + 3);
				var g = Math.floor(3 * Math.sin(n + 2 * pi3) + 3);
				var b = Math.floor(3 * Math.sin(n + 4 * pi3) + 3);
				colors.push(36 * r + 6 * g + b + 16);
			}

			return colors;
		};
		/**
			* Apply rainbow to the given `str`.
			*
			* @private
			* @param {string} str
			* @return {string}
			*/


		NyanCat.prototype.rainbowify = function (str) {
			if (!base.useColors) {
				return str;
			}

			var color = this.rainbowColors[this.colorIndex % this.rainbowColors.length];
			this.colorIndex += 1;
			return "\x1B[38;5;" + color + 'm' + str + "\x1B[0m";
		};
		/**
			* Stdout helper.
			*
			* @param {string} string A message to write to stdout.
			*/


		function write(string) {
			process$1.stdout.write(string);
		}

		NyanCat.description = '"nyan cat"';
	});

	var fs = {};

	var xunit = createCommonjsModule(function (module, exports) {
		/**
			* @module XUnit
			*/

		/**
			* Module dependencies.
			*/

		var createUnsupportedError = errors.createUnsupportedError;
		var constants = runner$1.constants;
		var EVENT_TEST_PASS = constants.EVENT_TEST_PASS;
		var EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;
		var EVENT_RUN_END = constants.EVENT_RUN_END;
		var EVENT_TEST_PENDING = constants.EVENT_TEST_PENDING;
		var STATE_FAILED = runnable.constants.STATE_FAILED;
		var inherits = utils.inherits;
		var escape = utils.escape;
		/**
			* Save timer references to avoid Sinon interfering (see GH-237).
			*/

		var Date = commonjsGlobal.Date;
		/**
			* Expose `XUnit`.
			*/

		exports = module.exports = XUnit;
		/**
			* Constructs a new `XUnit` reporter instance.
			*
			* @public
			* @class
			* @memberof Mocha.reporters
			* @extends Mocha.reporters.Base
			* @param {Runner} runner - Instance triggers reporter actions.
			* @param {Object} [options] - runner options
			*/

		function XUnit(runner, options) {
			base.call(this, runner, options);
			var stats = this.stats;
			var tests = [];
			var self = this; // the name of the test suite, as it will appear in the resulting XML file

			var suiteName; // the default name of the test suite if none is provided

			var DEFAULT_SUITE_NAME = 'Mocha Tests';

			if (options && options.reporterOptions) {
				if (options.reporterOptions.output) {
					if (!fs.createWriteStream) {
						throw createUnsupportedError('file output not supported in browser');
					}

					fs.mkdirSync(path$1.dirname(options.reporterOptions.output), {
						recursive: true
					});
					self.fileStream = fs.createWriteStream(options.reporterOptions.output);
				} // get the suite name from the reporter options (if provided)


				suiteName = options.reporterOptions.suiteName;
			} // fall back to the default suite name


			suiteName = suiteName || DEFAULT_SUITE_NAME;
			runner.on(EVENT_TEST_PENDING, function (test) {
				tests.push(test);
			});
			runner.on(EVENT_TEST_PASS, function (test) {
				tests.push(test);
			});
			runner.on(EVENT_TEST_FAIL, function (test) {
				tests.push(test);
			});
			runner.once(EVENT_RUN_END, function () {
				self.write(tag('testsuite', {
					name: suiteName,
					tests: stats.tests,
					failures: 0,
					errors: stats.failures,
					skipped: stats.tests - stats.failures - stats.passes,
					timestamp: new Date().toUTCString(),
					time: stats.duration / 1000 || 0
				}, false));
				tests.forEach(function (t) {
					self.test(t);
				});
				self.write('</testsuite>');
			});
		}
		/**
			* Inherit from `Base.prototype`.
			*/


		inherits(XUnit, base);
		/**
			* Override done to close the stream (if it's a file).
			*
			* @param failures
			* @param {Function} fn
			*/

		XUnit.prototype.done = function (failures, fn) {
			if (this.fileStream) {
				this.fileStream.end(function () {
					fn(failures);
				});
			} else {
				fn(failures);
			}
		};
		/**
			* Write out the given line.
			*
			* @param {string} line
			*/


		XUnit.prototype.write = function (line) {
			if (this.fileStream) {
				this.fileStream.write(line + '\n');
			} else if (_typeof(process$1) === 'object' && process$1.stdout) {
				process$1.stdout.write(line + '\n');
			} else {
				base.consoleLog(line);
			}
		};
		/**
			* Output tag for the given `test.`
			*
			* @param {Test} test
			*/


		XUnit.prototype.test = function (test) {
			base.useColors = false;
			var attrs = {
				classname: test.parent.fullTitle(),
				name: test.title,
				time: test.duration / 1000 || 0
			};

			if (test.state === STATE_FAILED) {
				var err = test.err;
				var diff = !base.hideDiff && base.showDiff(err) ? '\n' + base.generateDiff(err.actual, err.expected) : '';
				this.write(tag('testcase', attrs, false, tag('failure', {}, false, escape(err.message) + escape(diff) + '\n' + escape(err.stack))));
			} else if (test.isPending()) {
				this.write(tag('testcase', attrs, false, tag('skipped', {}, true)));
			} else {
				this.write(tag('testcase', attrs, true));
			}
		};
		/**
			* HTML tag helper.
			*
			* @param name
			* @param attrs
			* @param close
			* @param content
			* @return {string}
			*/


		function tag(name, attrs, close, content) {
			var end = close ? '/>' : '>';
			var pairs = [];
			var tag;

			for (var key in attrs) {
				if (Object.prototype.hasOwnProperty.call(attrs, key)) {
					pairs.push(key + '="' + escape(attrs[key]) + '"');
				}
			}

			tag = '<' + name + (pairs.length ? ' ' + pairs.join(' ') : '') + end;

			if (content) {
				tag += content + '</' + name + end;
			}

			return tag;
		}

		XUnit.description = 'XUnit-compatible XML output';
	});

	var markdown = createCommonjsModule(function (module, exports) {
		/**
			* @module Markdown
			*/

		/**
			* Module dependencies.
			*/

		var constants = runner$1.constants;
		var EVENT_RUN_END = constants.EVENT_RUN_END;
		var EVENT_SUITE_BEGIN = constants.EVENT_SUITE_BEGIN;
		var EVENT_SUITE_END = constants.EVENT_SUITE_END;
		var EVENT_TEST_PASS = constants.EVENT_TEST_PASS;
		/**
			* Constants
			*/

		var SUITE_PREFIX = '$';
		/**
			* Expose `Markdown`.
			*/

		exports = module.exports = Markdown;
		/**
			* Constructs a new `Markdown` reporter instance.
			*
			* @public
			* @class
			* @memberof Mocha.reporters
			* @extends Mocha.reporters.Base
			* @param {Runner} runner - Instance triggers reporter actions.
			* @param {Object} [options] - runner options
			*/

		function Markdown(runner, options) {
			base.call(this, runner, options);
			var level = 0;
			var buf = '';

			function title(str) {
				return Array(level).join('#') + ' ' + str;
			}

			function mapTOC(suite, obj) {
				var ret = obj;
				var key = SUITE_PREFIX + suite.title;
				obj = obj[key] = obj[key] || {
					suite: suite
				};
				suite.suites.forEach(function (suite) {
					mapTOC(suite, obj);
				});
				return ret;
			}

			function stringifyTOC(obj, level) {
				++level;
				var buf = '';
				var link;

				for (var key in obj) {
					if (key === 'suite') {
						continue;
					}

					if (key !== SUITE_PREFIX) {
						link = ' - [' + key.substring(1) + ']';
						link += '(#' + utils.slug(obj[key].suite.fullTitle()) + ')\n';
						buf += Array(level).join('  ') + link;
					}

					buf += stringifyTOC(obj[key], level);
				}

				return buf;
			}

			function generateTOC(suite) {
				var obj = mapTOC(suite, {});
				return stringifyTOC(obj, 0);
			}

			generateTOC(runner.suite);
			runner.on(EVENT_SUITE_BEGIN, function (suite) {
				++level;
				var slug = utils.slug(suite.fullTitle());
				buf += '<a name="' + slug + '"></a>' + '\n';
				buf += title(suite.title) + '\n';
			});
			runner.on(EVENT_SUITE_END, function () {
				--level;
			});
			runner.on(EVENT_TEST_PASS, function (test) {
				var code = utils.clean(test.body);
				buf += test.title + '.\n';
				buf += '\n```js\n';
				buf += code + '\n';
				buf += '```\n\n';
			});
			runner.once(EVENT_RUN_END, function () {
				process$1.stdout.write('# TOC\n');
				process$1.stdout.write(generateTOC(runner.suite));
				process$1.stdout.write(buf);
			});
		}

		Markdown.description = 'GitHub Flavored Markdown';
	});

	var progress$1 = createCommonjsModule(function (module, exports) {
		/**
			* @module Progress
			*/

		/**
			* Module dependencies.
			*/

		var constants = runner$1.constants;
		var EVENT_RUN_BEGIN = constants.EVENT_RUN_BEGIN;
		var EVENT_TEST_END = constants.EVENT_TEST_END;
		var EVENT_RUN_END = constants.EVENT_RUN_END;
		var inherits = utils.inherits;
		var color = base.color;
		var cursor = base.cursor;
		/**
			* Expose `Progress`.
			*/

		exports = module.exports = Progress;
		/**
			* General progress bar color.
			*/

		base.colors.progress = 90;
		/**
			* Constructs a new `Progress` reporter instance.
			*
			* @public
			* @class
			* @memberof Mocha.reporters
			* @extends Mocha.reporters.Base
			* @param {Runner} runner - Instance triggers reporter actions.
			* @param {Object} [options] - runner options
			*/

		function Progress(runner, options) {
			base.call(this, runner, options);
			var self = this;
			var width = base.window.width * 0.5 | 0;
			var total = runner.total;
			var complete = 0;
			var lastN = -1; // default chars

			options = options || {};
			var reporterOptions = options.reporterOptions || {};
			options.open = reporterOptions.open || '[';
			options.complete = reporterOptions.complete || '▬';
			options.incomplete = reporterOptions.incomplete || base.symbols.dot;
			options.close = reporterOptions.close || ']';
			options.verbose = reporterOptions.verbose || false; // tests started

			runner.on(EVENT_RUN_BEGIN, function () {
				process$1.stdout.write('\n');
				cursor.hide();
			}); // tests complete

			runner.on(EVENT_TEST_END, function () {
				complete++;
				var percent = complete / total;
				var n = width * percent | 0;
				var i = width - n;

				if (n === lastN && !options.verbose) {
					// Don't re-render the line if it hasn't changed
					return;
				}

				lastN = n;
				cursor.CR();
				process$1.stdout.write("\x1B[J");
				process$1.stdout.write(color('progress', '  ' + options.open));
				process$1.stdout.write(Array(n).join(options.complete));
				process$1.stdout.write(Array(i).join(options.incomplete));
				process$1.stdout.write(color('progress', options.close));

				if (options.verbose) {
					process$1.stdout.write(color('progress', ' ' + complete + ' of ' + total));
				}
			}); // tests are complete, output some stats
			// and the failures if any

			runner.once(EVENT_RUN_END, function () {
				cursor.show();
				process$1.stdout.write('\n');
				self.epilogue();
			});
		}
		/**
			* Inherit from `Base.prototype`.
			*/


		inherits(Progress, base);
		Progress.description = 'a progress bar';
	});

	var landing = createCommonjsModule(function (module, exports) {
		/**
			* @module Landing
			*/

		/**
			* Module dependencies.
			*/

		var inherits = utils.inherits;
		var constants = runner$1.constants;
		var EVENT_RUN_BEGIN = constants.EVENT_RUN_BEGIN;
		var EVENT_RUN_END = constants.EVENT_RUN_END;
		var EVENT_TEST_END = constants.EVENT_TEST_END;
		var STATE_FAILED = runnable.constants.STATE_FAILED;
		var cursor = base.cursor;
		var color = base.color;
		/**
			* Expose `Landing`.
			*/

		exports = module.exports = Landing;
		/**
			* Airplane color.
			*/

		base.colors.plane = 0;
		/**
			* Airplane crash color.
			*/

		base.colors['plane crash'] = 31;
		/**
			* Runway color.
			*/

		base.colors.runway = 90;
		/**
			* Constructs a new `Landing` reporter instance.
			*
			* @public
			* @class
			* @memberof Mocha.reporters
			* @extends Mocha.reporters.Base
			* @param {Runner} runner - Instance triggers reporter actions.
			* @param {Object} [options] - runner options
			*/

		function Landing(runner, options) {
			base.call(this, runner, options);
			var self = this;
			var width = base.window.width * 0.75 | 0;
			var stream = process$1.stdout;
			var plane = color('plane', '✈');
			var crashed = -1;
			var n = 0;
			var total = 0;

			function runway() {
				var buf = Array(width).join('-');
				return '  ' + color('runway', buf);
			}

			runner.on(EVENT_RUN_BEGIN, function () {
				stream.write('\n\n\n  ');
				cursor.hide();
			});
			runner.on(EVENT_TEST_END, function (test) {
				// check if the plane crashed
				var col = crashed === -1 ? width * ++n / ++total | 0 : crashed; // show the crash

				if (test.state === STATE_FAILED) {
					plane = color('plane crash', '✈');
					crashed = col;
				} // render landing strip


				stream.write("\x1B[" + (width + 1) + "D\x1B[2A");
				stream.write(runway());
				stream.write('\n  ');
				stream.write(color('runway', Array(col).join('⋅')));
				stream.write(plane);
				stream.write(color('runway', Array(width - col).join('⋅') + '\n'));
				stream.write(runway());
				stream.write("\x1B[0m");
			});
			runner.once(EVENT_RUN_END, function () {
				cursor.show();
				process$1.stdout.write('\n');
				self.epilogue();
			}); // if cursor is hidden when we ctrl-C, then it will remain hidden unless...

			process$1.once('SIGINT', function () {
				cursor.show();
				nextTick(function () {
					process$1.kill(process$1.pid, 'SIGINT');
				});
			});
		}
		/**
			* Inherit from `Base.prototype`.
			*/


		inherits(Landing, base);
		Landing.description = 'Unicode landing strip';
	});

	var jsonStream = createCommonjsModule(function (module, exports) {
		/**
			* @module JSONStream
			*/

		/**
			* Module dependencies.
			*/

		var constants = runner$1.constants;
		var EVENT_TEST_PASS = constants.EVENT_TEST_PASS;
		var EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;
		var EVENT_RUN_BEGIN = constants.EVENT_RUN_BEGIN;
		var EVENT_RUN_END = constants.EVENT_RUN_END;
		/**
			* Expose `JSONStream`.
			*/

		exports = module.exports = JSONStream;
		/**
			* Constructs a new `JSONStream` reporter instance.
			*
			* @public
			* @class
			* @memberof Mocha.reporters
			* @extends Mocha.reporters.Base
			* @param {Runner} runner - Instance triggers reporter actions.
			* @param {Object} [options] - runner options
			*/

		function JSONStream(runner, options) {
			base.call(this, runner, options);
			var self = this;
			var total = runner.total;
			runner.once(EVENT_RUN_BEGIN, function () {
				writeEvent(['start', {
					total: total
				}]);
			});
			runner.on(EVENT_TEST_PASS, function (test) {
				writeEvent(['pass', clean(test)]);
			});
			runner.on(EVENT_TEST_FAIL, function (test, err) {
				test = clean(test);
				test.err = err.message;
				test.stack = err.stack || null;
				writeEvent(['fail', test]);
			});
			runner.once(EVENT_RUN_END, function () {
				writeEvent(['end', self.stats]);
			});
		}
		/**
			* Mocha event to be written to the output stream.
			* @typedef {Array} JSONStream~MochaEvent
			*/

		/**
			* Writes Mocha event to reporter output stream.
			*
			* @private
			* @param {JSONStream~MochaEvent} event - Mocha event to be output.
			*/


		function writeEvent(event) {
			process$1.stdout.write(JSON.stringify(event) + '\n');
		}
		/**
			* Returns an object literal representation of `test`
			* free of cyclic properties, etc.
			*
			* @private
			* @param {Test} test - Instance used as data source.
			* @return {Object} object containing pared-down test instance data
			*/


		function clean(test) {
			return {
				title: test.title,
				fullTitle: test.fullTitle(),
				file: test.file,
				duration: test.duration,
				currentRetry: test.currentRetry(),
				speed: test.speed
			};
		}

		JSONStream.description = 'newline delimited JSON events';
	});

	var reporters = createCommonjsModule(function (module, exports) {
		// for dynamic (try/catch) requires, which Browserify doesn't handle.

		exports.Base = exports.base = base;
		exports.Dot = exports.dot = dot;
		exports.Doc = exports.doc = doc;
		exports.TAP = exports.tap = tap;
		exports.JSON = exports.json = json;
		exports.HTML = exports.html = html$1;
		exports.List = exports.list = list;
		exports.Min = exports.min = min$7;
		exports.Spec = exports.spec = spec;
		exports.Nyan = exports.nyan = nyan;
		exports.XUnit = exports.xunit = xunit;
		exports.Markdown = exports.markdown = markdown;
		exports.Progress = exports.progress = progress$1;
		exports.Landing = exports.landing = landing;
		exports.JSONStream = exports['json-stream'] = jsonStream;
	});

	var name = "mocha";
	var version$2 = "8.2.1";
	var homepage = "https://mochajs.org/";
	var notifyLogo = "https://ibin.co/4QuRuGjXvl36.png";
	var _package = {
		name: name,
		version: version$2,
		homepage: homepage,
		notifyLogo: notifyLogo
	};

	var _package$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		name: name,
		version: version$2,
		homepage: homepage,
		notifyLogo: notifyLogo,
		'default': _package
	});

	var require$$10 = getCjsExportFromNamespace(_package$1);

	/**
		* Web Notifications module.
		* @module Growl
		*/

	/**
		* Save timer references to avoid Sinon interfering (see GH-237).
		*/


	var Date$2 = commonjsGlobal.Date;
	var setTimeout$2 = commonjsGlobal.setTimeout;
	var EVENT_RUN_END = runner$1.constants.EVENT_RUN_END;
	var isBrowser = utils.isBrowser;
	/**
		* Checks if browser notification support exists.
		*
		* @public
		* @see {@link https://caniuse.com/#feat=notifications|Browser support (notifications)}
		* @see {@link https://caniuse.com/#feat=promises|Browser support (promises)}
		* @see {@link Mocha#growl}
		* @see {@link Mocha#isGrowlCapable}
		* @return {boolean} whether browser notification support exists
		*/

	var isCapable = function isCapable() {
		var hasNotificationSupport = ('Notification' in window);
		var hasPromiseSupport = typeof Promise === 'function';
		return isBrowser() && hasNotificationSupport && hasPromiseSupport;
	};
	/**
		* Implements browser notifications as a pseudo-reporter.
		*
		* @public
		* @see {@link https://developer.mozilla.org/en-US/docs/Web/API/notification|Notification API}
		* @see {@link https://developers.google.com/web/fundamentals/push-notifications/display-a-notification|Displaying a Notification}
		* @see {@link Growl#isPermitted}
		* @see {@link Mocha#_growl}
		* @param {Runner} runner - Runner instance.
		*/


	var notify$2 = function notify(runner) {
		var promise = isPermitted();
		/**
			* Attempt notification.
			*/

		var sendNotification = function sendNotification() {
			// If user hasn't responded yet... "No notification for you!" (Seinfeld)
			Promise.race([promise, Promise.resolve(undefined)]).then(canNotify).then(function () {
				display(runner);
			})["catch"](notPermitted);
		};

		runner.once(EVENT_RUN_END, sendNotification);
	};
	/**
		* Checks if browser notification is permitted by user.
		*
		* @private
		* @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Notification/permission|Notification.permission}
		* @see {@link Mocha#growl}
		* @see {@link Mocha#isGrowlPermitted}
		* @returns {Promise<boolean>} promise determining if browser notification
		*     permissible when fulfilled.
		*/


	function isPermitted() {
		var permitted = {
			granted: function allow() {
				return Promise.resolve(true);
			},
			denied: function deny() {
				return Promise.resolve(false);
			},
			"default": function ask() {
				return Notification.requestPermission().then(function (permission) {
					return permission === 'granted';
				});
			}
		};
		return permitted[Notification.permission]();
	}
	/**
		* @summary
		* Determines if notification should proceed.
		*
		* @description
		* Notification shall <strong>not</strong> proceed unless `value` is true.
		*
		* `value` will equal one of:
		* <ul>
		*   <li><code>true</code> (from `isPermitted`)</li>
		*   <li><code>false</code> (from `isPermitted`)</li>
		*   <li><code>undefined</code> (from `Promise.race`)</li>
		* </ul>
		*
		* @private
		* @param {boolean|undefined} value - Determines if notification permissible.
		* @returns {Promise<undefined>} Notification can proceed
		*/


	function canNotify(value) {
		if (!value) {
			var why = value === false ? 'blocked' : 'unacknowledged';
			var reason = 'not permitted by user (' + why + ')';
			return Promise.reject(new Error(reason));
		}

		return Promise.resolve();
	}
	/**
		* Displays the notification.
		*
		* @private
		* @param {Runner} runner - Runner instance.
		*/


	function display(runner) {
		var stats = runner.stats;
		var symbol = {
			cross: "\u274C",
			tick: "\u2705"
		};
		var logo = require$$10.notifyLogo;

		var _message;

		var message;
		var title;

		if (stats.failures) {
			_message = stats.failures + ' of ' + stats.tests + ' tests failed';
			message = symbol.cross + ' ' + _message;
			title = 'Failed';
		} else {
			_message = stats.passes + ' tests passed in ' + stats.duration + 'ms';
			message = symbol.tick + ' ' + _message;
			title = 'Passed';
		} // Send notification


		var options = {
			badge: logo,
			body: message,
			dir: 'ltr',
			icon: logo,
			lang: 'en-US',
			name: 'mocha',
			requireInteraction: false,
			timestamp: Date$2.now()
		};
		var notification = new Notification(title, options); // Autoclose after brief delay (makes various browsers act same)

		var FORCE_DURATION = 4000;
		setTimeout$2(notification.close.bind(notification), FORCE_DURATION);
	}
	/**
		* As notifications are tangential to our purpose, just log the error.
		*
		* @private
		* @param {Error} err - Why notification didn't happen.
		*/


	function notPermitted(err) {
		console.error('notification error:', err.message);
	}

	var growl = {
		isCapable: isCapable,
		notify: notify$2
	};

	var diff$1 = true;
	var extension = [
		"js",
		"cjs",
		"mjs"
	];
	var reporter = "spec";
	var slow = 75;
	var timeout = 2000;
	var ui = "bdd";
	var mocharc = {
		diff: diff$1,
		extension: extension,
		"package": "./package.json",
		reporter: reporter,
		slow: slow,
		timeout: timeout,
		ui: ui,
		"watch-ignore": [
			"node_modules",
			".git"
		]
	};

	var mocharc$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		diff: diff$1,
		extension: extension,
		reporter: reporter,
		slow: slow,
		timeout: timeout,
		ui: ui,
		'default': mocharc
	});

	/**
		* Provides a factory function for a {@link StatsCollector} object.
		* @module
		*/


	var constants$4 = runner$1.constants;
	var EVENT_TEST_PASS = constants$4.EVENT_TEST_PASS;
	var EVENT_TEST_FAIL = constants$4.EVENT_TEST_FAIL;
	var EVENT_SUITE_BEGIN = constants$4.EVENT_SUITE_BEGIN;
	var EVENT_RUN_BEGIN = constants$4.EVENT_RUN_BEGIN;
	var EVENT_TEST_PENDING = constants$4.EVENT_TEST_PENDING;
	var EVENT_RUN_END$1 = constants$4.EVENT_RUN_END;
	var EVENT_TEST_END = constants$4.EVENT_TEST_END;
	/**
		* Test statistics collector.
		*
		* @public
		* @typedef {Object} StatsCollector
		* @property {number} suites - integer count of suites run.
		* @property {number} tests - integer count of tests run.
		* @property {number} passes - integer count of passing tests.
		* @property {number} pending - integer count of pending tests.
		* @property {number} failures - integer count of failed tests.
		* @property {Date} start - time when testing began.
		* @property {Date} end - time when testing concluded.
		* @property {number} duration - number of msecs that testing took.
		*/

	var Date$3 = commonjsGlobal.Date;
	/**
		* Provides stats such as test duration, number of tests passed / failed etc., by listening for events emitted by `runner`.
		*
		* @private
		* @param {Runner} runner - Runner instance
		* @throws {TypeError} If falsy `runner`
		*/

	function createStatsCollector(runner) {
		/**
			* @type StatsCollector
			*/
		var stats = {
			suites: 0,
			tests: 0,
			passes: 0,
			pending: 0,
			failures: 0
		};

		if (!runner) {
			throw new TypeError('Missing runner argument');
		}

		runner.stats = stats;
		runner.once(EVENT_RUN_BEGIN, function () {
			stats.start = new Date$3();
		});
		runner.on(EVENT_SUITE_BEGIN, function (suite) {
			suite.root || stats.suites++;
		});
		runner.on(EVENT_TEST_PASS, function () {
			stats.passes++;
		});
		runner.on(EVENT_TEST_FAIL, function () {
			stats.failures++;
		});
		runner.on(EVENT_TEST_PENDING, function () {
			stats.pending++;
		});
		runner.on(EVENT_TEST_END, function () {
			stats.tests++;
		});
		runner.once(EVENT_RUN_END$1, function () {
			stats.end = new Date$3();
			stats.duration = stats.end - stats.start;
		});
	}

	var statsCollector = createStatsCollector;

	var createInvalidArgumentTypeError$1 = errors.createInvalidArgumentTypeError;
	var isString$1 = utils.isString;
	var MOCHA_ID_PROP_NAME$1 = utils.constants.MOCHA_ID_PROP_NAME;
	var test$1 = Test;
	/**
		* Initialize a new `Test` with the given `title` and callback `fn`.
		*
		* @public
		* @class
		* @extends Runnable
		* @param {String} title - Test title (required)
		* @param {Function} [fn] - Test callback.  If omitted, the Test is considered "pending"
		*/

	function Test(title, fn) {
		if (!isString$1(title)) {
			throw createInvalidArgumentTypeError$1('Test argument "title" should be a string. Received type "' + _typeof(title) + '"', 'title', 'string');
		}

		this.type = 'test';
		runnable.call(this, title, fn);
		this.reset();
	}
	/**
		* Inherit from `Runnable.prototype`.
		*/


	utils.inherits(Test, runnable);
	/**
		* Resets the state initially or for a next run.
		*/

	Test.prototype.reset = function () {
		runnable.prototype.reset.call(this);
		this.pending = !this.fn;
		delete this.state;
	};
	/**
		* Set or get retried test
		*
		* @private
		*/


	Test.prototype.retriedTest = function (n) {
		if (!arguments.length) {
			return this._retriedTest;
		}

		this._retriedTest = n;
	};
	/**
		* Add test to the list of tests marked `only`.
		*
		* @private
		*/


	Test.prototype.markOnly = function () {
		this.parent.appendOnlyTest(this);
	};

	Test.prototype.clone = function () {
		var test = new Test(this.title, this.fn);
		test.timeout(this.timeout());
		test.slow(this.slow());
		test.retries(this.retries());
		test.currentRetry(this.currentRetry());
		test.retriedTest(this.retriedTest() || this);
		test.globals(this.globals());
		test.parent = this.parent;
		test.file = this.file;
		test.ctx = this.ctx;
		return test;
	};
	/**
		* Returns an minimal object suitable for transmission over IPC.
		* Functions are represented by keys beginning with `$$`.
		* @private
		* @returns {Object}
		*/


	Test.prototype.serialize = function serialize() {
		return _defineProperty({
			$$currentRetry: this._currentRetry,
			$$fullTitle: this.fullTitle(),
			$$isPending: this.pending,
			$$retriedTest: this._retriedTest || null,
			$$slow: this._slow,
			$$titlePath: this.titlePath(),
			body: this.body,
			duration: this.duration,
			err: this.err,
			parent: _defineProperty({
				$$fullTitle: this.parent.fullTitle()
			}, MOCHA_ID_PROP_NAME$1, this.parent.id),
			speed: this.speed,
			state: this.state,
			title: this.title,
			type: this.type,
			file: this.file
		}, MOCHA_ID_PROP_NAME$1, this.id);
	};

	/**
		@module interfaces/common
	*/


	var createMissingArgumentError$1 = errors.createMissingArgumentError;
	var createUnsupportedError$2 = errors.createUnsupportedError;
	var createForbiddenExclusivityError$1 = errors.createForbiddenExclusivityError;
	/**
		* Functions common to more than one interface.
		*
		* @private
		* @param {Suite[]} suites
		* @param {Context} context
		* @param {Mocha} mocha
		* @return {Object} An object containing common functions.
		*/

	var common$1 = function common(suites, context, mocha) {
		/**
			* Check if the suite should be tested.
			*
			* @private
			* @param {Suite} suite - suite to check
			* @returns {boolean}
			*/
		function shouldBeTested(suite) {
			return !mocha.options.grep || mocha.options.grep && mocha.options.grep.test(suite.fullTitle()) && !mocha.options.invert;
		}

		return {
			/**
				* This is only present if flag --delay is passed into Mocha. It triggers
				* root suite execution.
				*
				* @param {Suite} suite The root suite.
				* @return {Function} A function which runs the root suite
				*/
			runWithSuite: function runWithSuite(suite) {
				return function run() {
					suite.run();
				};
			},

			/**
				* Execute before running tests.
				*
				* @param {string} name
				* @param {Function} fn
				*/
			before: function before(name, fn) {
				suites[0].beforeAll(name, fn);
			},

			/**
				* Execute after running tests.
				*
				* @param {string} name
				* @param {Function} fn
				*/
			after: function after(name, fn) {
				suites[0].afterAll(name, fn);
			},

			/**
				* Execute before each test case.
				*
				* @param {string} name
				* @param {Function} fn
				*/
			beforeEach: function beforeEach(name, fn) {
				suites[0].beforeEach(name, fn);
			},

			/**
				* Execute after each test case.
				*
				* @param {string} name
				* @param {Function} fn
				*/
			afterEach: function afterEach(name, fn) {
				suites[0].afterEach(name, fn);
			},
			suite: {
				/**
					* Create an exclusive Suite; convenience function
					* See docstring for create() below.
					*
					* @param {Object} opts
					* @returns {Suite}
					*/
				only: function only(opts) {
					if (mocha.options.forbidOnly) {
						throw createForbiddenExclusivityError$1(mocha);
					}

					opts.isOnly = true;
					return this.create(opts);
				},

				/**
					* Create a Suite, but skip it; convenience function
					* See docstring for create() below.
					*
					* @param {Object} opts
					* @returns {Suite}
					*/
				skip: function skip(opts) {
					opts.pending = true;
					return this.create(opts);
				},

				/**
					* Creates a suite.
					*
					* @param {Object} opts Options
					* @param {string} opts.title Title of Suite
					* @param {Function} [opts.fn] Suite Function (not always applicable)
					* @param {boolean} [opts.pending] Is Suite pending?
					* @param {string} [opts.file] Filepath where this Suite resides
					* @param {boolean} [opts.isOnly] Is Suite exclusive?
					* @returns {Suite}
					*/
				create: function create(opts) {
					var suite$1 = suite.create(suites[0], opts.title);
					suite$1.pending = Boolean(opts.pending);
					suite$1.file = opts.file;
					suites.unshift(suite$1);

					if (opts.isOnly) {
						suite$1.markOnly();
					}

					if (suite$1.pending && mocha.options.forbidPending && shouldBeTested(suite$1)) {
						throw createUnsupportedError$2('Pending test forbidden');
					}

					if (typeof opts.fn === 'function') {
						opts.fn.call(suite$1);
						suites.shift();
					} else if (typeof opts.fn === 'undefined' && !suite$1.pending) {
						throw createMissingArgumentError$1('Suite "' + suite$1.fullTitle() + '" was defined but no callback was supplied. ' + 'Supply a callback or explicitly skip the suite.', 'callback', 'function');
					} else if (!opts.fn && suite$1.pending) {
						suites.shift();
					}

					return suite$1;
				}
			},
			test: {
				/**
					* Exclusive test-case.
					*
					* @param {Object} mocha
					* @param {Function} test
					* @returns {*}
					*/
				only: function only(mocha, test) {
					if (mocha.options.forbidOnly) {
						throw createForbiddenExclusivityError$1(mocha);
					}

					test.markOnly();
					return test;
				},

				/**
					* Pending test case.
					*
					* @param {string} title
					*/
				skip: function skip(title) {
					context.test(title);
				},

				/**
					* Number of retry attempts
					*
					* @param {number} n
					*/
				retries: function retries(n) {
					context.retries(n);
				}
			}
		};
	};

	var EVENT_FILE_PRE_REQUIRE = suite.constants.EVENT_FILE_PRE_REQUIRE;
	/**
		* BDD-style interface:
		*
		*      describe('Array', function() {
		*        describe('#indexOf()', function() {
		*          it('should return -1 when not present', function() {
		*            // ...
		*          });
		*
		*          it('should return the index when present', function() {
		*            // ...
		*          });
		*        });
		*      });
		*
		* @param {Suite} suite Root suite.
		*/

	var bdd = function bddInterface(suite) {
		var suites = [suite];
		suite.on(EVENT_FILE_PRE_REQUIRE, function (context, file, mocha) {
			var common = common$1(suites, context, mocha);
			context.before = common.before;
			context.after = common.after;
			context.beforeEach = common.beforeEach;
			context.afterEach = common.afterEach;
			context.run = mocha.options.delay && common.runWithSuite(suite);
			/**
				* Describe a "suite" with the given `title`
				* and callback `fn` containing nested suites
				* and/or tests.
				*/

			context.describe = context.context = function (title, fn) {
				return common.suite.create({
					title: title,
					file: file,
					fn: fn
				});
			};
			/**
				* Pending describe.
				*/


			context.xdescribe = context.xcontext = context.describe.skip = function (title, fn) {
				return common.suite.skip({
					title: title,
					file: file,
					fn: fn
				});
			};
			/**
				* Exclusive suite.
				*/


			context.describe.only = function (title, fn) {
				return common.suite.only({
					title: title,
					file: file,
					fn: fn
				});
			};
			/**
				* Describe a specification or test-case
				* with the given `title` and callback `fn`
				* acting as a thunk.
				*/


			context.it = context.specify = function (title, fn) {
				var suite = suites[0];

				if (suite.isPending()) {
					fn = null;
				}

				var test = new test$1(title, fn);
				test.file = file;
				suite.addTest(test);
				return test;
			};
			/**
				* Exclusive test-case.
				*/


			context.it.only = function (title, fn) {
				return common.test.only(mocha, context.it(title, fn));
			};
			/**
				* Pending test case.
				*/


			context.xit = context.xspecify = context.it.skip = function (title) {
				return context.it(title);
			};
			/**
				* Number of attempts to retry.
				*/


			context.it.retries = function (n) {
				context.retries(n);
			};
		});
	};

	var description = 'BDD or RSpec style [default]';
	bdd.description = description;

	var EVENT_FILE_PRE_REQUIRE$1 = suite.constants.EVENT_FILE_PRE_REQUIRE;
	/**
		* TDD-style interface:
		*
		*      suite('Array', function() {
		*        suite('#indexOf()', function() {
		*          suiteSetup(function() {
		*
		*          });
		*
		*          test('should return -1 when not present', function() {
		*
		*          });
		*
		*          test('should return the index when present', function() {
		*
		*          });
		*
		*          suiteTeardown(function() {
		*
		*          });
		*        });
		*      });
		*
		* @param {Suite} suite Root suite.
		*/

	var tdd = function tdd(suite) {
		var suites = [suite];
		suite.on(EVENT_FILE_PRE_REQUIRE$1, function (context, file, mocha) {
			var common = common$1(suites, context, mocha);
			context.setup = common.beforeEach;
			context.teardown = common.afterEach;
			context.suiteSetup = common.before;
			context.suiteTeardown = common.after;
			context.run = mocha.options.delay && common.runWithSuite(suite);
			/**
				* Describe a "suite" with the given `title` and callback `fn` containing
				* nested suites and/or tests.
				*/

			context.suite = function (title, fn) {
				return common.suite.create({
					title: title,
					file: file,
					fn: fn
				});
			};
			/**
				* Pending suite.
				*/


			context.suite.skip = function (title, fn) {
				return common.suite.skip({
					title: title,
					file: file,
					fn: fn
				});
			};
			/**
				* Exclusive test-case.
				*/


			context.suite.only = function (title, fn) {
				return common.suite.only({
					title: title,
					file: file,
					fn: fn
				});
			};
			/**
				* Describe a specification or test-case with the given `title` and
				* callback `fn` acting as a thunk.
				*/


			context.test = function (title, fn) {
				var suite = suites[0];

				if (suite.isPending()) {
					fn = null;
				}

				var test = new test$1(title, fn);
				test.file = file;
				suite.addTest(test);
				return test;
			};
			/**
				* Exclusive test-case.
				*/


			context.test.only = function (title, fn) {
				return common.test.only(mocha, context.test(title, fn));
			};

			context.test.skip = common.test.skip;
			context.test.retries = common.test.retries;
		});
	};

	var description$1 = 'traditional "suite"/"test" instead of BDD\'s "describe"/"it"';
	tdd.description = description$1;

	var EVENT_FILE_PRE_REQUIRE$2 = suite.constants.EVENT_FILE_PRE_REQUIRE;
	/**
		* QUnit-style interface:
		*
		*     suite('Array');
		*
		*     test('#length', function() {
		*       var arr = [1,2,3];
		*       ok(arr.length == 3);
		*     });
		*
		*     test('#indexOf()', function() {
		*       var arr = [1,2,3];
		*       ok(arr.indexOf(1) == 0);
		*       ok(arr.indexOf(2) == 1);
		*       ok(arr.indexOf(3) == 2);
		*     });
		*
		*     suite('String');
		*
		*     test('#length', function() {
		*       ok('foo'.length == 3);
		*     });
		*
		* @param {Suite} suite Root suite.
		*/

	var qunit = function qUnitInterface(suite) {
		var suites = [suite];
		suite.on(EVENT_FILE_PRE_REQUIRE$2, function (context, file, mocha) {
			var common = common$1(suites, context, mocha);
			context.before = common.before;
			context.after = common.after;
			context.beforeEach = common.beforeEach;
			context.afterEach = common.afterEach;
			context.run = mocha.options.delay && common.runWithSuite(suite);
			/**
				* Describe a "suite" with the given `title`.
				*/

			context.suite = function (title) {
				if (suites.length > 1) {
					suites.shift();
				}

				return common.suite.create({
					title: title,
					file: file,
					fn: false
				});
			};
			/**
				* Exclusive Suite.
				*/


			context.suite.only = function (title) {
				if (suites.length > 1) {
					suites.shift();
				}

				return common.suite.only({
					title: title,
					file: file,
					fn: false
				});
			};
			/**
				* Describe a specification or test-case
				* with the given `title` and callback `fn`
				* acting as a thunk.
				*/


			context.test = function (title, fn) {
				var test = new test$1(title, fn);
				test.file = file;
				suites[0].addTest(test);
				return test;
			};
			/**
				* Exclusive test-case.
				*/


			context.test.only = function (title, fn) {
				return common.test.only(mocha, context.test(title, fn));
			};

			context.test.skip = common.test.skip;
			context.test.retries = common.test.retries;
		});
	};

	var description$2 = 'QUnit style';
	qunit.description = description$2;

	/**
		* Exports-style (as Node.js module) interface:
		*
		*     exports.Array = {
		*       '#indexOf()': {
		*         'should return -1 when the value is not present': function() {
		*
		*         },
		*
		*         'should return the correct index when the value is present': function() {
		*
		*         }
		*       }
		*     };
		*
		* @param {Suite} suite Root suite.
		*/


	var exports$1 = function exports(suite$1) {
		var suites = [suite$1];
		suite$1.on(suite.constants.EVENT_FILE_REQUIRE, visit);

		function visit(obj, file) {
			var suite$1;

			for (var key in obj) {
				if (typeof obj[key] === 'function') {
					var fn = obj[key];

					switch (key) {
						case 'before':
							suites[0].beforeAll(fn);
							break;

						case 'after':
							suites[0].afterAll(fn);
							break;

						case 'beforeEach':
							suites[0].beforeEach(fn);
							break;

						case 'afterEach':
							suites[0].afterEach(fn);
							break;

						default:
							var test = new test$1(key, fn);
							test.file = file;
							suites[0].addTest(test);
					}
				} else {
					suite$1 = suite.create(suites[0], key);
					suites.unshift(suite$1);
					visit(obj[key], file);
					suites.shift();
				}
			}
		}
	};

	var description$3 = 'Node.js module ("exports") style';
	exports$1.description = description$3;

	var bdd$1 = bdd;
	var tdd$1 = tdd;
	var qunit$1 = qunit;
	var exports$2 = exports$1;
	var interfaces = {
		bdd: bdd$1,
		tdd: tdd$1,
		qunit: qunit$1,
		exports: exports$2
	};

	/**
		* @module Context
		*/

	/**
		* Expose `Context`.
		*/

	var context = Context;
	/**
		* Initialize a new `Context`.
		*
		* @private
		*/

	function Context() { }
	/**
		* Set or get the context `Runnable` to `runnable`.
		*
		* @private
		* @param {Runnable} runnable
		* @return {Context} context
		*/


	Context.prototype.runnable = function (runnable) {
		if (!arguments.length) {
			return this._runnable;
		}

		this.test = this._runnable = runnable;
		return this;
	};
	/**
		* Set or get test timeout `ms`.
		*
		* @private
		* @param {number} ms
		* @return {Context} self
		*/


	Context.prototype.timeout = function (ms) {
		if (!arguments.length) {
			return this.runnable().timeout();
		}

		this.runnable().timeout(ms);
		return this;
	};
	/**
		* Set or get test slowness threshold `ms`.
		*
		* @private
		* @param {number} ms
		* @return {Context} self
		*/


	Context.prototype.slow = function (ms) {
		if (!arguments.length) {
			return this.runnable().slow();
		}

		this.runnable().slow(ms);
		return this;
	};
	/**
		* Mark a test as skipped.
		*
		* @private
		* @throws Pending
		*/


	Context.prototype.skip = function () {
		this.runnable().skip();
	};
	/**
		* Set or get a number of allowed retries on failed tests
		*
		* @private
		* @param {number} n
		* @return {Context} self
		*/


	Context.prototype.retries = function (n) {
		if (!arguments.length) {
			return this.runnable().retries();
		}

		this.runnable().retries(n);
		return this;
	};

	var mocharc$2 = getCjsExportFromNamespace(mocharc$1);

	var mocha = createCommonjsModule(function (module, exports) {
		/*!
			* mocha
			* Copyright(c) 2011 TJ Holowaychuk <tj@vision-media.ca>
			* MIT Licensed
			*/

		var esmUtils = utils.supportsEsModules(true) ? require$$11 : undefined;
		var warn = errors.warn,
			createInvalidReporterError = errors.createInvalidReporterError,
			createInvalidInterfaceError = errors.createInvalidInterfaceError,
			createMochaInstanceAlreadyDisposedError = errors.createMochaInstanceAlreadyDisposedError,
			createMochaInstanceAlreadyRunningError = errors.createMochaInstanceAlreadyRunningError,
			createUnsupportedError = errors.createUnsupportedError;
		var _Suite$constants = suite.constants,
			EVENT_FILE_PRE_REQUIRE = _Suite$constants.EVENT_FILE_PRE_REQUIRE,
			EVENT_FILE_POST_REQUIRE = _Suite$constants.EVENT_FILE_POST_REQUIRE,
			EVENT_FILE_REQUIRE = _Suite$constants.EVENT_FILE_REQUIRE;
		var sQuote = utils.sQuote;
		var debug = browser$2('mocha:mocha');
		exports = module.exports = Mocha;
		/**
			* A Mocha instance is a finite state machine.
			* These are the states it can be in.
			* @private
			*/

		var mochaStates = utils.defineConstants({
			/**
				* Initial state of the mocha instance
				* @private
				*/
			INIT: 'init',

			/**
				* Mocha instance is running tests
				* @private
				*/
			RUNNING: 'running',

			/**
				* Mocha instance is done running tests and references to test functions and hooks are cleaned.
				* You can reset this state by unloading the test files.
				* @private
				*/
			REFERENCES_CLEANED: 'referencesCleaned',

			/**
				* Mocha instance is disposed and can no longer be used.
				* @private
				*/
			DISPOSED: 'disposed'
		});
		/**
			* To require local UIs and reporters when running in node.
			*/

		if (!utils.isBrowser() && typeof module.paths !== 'undefined') {
			var cwd = utils.cwd();
			module.paths.push(cwd, path$1.join(cwd, 'node_modules'));
		}
		/**
			* Expose internals.
			* @private
			*/


		exports.utils = utils;
		exports.interfaces = interfaces;
		/**
			* @public
			* @memberof Mocha
			*/

		exports.reporters = reporters;
		exports.Runnable = runnable;
		exports.Context = context;
		/**
			*
			* @memberof Mocha
			*/

		exports.Runner = runner$1;
		exports.Suite = suite;
		exports.Hook = hook;
		exports.Test = test$1;
		/**
			* Constructs a new Mocha instance with `options`.
			*
			* @public
			* @class Mocha
			* @param {Object} [options] - Settings object.
			* @param {boolean} [options.allowUncaught] - Propagate uncaught errors?
			* @param {boolean} [options.asyncOnly] - Force `done` callback or promise?
			* @param {boolean} [options.bail] - Bail after first test failure?
			* @param {boolean} [options.checkLeaks] - Check for global variable leaks?
			* @param {boolean} [options.color] - Color TTY output from reporter?
			* @param {boolean} [options.delay] - Delay root suite execution?
			* @param {boolean} [options.diff] - Show diff on failure?
			* @param {string} [options.fgrep] - Test filter given string.
			* @param {boolean} [options.forbidOnly] - Tests marked `only` fail the suite?
			* @param {boolean} [options.forbidPending] - Pending tests fail the suite?
			* @param {boolean} [options.fullTrace] - Full stacktrace upon failure?
			* @param {string[]} [options.global] - Variables expected in global scope.
			* @param {RegExp|string} [options.grep] - Test filter given regular expression.
			* @param {boolean} [options.growl] - Enable desktop notifications?
			* @param {boolean} [options.inlineDiffs] - Display inline diffs?
			* @param {boolean} [options.invert] - Invert test filter matches?
			* @param {boolean} [options.noHighlighting] - Disable syntax highlighting?
			* @param {string|constructor} [options.reporter] - Reporter name or constructor.
			* @param {Object} [options.reporterOption] - Reporter settings object.
			* @param {number} [options.retries] - Number of times to retry failed tests.
			* @param {number} [options.slow] - Slow threshold value.
			* @param {number|string} [options.timeout] - Timeout threshold value.
			* @param {string} [options.ui] - Interface name.
			* @param {boolean} [options.parallel] - Run jobs in parallel
			* @param {number} [options.jobs] - Max number of worker processes for parallel runs
			* @param {MochaRootHookObject} [options.rootHooks] - Hooks to bootstrap the root
			* suite with
			* @param {boolean} [options.isWorker] - Should be `true` if `Mocha` process is running in a worker process.
			*/

		function Mocha() {
			var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
			options = _objectSpread2(_objectSpread2({}, mocharc$2), options);
			this.files = [];
			this.options = options; // root suite

			this.suite = new exports.Suite('', new exports.Context(), true);
			this._cleanReferencesAfterRun = true;
			this._state = mochaStates.INIT;
			this.grep(options.grep).fgrep(options.fgrep).ui(options.ui).reporter(options.reporter, options.reporterOption || options.reporterOptions // reporterOptions was previously the only way to specify options to reporter
			).slow(options.slow).global(options.global); // this guard exists because Suite#timeout does not consider `undefined` to be valid input

			if (typeof options.timeout !== 'undefined') {
				this.timeout(options.timeout === false ? 0 : options.timeout);
			}

			if ('retries' in options) {
				this.retries(options.retries);
			}

			['allowUncaught', 'asyncOnly', 'bail', 'checkLeaks', 'color', 'delay', 'diff', 'forbidOnly', 'forbidPending', 'fullTrace', 'growl', 'inlineDiffs', 'invert'].forEach(function (opt) {
				if (options[opt]) {
					this[opt]();
				}
			}, this);

			if (options.rootHooks) {
				this.rootHooks(options.rootHooks);
			}
			/**
				* The class which we'll instantiate in {@link Mocha#run}.  Defaults to
				* {@link Runner} in serial mode; changes in parallel mode.
				* @memberof Mocha
				* @private
				*/


			this._runnerClass = exports.Runner;
			/**
				* Whether or not to call {@link Mocha#loadFiles} implicitly when calling
				* {@link Mocha#run}.  If this is `true`, then it's up to the consumer to call
				* {@link Mocha#loadFiles} _or_ {@link Mocha#loadFilesAsync}.
				* @private
				* @memberof Mocha
				*/

			this._lazyLoadFiles = false;
			/**
				* It's useful for a Mocha instance to know if it's running in a worker process.
				* We could derive this via other means, but it's helpful to have a flag to refer to.
				* @memberof Mocha
				* @private
				*/

			this.isWorker = Boolean(options.isWorker);
			this.globalSetup(options.globalSetup).globalTeardown(options.globalTeardown).enableGlobalSetup(options.enableGlobalSetup).enableGlobalTeardown(options.enableGlobalTeardown);

			if (options.parallel && (typeof options.jobs === 'undefined' || options.jobs > 1)) {
				debug('attempting to enable parallel mode');
				this.parallelMode(true);
			}
		}
		/**
			* Enables or disables bailing on the first failure.
			*
			* @public
			* @see [CLI option](../#-bail-b)
			* @param {boolean} [bail=true] - Whether to bail on first error.
			* @returns {Mocha} this
			* @chainable
			*/


		Mocha.prototype.bail = function (bail) {
			this.suite.bail(bail !== false);
			return this;
		};
		/**
			* @summary
			* Adds `file` to be loaded for execution.
			*
			* @description
			* Useful for generic setup code that must be included within test suite.
			*
			* @public
			* @see [CLI option](../#-file-filedirectoryglob)
			* @param {string} file - Pathname of file to be loaded.
			* @returns {Mocha} this
			* @chainable
			*/


		Mocha.prototype.addFile = function (file) {
			this.files.push(file);
			return this;
		};
		/**
			* Sets reporter to `reporter`, defaults to "spec".
			*
			* @public
			* @see [CLI option](../#-reporter-name-r-name)
			* @see [Reporters](../#reporters)
			* @param {String|Function} reporterName - Reporter name or constructor.
			* @param {Object} [reporterOptions] - Options used to configure the reporter.
			* @returns {Mocha} this
			* @chainable
			* @throws {Error} if requested reporter cannot be loaded
			* @example
			*
			* // Use XUnit reporter and direct its output to file
			* mocha.reporter('xunit', { output: '/path/to/testspec.xunit.xml' });
			*/


		Mocha.prototype.reporter = function (reporterName, reporterOptions) {
			if (typeof reporterName === 'function') {
				this._reporter = reporterName;
			} else {
				reporterName = reporterName || 'spec';
				var reporter; // Try to load a built-in reporter.

				if (reporters[reporterName]) {
					reporter = reporters[reporterName];
				} // Try to load reporters from process.cwd() and node_modules


				if (!reporter) {
					try {
						reporter = commonjsRequire(reporterName);
					} catch (err) {
						if (err.code === 'MODULE_NOT_FOUND') {
							// Try to load reporters from a path (absolute or relative)
							try {
								reporter = commonjsRequire(path$1.resolve(utils.cwd(), reporterName));
							} catch (_err) {
								_err.code === 'MODULE_NOT_FOUND' ? warn(sQuote(reporterName) + ' reporter not found') : warn(sQuote(reporterName) + ' reporter blew up with error:\n' + err.stack);
							}
						} else {
							warn(sQuote(reporterName) + ' reporter blew up with error:\n' + err.stack);
						}
					}
				}

				if (!reporter) {
					throw createInvalidReporterError('invalid reporter ' + sQuote(reporterName), reporterName);
				}

				this._reporter = reporter;
			}

			this.options.reporterOption = reporterOptions; // alias option name is used in public reporters xunit/tap/progress

			this.options.reporterOptions = reporterOptions;
			return this;
		};
		/**
			* Sets test UI `name`, defaults to "bdd".
			*
			* @public
			* @see [CLI option](../#-ui-name-u-name)
			* @see [Interface DSLs](../#interfaces)
			* @param {string|Function} [ui=bdd] - Interface name or class.
			* @returns {Mocha} this
			* @chainable
			* @throws {Error} if requested interface cannot be loaded
			*/


		Mocha.prototype.ui = function (ui) {
			var bindInterface;

			if (typeof ui === 'function') {
				bindInterface = ui;
			} else {
				ui = ui || 'bdd';
				bindInterface = exports.interfaces[ui];

				if (!bindInterface) {
					try {
						bindInterface = commonjsRequire(ui);
					} catch (err) {
						throw createInvalidInterfaceError('invalid interface ' + sQuote(ui), ui);
					}
				}
			}

			bindInterface(this.suite);
			this.suite.on(EVENT_FILE_PRE_REQUIRE, function (context) {
				exports.afterEach = context.afterEach || context.teardown;
				exports.after = context.after || context.suiteTeardown;
				exports.beforeEach = context.beforeEach || context.setup;
				exports.before = context.before || context.suiteSetup;
				exports.describe = context.describe || context.suite;
				exports.it = context.it || context.test;
				exports.xit = context.xit || context.test && context.test.skip;
				exports.setup = context.setup || context.beforeEach;
				exports.suiteSetup = context.suiteSetup || context.before;
				exports.suiteTeardown = context.suiteTeardown || context.after;
				exports.suite = context.suite || context.describe;
				exports.teardown = context.teardown || context.afterEach;
				exports.test = context.test || context.it;
				exports.run = context.run;
			});
			return this;
		};
		/**
			* Loads `files` prior to execution. Does not support ES Modules.
			*
			* @description
			* The implementation relies on Node's `require` to execute
			* the test interface functions and will be subject to its cache.
			* Supports only CommonJS modules. To load ES modules, use Mocha#loadFilesAsync.
			*
			* @private
			* @see {@link Mocha#addFile}
			* @see {@link Mocha#run}
			* @see {@link Mocha#unloadFiles}
			* @see {@link Mocha#loadFilesAsync}
			* @param {Function} [fn] - Callback invoked upon completion.
			*/


		Mocha.prototype.loadFiles = function (fn) {
			var self = this;
			var suite = this.suite;
			this.files.forEach(function (file) {
				file = path$1.resolve(file);
				suite.emit(EVENT_FILE_PRE_REQUIRE, commonjsGlobal, file, self);
				suite.emit(EVENT_FILE_REQUIRE, commonjsRequire(), file, self);
				suite.emit(EVENT_FILE_POST_REQUIRE, commonjsGlobal, file, self);
			});
			fn && fn();
		};
		/**
			* Loads `files` prior to execution. Supports Node ES Modules.
			*
			* @description
			* The implementation relies on Node's `require` and `import` to execute
			* the test interface functions and will be subject to its cache.
			* Supports both CJS and ESM modules.
			*
			* @public
			* @see {@link Mocha#addFile}
			* @see {@link Mocha#run}
			* @see {@link Mocha#unloadFiles}
			* @returns {Promise}
			* @example
			*
			* // loads ESM (and CJS) test files asynchronously, then runs root suite
			* mocha.loadFilesAsync()
			*   .then(() => mocha.run(failures => process.exitCode = failures ? 1 : 0))
			*   .catch(() => process.exitCode = 1);
			*/


		Mocha.prototype.loadFilesAsync = function () {
			var self = this;
			var suite = this.suite;
			this.lazyLoadFiles(true);

			if (!esmUtils) {
				return new Promise(function (resolve) {
					self.loadFiles(resolve);
				});
			}

			return esmUtils.loadFilesAsync(this.files, function (file) {
				suite.emit(EVENT_FILE_PRE_REQUIRE, commonjsGlobal, file, self);
			}, function (file, resultModule) {
				suite.emit(EVENT_FILE_REQUIRE, resultModule, file, self);
				suite.emit(EVENT_FILE_POST_REQUIRE, commonjsGlobal, file, self);
			});
		};
		/**
			* Removes a previously loaded file from Node's `require` cache.
			*
			* @private
			* @static
			* @see {@link Mocha#unloadFiles}
			* @param {string} file - Pathname of file to be unloaded.
			*/


		Mocha.unloadFile = function (file) {
			if (utils.isBrowser()) {
				throw createUnsupportedError('unloadFile() is only suported in a Node.js environment');
			}

			return require$$11.unloadFile(file);
		};
		/**
			* Unloads `files` from Node's `require` cache.
			*
			* @description
			* This allows required files to be "freshly" reloaded, providing the ability
			* to reuse a Mocha instance programmatically.
			* Note: does not clear ESM module files from the cache
			*
			* <strong>Intended for consumers &mdash; not used internally</strong>
			*
			* @public
			* @see {@link Mocha#run}
			* @returns {Mocha} this
			* @chainable
			*/


		Mocha.prototype.unloadFiles = function () {
			if (this._state === mochaStates.DISPOSED) {
				throw createMochaInstanceAlreadyDisposedError('Mocha instance is already disposed, it cannot be used again.', this._cleanReferencesAfterRun, this);
			}

			this.files.forEach(function (file) {
				Mocha.unloadFile(file);
			});
			this._state = mochaStates.INIT;
			return this;
		};
		/**
			* Sets `grep` filter after escaping RegExp special characters.
			*
			* @public
			* @see {@link Mocha#grep}
			* @param {string} str - Value to be converted to a regexp.
			* @returns {Mocha} this
			* @chainable
			* @example
			*
			* // Select tests whose full title begins with `"foo"` followed by a period
			* mocha.fgrep('foo.');
			*/


		Mocha.prototype.fgrep = function (str) {
			if (!str) {
				return this;
			}

			return this.grep(new RegExp(escapeStringRegexp(str)));
		};
		/**
			* @summary
			* Sets `grep` filter used to select specific tests for execution.
			*
			* @description
			* If `re` is a regexp-like string, it will be converted to regexp.
			* The regexp is tested against the full title of each test (i.e., the
			* name of the test preceded by titles of each its ancestral suites).
			* As such, using an <em>exact-match</em> fixed pattern against the
			* test name itself will not yield any matches.
			* <br>
			* <strong>Previous filter value will be overwritten on each call!</strong>
			*
			* @public
			* @see [CLI option](../#-grep-regexp-g-regexp)
			* @see {@link Mocha#fgrep}
			* @see {@link Mocha#invert}
			* @param {RegExp|String} re - Regular expression used to select tests.
			* @return {Mocha} this
			* @chainable
			* @example
			*
			* // Select tests whose full title contains `"match"`, ignoring case
			* mocha.grep(/match/i);
			* @example
			*
			* // Same as above but with regexp-like string argument
			* mocha.grep('/match/i');
			* @example
			*
			* // ## Anti-example
			* // Given embedded test `it('only-this-test')`...
			* mocha.grep('/^only-this-test$/');    // NO! Use `.only()` to do this!
			*/


		Mocha.prototype.grep = function (re) {
			if (utils.isString(re)) {
				// extract args if it's regex-like, i.e: [string, pattern, flag]
				var arg = re.match(/^\/(.*)\/(g|i|)$|.*/);
				this.options.grep = new RegExp(arg[1] || arg[0], arg[2]);
			} else {
				this.options.grep = re;
			}

			return this;
		};
		/**
			* Inverts `grep` matches.
			*
			* @public
			* @see {@link Mocha#grep}
			* @return {Mocha} this
			* @chainable
			* @example
			*
			* // Select tests whose full title does *not* contain `"match"`, ignoring case
			* mocha.grep(/match/i).invert();
			*/


		Mocha.prototype.invert = function () {
			this.options.invert = true;
			return this;
		};
		/**
			* Enables or disables checking for global variables leaked while running tests.
			*
			* @public
			* @see [CLI option](../#-check-leaks)
			* @param {boolean} [checkLeaks=true] - Whether to check for global variable leaks.
			* @return {Mocha} this
			* @chainable
			*/


		Mocha.prototype.checkLeaks = function (checkLeaks) {
			this.options.checkLeaks = checkLeaks !== false;
			return this;
		};
		/**
			* Enables or disables whether or not to dispose after each test run.
			* Disable this to ensure you can run the test suite multiple times.
			* If disabled, be sure to dispose mocha when you're done to prevent memory leaks.
			* @public
			* @see {@link Mocha#dispose}
			* @param {boolean} cleanReferencesAfterRun
			* @return {Mocha} this
			* @chainable
			*/


		Mocha.prototype.cleanReferencesAfterRun = function (cleanReferencesAfterRun) {
			this._cleanReferencesAfterRun = cleanReferencesAfterRun !== false;
			return this;
		};
		/**
			* Manually dispose this mocha instance. Mark this instance as `disposed` and unable to run more tests.
			* It also removes function references to tests functions and hooks, so variables trapped in closures can be cleaned by the garbage collector.
			* @public
			*/


		Mocha.prototype.dispose = function () {
			if (this._state === mochaStates.RUNNING) {
				throw createMochaInstanceAlreadyRunningError('Cannot dispose while the mocha instance is still running tests.');
			}

			this.unloadFiles();
			this._previousRunner && this._previousRunner.dispose();
			this.suite.dispose();
			this._state = mochaStates.DISPOSED;
		};
		/**
			* Displays full stack trace upon test failure.
			*
			* @public
			* @see [CLI option](../#-full-trace)
			* @param {boolean} [fullTrace=true] - Whether to print full stacktrace upon failure.
			* @return {Mocha} this
			* @chainable
			*/


		Mocha.prototype.fullTrace = function (fullTrace) {
			this.options.fullTrace = fullTrace !== false;
			return this;
		};
		/**
			* Enables desktop notification support if prerequisite software installed.
			*
			* @public
			* @see [CLI option](../#-growl-g)
			* @return {Mocha} this
			* @chainable
			*/


		Mocha.prototype.growl = function () {
			this.options.growl = this.isGrowlCapable();

			if (!this.options.growl) {
				var detail = utils.isBrowser() ? 'notification support not available in this browser...' : 'notification support prerequisites not installed...';
				console.error(detail + ' cannot enable!');
			}

			return this;
		};
		/**
			* @summary
			* Determines if Growl support seems likely.
			*
			* @description
			* <strong>Not available when run in browser.</strong>
			*
			* @private
			* @see {@link Growl#isCapable}
			* @see {@link Mocha#growl}
			* @return {boolean} whether Growl support can be expected
			*/


		Mocha.prototype.isGrowlCapable = growl.isCapable;
		/**
			* Implements desktop notifications using a pseudo-reporter.
			*
			* @private
			* @see {@link Mocha#growl}
			* @see {@link Growl#notify}
			* @param {Runner} runner - Runner instance.
			*/

		Mocha.prototype._growl = growl.notify;
		/**
			* Specifies whitelist of variable names to be expected in global scope.
			*
			* @public
			* @see [CLI option](../#-global-variable-name)
			* @see {@link Mocha#checkLeaks}
			* @param {String[]|String} global - Accepted global variable name(s).
			* @return {Mocha} this
			* @chainable
			* @example
			*
			* // Specify variables to be expected in global scope
			* mocha.global(['jQuery', 'MyLib']);
			*/

		Mocha.prototype.global = function (global) {
			this.options.global = (this.options.global || []).concat(global).filter(Boolean).filter(function (elt, idx, arr) {
				return arr.indexOf(elt) === idx;
			});
			return this;
		}; // for backwards compability, 'globals' is an alias of 'global'


		Mocha.prototype.globals = Mocha.prototype.global;
		/**
			* Enables or disables TTY color output by screen-oriented reporters.
			*
			* @public
			* @see [CLI option](../#-color-c-colors)
			* @param {boolean} [color=true] - Whether to enable color output.
			* @return {Mocha} this
			* @chainable
			*/

		Mocha.prototype.color = function (color) {
			this.options.color = color !== false;
			return this;
		};
		/**
			* Enables or disables reporter to use inline diffs (rather than +/-)
			* in test failure output.
			*
			* @public
			* @see [CLI option](../#-inline-diffs)
			* @param {boolean} [inlineDiffs=true] - Whether to use inline diffs.
			* @return {Mocha} this
			* @chainable
			*/


		Mocha.prototype.inlineDiffs = function (inlineDiffs) {
			this.options.inlineDiffs = inlineDiffs !== false;
			return this;
		};
		/**
			* Enables or disables reporter to include diff in test failure output.
			*
			* @public
			* @see [CLI option](../#-diff)
			* @param {boolean} [diff=true] - Whether to show diff on failure.
			* @return {Mocha} this
			* @chainable
			*/


		Mocha.prototype.diff = function (diff) {
			this.options.diff = diff !== false;
			return this;
		};
		/**
			* @summary
			* Sets timeout threshold value.
			*
			* @description
			* A string argument can use shorthand (such as "2s") and will be converted.
			* If the value is `0`, timeouts will be disabled.
			*
			* @public
			* @see [CLI option](../#-timeout-ms-t-ms)
			* @see [Timeouts](../#timeouts)
			* @param {number|string} msecs - Timeout threshold value.
			* @return {Mocha} this
			* @chainable
			* @example
			*
			* // Sets timeout to one second
			* mocha.timeout(1000);
			* @example
			*
			* // Same as above but using string argument
			* mocha.timeout('1s');
			*/


		Mocha.prototype.timeout = function (msecs) {
			this.suite.timeout(msecs);
			return this;
		};
		/**
			* Sets the number of times to retry failed tests.
			*
			* @public
			* @see [CLI option](../#-retries-n)
			* @see [Retry Tests](../#retry-tests)
			* @param {number} retry - Number of times to retry failed tests.
			* @return {Mocha} this
			* @chainable
			* @example
			*
			* // Allow any failed test to retry one more time
			* mocha.retries(1);
			*/


		Mocha.prototype.retries = function (retry) {
			this.suite.retries(retry);
			return this;
		};
		/**
			* Sets slowness threshold value.
			*
			* @public
			* @see [CLI option](../#-slow-ms-s-ms)
			* @param {number} msecs - Slowness threshold value.
			* @return {Mocha} this
			* @chainable
			* @example
			*
			* // Sets "slow" threshold to half a second
			* mocha.slow(500);
			* @example
			*
			* // Same as above but using string argument
			* mocha.slow('0.5s');
			*/


		Mocha.prototype.slow = function (msecs) {
			this.suite.slow(msecs);
			return this;
		};
		/**
			* Forces all tests to either accept a `done` callback or return a promise.
			*
			* @public
			* @see [CLI option](../#-async-only-a)
			* @param {boolean} [asyncOnly=true] - Whether to force `done` callback or promise.
			* @return {Mocha} this
			* @chainable
			*/


		Mocha.prototype.asyncOnly = function (asyncOnly) {
			this.options.asyncOnly = asyncOnly !== false;
			return this;
		};
		/**
			* Disables syntax highlighting (in browser).
			*
			* @public
			* @return {Mocha} this
			* @chainable
			*/


		Mocha.prototype.noHighlighting = function () {
			this.options.noHighlighting = true;
			return this;
		};
		/**
			* Enables or disables uncaught errors to propagate.
			*
			* @public
			* @see [CLI option](../#-allow-uncaught)
			* @param {boolean} [allowUncaught=true] - Whether to propagate uncaught errors.
			* @return {Mocha} this
			* @chainable
			*/


		Mocha.prototype.allowUncaught = function (allowUncaught) {
			this.options.allowUncaught = allowUncaught !== false;
			return this;
		};
		/**
			* @summary
			* Delays root suite execution.
			*
			* @description
			* Used to perform async operations before any suites are run.
			*
			* @public
			* @see [delayed root suite](../#delayed-root-suite)
			* @returns {Mocha} this
			* @chainable
			*/


		Mocha.prototype.delay = function delay() {
			this.options.delay = true;
			return this;
		};
		/**
			* Causes tests marked `only` to fail the suite.
			*
			* @public
			* @see [CLI option](../#-forbid-only)
			* @param {boolean} [forbidOnly=true] - Whether tests marked `only` fail the suite.
			* @returns {Mocha} this
			* @chainable
			*/


		Mocha.prototype.forbidOnly = function (forbidOnly) {
			this.options.forbidOnly = forbidOnly !== false;
			return this;
		};
		/**
			* Causes pending tests and tests marked `skip` to fail the suite.
			*
			* @public
			* @see [CLI option](../#-forbid-pending)
			* @param {boolean} [forbidPending=true] - Whether pending tests fail the suite.
			* @returns {Mocha} this
			* @chainable
			*/


		Mocha.prototype.forbidPending = function (forbidPending) {
			this.options.forbidPending = forbidPending !== false;
			return this;
		};
		/**
			* Throws an error if mocha is in the wrong state to be able to transition to a "running" state.
			* @private
			*/


		Mocha.prototype._guardRunningStateTransition = function () {
			if (this._state === mochaStates.RUNNING) {
				throw createMochaInstanceAlreadyRunningError('Mocha instance is currently running tests, cannot start a next test run until this one is done', this);
			}

			if (this._state === mochaStates.DISPOSED || this._state === mochaStates.REFERENCES_CLEANED) {
				throw createMochaInstanceAlreadyDisposedError('Mocha instance is already disposed, cannot start a new test run. Please create a new mocha instance. Be sure to set disable `cleanReferencesAfterRun` when you want to reuse the same mocha instance for multiple test runs.', this._cleanReferencesAfterRun, this);
			}
		};
		/**
			* Mocha version as specified by "package.json".
			*
			* @name Mocha#version
			* @type string
			* @readonly
			*/


		Object.defineProperty(Mocha.prototype, 'version', {
			value: require$$10.version,
			configurable: false,
			enumerable: true,
			writable: false
		});
		/**
			* Callback to be invoked when test execution is complete.
			*
			* @private
			* @callback DoneCB
			* @param {number} failures - Number of failures that occurred.
			*/

		/**
			* Runs root suite and invokes `fn()` when complete.
			*
			* @description
			* To run tests multiple times (or to run tests in files that are
			* already in the `require` cache), make sure to clear them from
			* the cache first!
			*
			* @public
			* @see {@link Mocha#unloadFiles}
			* @see {@link Runner#run}
			* @param {DoneCB} [fn] - Callback invoked when test execution completed.
			* @returns {Runner} runner instance
			* @example
			*
			* // exit with non-zero status if there were test failures
			* mocha.run(failures => process.exitCode = failures ? 1 : 0);
			*/

		Mocha.prototype.run = function (fn) {
			var _this = this;

			this._guardRunningStateTransition();

			this._state = mochaStates.RUNNING;

			if (this._previousRunner) {
				this._previousRunner.dispose();

				this.suite.reset();
			}

			if (this.files.length && !this._lazyLoadFiles) {
				this.loadFiles();
			}

			var suite = this.suite;
			var options = this.options;
			options.files = this.files;
			var runner = new this._runnerClass(suite, {
				delay: options.delay,
				cleanReferencesAfterRun: this._cleanReferencesAfterRun
			});
			statsCollector(runner);
			var reporter = new this._reporter(runner, options);
			runner.checkLeaks = options.checkLeaks === true;
			runner.fullStackTrace = options.fullTrace;
			runner.asyncOnly = options.asyncOnly;
			runner.allowUncaught = options.allowUncaught;
			runner.forbidOnly = options.forbidOnly;
			runner.forbidPending = options.forbidPending;

			if (options.grep) {
				runner.grep(options.grep, options.invert);
			}

			if (options.global) {
				runner.globals(options.global);
			}

			if (options.growl) {
				this._growl(runner);
			}

			if (options.color !== undefined) {
				exports.reporters.Base.useColors = options.color;
			}

			exports.reporters.Base.inlineDiffs = options.inlineDiffs;
			exports.reporters.Base.hideDiff = !options.diff;

			var done = function done(failures) {
				_this._previousRunner = runner;
				_this._state = _this._cleanReferencesAfterRun ? mochaStates.REFERENCES_CLEANED : mochaStates.INIT;
				fn = fn || utils.noop;

				if (typeof reporter.done === 'function') {
					reporter.done(failures, fn);
				} else {
					fn(failures);
				}
			};

			var runAsync = /*#__PURE__*/function () {
				var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(runner) {
					var context, failureCount;
					return regeneratorRuntime.wrap(function _callee$(_context) {
						while (1) {
							switch (_context.prev = _context.next) {
								case 0:
									if (!(_this.options.enableGlobalSetup && _this.hasGlobalSetupFixtures())) {
										_context.next = 6;
										break;
									}

									_context.next = 3;
									return _this.runGlobalSetup(runner);

								case 3:
									_context.t0 = _context.sent;
									_context.next = 7;
									break;

								case 6:
									_context.t0 = {};

								case 7:
									context = _context.t0;
									_context.next = 10;
									return runner.runAsync({
										files: _this.files,
										options: options
									});

								case 10:
									failureCount = _context.sent;

									if (!(_this.options.enableGlobalTeardown && _this.hasGlobalTeardownFixtures())) {
										_context.next = 14;
										break;
									}

									_context.next = 14;
									return _this.runGlobalTeardown(runner, {
										context: context
									});

								case 14:
									return _context.abrupt("return", failureCount);

								case 15:
								case "end":
									return _context.stop();
							}
						}
					}, _callee);
				}));

				return function runAsync(_x) {
					return _ref.apply(this, arguments);
				};
			}(); // no "catch" here is intentional. errors coming out of
			// Runner#run are considered uncaught/unhandled and caught
			// by the `process` event listeners.
			// also: returning anything other than `runner` would be a breaking
			// change


			runAsync(runner).then(done);
			return runner;
		};
		/**
			* Assigns hooks to the root suite
			* @param {MochaRootHookObject} [hooks] - Hooks to assign to root suite
			* @chainable
			*/


		Mocha.prototype.rootHooks = function rootHooks() {
			var _this2 = this;

			var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
				_ref2$beforeAll = _ref2.beforeAll,
				beforeAll = _ref2$beforeAll === void 0 ? [] : _ref2$beforeAll,
				_ref2$beforeEach = _ref2.beforeEach,
				beforeEach = _ref2$beforeEach === void 0 ? [] : _ref2$beforeEach,
				_ref2$afterAll = _ref2.afterAll,
				afterAll = _ref2$afterAll === void 0 ? [] : _ref2$afterAll,
				_ref2$afterEach = _ref2.afterEach,
				afterEach = _ref2$afterEach === void 0 ? [] : _ref2$afterEach;

			beforeAll = utils.castArray(beforeAll);
			beforeEach = utils.castArray(beforeEach);
			afterAll = utils.castArray(afterAll);
			afterEach = utils.castArray(afterEach);
			beforeAll.forEach(function (hook) {
				_this2.suite.beforeAll(hook);
			});
			beforeEach.forEach(function (hook) {
				_this2.suite.beforeEach(hook);
			});
			afterAll.forEach(function (hook) {
				_this2.suite.afterAll(hook);
			});
			afterEach.forEach(function (hook) {
				_this2.suite.afterEach(hook);
			});
			return this;
		};
		/**
			* Toggles parallel mode.
			*
			* Must be run before calling {@link Mocha#run}. Changes the `Runner` class to
			* use; also enables lazy file loading if not already done so.
			*
			* Warning: when passed `false` and lazy loading has been enabled _via any means_ (including calling `parallelMode(true)`), this method will _not_ disable lazy loading. Lazy loading is a prerequisite for parallel
			* mode, but parallel mode is _not_ a prerequisite for lazy loading!
			* @param {boolean} [enable] - If `true`, enable; otherwise disable.
			* @throws If run in browser
			* @throws If Mocha not in `INIT` state
			* @returns {Mocha}
			* @chainable
			* @public
			*/


		Mocha.prototype.parallelMode = function parallelMode() {
			var enable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

			if (utils.isBrowser()) {
				throw createUnsupportedError('parallel mode is only supported in Node.js');
			}

			var parallel = Boolean(enable);

			if (parallel === this.options.parallel && this._lazyLoadFiles && this._runnerClass !== exports.Runner) {
				return this;
			}

			if (this._state !== mochaStates.INIT) {
				throw createUnsupportedError('cannot change parallel mode after having called run()');
			}

			this.options.parallel = parallel; // swap Runner class

			this._runnerClass = parallel ? require$$11 : exports.Runner; // lazyLoadFiles may have been set `true` otherwise (for ESM loading),
			// so keep `true` if so.

			return this.lazyLoadFiles(this._lazyLoadFiles || parallel);
		};
		/**
			* Disables implicit call to {@link Mocha#loadFiles} in {@link Mocha#run}. This
			* setting is used by watch mode, parallel mode, and for loading ESM files.
			* @todo This should throw if we've already loaded files; such behavior
			* necessitates adding a new state.
			* @param {boolean} [enable] - If `true`, disable eager loading of files in
			* {@link Mocha#run}
			* @chainable
			* @public
			*/


		Mocha.prototype.lazyLoadFiles = function lazyLoadFiles(enable) {
			this._lazyLoadFiles = enable === true;
			debug('set lazy load to %s', enable);
			return this;
		};
		/**
			* Configures one or more global setup fixtures.
			*
			* If given no parameters, _unsets_ any previously-set fixtures.
			* @chainable
			* @public
			* @param {MochaGlobalFixture|MochaGlobalFixture[]} [setupFns] - Global setup fixture(s)
			* @returns {Mocha}
			*/


		Mocha.prototype.globalSetup = function globalSetup() {
			var setupFns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
			setupFns = utils.castArray(setupFns);
			this.options.globalSetup = setupFns;
			debug('configured %d global setup functions', setupFns.length);
			return this;
		};
		/**
			* Configures one or more global teardown fixtures.
			*
			* If given no parameters, _unsets_ any previously-set fixtures.
			* @chainable
			* @public
			* @param {MochaGlobalFixture|MochaGlobalFixture[]} [teardownFns] - Global teardown fixture(s)
			* @returns {Mocha}
			*/


		Mocha.prototype.globalTeardown = function globalTeardown() {
			var teardownFns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
			teardownFns = utils.castArray(teardownFns);
			this.options.globalTeardown = teardownFns;
			debug('configured %d global teardown functions', teardownFns.length);
			return this;
		};
		/**
			* Run any global setup fixtures sequentially, if any.
			*
			* This is _automatically called_ by {@link Mocha#run} _unless_ the `runGlobalSetup` option is `false`; see {@link Mocha#enableGlobalSetup}.
			*
			* The context object this function resolves with should be consumed by {@link Mocha#runGlobalTeardown}.
			* @param {object} [context] - Context object if already have one
			* @public
			* @returns {Promise<object>} Context object
			*/


		Mocha.prototype.runGlobalSetup = /*#__PURE__*/function () {
			var _runGlobalSetup = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
				var context,
					globalSetup,
					_args2 = arguments;
				return regeneratorRuntime.wrap(function _callee2$(_context2) {
					while (1) {
						switch (_context2.prev = _context2.next) {
							case 0:
								context = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};
								globalSetup = this.options.globalSetup;

								if (!(globalSetup && globalSetup.length)) {
									_context2.next = 7;
									break;
								}

								debug('run(): global setup starting');
								_context2.next = 6;
								return this._runGlobalFixtures(globalSetup, context);

							case 6:
								debug('run(): global setup complete');

							case 7:
								return _context2.abrupt("return", context);

							case 8:
							case "end":
								return _context2.stop();
						}
					}
				}, _callee2, this);
			}));

			function runGlobalSetup() {
				return _runGlobalSetup.apply(this, arguments);
			}

			return runGlobalSetup;
		}();
		/**
			* Run any global teardown fixtures sequentially, if any.
			*
			* This is _automatically called_ by {@link Mocha#run} _unless_ the `runGlobalTeardown` option is `false`; see {@link Mocha#enableGlobalTeardown}.
			*
			* Should be called with context object returned by {@link Mocha#runGlobalSetup}, if applicable.
			* @param {object} [context] - Context object if already have one
			* @public
			* @returns {Promise<object>} Context object
			*/


		Mocha.prototype.runGlobalTeardown = /*#__PURE__*/function () {
			var _runGlobalTeardown = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
				var context,
					globalTeardown,
					_args3 = arguments;
				return regeneratorRuntime.wrap(function _callee3$(_context3) {
					while (1) {
						switch (_context3.prev = _context3.next) {
							case 0:
								context = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};
								globalTeardown = this.options.globalTeardown;

								if (!(globalTeardown && globalTeardown.length)) {
									_context3.next = 6;
									break;
								}

								debug('run(): global teardown starting');
								_context3.next = 6;
								return this._runGlobalFixtures(globalTeardown, context);

							case 6:
								debug('run(): global teardown complete');
								return _context3.abrupt("return", context);

							case 8:
							case "end":
								return _context3.stop();
						}
					}
				}, _callee3, this);
			}));

			function runGlobalTeardown() {
				return _runGlobalTeardown.apply(this, arguments);
			}

			return runGlobalTeardown;
		}();
		/**
			* Run global fixtures sequentially with context `context`
			* @private
			* @param {MochaGlobalFixture[]} [fixtureFns] - Fixtures to run
			* @param {object} [context] - context object
			* @returns {Promise<object>} context object
			*/


		Mocha.prototype._runGlobalFixtures = /*#__PURE__*/function () {
			var _runGlobalFixtures2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
				var fixtureFns,
					context,
					_iteratorNormalCompletion,
					_didIteratorError,
					_iteratorError,
					_iterator,
					_step,
					_value,
					fixtureFn,
					_args4 = arguments;

				return regeneratorRuntime.wrap(function _callee4$(_context4) {
					while (1) {
						switch (_context4.prev = _context4.next) {
							case 0:
								fixtureFns = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : [];
								context = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};
								_iteratorNormalCompletion = true;
								_didIteratorError = false;
								_context4.prev = 4;
								_iterator = _asyncIterator(fixtureFns);

							case 6:
								_context4.next = 8;
								return _iterator.next();

							case 8:
								_step = _context4.sent;
								_iteratorNormalCompletion = _step.done;
								_context4.next = 12;
								return _step.value;

							case 12:
								_value = _context4.sent;

								if (_iteratorNormalCompletion) {
									_context4.next = 20;
									break;
								}

								fixtureFn = _value;
								_context4.next = 17;
								return fixtureFn.call(context);

							case 17:
								_iteratorNormalCompletion = true;
								_context4.next = 6;
								break;

							case 20:
								_context4.next = 26;
								break;

							case 22:
								_context4.prev = 22;
								_context4.t0 = _context4["catch"](4);
								_didIteratorError = true;
								_iteratorError = _context4.t0;

							case 26:
								_context4.prev = 26;
								_context4.prev = 27;

								if (!(!_iteratorNormalCompletion && _iterator["return"] != null)) {
									_context4.next = 31;
									break;
								}

								_context4.next = 31;
								return _iterator["return"]();

							case 31:
								_context4.prev = 31;

								if (!_didIteratorError) {
									_context4.next = 34;
									break;
								}

								throw _iteratorError;

							case 34:
								return _context4.finish(31);

							case 35:
								return _context4.finish(26);

							case 36:
								return _context4.abrupt("return", context);

							case 37:
							case "end":
								return _context4.stop();
						}
					}
				}, _callee4, null, [[4, 22, 26, 36], [27, , 31, 35]]);
			}));

			function _runGlobalFixtures() {
				return _runGlobalFixtures2.apply(this, arguments);
			}

			return _runGlobalFixtures;
		}();
		/**
			* Toggle execution of any global setup fixture(s)
			*
			* @chainable
			* @public
			* @param {boolean } [enabled=true] - If `false`, do not run global setup fixture
			* @returns {Mocha}
			*/


		Mocha.prototype.enableGlobalSetup = function enableGlobalSetup() {
			var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
			this.options.enableGlobalSetup = Boolean(enabled);
			return this;
		};
		/**
			* Toggle execution of any global teardown fixture(s)
			*
			* @chainable
			* @public
			* @param {boolean } [enabled=true] - If `false`, do not run global teardown fixture
			* @returns {Mocha}
			*/


		Mocha.prototype.enableGlobalTeardown = function enableGlobalTeardown() {
			var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
			this.options.enableGlobalTeardown = Boolean(enabled);
			return this;
		};
		/**
			* Returns `true` if one or more global setup fixtures have been supplied.
			* @public
			* @returns {boolean}
			*/


		Mocha.prototype.hasGlobalSetupFixtures = function hasGlobalSetupFixtures() {
			return Boolean(this.options.globalSetup.length);
		};
		/**
			* Returns `true` if one or more global teardown fixtures have been supplied.
			* @public
			* @returns {boolean}
			*/


		Mocha.prototype.hasGlobalTeardownFixtures = function hasGlobalTeardownFixtures() {
			return Boolean(this.options.globalTeardown.length);
		};
		/**
			* An alternative way to define root hooks that works with parallel runs.
			* @typedef {Object} MochaRootHookObject
			* @property {Function|Function[]} [beforeAll] - "Before all" hook(s)
			* @property {Function|Function[]} [beforeEach] - "Before each" hook(s)
			* @property {Function|Function[]} [afterAll] - "After all" hook(s)
			* @property {Function|Function[]} [afterEach] - "After each" hook(s)
			*/

		/**
			* An function that returns a {@link MochaRootHookObject}, either sync or async.
					@callback MochaRootHookFunction
			* @returns {MochaRootHookObject|Promise<MochaRootHookObject>}
			*/

		/**
			* A function that's invoked _once_ which is either sync or async.
			* Can be a "teardown" or "setup".  These will all share the same context.
			* @callback MochaGlobalFixture
			* @returns {void|Promise<void>}
			*/

		/**
			* An object making up all necessary parts of a plugin loader and aggregator
			* @typedef {Object} PluginDefinition
			* @property {string} exportName - Named export to use
			* @property {string} [optionName] - Option name for Mocha constructor (use `exportName` if omitted)
			* @property {PluginValidator} [validate] - Validator function
			* @property {PluginFinalizer} [finalize] - Finalizer/aggregator function
			*/

		/**
			* A (sync) function to assert a user-supplied plugin implementation is valid.
			*
			* Defined in a {@link PluginDefinition}.
		 
			* @callback PluginValidator
			* @param {*} value - Value to check
			* @this {PluginDefinition}
			* @returns {void}
			*/

		/**
			* A function to finalize plugins impls of a particular ilk
			* @callback PluginFinalizer
			* @param {Array<*>} impls - User-supplied implementations
			* @returns {Promise<*>|*}
			*/

	});

	/* eslint no-unused-vars: off */

	/* eslint-env commonjs */

	/**
		* Shim process.stdout.
		*/


	process$1.stdout = browserStdout({
		label: false
	});
	/**
		* Create a Mocha instance.
		*
		* @return {undefined}
		*/

	var mocha$1 = new mocha({
		reporter: 'html'
	});
	/**
		* Save timer references to avoid Sinon interfering (see GH-237).
		*/

	var Date$4 = commonjsGlobal.Date;
	var setTimeout$3 = commonjsGlobal.setTimeout;
	var uncaughtExceptionHandlers = [];
	var originalOnerrorHandler = commonjsGlobal.onerror;
	/**
		* Remove uncaughtException listener.
		* Revert to original onerror handler if previously defined.
		*/

	process$1.removeListener = function (e, fn) {
		if (e === 'uncaughtException') {
			if (originalOnerrorHandler) {
				commonjsGlobal.onerror = originalOnerrorHandler;
			} else {
				commonjsGlobal.onerror = function () { };
			}

			var i = uncaughtExceptionHandlers.indexOf(fn);

			if (i !== -1) {
				uncaughtExceptionHandlers.splice(i, 1);
			}
		}
	};
	/**
		* Implements listenerCount for 'uncaughtException'.
		*/


	process$1.listenerCount = function (name) {
		if (name === 'uncaughtException') {
			return uncaughtExceptionHandlers.length;
		}

		return 0;
	};
	/**
		* Implements uncaughtException listener.
		*/


	process$1.on = function (e, fn) {
		if (e === 'uncaughtException') {
			commonjsGlobal.onerror = function (err, url, line) {
				fn(new Error(err + ' (' + url + ':' + line + ')'));
				return !mocha$1.options.allowUncaught;
			};

			uncaughtExceptionHandlers.push(fn);
		}
	};

	process$1.listeners = function (e) {
		if (e === 'uncaughtException') {
			return uncaughtExceptionHandlers;
		}

		return [];
	}; // The BDD UI is registered by default, but no UI will be functional in the
	// browser without an explicit call to the overridden `mocha.ui` (see below).
	// Ensure that this default UI does not expose its methods to the global scope.


	mocha$1.suite.removeAllListeners('pre-require');
	var immediateQueue = [];
	var immediateTimeout;

	function timeslice() {
		var immediateStart = new Date$4().getTime();

		while (immediateQueue.length && new Date$4().getTime() - immediateStart < 100) {
			immediateQueue.shift()();
		}

		if (immediateQueue.length) {
			immediateTimeout = setTimeout$3(timeslice, 0);
		} else {
			immediateTimeout = null;
		}
	}
	/**
		* High-performance override of Runner.immediately.
		*/


	mocha.Runner.immediately = function (callback) {
		immediateQueue.push(callback);

		if (!immediateTimeout) {
			immediateTimeout = setTimeout$3(timeslice, 0);
		}
	};
	/**
		* Function to allow assertion libraries to throw errors directly into mocha.
		* This is useful when running tests in a browser because window.onerror will
		* only receive the 'message' attribute of the Error.
		*/


	mocha$1.throwError = function (err) {
		uncaughtExceptionHandlers.forEach(function (fn) {
			fn(err);
		});
		throw err;
	};
	/**
		* Override ui to ensure that the ui functions are initialized.
		* Normally this would happen in Mocha.prototype.loadFiles.
		*/


	mocha$1.ui = function (ui) {
		mocha.prototype.ui.call(this, ui);
		this.suite.emit('pre-require', commonjsGlobal, null, this);
		return this;
	};
	/**
		* Setup mocha with the given setting options.
		*/


	mocha$1.setup = function (opts) {
		if (typeof opts === 'string') {
			opts = {
				ui: opts
			};
		}

		if (opts.delay === true) {
			this.delay();
		}

		var self = this;
		Object.keys(opts).filter(function (opt) {
			return opt !== 'delay';
		}).forEach(function (opt) {
			if (Object.prototype.hasOwnProperty.call(opts, opt)) {
				self[opt](opts[opt]);
			}
		});
		return this;
	};
	/**
		* Run mocha, returning the Runner.
		*/


	mocha$1.run = function (fn) {
		var options = mocha$1.options;
		mocha$1.globals('location');
		var query = parseQuery(commonjsGlobal.location.search || '');

		if (query.grep) {
			mocha$1.grep(query.grep);
		}

		if (query.fgrep) {
			mocha$1.fgrep(query.fgrep);
		}

		if (query.invert) {
			mocha$1.invert();
		}

		return mocha.prototype.run.call(mocha$1, function (err) {
			// The DOM Document is not available in Web Workers.
			var document = commonjsGlobal.document;

			if (document && document.getElementById('mocha') && options.noHighlighting !== true) {
				highlightTags('code');
			}

			if (fn) {
				fn(err);
			}
		});
	};
	/**
		* Expose the process shim.
		* https://github.com/mochajs/mocha/pull/916
		*/


	mocha.process = process$1;
	/**
		* Expose mocha.
		*/

	commonjsGlobal.Mocha = mocha;
	commonjsGlobal.mocha = mocha$1; // this allows test/acceptance/required-tokens.js to pass; thus,
	// you can now do `const describe = require('mocha').describe` in a
	// browser context (assuming browserification).  should fix #880

	var browserEntry = Object.assign(mocha$1, commonjsGlobal);

	return browserEntry;

})));
//# sourceMappingURL=mocha.js.map


/***/ }),

/***/ "../node_modules/pathval/index.js":
/*!****************************************!*\
  !*** ../node_modules/pathval/index.js ***!
  \****************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module */
/*! CommonJS bailout: module.exports is used directly at 286:0-14 */
/***/ ((module) => {

"use strict";


/* !
 * Chai - pathval utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * @see https://github.com/logicalparadox/filtr
 * MIT Licensed
 */

/**
 * ### .hasProperty(object, name)
 *
 * This allows checking whether an object has own
 * or inherited from prototype chain named property.
 *
 * Basically does the same thing as the `in`
 * operator but works properly with null/undefined values
 * and other primitives.
 *
 *     var obj = {
 *         arr: ['a', 'b', 'c']
 *       , str: 'Hello'
 *     }
 *
 * The following would be the results.
 *
 *     hasProperty(obj, 'str');  // true
 *     hasProperty(obj, 'constructor');  // true
 *     hasProperty(obj, 'bar');  // false
 *
 *     hasProperty(obj.str, 'length'); // true
 *     hasProperty(obj.str, 1);  // true
 *     hasProperty(obj.str, 5);  // false
 *
 *     hasProperty(obj.arr, 'length');  // true
 *     hasProperty(obj.arr, 2);  // true
 *     hasProperty(obj.arr, 3);  // false
 *
 * @param {Object} object
 * @param {String|Symbol} name
 * @returns {Boolean} whether it exists
 * @namespace Utils
 * @name hasProperty
 * @api public
 */

function hasProperty(obj, name) {
  if (typeof obj === 'undefined' || obj === null) {
    return false;
  }

  // The `in` operator does not work with primitives.
  return name in Object(obj);
}

/* !
 * ## parsePath(path)
 *
 * Helper function used to parse string object
 * paths. Use in conjunction with `internalGetPathValue`.
 *
 *      var parsed = parsePath('myobject.property.subprop');
 *
 * ### Paths:
 *
 * * Can be infinitely deep and nested.
 * * Arrays are also valid using the formal `myobject.document[3].property`.
 * * Literal dots and brackets (not delimiter) must be backslash-escaped.
 *
 * @param {String} path
 * @returns {Object} parsed
 * @api private
 */

function parsePath(path) {
  var str = path.replace(/([^\\])\[/g, '$1.[');
  var parts = str.match(/(\\\.|[^.]+?)+/g);
  return parts.map(function mapMatches(value) {
    var regexp = /^\[(\d+)\]$/;
    var mArr = regexp.exec(value);
    var parsed = null;
    if (mArr) {
      parsed = { i: parseFloat(mArr[1]) };
    } else {
      parsed = { p: value.replace(/\\([.\[\]])/g, '$1') };
    }

    return parsed;
  });
}

/* !
 * ## internalGetPathValue(obj, parsed[, pathDepth])
 *
 * Helper companion function for `.parsePath` that returns
 * the value located at the parsed address.
 *
 *      var value = getPathValue(obj, parsed);
 *
 * @param {Object} object to search against
 * @param {Object} parsed definition from `parsePath`.
 * @param {Number} depth (nesting level) of the property we want to retrieve
 * @returns {Object|Undefined} value
 * @api private
 */

function internalGetPathValue(obj, parsed, pathDepth) {
  var temporaryValue = obj;
  var res = null;
  pathDepth = (typeof pathDepth === 'undefined' ? parsed.length : pathDepth);

  for (var i = 0; i < pathDepth; i++) {
    var part = parsed[i];
    if (temporaryValue) {
      if (typeof part.p === 'undefined') {
        temporaryValue = temporaryValue[part.i];
      } else {
        temporaryValue = temporaryValue[part.p];
      }

      if (i === (pathDepth - 1)) {
        res = temporaryValue;
      }
    }
  }

  return res;
}

/* !
 * ## internalSetPathValue(obj, value, parsed)
 *
 * Companion function for `parsePath` that sets
 * the value located at a parsed address.
 *
 *  internalSetPathValue(obj, 'value', parsed);
 *
 * @param {Object} object to search and define on
 * @param {*} value to use upon set
 * @param {Object} parsed definition from `parsePath`
 * @api private
 */

function internalSetPathValue(obj, val, parsed) {
  var tempObj = obj;
  var pathDepth = parsed.length;
  var part = null;
  // Here we iterate through every part of the path
  for (var i = 0; i < pathDepth; i++) {
    var propName = null;
    var propVal = null;
    part = parsed[i];

    // If it's the last part of the path, we set the 'propName' value with the property name
    if (i === (pathDepth - 1)) {
      propName = typeof part.p === 'undefined' ? part.i : part.p;
      // Now we set the property with the name held by 'propName' on object with the desired val
      tempObj[propName] = val;
    } else if (typeof part.p !== 'undefined' && tempObj[part.p]) {
      tempObj = tempObj[part.p];
    } else if (typeof part.i !== 'undefined' && tempObj[part.i]) {
      tempObj = tempObj[part.i];
    } else {
      // If the obj doesn't have the property we create one with that name to define it
      var next = parsed[i + 1];
      // Here we set the name of the property which will be defined
      propName = typeof part.p === 'undefined' ? part.i : part.p;
      // Here we decide if this property will be an array or a new object
      propVal = typeof next.p === 'undefined' ? [] : {};
      tempObj[propName] = propVal;
      tempObj = tempObj[propName];
    }
  }
}

/**
 * ### .getPathInfo(object, path)
 *
 * This allows the retrieval of property info in an
 * object given a string path.
 *
 * The path info consists of an object with the
 * following properties:
 *
 * * parent - The parent object of the property referenced by `path`
 * * name - The name of the final property, a number if it was an array indexer
 * * value - The value of the property, if it exists, otherwise `undefined`
 * * exists - Whether the property exists or not
 *
 * @param {Object} object
 * @param {String} path
 * @returns {Object} info
 * @namespace Utils
 * @name getPathInfo
 * @api public
 */

function getPathInfo(obj, path) {
  var parsed = parsePath(path);
  var last = parsed[parsed.length - 1];
  var info = {
    parent: parsed.length > 1 ? internalGetPathValue(obj, parsed, parsed.length - 1) : obj,
    name: last.p || last.i,
    value: internalGetPathValue(obj, parsed),
  };
  info.exists = hasProperty(info.parent, info.name);

  return info;
}

/**
 * ### .getPathValue(object, path)
 *
 * This allows the retrieval of values in an
 * object given a string path.
 *
 *     var obj = {
 *         prop1: {
 *             arr: ['a', 'b', 'c']
 *           , str: 'Hello'
 *         }
 *       , prop2: {
 *             arr: [ { nested: 'Universe' } ]
 *           , str: 'Hello again!'
 *         }
 *     }
 *
 * The following would be the results.
 *
 *     getPathValue(obj, 'prop1.str'); // Hello
 *     getPathValue(obj, 'prop1.att[2]'); // b
 *     getPathValue(obj, 'prop2.arr[0].nested'); // Universe
 *
 * @param {Object} object
 * @param {String} path
 * @returns {Object} value or `undefined`
 * @namespace Utils
 * @name getPathValue
 * @api public
 */

function getPathValue(obj, path) {
  var info = getPathInfo(obj, path);
  return info.value;
}

/**
 * ### .setPathValue(object, path, value)
 *
 * Define the value in an object at a given string path.
 *
 * ```js
 * var obj = {
 *     prop1: {
 *         arr: ['a', 'b', 'c']
 *       , str: 'Hello'
 *     }
 *   , prop2: {
 *         arr: [ { nested: 'Universe' } ]
 *       , str: 'Hello again!'
 *     }
 * };
 * ```
 *
 * The following would be acceptable.
 *
 * ```js
 * var properties = require('tea-properties');
 * properties.set(obj, 'prop1.str', 'Hello Universe!');
 * properties.set(obj, 'prop1.arr[2]', 'B');
 * properties.set(obj, 'prop2.arr[0].nested.value', { hello: 'universe' });
 * ```
 *
 * @param {Object} object
 * @param {String} path
 * @param {Mixed} value
 * @api private
 */

function setPathValue(obj, path, val) {
  var parsed = parsePath(path);
  internalSetPathValue(obj, val, parsed);
  return obj;
}

module.exports = {
  hasProperty: hasProperty,
  getPathInfo: getPathInfo,
  getPathValue: getPathValue,
  setPathValue: setPathValue,
};


/***/ }),

/***/ "../node_modules/style-loader/dist/cjs.js!../node_modules/css-loader/dist/cjs.js!../node_modules/mocha/mocha.css":
/*!***********************************************************************************************************************!*\
  !*** ../node_modules/style-loader/dist/cjs.js!../node_modules/css-loader/dist/cjs.js!../node_modules/mocha/mocha.css ***!
  \***********************************************************************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.n, __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_cjs_js_mocha_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../css-loader/dist/cjs.js!./mocha.css */ "../node_modules/css-loader/dist/cjs.js!../node_modules/mocha/mocha.css");
;
            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_mocha_css__WEBPACK_IMPORTED_MODULE_1__.default, options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_mocha_css__WEBPACK_IMPORTED_MODULE_1__.default.locals || {});

/***/ }),

/***/ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!*****************************************************************************!*\
  !*** ../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \*****************************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__.nc, __webpack_require__.* */
/*! CommonJS bailout: module.exports is used directly at 230:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var isOldIE = function isOldIE() {
  var memo;
  return function memorize() {
    if (typeof memo === 'undefined') {
      // Test for IE <= 9 as proposed by Browserhacks
      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
      // Tests for existence of standard globals is to allow style-loader
      // to operate correctly into non-standard environments
      // @see https://github.com/webpack-contrib/style-loader/issues/177
      memo = Boolean(window && document && document.all && !window.atob);
    }

    return memo;
  };
}();

var getTarget = function getTarget() {
  var memo = {};
  return function memorize(target) {
    if (typeof memo[target] === 'undefined') {
      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
        try {
          // This will throw an exception if access to iframe is blocked
          // due to cross-origin restrictions
          styleTarget = styleTarget.contentDocument.head;
        } catch (e) {
          // istanbul ignore next
          styleTarget = null;
        }
      }

      memo[target] = styleTarget;
    }

    return memo[target];
  };
}();

var stylesInDom = [];

function getIndexByIdentifier(identifier) {
  var result = -1;

  for (var i = 0; i < stylesInDom.length; i++) {
    if (stylesInDom[i].identifier === identifier) {
      result = i;
      break;
    }
  }

  return result;
}

function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var index = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3]
    };

    if (index !== -1) {
      stylesInDom[index].references++;
      stylesInDom[index].updater(obj);
    } else {
      stylesInDom.push({
        identifier: identifier,
        updater: addStyle(obj, options),
        references: 1
      });
    }

    identifiers.push(identifier);
  }

  return identifiers;
}

function insertStyleElement(options) {
  var style = document.createElement('style');
  var attributes = options.attributes || {};

  if (typeof attributes.nonce === 'undefined') {
    var nonce =  true ? __webpack_require__.nc : 0;

    if (nonce) {
      attributes.nonce = nonce;
    }
  }

  Object.keys(attributes).forEach(function (key) {
    style.setAttribute(key, attributes[key]);
  });

  if (typeof options.insert === 'function') {
    options.insert(style);
  } else {
    var target = getTarget(options.insert || 'head');

    if (!target) {
      throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
    }

    target.appendChild(style);
  }

  return style;
}

function removeStyleElement(style) {
  // istanbul ignore if
  if (style.parentNode === null) {
    return false;
  }

  style.parentNode.removeChild(style);
}
/* istanbul ignore next  */


var replaceText = function replaceText() {
  var textStore = [];
  return function replace(index, replacement) {
    textStore[index] = replacement;
    return textStore.filter(Boolean).join('\n');
  };
}();

function applyToSingletonTag(style, index, remove, obj) {
  var css = remove ? '' : obj.media ? "@media ".concat(obj.media, " {").concat(obj.css, "}") : obj.css; // For old IE

  /* istanbul ignore if  */

  if (style.styleSheet) {
    style.styleSheet.cssText = replaceText(index, css);
  } else {
    var cssNode = document.createTextNode(css);
    var childNodes = style.childNodes;

    if (childNodes[index]) {
      style.removeChild(childNodes[index]);
    }

    if (childNodes.length) {
      style.insertBefore(cssNode, childNodes[index]);
    } else {
      style.appendChild(cssNode);
    }
  }
}

function applyToTag(style, options, obj) {
  var css = obj.css;
  var media = obj.media;
  var sourceMap = obj.sourceMap;

  if (media) {
    style.setAttribute('media', media);
  } else {
    style.removeAttribute('media');
  }

  if (sourceMap && typeof btoa !== 'undefined') {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    while (style.firstChild) {
      style.removeChild(style.firstChild);
    }

    style.appendChild(document.createTextNode(css));
  }
}

var singleton = null;
var singletonCounter = 0;

function addStyle(obj, options) {
  var style;
  var update;
  var remove;

  if (options.singleton) {
    var styleIndex = singletonCounter++;
    style = singleton || (singleton = insertStyleElement(options));
    update = applyToSingletonTag.bind(null, style, styleIndex, false);
    remove = applyToSingletonTag.bind(null, style, styleIndex, true);
  } else {
    style = insertStyleElement(options);
    update = applyToTag.bind(null, style, options);

    remove = function remove() {
      removeStyleElement(style);
    };
  }

  update(obj);
  return function updateStyle(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {
        return;
      }

      update(obj = newObj);
    } else {
      remove();
    }
  };
}

module.exports = function (list, options) {
  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
  // tags it will allow on a page

  if (!options.singleton && typeof options.singleton !== 'boolean') {
    options.singleton = isOldIE();
  }

  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];

    if (Object.prototype.toString.call(newList) !== '[object Array]') {
      return;
    }

    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDom[index].references--;
    }

    var newLastIdentifiers = modulesToDom(newList, options);

    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];

      var _index = getIndexByIdentifier(_identifier);

      if (stylesInDom[_index].references === 0) {
        stylesInDom[_index].updater();

        stylesInDom.splice(_index, 1);
      }
    }

    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "../node_modules/type-detect/type-detect.js":
/*!**************************************************!*\
  !*** ../node_modules/type-detect/type-detect.js ***!
  \**************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, top-level-this-exports, __webpack_require__.g, __webpack_require__.* */
/*! CommonJS bailout: this is used directly at 5:2-6 */
/*! CommonJS bailout: module.exports is used directly at 2:64-78 */
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

(function (global, factory) {
	 true ? module.exports = factory() :
	0;
}(this, (function () { 'use strict';

/* !
 * type-detect
 * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
var promiseExists = typeof Promise === 'function';

/* eslint-disable no-undef */
var globalObject = typeof self === 'object' ? self : __webpack_require__.g; // eslint-disable-line id-blacklist

var symbolExists = typeof Symbol !== 'undefined';
var mapExists = typeof Map !== 'undefined';
var setExists = typeof Set !== 'undefined';
var weakMapExists = typeof WeakMap !== 'undefined';
var weakSetExists = typeof WeakSet !== 'undefined';
var dataViewExists = typeof DataView !== 'undefined';
var symbolIteratorExists = symbolExists && typeof Symbol.iterator !== 'undefined';
var symbolToStringTagExists = symbolExists && typeof Symbol.toStringTag !== 'undefined';
var setEntriesExists = setExists && typeof Set.prototype.entries === 'function';
var mapEntriesExists = mapExists && typeof Map.prototype.entries === 'function';
var setIteratorPrototype = setEntriesExists && Object.getPrototypeOf(new Set().entries());
var mapIteratorPrototype = mapEntriesExists && Object.getPrototypeOf(new Map().entries());
var arrayIteratorExists = symbolIteratorExists && typeof Array.prototype[Symbol.iterator] === 'function';
var arrayIteratorPrototype = arrayIteratorExists && Object.getPrototypeOf([][Symbol.iterator]());
var stringIteratorExists = symbolIteratorExists && typeof String.prototype[Symbol.iterator] === 'function';
var stringIteratorPrototype = stringIteratorExists && Object.getPrototypeOf(''[Symbol.iterator]());
var toStringLeftSliceLength = 8;
var toStringRightSliceLength = -1;
/**
 * ### typeOf (obj)
 *
 * Uses `Object.prototype.toString` to determine the type of an object,
 * normalising behaviour across engine versions & well optimised.
 *
 * @param {Mixed} object
 * @return {String} object type
 * @api public
 */
function typeDetect(obj) {
  /* ! Speed optimisation
   * Pre:
   *   string literal     x 3,039,035 ops/sec ±1.62% (78 runs sampled)
   *   boolean literal    x 1,424,138 ops/sec ±4.54% (75 runs sampled)
   *   number literal     x 1,653,153 ops/sec ±1.91% (82 runs sampled)
   *   undefined          x 9,978,660 ops/sec ±1.92% (75 runs sampled)
   *   function           x 2,556,769 ops/sec ±1.73% (77 runs sampled)
   * Post:
   *   string literal     x 38,564,796 ops/sec ±1.15% (79 runs sampled)
   *   boolean literal    x 31,148,940 ops/sec ±1.10% (79 runs sampled)
   *   number literal     x 32,679,330 ops/sec ±1.90% (78 runs sampled)
   *   undefined          x 32,363,368 ops/sec ±1.07% (82 runs sampled)
   *   function           x 31,296,870 ops/sec ±0.96% (83 runs sampled)
   */
  var typeofObj = typeof obj;
  if (typeofObj !== 'object') {
    return typeofObj;
  }

  /* ! Speed optimisation
   * Pre:
   *   null               x 28,645,765 ops/sec ±1.17% (82 runs sampled)
   * Post:
   *   null               x 36,428,962 ops/sec ±1.37% (84 runs sampled)
   */
  if (obj === null) {
    return 'null';
  }

  /* ! Spec Conformance
   * Test: `Object.prototype.toString.call(window)``
   *  - Node === "[object global]"
   *  - Chrome === "[object global]"
   *  - Firefox === "[object Window]"
   *  - PhantomJS === "[object Window]"
   *  - Safari === "[object Window]"
   *  - IE 11 === "[object Window]"
   *  - IE Edge === "[object Window]"
   * Test: `Object.prototype.toString.call(this)``
   *  - Chrome Worker === "[object global]"
   *  - Firefox Worker === "[object DedicatedWorkerGlobalScope]"
   *  - Safari Worker === "[object DedicatedWorkerGlobalScope]"
   *  - IE 11 Worker === "[object WorkerGlobalScope]"
   *  - IE Edge Worker === "[object WorkerGlobalScope]"
   */
  if (obj === globalObject) {
    return 'global';
  }

  /* ! Speed optimisation
   * Pre:
   *   array literal      x 2,888,352 ops/sec ±0.67% (82 runs sampled)
   * Post:
   *   array literal      x 22,479,650 ops/sec ±0.96% (81 runs sampled)
   */
  if (
    Array.isArray(obj) &&
    (symbolToStringTagExists === false || !(Symbol.toStringTag in obj))
  ) {
    return 'Array';
  }

  // Not caching existence of `window` and related properties due to potential
  // for `window` to be unset before tests in quasi-browser environments.
  if (typeof window === 'object' && window !== null) {
    /* ! Spec Conformance
     * (https://html.spec.whatwg.org/multipage/browsers.html#location)
     * WhatWG HTML$7.7.3 - The `Location` interface
     * Test: `Object.prototype.toString.call(window.location)``
     *  - IE <=11 === "[object Object]"
     *  - IE Edge <=13 === "[object Object]"
     */
    if (typeof window.location === 'object' && obj === window.location) {
      return 'Location';
    }

    /* ! Spec Conformance
     * (https://html.spec.whatwg.org/#document)
     * WhatWG HTML$3.1.1 - The `Document` object
     * Note: Most browsers currently adher to the W3C DOM Level 2 spec
     *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-26809268)
     *       which suggests that browsers should use HTMLTableCellElement for
     *       both TD and TH elements. WhatWG separates these.
     *       WhatWG HTML states:
     *         > For historical reasons, Window objects must also have a
     *         > writable, configurable, non-enumerable property named
     *         > HTMLDocument whose value is the Document interface object.
     * Test: `Object.prototype.toString.call(document)``
     *  - Chrome === "[object HTMLDocument]"
     *  - Firefox === "[object HTMLDocument]"
     *  - Safari === "[object HTMLDocument]"
     *  - IE <=10 === "[object Document]"
     *  - IE 11 === "[object HTMLDocument]"
     *  - IE Edge <=13 === "[object HTMLDocument]"
     */
    if (typeof window.document === 'object' && obj === window.document) {
      return 'Document';
    }

    if (typeof window.navigator === 'object') {
      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/multipage/webappapis.html#mimetypearray)
       * WhatWG HTML$8.6.1.5 - Plugins - Interface MimeTypeArray
       * Test: `Object.prototype.toString.call(navigator.mimeTypes)``
       *  - IE <=10 === "[object MSMimeTypesCollection]"
       */
      if (typeof window.navigator.mimeTypes === 'object' &&
          obj === window.navigator.mimeTypes) {
        return 'MimeTypeArray';
      }

      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)
       * WhatWG HTML$8.6.1.5 - Plugins - Interface PluginArray
       * Test: `Object.prototype.toString.call(navigator.plugins)``
       *  - IE <=10 === "[object MSPluginsCollection]"
       */
      if (typeof window.navigator.plugins === 'object' &&
          obj === window.navigator.plugins) {
        return 'PluginArray';
      }
    }

    if ((typeof window.HTMLElement === 'function' ||
        typeof window.HTMLElement === 'object') &&
        obj instanceof window.HTMLElement) {
      /* ! Spec Conformance
      * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)
      * WhatWG HTML$4.4.4 - The `blockquote` element - Interface `HTMLQuoteElement`
      * Test: `Object.prototype.toString.call(document.createElement('blockquote'))``
      *  - IE <=10 === "[object HTMLBlockElement]"
      */
      if (obj.tagName === 'BLOCKQUOTE') {
        return 'HTMLQuoteElement';
      }

      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/#htmltabledatacellelement)
       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableDataCellElement`
       * Note: Most browsers currently adher to the W3C DOM Level 2 spec
       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)
       *       which suggests that browsers should use HTMLTableCellElement for
       *       both TD and TH elements. WhatWG separates these.
       * Test: Object.prototype.toString.call(document.createElement('td'))
       *  - Chrome === "[object HTMLTableCellElement]"
       *  - Firefox === "[object HTMLTableCellElement]"
       *  - Safari === "[object HTMLTableCellElement]"
       */
      if (obj.tagName === 'TD') {
        return 'HTMLTableDataCellElement';
      }

      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/#htmltableheadercellelement)
       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableHeaderCellElement`
       * Note: Most browsers currently adher to the W3C DOM Level 2 spec
       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)
       *       which suggests that browsers should use HTMLTableCellElement for
       *       both TD and TH elements. WhatWG separates these.
       * Test: Object.prototype.toString.call(document.createElement('th'))
       *  - Chrome === "[object HTMLTableCellElement]"
       *  - Firefox === "[object HTMLTableCellElement]"
       *  - Safari === "[object HTMLTableCellElement]"
       */
      if (obj.tagName === 'TH') {
        return 'HTMLTableHeaderCellElement';
      }
    }
  }

  /* ! Speed optimisation
  * Pre:
  *   Float64Array       x 625,644 ops/sec ±1.58% (80 runs sampled)
  *   Float32Array       x 1,279,852 ops/sec ±2.91% (77 runs sampled)
  *   Uint32Array        x 1,178,185 ops/sec ±1.95% (83 runs sampled)
  *   Uint16Array        x 1,008,380 ops/sec ±2.25% (80 runs sampled)
  *   Uint8Array         x 1,128,040 ops/sec ±2.11% (81 runs sampled)
  *   Int32Array         x 1,170,119 ops/sec ±2.88% (80 runs sampled)
  *   Int16Array         x 1,176,348 ops/sec ±5.79% (86 runs sampled)
  *   Int8Array          x 1,058,707 ops/sec ±4.94% (77 runs sampled)
  *   Uint8ClampedArray  x 1,110,633 ops/sec ±4.20% (80 runs sampled)
  * Post:
  *   Float64Array       x 7,105,671 ops/sec ±13.47% (64 runs sampled)
  *   Float32Array       x 5,887,912 ops/sec ±1.46% (82 runs sampled)
  *   Uint32Array        x 6,491,661 ops/sec ±1.76% (79 runs sampled)
  *   Uint16Array        x 6,559,795 ops/sec ±1.67% (82 runs sampled)
  *   Uint8Array         x 6,463,966 ops/sec ±1.43% (85 runs sampled)
  *   Int32Array         x 5,641,841 ops/sec ±3.49% (81 runs sampled)
  *   Int16Array         x 6,583,511 ops/sec ±1.98% (80 runs sampled)
  *   Int8Array          x 6,606,078 ops/sec ±1.74% (81 runs sampled)
  *   Uint8ClampedArray  x 6,602,224 ops/sec ±1.77% (83 runs sampled)
  */
  var stringTag = (symbolToStringTagExists && obj[Symbol.toStringTag]);
  if (typeof stringTag === 'string') {
    return stringTag;
  }

  var objPrototype = Object.getPrototypeOf(obj);
  /* ! Speed optimisation
  * Pre:
  *   regex literal      x 1,772,385 ops/sec ±1.85% (77 runs sampled)
  *   regex constructor  x 2,143,634 ops/sec ±2.46% (78 runs sampled)
  * Post:
  *   regex literal      x 3,928,009 ops/sec ±0.65% (78 runs sampled)
  *   regex constructor  x 3,931,108 ops/sec ±0.58% (84 runs sampled)
  */
  if (objPrototype === RegExp.prototype) {
    return 'RegExp';
  }

  /* ! Speed optimisation
  * Pre:
  *   date               x 2,130,074 ops/sec ±4.42% (68 runs sampled)
  * Post:
  *   date               x 3,953,779 ops/sec ±1.35% (77 runs sampled)
  */
  if (objPrototype === Date.prototype) {
    return 'Date';
  }

  /* ! Spec Conformance
   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-promise.prototype-@@tostringtag)
   * ES6$25.4.5.4 - Promise.prototype[@@toStringTag] should be "Promise":
   * Test: `Object.prototype.toString.call(Promise.resolve())``
   *  - Chrome <=47 === "[object Object]"
   *  - Edge <=20 === "[object Object]"
   *  - Firefox 29-Latest === "[object Promise]"
   *  - Safari 7.1-Latest === "[object Promise]"
   */
  if (promiseExists && objPrototype === Promise.prototype) {
    return 'Promise';
  }

  /* ! Speed optimisation
  * Pre:
  *   set                x 2,222,186 ops/sec ±1.31% (82 runs sampled)
  * Post:
  *   set                x 4,545,879 ops/sec ±1.13% (83 runs sampled)
  */
  if (setExists && objPrototype === Set.prototype) {
    return 'Set';
  }

  /* ! Speed optimisation
  * Pre:
  *   map                x 2,396,842 ops/sec ±1.59% (81 runs sampled)
  * Post:
  *   map                x 4,183,945 ops/sec ±6.59% (82 runs sampled)
  */
  if (mapExists && objPrototype === Map.prototype) {
    return 'Map';
  }

  /* ! Speed optimisation
  * Pre:
  *   weakset            x 1,323,220 ops/sec ±2.17% (76 runs sampled)
  * Post:
  *   weakset            x 4,237,510 ops/sec ±2.01% (77 runs sampled)
  */
  if (weakSetExists && objPrototype === WeakSet.prototype) {
    return 'WeakSet';
  }

  /* ! Speed optimisation
  * Pre:
  *   weakmap            x 1,500,260 ops/sec ±2.02% (78 runs sampled)
  * Post:
  *   weakmap            x 3,881,384 ops/sec ±1.45% (82 runs sampled)
  */
  if (weakMapExists && objPrototype === WeakMap.prototype) {
    return 'WeakMap';
  }

  /* ! Spec Conformance
   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-dataview.prototype-@@tostringtag)
   * ES6$24.2.4.21 - DataView.prototype[@@toStringTag] should be "DataView":
   * Test: `Object.prototype.toString.call(new DataView(new ArrayBuffer(1)))``
   *  - Edge <=13 === "[object Object]"
   */
  if (dataViewExists && objPrototype === DataView.prototype) {
    return 'DataView';
  }

  /* ! Spec Conformance
   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%mapiteratorprototype%-@@tostringtag)
   * ES6$23.1.5.2.2 - %MapIteratorPrototype%[@@toStringTag] should be "Map Iterator":
   * Test: `Object.prototype.toString.call(new Map().entries())``
   *  - Edge <=13 === "[object Object]"
   */
  if (mapExists && objPrototype === mapIteratorPrototype) {
    return 'Map Iterator';
  }

  /* ! Spec Conformance
   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%setiteratorprototype%-@@tostringtag)
   * ES6$23.2.5.2.2 - %SetIteratorPrototype%[@@toStringTag] should be "Set Iterator":
   * Test: `Object.prototype.toString.call(new Set().entries())``
   *  - Edge <=13 === "[object Object]"
   */
  if (setExists && objPrototype === setIteratorPrototype) {
    return 'Set Iterator';
  }

  /* ! Spec Conformance
   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%arrayiteratorprototype%-@@tostringtag)
   * ES6$22.1.5.2.2 - %ArrayIteratorPrototype%[@@toStringTag] should be "Array Iterator":
   * Test: `Object.prototype.toString.call([][Symbol.iterator]())``
   *  - Edge <=13 === "[object Object]"
   */
  if (arrayIteratorExists && objPrototype === arrayIteratorPrototype) {
    return 'Array Iterator';
  }

  /* ! Spec Conformance
   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%stringiteratorprototype%-@@tostringtag)
   * ES6$21.1.5.2.2 - %StringIteratorPrototype%[@@toStringTag] should be "String Iterator":
   * Test: `Object.prototype.toString.call(''[Symbol.iterator]())``
   *  - Edge <=13 === "[object Object]"
   */
  if (stringIteratorExists && objPrototype === stringIteratorPrototype) {
    return 'String Iterator';
  }

  /* ! Speed optimisation
  * Pre:
  *   object from null   x 2,424,320 ops/sec ±1.67% (76 runs sampled)
  * Post:
  *   object from null   x 5,838,000 ops/sec ±0.99% (84 runs sampled)
  */
  if (objPrototype === null) {
    return 'Object';
  }

  return Object
    .prototype
    .toString
    .call(obj)
    .slice(toStringLeftSliceLength, toStringRightSliceLength);
}

return typeDetect;

})));


/***/ })

}]);
//# sourceMappingURL=vendors-node_modules_chai_index_js-node_modules_jquery_dist_jquery_js-node_modules_mocha-load-6a21bb.bc612d911114d800b26d.js.map